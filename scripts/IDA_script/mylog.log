

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\icc_nativetojava\lib\armeabi-v7a\libintent.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000000900) ... ... OK
  1. Creating a new segment  (0000000000001900-0000000000001A14) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (00000000000004A8-00000000000004F8) ... ... OK
     Additional segment      (00000000000004F8-0000000000000900) ...
  3. Creating a new segment  (00000000000004F8-0000000000000900) ... ... OK
  4. Creating a new segment  (0000000000000528-0000000000000558) ... ... OK
     Additional segment      (0000000000000558-0000000000000900) ...
  5. Creating a new segment  (0000000000000558-0000000000000900) ... ... OK
  6. Creating a new segment  (0000000000000558-000000000000065E) ... ... OK
     Additional segment      (000000000000065E-0000000000000900) ...
     Deleting segment        (000000000000065E-0000000000000900) ...
  6. Creating a new segment  (000000000000065E-0000000000000900) ... ... OK
  7. Creating a new segment  (0000000000000660-0000000000000874) ... ... OK
     Additional segment      (0000000000000874-0000000000000900) ...
  8. Creating a new segment  (0000000000000874-0000000000000900) ... ... OK
  9. Creating a new segment  (0000000000000880-0000000000000900) ... ... OK
 10. Creating a new segment  (0000000000001900-0000000000001904) ... ... OK
     Additional segment      (0000000000001904-0000000000001A14) ...
     Deleting segment        (0000000000001904-0000000000001A14) ...
 10. Creating a new segment  (0000000000001904-0000000000001A14) ... ... OK
 11. Creating a new segment  (0000000000001904-000000000000190C) ... ... OK
     Additional segment      (000000000000190C-0000000000001A14) ...
     Deleting segment        (000000000000190C-0000000000001A14) ...
 11. Creating a new segment  (000000000000190C-0000000000001A14) ... ... OK
 12. Creating a new segment  (00000000000019EC-00000000000019F0) ... ... OK
     Additional segment      (00000000000019F0-0000000000001A14) ...
 13. Creating a new segment  (00000000000019F0-0000000000001A14) ... ... OK
     Deleting segment        (00000000000019F0-0000000000001A14) ...
 13. Creating a new segment  (00000000000019F0-0000000000001A14) ... ... OK
 14. Creating a new segment  (0000000000001A14-0000000000001A24) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\icc_nativetojava\lib\armeabi-v7a\libintent.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
j__ZN7_JNIEnv16CallObjectMethodEP8_jobjectP10_jmethodIDz
refList:2
function_head: 0x6a4L
function_head: 0x6a4L
len(ssCallMth):2
callObjectMth:0x754L---Java_org_arguslab_icc_1nativetojava_MainActivity_sendIntent
caller function address : 0x6a4L
data:0x732L---content:
data:0x6ecL---content:y
data:0x6eaL---content:_
data:0x6b8L---content:D
callObjectMth:0x720L---Java_org_arguslab_icc_1nativetojava_MainActivity_sendIntent
caller function address : 0x6a4L
data:0x6ecL---content:y
data:0x6eaL---content:_
data:0x6b8L---content:D
j__ZN7_JNIEnv14CallVoidMethodEP8_jobjectP10_jmethodIDz
refList:3
function_head: 0x868L
refList:1
function_head: 0x6a4L
function_head: 0x868L
refList:1
function_head: 0x6a4L
function_head: 0x868L
refList:1
function_head: 0x6a4L
len(ssCallMth):1
callObjectMth:0x78cL---Java_org_arguslab_icc_1nativetojava_MainActivity_sendIntent
caller function address : 0x6a4L
data:0x772L---content:2
data:0x760L---content:f
data:0x732L---content:
data:0x6ecL---content:y
data:0x6eaL---content:_
data:0x6b8L---content:D
source method path......
sink method path......
android_log_print........
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_complexdata\lib\armeabi-v7a\libdata.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000000790) ... ... OK
  1. Creating a new segment  (0000000000001790-00000000000018A0) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (00000000000004D0-0000000000000520) ... ... OK
     Additional segment      (0000000000000520-0000000000000790) ...
  3. Creating a new segment  (0000000000000520-0000000000000790) ... ... OK
  4. Creating a new segment  (0000000000000548-000000000000056C) ... ... OK
     Additional segment      (000000000000056C-0000000000000790) ...
  5. Creating a new segment  (000000000000056C-0000000000000790) ... ... OK
  6. Creating a new segment  (000000000000056C-000000000000059A) ... ... OK
     Additional segment      (000000000000059A-0000000000000790) ...
     Deleting segment        (000000000000059A-0000000000000790) ...
  6. Creating a new segment  (000000000000059A-0000000000000790) ... ... OK
  7. Creating a new segment  (000000000000059C-0000000000000714) ... ... OK
     Additional segment      (0000000000000714-0000000000000790) ...
  8. Creating a new segment  (0000000000000714-0000000000000790) ... ... OK
  9. Creating a new segment  (0000000000000720-0000000000000790) ... ... OK
 10. Creating a new segment  (0000000000001790-0000000000001794) ... ... OK
     Additional segment      (0000000000001794-00000000000018A0) ...
     Deleting segment        (0000000000001794-00000000000018A0) ...
 10. Creating a new segment  (0000000000001794-00000000000018A0) ... ... OK
 11. Creating a new segment  (0000000000001794-000000000000179C) ... ... OK
     Additional segment      (000000000000179C-00000000000018A0) ...
     Deleting segment        (000000000000179C-00000000000018A0) ...
 11. Creating a new segment  (000000000000179C-00000000000018A0) ... ... OK
 12. Creating a new segment  (000000000000187C-0000000000001880) ... ... OK
     Additional segment      (0000000000001880-00000000000018A0) ...
 13. Creating a new segment  (0000000000001880-00000000000018A0) ... ... OK
     Deleting segment        (0000000000001880-00000000000018A0) ...
 13. Creating a new segment  (0000000000001880-00000000000018A0) ... ... OK
 14. Creating a new segment  (00000000000018A0-00000000000018B4) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_complexdata\lib\armeabi-v7a\libdata.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
j__ZN7_JNIEnv16CallObjectMethodEP8_jobjectP10_jmethodIDz
refList:2
function_head: 0x5f0L
function_head: 0x698L
len(ssCallMth):2
callObjectMth:0x6c8L---Java_org_arguslab_native_1complexdata_MainActivity_send2
caller function address : 0x698L
callObjectMth:0x620L---Java_org_arguslab_native_1complexdata_MainActivity_send
caller function address : 0x5f0L
data:0x612L---content:U
data:0x610L---content:z
__android_log_print: 0x770L
logging refList:3
logging function_head: 0x708L
logging refList:2
logging function_head: 0x5f0L
logging function_head: 0x698L
logging function_head: 0x708L
logging refList:2
logging function_head: 0x5f0L
logging function_head: 0x698L
logging function_head: 0x708L
logging refList:2
logging function_head: 0x5f0L
logging function_head: 0x698L
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: Java_org_arguslab_native_1complexdata_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1complexdata_MainActivity_send2
__android_log_print method called by method: Java_org_arguslab_native_1complexdata_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1complexdata_MainActivity_send2
__android_log_print method called by method: Java_org_arguslab_native_1complexdata_MainActivity_send2
__android_log_print method called by method: Java_org_arguslab_native_1complexdata_MainActivity_send
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_complexdata_stringop\lib\armeabi-v7a\libdata.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000000640) ... ... OK
  1. Creating a new segment  (0000000000001640-000000000000174C) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (0000000000000438-0000000000000478) ... ... OK
     Additional segment      (0000000000000478-0000000000000640) ...
  3. Creating a new segment  (0000000000000478-0000000000000640) ... ... OK
  4. Creating a new segment  (00000000000004A0-00000000000004AC) ... ... OK
     Additional segment      (00000000000004AC-0000000000000640) ...
  5. Creating a new segment  (00000000000004AC-0000000000000640) ... ... OK
  6. Creating a new segment  (00000000000004AC-00000000000004CE) ... ... OK
     Additional segment      (00000000000004CE-0000000000000640) ...
     Deleting segment        (00000000000004CE-0000000000000640) ...
  6. Creating a new segment  (00000000000004CE-0000000000000640) ... ... OK
  7. Creating a new segment  (00000000000004D0-00000000000005C4) ... ... OK
     Additional segment      (00000000000005C4-0000000000000640) ...
  8. Creating a new segment  (00000000000005C4-0000000000000640) ... ... OK
  9. Creating a new segment  (00000000000005D0-0000000000000640) ... ... OK
 10. Creating a new segment  (0000000000001640-0000000000001644) ... ... OK
     Additional segment      (0000000000001644-000000000000174C) ...
     Deleting segment        (0000000000001644-000000000000174C) ...
 10. Creating a new segment  (0000000000001644-000000000000174C) ... ... OK
 11. Creating a new segment  (0000000000001644-000000000000164C) ... ... OK
     Additional segment      (000000000000164C-000000000000174C) ...
     Deleting segment        (000000000000164C-000000000000174C) ...
 11. Creating a new segment  (000000000000164C-000000000000174C) ... ... OK
 12. Creating a new segment  (000000000000172C-000000000000174C) ... ... OK
 13. Creating a new segment  (000000000000174C-0000000000001760) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_complexdata_stringop\lib\armeabi-v7a\libdata.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
__android_log_print: 0x630L
logging refList:3
logging function_head: 0x5b8L
logging refList:1
logging function_head: 0x524L
logging function_head: 0x5b8L
logging refList:1
logging function_head: 0x524L
logging function_head: 0x5b8L
logging refList:1
logging function_head: 0x524L
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: Java_org_arguslab_native_1complexdata_1stringop_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1complexdata_1stringop_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1complexdata_1stringop_MainActivity_send
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_dynamic_register_multiple\lib\armeabi-v7a\libdynamic_register_multiple.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000000820) ... ... OK
  1. Creating a new segment  (0000000000001820-000000000000192C) ... ... OK
  2. Creating a new segment  (000000000000292C-0000000000002950) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  3. Creating a new segment  (00000000000004F8-0000000000000550) ... ... OK
     Additional segment      (0000000000000550-0000000000000820) ...
  4. Creating a new segment  (0000000000000550-0000000000000820) ... ... OK
  5. Creating a new segment  (0000000000000570-0000000000000588) ... ... OK
     Additional segment      (0000000000000588-0000000000000820) ...
  6. Creating a new segment  (0000000000000588-0000000000000820) ... ... OK
  7. Creating a new segment  (0000000000000588-000000000000063F) ... ... OK
     Additional segment      (000000000000063F-0000000000000820) ...
     Deleting segment        (000000000000063F-0000000000000820) ...
  7. Creating a new segment  (000000000000063F-0000000000000820) ... ... OK
  8. Creating a new segment  (0000000000000640-00000000000007B8) ... ... OK
     Additional segment      (00000000000007B8-0000000000000820) ...
  9. Creating a new segment  (00000000000007B8-0000000000000820) ... ... OK
 10. Creating a new segment  (00000000000007C0-0000000000000820) ... ... OK
 11. Creating a new segment  (0000000000001820-0000000000001824) ... ... OK
     Additional segment      (0000000000001824-000000000000192C) ...
     Deleting segment        (0000000000001824-000000000000192C) ...
 11. Creating a new segment  (0000000000001824-000000000000192C) ... ... OK
 12. Creating a new segment  (0000000000001824-000000000000182C) ... ... OK
     Additional segment      (000000000000182C-000000000000192C) ...
     Deleting segment        (000000000000182C-000000000000192C) ...
 12. Creating a new segment  (000000000000182C-000000000000192C) ... ... OK
 13. Creating a new segment  (000000000000190C-0000000000001910) ... ... OK
     Additional segment      (0000000000001910-000000000000192C) ...
 14. Creating a new segment  (0000000000001910-000000000000192C) ... ... OK
     Deleting segment        (0000000000001910-000000000000192C) ...
 14. Creating a new segment  (0000000000001910-000000000000192C) ... ... OK
     Deleting segment        (000000000000292C-0000000000002950) ...
 14. Creating a new segment  (000000000000292C-0000000000002950) ... ... OK
 15. Creating a new segment  (0000000000002950-0000000000002964) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_dynamic_register_multiple\lib\armeabi-v7a\libdynamic_register_multiple.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
__android_log_print: 0x800L
logging refList:3
logging function_head: 0x7acL
logging refList:3
logging function_head: 0x6b0L
logging refList:2
logging function_head: 0x694L
logging function_head: 0x694L
logging function_head: 0x6e4L
logging refList:2
logging function_head: 0x6c8L
logging function_head: 0x6c8L
logging function_head: 0x6fcL
logging function_head: 0x7acL
logging refList:3
logging function_head: 0x6b0L
logging refList:2
logging function_head: 0x694L
logging function_head: 0x694L
logging function_head: 0x6e4L
logging refList:2
logging function_head: 0x6c8L
logging function_head: 0x6c8L
logging function_head: 0x6fcL
logging function_head: 0x7acL
logging refList:3
logging function_head: 0x6b0L
logging refList:2
logging function_head: 0x694L
logging function_head: 0x694L
logging function_head: 0x6e4L
logging refList:2
logging function_head: 0x6c8L
logging function_head: 0x6c8L
logging function_head: 0x6fcL
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: native_sendFoo
__android_log_print method called by method: native_send
__android_log_print method called by method: native_sendBar
__android_log_print method called by method: native_sendFoo
__android_log_print method called by method: native_send
__android_log_print method called by method: native_sendBar
__android_log_print method called by method: native_sendFoo
__android_log_print method called by method: native_send
__android_log_print method called by method: native_send
__android_log_print method called by method: native_sendBar
__android_log_print method called by method: native_sendFoo
__android_log_print method called by method: native_sendFoo
__android_log_print method called by method: native_sendFoo
__android_log_print method called by method: native_send
__android_log_print method called by method: native_send
JNI_OnLoad exist. resolveing native function now...
entry address:0x6c8L
data:0x59eL---content:(ILjava/lang/String;)V
data:0x5d9L---content:sendFoo
entry address:0x694L
data:0x588L---content:(Ljava/lang/String;)V
data:0x5d4L---content:send
entry address:0x6fcL
data:0x5b5L---content:(DLjava/lang/String;)V
data:0x5ccL---content:sendBar
entry address:0x6c8L
data:0x59eL---content:(ILjava/lang/String;)V
data:0x5d9L---content:sendFoo
entry address:0x694L
data:0x588L---content:(Ljava/lang/String;)V
data:0x5d4L---content:send
entry address:0x6fcL
data:0x5b5L---content:(DLjava/lang/String;)V
data:0x5ccL---content:sendBar
entry address:0x6c8L
data:0x59eL---content:(ILjava/lang/String;)V
data:0x5d9L---content:sendFoo
entry address:0x694L
data:0x588L---content:(Ljava/lang/String;)V
data:0x5d4L---content:send
entry address:0x694L
data:0x588L---content:(Ljava/lang/String;)V
data:0x5d4L---content:send
entry address:0x6fcL
data:0x5b5L---content:(DLjava/lang/String;)V
data:0x5ccL---content:sendBar
entry address:0x6c8L
data:0x59eL---content:(ILjava/lang/String;)V
data:0x5d9L---content:sendFoo
entry address:0x6c8L
data:0x59eL---content:(ILjava/lang/String;)V
data:0x5d9L---content:sendFoo
entry address:0x6c8L
data:0x59eL---content:(ILjava/lang/String;)V
data:0x5d9L---content:sendFoo
entry address:0x694L
data:0x588L---content:(Ljava/lang/String;)V
data:0x5d4L---content:send
entry address:0x694L
data:0x588L---content:(Ljava/lang/String;)V
data:0x5d4L---content:send
JNI_OnLoad exist. resolveing native function now...
JNI_OnLoad exist. resolveing native function now...
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_heap_modify\lib\armeabi-v7a\libheap_modify.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-00000000000007A0) ... ... OK
  1. Creating a new segment  (00000000000017A0-00000000000018B0) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (000000000000044C-0000000000000494) ... ... OK
     Additional segment      (0000000000000494-00000000000007A0) ...
  3. Creating a new segment  (0000000000000494-00000000000007A0) ... ... OK
  4. Creating a new segment  (00000000000004BC-00000000000004E0) ... ... OK
     Additional segment      (00000000000004E0-00000000000007A0) ...
  5. Creating a new segment  (00000000000004E0-00000000000007A0) ... ... OK
  6. Creating a new segment  (00000000000004E0-000000000000059D) ... ... OK
     Additional segment      (000000000000059D-00000000000007A0) ...
     Deleting segment        (000000000000059D-00000000000007A0) ...
  6. Creating a new segment  (000000000000059D-00000000000007A0) ... ... OK
  7. Creating a new segment  (00000000000005A0-0000000000000730) ... ... OK
     Additional segment      (0000000000000730-00000000000007A0) ...
  8. Creating a new segment  (0000000000000730-00000000000007A0) ... ... OK
     Deleting segment        (0000000000000730-00000000000007A0) ...
  8. Creating a new segment  (0000000000000730-00000000000007A0) ... ... OK
  9. Creating a new segment  (00000000000017A0-00000000000017A4) ... ... OK
     Additional segment      (00000000000017A4-00000000000018B0) ...
     Deleting segment        (00000000000017A4-00000000000018B0) ...
  9. Creating a new segment  (00000000000017A4-00000000000018B0) ... ... OK
 10. Creating a new segment  (00000000000017A4-00000000000017AC) ... ... OK
     Additional segment      (00000000000017AC-00000000000018B0) ...
     Deleting segment        (00000000000017AC-00000000000018B0) ...
 10. Creating a new segment  (00000000000017AC-00000000000018B0) ... ... OK
 11. Creating a new segment  (000000000000188C-0000000000001890) ... ... OK
     Additional segment      (0000000000001890-00000000000018B0) ...
 12. Creating a new segment  (0000000000001890-00000000000018B0) ... ... OK
     Deleting segment        (0000000000001890-00000000000018B0) ...
 12. Creating a new segment  (0000000000001890-00000000000018B0) ... ... OK
 13. Creating a new segment  (00000000000018B0-00000000000018C0) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_heap_modify\lib\armeabi-v7a\libheap_modify.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
j__ZN7_JNIEnv16CallObjectMethodEP8_jobjectP10_jmethodIDz
refList:4
function_head: 0x5e4L
function_head: 0x724L
refList:1
function_head: 0x5e4L
function_head: 0x724L
refList:1
function_head: 0x5e4L
function_head: 0x724L
refList:1
function_head: 0x5e4L
len(ssCallMth):2
callObjectMth:0x63eL---_Z7getImeiP7_JNIEnvP8_jobject
caller function address : 0x5e4L
data:0x620L---content:P
data:0x61eL---content:e
data:0x5f6L---content:=
callObjectMth:0x672L---_Z7getImeiP7_JNIEnvP8_jobject
caller function address : 0x5e4L
data:0x620L---content:P
data:0x61eL---content:e
data:0x5f6L---content:=
source method path......
sink method path......
android_log_print........
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_leak\lib\armeabi-v7a\libleak.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000000500) ... ... OK
  1. Creating a new segment  (0000000000001500-0000000000001604) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (00000000000003B8-00000000000003F8) ... ... OK
     Additional segment      (00000000000003F8-0000000000000500) ...
  3. Creating a new segment  (00000000000003F8-0000000000000500) ... ... OK
  4. Creating a new segment  (0000000000000410-0000000000000418) ... ... OK
     Additional segment      (0000000000000418-0000000000000500) ...
  5. Creating a new segment  (0000000000000418-0000000000000500) ... ... OK
  6. Creating a new segment  (0000000000000418-00000000000004AC) ... ... OK
     Additional segment      (00000000000004AC-0000000000000500) ...
     Deleting segment        (00000000000004AC-0000000000000500) ...
  6. Creating a new segment  (00000000000004AC-0000000000000500) ... ... OK
  7. Creating a new segment  (00000000000004B0-0000000000000500) ... ... OK
  8. Creating a new segment  (0000000000001500-0000000000001504) ... ... OK
     Additional segment      (0000000000001504-0000000000001604) ...
     Deleting segment        (0000000000001504-0000000000001604) ...
  8. Creating a new segment  (0000000000001504-0000000000001604) ... ... OK
  9. Creating a new segment  (0000000000001504-000000000000150C) ... ... OK
     Additional segment      (000000000000150C-0000000000001604) ...
     Deleting segment        (000000000000150C-0000000000001604) ...
  9. Creating a new segment  (000000000000150C-0000000000001604) ... ... OK
 10. Creating a new segment  (00000000000015EC-0000000000001604) ... ... OK
 11. Creating a new segment  (0000000000001604-0000000000001610) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_leak\lib\armeabi-v7a\libleak.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
__android_log_print: 0x4f0L
logging refList:3
logging function_head: 0x488L
logging refList:2
logging function_head: 0x46cL
logging function_head: 0x46cL
logging function_head: 0x488L
logging refList:2
logging function_head: 0x46cL
logging function_head: 0x46cL
logging function_head: 0x488L
logging refList:2
logging function_head: 0x46cL
logging function_head: 0x46cL
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: Java_org_arguslab_native_1leak_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1leak_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1leak_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1leak_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1leak_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1leak_MainActivity_send
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_leak_array\lib\armeabi-v7a\libleak_array.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000000530) ... ... OK
  1. Creating a new segment  (0000000000001530-0000000000001634) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (00000000000003C4-0000000000000404) ... ... OK
     Additional segment      (0000000000000404-0000000000000530) ...
  3. Creating a new segment  (0000000000000404-0000000000000530) ... ... OK
  4. Creating a new segment  (000000000000041C-0000000000000428) ... ... OK
     Additional segment      (0000000000000428-0000000000000530) ...
  5. Creating a new segment  (0000000000000428-0000000000000530) ... ... OK
  6. Creating a new segment  (0000000000000428-0000000000000430) ... ... OK
     Additional segment      (0000000000000430-0000000000000530) ...
     Deleting segment        (0000000000000430-0000000000000530) ...
  6. Creating a new segment  (0000000000000430-0000000000000530) ... ... OK
  7. Creating a new segment  (0000000000000430-00000000000004D4) ... ... OK
     Additional segment      (00000000000004D4-0000000000000530) ...
     Deleting segment        (00000000000004D4-0000000000000530) ...
  7. Creating a new segment  (00000000000004D4-0000000000000530) ... ... OK
  8. Creating a new segment  (00000000000004E0-0000000000000530) ... ... OK
  9. Creating a new segment  (0000000000001530-0000000000001534) ... ... OK
     Additional segment      (0000000000001534-0000000000001634) ...
     Deleting segment        (0000000000001534-0000000000001634) ...
  9. Creating a new segment  (0000000000001534-0000000000001634) ... ... OK
 10. Creating a new segment  (0000000000001534-000000000000153C) ... ... OK
     Additional segment      (000000000000153C-0000000000001634) ...
     Deleting segment        (000000000000153C-0000000000001634) ...
 10. Creating a new segment  (000000000000153C-0000000000001634) ... ... OK
 11. Creating a new segment  (000000000000161C-0000000000001634) ... ... OK
 12. Creating a new segment  (0000000000001634-0000000000001640) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_leak_array\lib\armeabi-v7a\libleak_array.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
__android_log_print: 0x520L
logging refList:3
logging function_head: 0x4c8L
logging refList:1
logging function_head: 0x484L
logging function_head: 0x4c8L
logging refList:1
logging function_head: 0x484L
logging function_head: 0x4c8L
logging refList:1
logging function_head: 0x484L
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: Java_org_arguslab_native_1leak_1array_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1leak_1array_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1leak_1array_MainActivity_send
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_leak_dynamic_register\lib\armeabi-v7a\libleak_dynamic_register.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-00000000000006D0) ... ... OK
  1. Creating a new segment  (00000000000016D0-00000000000017DC) ... ... OK
  2. Creating a new segment  (00000000000027DC-00000000000027E8) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  3. Creating a new segment  (000000000000046C-00000000000004B4) ... ... OK
     Additional segment      (00000000000004B4-00000000000006D0) ...
  4. Creating a new segment  (00000000000004B4-00000000000006D0) ... ... OK
  5. Creating a new segment  (00000000000004D4-00000000000004E0) ... ... OK
     Additional segment      (00000000000004E0-00000000000006D0) ...
  6. Creating a new segment  (00000000000004E0-00000000000006D0) ... ... OK
  7. Creating a new segment  (00000000000004E0-0000000000000551) ... ... OK
     Additional segment      (0000000000000551-00000000000006D0) ...
     Deleting segment        (0000000000000551-00000000000006D0) ...
  7. Creating a new segment  (0000000000000551-00000000000006D0) ... ... OK
  8. Creating a new segment  (0000000000000554-0000000000000664) ... ... OK
     Additional segment      (0000000000000664-00000000000006D0) ...
  9. Creating a new segment  (0000000000000664-00000000000006D0) ... ... OK
 10. Creating a new segment  (0000000000000670-00000000000006D0) ... ... OK
 11. Creating a new segment  (00000000000016D0-00000000000016D4) ... ... OK
     Additional segment      (00000000000016D4-00000000000017DC) ...
     Deleting segment        (00000000000016D4-00000000000017DC) ...
 11. Creating a new segment  (00000000000016D4-00000000000017DC) ... ... OK
 12. Creating a new segment  (00000000000016D4-00000000000016DC) ... ... OK
     Additional segment      (00000000000016DC-00000000000017DC) ...
     Deleting segment        (00000000000016DC-00000000000017DC) ...
 12. Creating a new segment  (00000000000016DC-00000000000017DC) ... ... OK
 13. Creating a new segment  (00000000000017BC-00000000000017C0) ... ... OK
     Additional segment      (00000000000017C0-00000000000017DC) ...
 14. Creating a new segment  (00000000000017C0-00000000000017DC) ... ... OK
     Deleting segment        (00000000000017C0-00000000000017DC) ...
 14. Creating a new segment  (00000000000017C0-00000000000017DC) ... ... OK
     Deleting segment        (00000000000027DC-00000000000027E8) ...
 14. Creating a new segment  (00000000000027DC-00000000000027E8) ... ... OK
 15. Creating a new segment  (00000000000027E8-00000000000027FC) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_leak_dynamic_register\lib\armeabi-v7a\libleak_dynamic_register.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
__android_log_print: 0x6b0L
logging refList:3
logging function_head: 0x5c4L
logging refList:2
logging function_head: 0x5a8L
logging function_head: 0x5a8L
logging function_head: 0x5c4L
logging refList:2
logging function_head: 0x5a8L
logging function_head: 0x5a8L
logging function_head: 0x5c4L
logging refList:2
logging function_head: 0x5a8L
logging function_head: 0x5a8L
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: native_send
__android_log_print method called by method: native_send
__android_log_print method called by method: native_send
__android_log_print method called by method: native_send
__android_log_print method called by method: native_send
__android_log_print method called by method: native_send
JNI_OnLoad exist. resolveing native function now...
entry address:0x5a8L
data:0x4e0L---content:(Ljava/lang/String;)V
data:0x4f6L---content:send
entry address:0x5a8L
data:0x4e0L---content:(Ljava/lang/String;)V
data:0x4f6L---content:send
entry address:0x5a8L
data:0x4e0L---content:(Ljava/lang/String;)V
data:0x4f6L---content:send
entry address:0x5a8L
data:0x4e0L---content:(Ljava/lang/String;)V
data:0x4f6L---content:send
entry address:0x5a8L
data:0x4e0L---content:(Ljava/lang/String;)V
data:0x4f6L---content:send
entry address:0x5a8L
data:0x4e0L---content:(Ljava/lang/String;)V
data:0x4f6L---content:send
JNI_OnLoad exist. resolveing native function now...
JNI_OnLoad exist. resolveing native function now...
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_method_overloading\lib\armeabi-v7a\libmethod_overloading.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-00000000000005E0) ... ... OK
  1. Creating a new segment  (00000000000015E0-00000000000016E4) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (000000000000046C-00000000000004AC) ... ... OK
     Additional segment      (00000000000004AC-00000000000005E0) ...
  3. Creating a new segment  (00000000000004AC-00000000000005E0) ... ... OK
  4. Creating a new segment  (00000000000004C4-00000000000004DA) ... ... OK
     Additional segment      (00000000000004DA-00000000000005E0) ...
  5. Creating a new segment  (00000000000004DA-00000000000005E0) ... ... OK
  6. Creating a new segment  (00000000000004DC-0000000000000588) ... ... OK
     Additional segment      (0000000000000588-00000000000005E0) ...
  7. Creating a new segment  (0000000000000588-00000000000005E0) ... ... OK
  8. Creating a new segment  (0000000000000590-00000000000005E0) ... ... OK
  9. Creating a new segment  (00000000000015E0-00000000000015E4) ... ... OK
     Additional segment      (00000000000015E4-00000000000016E4) ...
     Deleting segment        (00000000000015E4-00000000000016E4) ...
  9. Creating a new segment  (00000000000015E4-00000000000016E4) ... ... OK
 10. Creating a new segment  (00000000000015E4-00000000000015EC) ... ... OK
     Additional segment      (00000000000015EC-00000000000016E4) ...
     Deleting segment        (00000000000015EC-00000000000016E4) ...
 10. Creating a new segment  (00000000000015EC-00000000000016E4) ... ... OK
 11. Creating a new segment  (00000000000016CC-00000000000016E4) ... ... OK
 12. Creating a new segment  (00000000000016E4-00000000000016F0) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_method_overloading\lib\armeabi-v7a\libmethod_overloading.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
__android_log_print: 0x5d0L
logging refList:3
logging function_head: 0x57cL
logging refList:2
logging function_head: 0x530L
logging function_head: 0x548L
logging function_head: 0x57cL
logging refList:2
logging function_head: 0x530L
logging function_head: 0x548L
logging function_head: 0x57cL
logging refList:2
logging function_head: 0x530L
logging function_head: 0x548L
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: Java_org_arguslab_native_1method_1overloading_MainActivity_send__I
__android_log_print method called by method: Java_org_arguslab_native_1method_1overloading_MainActivity_send__I
__android_log_print method called by method: Java_org_arguslab_native_1method_1overloading_MainActivity_send___3I_3Ljava_lang_String_2Ljava_lang_String_2D
__android_log_print method called by method: Java_org_arguslab_native_1method_1overloading_MainActivity_send__I
__android_log_print method called by method: Java_org_arguslab_native_1method_1overloading_MainActivity_send___3I_3Ljava_lang_String_2Ljava_lang_String_2D
__android_log_print method called by method: Java_org_arguslab_native_1method_1overloading_MainActivity_send___3I_3Ljava_lang_String_2Ljava_lang_String_2D
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_multiple_interactions\lib\armeabi-v7a\libmultiple_interactions.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-00000000000007F0) ... ... OK
  1. Creating a new segment  (00000000000017F0-0000000000001900) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (0000000000000500-0000000000000550) ... ... OK
     Additional segment      (0000000000000550-00000000000007F0) ...
  3. Creating a new segment  (0000000000000550-00000000000007F0) ... ... OK
  4. Creating a new segment  (0000000000000578-0000000000000590) ... ... OK
     Additional segment      (0000000000000590-00000000000007F0) ...
  5. Creating a new segment  (0000000000000590-00000000000007F0) ... ... OK
  6. Creating a new segment  (0000000000000590-000000000000061B) ... ... OK
     Additional segment      (000000000000061B-00000000000007F0) ...
     Deleting segment        (000000000000061B-00000000000007F0) ...
  6. Creating a new segment  (000000000000061B-00000000000007F0) ... ... OK
  7. Creating a new segment  (000000000000061C-0000000000000778) ... ... OK
     Additional segment      (0000000000000778-00000000000007F0) ...
  8. Creating a new segment  (0000000000000778-00000000000007F0) ... ... OK
  9. Creating a new segment  (0000000000000780-00000000000007F0) ... ... OK
 10. Creating a new segment  (00000000000017F0-00000000000017F4) ... ... OK
     Additional segment      (00000000000017F4-0000000000001900) ...
     Deleting segment        (00000000000017F4-0000000000001900) ...
 10. Creating a new segment  (00000000000017F4-0000000000001900) ... ... OK
 11. Creating a new segment  (00000000000017F4-00000000000017FC) ... ... OK
     Additional segment      (00000000000017FC-0000000000001900) ...
     Deleting segment        (00000000000017FC-0000000000001900) ...
 11. Creating a new segment  (00000000000017FC-0000000000001900) ... ... OK
 12. Creating a new segment  (00000000000018DC-00000000000018E0) ... ... OK
     Additional segment      (00000000000018E0-0000000000001900) ...
 13. Creating a new segment  (00000000000018E0-0000000000001900) ... ... OK
     Deleting segment        (00000000000018E0-0000000000001900) ...
 13. Creating a new segment  (00000000000018E0-0000000000001900) ... ... OK
 14. Creating a new segment  (0000000000001900-0000000000001914) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_multiple_interactions\lib\armeabi-v7a\libmultiple_interactions.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
j__ZN7_JNIEnv14CallVoidMethodEP8_jobjectP10_jmethodIDz
refList:3
function_head: 0x760L
refList:1
function_head: 0x670L
function_head: 0x760L
refList:1
function_head: 0x670L
function_head: 0x760L
refList:1
function_head: 0x670L
len(ssCallMth):1
callObjectMth:0x6dcL---Java_org_arguslab_native_1multiple_1interactions_MainActivity_propagateImei
caller function address : 0x670L
data:0x694L---content:l
data:0x692L---content:j
__android_log_print: 0x7e0L
logging refList:3
logging function_head: 0x748L
logging refList:2
logging function_head: 0x72cL
logging function_head: 0x72cL
logging function_head: 0x748L
logging refList:2
logging function_head: 0x72cL
logging function_head: 0x72cL
logging function_head: 0x748L
logging refList:2
logging function_head: 0x72cL
logging function_head: 0x72cL
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1interactions_MainActivity_leakImei
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1interactions_MainActivity_leakImei
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1interactions_MainActivity_leakImei
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1interactions_MainActivity_leakImei
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1interactions_MainActivity_leakImei
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1interactions_MainActivity_leakImei
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_multiple_libraries\lib\armeabi-v7a\libfoo.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-00000000000004A0) ... ... OK
  1. Creating a new segment  (00000000000014A0-00000000000015A4) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (0000000000000384-00000000000003BC) ... ... OK
     Additional segment      (00000000000003BC-00000000000004A0) ...
  3. Creating a new segment  (00000000000003BC-00000000000004A0) ... ... OK
  4. Creating a new segment  (00000000000003D4-00000000000003E2) ... ... OK
     Additional segment      (00000000000003E2-00000000000004A0) ...
  5. Creating a new segment  (00000000000003E2-00000000000004A0) ... ... OK
  6. Creating a new segment  (00000000000003E4-000000000000044C) ... ... OK
     Additional segment      (000000000000044C-00000000000004A0) ...
  7. Creating a new segment  (000000000000044C-00000000000004A0) ... ... OK
  8. Creating a new segment  (0000000000000450-00000000000004A0) ... ... OK
  9. Creating a new segment  (00000000000014A0-00000000000014A4) ... ... OK
     Additional segment      (00000000000014A4-00000000000015A4) ...
     Deleting segment        (00000000000014A4-00000000000015A4) ...
  9. Creating a new segment  (00000000000014A4-00000000000015A4) ... ... OK
 10. Creating a new segment  (00000000000014A4-00000000000014AC) ... ... OK
     Additional segment      (00000000000014AC-00000000000015A4) ...
     Deleting segment        (00000000000014AC-00000000000015A4) ...
 10. Creating a new segment  (00000000000014AC-00000000000015A4) ... ... OK
 11. Creating a new segment  (000000000000158C-00000000000015A4) ... ... OK
 12. Creating a new segment  (00000000000015A4-00000000000015B0) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_multiple_libraries\lib\armeabi-v7a\libfoo.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
__android_log_print: 0x490L
logging refList:3
logging function_head: 0x428L
logging function_head: 0x428L
logging function_head: 0x428L
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1libraries_MainActivity_fooSend
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1libraries_MainActivity_fooSend
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1libraries_MainActivity_fooSend
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_multiple_libraries\lib\armeabi-v7a\libmaster.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000000520) ... ... OK
  1. Creating a new segment  (0000000000001520-0000000000001624) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (00000000000003D0-0000000000000410) ... ... OK
     Additional segment      (0000000000000410-0000000000000520) ...
  3. Creating a new segment  (0000000000000410-0000000000000520) ... ... OK
  4. Creating a new segment  (0000000000000428-0000000000000432) ... ... OK
     Additional segment      (0000000000000432-0000000000000520) ...
  5. Creating a new segment  (0000000000000432-0000000000000520) ... ... OK
  6. Creating a new segment  (0000000000000434-00000000000004C8) ... ... OK
     Additional segment      (00000000000004C8-0000000000000520) ...
  7. Creating a new segment  (00000000000004C8-0000000000000520) ... ... OK
  8. Creating a new segment  (00000000000004D0-0000000000000520) ... ... OK
  9. Creating a new segment  (0000000000001520-0000000000001524) ... ... OK
     Additional segment      (0000000000001524-0000000000001624) ...
     Deleting segment        (0000000000001524-0000000000001624) ...
  9. Creating a new segment  (0000000000001524-0000000000001624) ... ... OK
 10. Creating a new segment  (0000000000001524-000000000000152C) ... ... OK
     Additional segment      (000000000000152C-0000000000001624) ...
     Deleting segment        (000000000000152C-0000000000001624) ...
 10. Creating a new segment  (000000000000152C-0000000000001624) ... ... OK
 11. Creating a new segment  (000000000000160C-0000000000001624) ... ... OK
 12. Creating a new segment  (0000000000001624-0000000000001630) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_multiple_libraries\lib\armeabi-v7a\libmaster.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
__android_log_print: 0x510L
logging refList:3
logging function_head: 0x4a4L
logging refList:2
logging function_head: 0x488L
logging function_head: 0x488L
logging function_head: 0x4a4L
logging refList:2
logging function_head: 0x488L
logging function_head: 0x488L
logging function_head: 0x4a4L
logging refList:2
logging function_head: 0x488L
logging function_head: 0x488L
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1libraries_MainActivity_masterSend
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1libraries_MainActivity_masterSend
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1libraries_MainActivity_masterSend
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1libraries_MainActivity_masterSend
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1libraries_MainActivity_masterSend
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1libraries_MainActivity_masterSend
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_noleak\lib\armeabi-v7a\libnoleak.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-00000000000004A0) ... ... OK
  1. Creating a new segment  (00000000000014A0-00000000000015A4) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (0000000000000378-00000000000003B0) ... ... OK
     Additional segment      (00000000000003B0-00000000000004A0) ...
  3. Creating a new segment  (00000000000003B0-00000000000004A0) ... ... OK
  4. Creating a new segment  (00000000000003C8-00000000000003D9) ... ... OK
     Additional segment      (00000000000003D9-00000000000004A0) ...
  5. Creating a new segment  (00000000000003D9-00000000000004A0) ... ... OK
  6. Creating a new segment  (00000000000003DC-0000000000000444) ... ... OK
     Additional segment      (0000000000000444-00000000000004A0) ...
  7. Creating a new segment  (0000000000000444-00000000000004A0) ... ... OK
  8. Creating a new segment  (0000000000000450-00000000000004A0) ... ... OK
  9. Creating a new segment  (00000000000014A0-00000000000014A4) ... ... OK
     Additional segment      (00000000000014A4-00000000000015A4) ...
     Deleting segment        (00000000000014A4-00000000000015A4) ...
  9. Creating a new segment  (00000000000014A4-00000000000015A4) ... ... OK
 10. Creating a new segment  (00000000000014A4-00000000000014AC) ... ... OK
     Additional segment      (00000000000014AC-00000000000015A4) ...
     Deleting segment        (00000000000014AC-00000000000015A4) ...
 10. Creating a new segment  (00000000000014AC-00000000000015A4) ... ... OK
 11. Creating a new segment  (000000000000158C-00000000000015A4) ... ... OK
 12. Creating a new segment  (00000000000015A4-00000000000015B0) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_noleak\lib\armeabi-v7a\libnoleak.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
__android_log_print: 0x490L
logging refList:3
logging function_head: 0x420L
logging function_head: 0x420L
logging function_head: 0x420L
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: Java_org_arguslab_native_1noleak_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1noleak_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1noleak_MainActivity_send
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_noleak_array\lib\armeabi-v7a\libnoleak_array.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000000530) ... ... OK
  1. Creating a new segment  (0000000000001530-0000000000001634) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (00000000000003C8-0000000000000408) ... ... OK
     Additional segment      (0000000000000408-0000000000000530) ...
  3. Creating a new segment  (0000000000000408-0000000000000530) ... ... OK
  4. Creating a new segment  (0000000000000420-000000000000042C) ... ... OK
     Additional segment      (000000000000042C-0000000000000530) ...
  5. Creating a new segment  (000000000000042C-0000000000000530) ... ... OK
  6. Creating a new segment  (000000000000042C-0000000000000436) ... ... OK
     Additional segment      (0000000000000436-0000000000000530) ...
     Deleting segment        (0000000000000436-0000000000000530) ...
  6. Creating a new segment  (0000000000000436-0000000000000530) ... ... OK
  7. Creating a new segment  (0000000000000438-00000000000004DC) ... ... OK
     Additional segment      (00000000000004DC-0000000000000530) ...
  8. Creating a new segment  (00000000000004DC-0000000000000530) ... ... OK
  9. Creating a new segment  (00000000000004E0-0000000000000530) ... ... OK
 10. Creating a new segment  (0000000000001530-0000000000001534) ... ... OK
     Additional segment      (0000000000001534-0000000000001634) ...
     Deleting segment        (0000000000001534-0000000000001634) ...
 10. Creating a new segment  (0000000000001534-0000000000001634) ... ... OK
 11. Creating a new segment  (0000000000001534-000000000000153C) ... ... OK
     Additional segment      (000000000000153C-0000000000001634) ...
     Deleting segment        (000000000000153C-0000000000001634) ...
 11. Creating a new segment  (000000000000153C-0000000000001634) ... ... OK
 12. Creating a new segment  (000000000000161C-0000000000001634) ... ... OK
 13. Creating a new segment  (0000000000001634-0000000000001640) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_noleak_array\lib\armeabi-v7a\libnoleak_array.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
__android_log_print: 0x520L
logging refList:3
logging function_head: 0x4d0L
logging refList:1
logging function_head: 0x48cL
logging function_head: 0x4d0L
logging refList:1
logging function_head: 0x48cL
logging function_head: 0x4d0L
logging refList:1
logging function_head: 0x48cL
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: Java_org_arguslab_native_1noleak_1array_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1noleak_1array_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1noleak_1array_MainActivity_send
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_nosource\lib\armeabi-v7a\libnosource.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000000440) ... ... OK
  1. Creating a new segment  (0000000000001440-0000000000001540) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (0000000000000350-0000000000000388) ... ... OK
     Additional segment      (0000000000000388-0000000000000440) ...
  3. Creating a new segment  (0000000000000388-0000000000000440) ... ... OK
  4. Creating a new segment  (0000000000000398-00000000000003A2) ... ... OK
     Additional segment      (00000000000003A2-0000000000000440) ...
  5. Creating a new segment  (00000000000003A2-0000000000000440) ... ... OK
  6. Creating a new segment  (00000000000003A4-00000000000003F8) ... ... OK
     Additional segment      (00000000000003F8-0000000000000440) ...
  7. Creating a new segment  (00000000000003F8-0000000000000440) ... ... OK
  8. Creating a new segment  (0000000000000400-0000000000000440) ... ... OK
  9. Creating a new segment  (0000000000001440-0000000000001444) ... ... OK
     Additional segment      (0000000000001444-0000000000001540) ...
     Deleting segment        (0000000000001444-0000000000001540) ...
  9. Creating a new segment  (0000000000001444-0000000000001540) ... ... OK
 10. Creating a new segment  (0000000000001444-000000000000144C) ... ... OK
     Additional segment      (000000000000144C-0000000000001540) ...
     Deleting segment        (000000000000144C-0000000000001540) ...
 10. Creating a new segment  (000000000000144C-0000000000001540) ... ... OK
 11. Creating a new segment  (000000000000152C-0000000000001540) ... ... OK
 12. Creating a new segment  (0000000000001540-0000000000001548) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_nosource\lib\armeabi-v7a\libnosource.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
source method path......
sink method path......
android_log_print........
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_pure\lib\armeabi-v7a\libnative-activity.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000002670) ... ... OK
  1. Creating a new segment  (0000000000003670-000000000000389C) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (000000000000101C-0000000000001134) ... ... OK
     Additional segment      (0000000000001134-0000000000002670) ...
  3. Creating a new segment  (0000000000001134-0000000000002670) ... ... OK
  4. Creating a new segment  (0000000000001354-0000000000001474) ... ... OK
     Additional segment      (0000000000001474-0000000000002670) ...
  5. Creating a new segment  (0000000000001474-0000000000002670) ... ... OK
  6. Creating a new segment  (0000000000001478-00000000000015F5) ... ... OK
     Additional segment      (00000000000015F5-0000000000002670) ...
  7. Creating a new segment  (00000000000015F5-0000000000002670) ... ... OK
  8. Creating a new segment  (00000000000015F8-0000000000002208) ... ... OK
     Additional segment      (0000000000002208-0000000000002670) ...
  9. Creating a new segment  (0000000000002208-0000000000002670) ... ... OK
 10. Creating a new segment  (0000000000002210-0000000000002670) ... ... OK
 11. Creating a new segment  (0000000000003670-0000000000003674) ... ... OK
     Additional segment      (0000000000003674-000000000000389C) ...
     Deleting segment        (0000000000003674-000000000000389C) ...
 11. Creating a new segment  (0000000000003674-000000000000389C) ... ... OK
 12. Creating a new segment  (0000000000003674-000000000000367C) ... ... OK
     Additional segment      (000000000000367C-000000000000389C) ...
     Deleting segment        (000000000000367C-000000000000389C) ...
 12. Creating a new segment  (000000000000367C-000000000000389C) ... ... OK
 13. Creating a new segment  (0000000000003774-0000000000003780) ... ... OK
     Additional segment      (0000000000003780-000000000000389C) ...
 14. Creating a new segment  (0000000000003780-000000000000389C) ... ... OK
     Deleting segment        (0000000000003780-000000000000389C) ...
 14. Creating a new segment  (0000000000003780-000000000000389C) ... ... OK
 15. Creating a new segment  (000000000000389C-0000000000003988) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_pure\lib\armeabi-v7a\libnative-activity.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
__android_log_print: 0x2330L
logging refList:7
logging function_head: 0x163cL
logging function_head: 0x18e0L
logging function_head: 0x1a38L
logging function_head: 0x1c0cL
logging function_head: 0x21f0L
logging refList:1
logging function_head: 0x1f04L
logging refList:13
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1db8L
logging refList:0
logging function_head: 0x1df2L
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1e90L
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1f6cL
logging refList:2
logging function_head: 0x1e4cL
logging refList:0
logging function_head: 0x1e52L
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x2008L
logging refList:4
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1ee2L
logging refList:0
logging function_head: 0x1eeaL
logging refList:0
logging function_head: 0x21f0L
logging refList:1
logging function_head: 0x1f04L
logging refList:13
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1db8L
logging refList:0
logging function_head: 0x1df2L
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1e90L
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1f6cL
logging refList:2
logging function_head: 0x1e4cL
logging refList:0
logging function_head: 0x1e52L
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x2008L
logging refList:4
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1ee2L
logging refList:0
logging function_head: 0x1eeaL
logging refList:0
logging function_head: 0x21f0L
logging refList:1
logging function_head: 0x1f04L
logging refList:13
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1db8L
logging refList:0
logging function_head: 0x1df2L
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1e90L
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1f6cL
logging refList:2
logging function_head: 0x1e4cL
logging refList:0
logging function_head: 0x1e52L
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x2008L
logging refList:4
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1ee2L
logging refList:0
logging function_head: 0x1eeaL
logging refList:0
j__ZN7_JNIEnv16CallObjectMethodEP8_jobjectP10_jmethodIDz
refList:4
function_head: 0x17f4L
function_head: 0x21a8L
refList:1
function_head: 0x17f4L
function_head: 0x21a8L
refList:1
function_head: 0x17f4L
function_head: 0x21a8L
refList:1
function_head: 0x17f4L
len(ssCallMth):2
callObjectMth:0x184eL---_Z7getImeiP7_JNIEnvP8_jobject
caller function address : 0x17f4L
data:0x1830L---content:W
data:0x1806L---content:.
callObjectMth:0x1882L---_Z7getImeiP7_JNIEnvP8_jobject
caller function address : 0x17f4L
data:0x1830L---content:W
data:0x1806L---content:.
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: sub_1E90
__android_log_print method called by method: sub_1E4C
__android_log_print method called by method: sub_1DF2
__android_log_print method called by method: sub_1E4C
__android_log_print method called by method: sub_1E4C
__android_log_print method called by method: sub_1E52
__android_log_print method called by method: sub_1EE2
__android_log_print method called by method: sub_1EEA
__android_log_print method called by method: sub_1EEA
__android_log_print method called by method: sub_1EE2
__android_log_print method called by method: sub_1E90
__android_log_print method called by method: sub_1E52
__android_log_print method called by method: _Z12handle_inputP11android_appP11AInputEvent
__android_log_print method called by method: sub_1EEA
__android_log_print method called by method: android_app_read_cmd
__android_log_print method called by method: sub_1DB8
__android_log_print method called by method: ANativeActivity_onCreate
__android_log_print method called by method: sub_1DB8
__android_log_print method called by method: sub_1EE2
__android_log_print method called by method: sub_1E90
__android_log_print method called by method: sub_1DF2
__android_log_print method called by method: _Z12init_displayP6engine
__android_log_print method called by method: sub_1DB8
__android_log_print method called by method: sub_1DF2
__android_log_print method called by method: sub_1E52
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_pure_direct\lib\armeabi\libnative-activity.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000002802) ... ... OK
  1. Creating a new segment  (0000000000003E1C-0000000000004031) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (00000000000009DC-0000000000000B28) ... ... OK
     Additional segment      (0000000000000B28-0000000000002802) ...
  3. Creating a new segment  (0000000000000B28-0000000000002802) ... ... OK
  4. Creating a new segment  (0000000000000B28-000000000000248C) ... ... OK
     Additional segment      (000000000000248C-0000000000002802) ...
     Deleting segment        (000000000000248C-0000000000002802) ...
  4. Creating a new segment  (000000000000248C-0000000000002802) ... ... OK
  5. Creating a new segment  (000000000000248C-0000000000002588) ... ... OK
     Additional segment      (0000000000002588-0000000000002802) ...
     Deleting segment        (0000000000002588-0000000000002802) ...
  5. Creating a new segment  (0000000000002588-0000000000002802) ... ... OK
  6. Creating a new segment  (0000000000002588-0000000000002738) ... ... OK
     Additional segment      (0000000000002738-0000000000002802) ...
     Deleting segment        (0000000000002738-0000000000002802) ...
  6. Creating a new segment  (0000000000002738-0000000000002802) ... ... OK
     Deleting segment        (0000000000002738-0000000000002802) ...
  6. Creating a new segment  (0000000000002738-0000000000002802) ... ... OK
  7. Creating a new segment  (0000000000003E1C-0000000000003E24) ... ... OK
     Additional segment      (0000000000003E24-0000000000004031) ...
     Deleting segment        (0000000000003E24-0000000000004031) ...
  7. Creating a new segment  (0000000000003E24-0000000000004031) ... ... OK
  8. Creating a new segment  (0000000000003E24-0000000000003E28) ... ... OK
     Additional segment      (0000000000003E28-0000000000004031) ...
     Deleting segment        (0000000000003E28-0000000000004031) ...
  8. Creating a new segment  (0000000000003E28-0000000000004031) ... ... OK
  9. Creating a new segment  (0000000000003F68-0000000000004000) ... ... OK
     Additional segment      (0000000000004000-0000000000004031) ...
 10. Creating a new segment  (0000000000004000-0000000000004031) ... ... OK
 11. Creating a new segment  (0000000000004000-000000000000402C) ... ... OK
     Additional segment      (000000000000402C-0000000000004031) ...
     Deleting segment        (000000000000402C-0000000000004031) ...
 11. Creating a new segment  (000000000000402C-0000000000004031) ... ... OK
     Deleting segment        (000000000000402C-0000000000004031) ...
 11. Creating a new segment  (000000000000402C-0000000000004031) ... ... OK
 12. Creating a new segment  (0000000000004034-000000000000409C) ... ... OK
 13. Creating a new segment  (000000000000409C-00000000000040A8) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_pure_direct\lib\armeabi\libnative-activity.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
j__ZN7_JNIEnv16CallObjectMethodEP8_jobjectP10_jmethodIDz
refList:2
function_head: 0xb80L
function_head: 0xb80L
len(ssCallMth):2
callObjectMth:0xbfeL---_Z7getImeiP7_JNIEnvP8_jobject
caller function address : 0xb80L
data:0xbf2L---content:()Ljava/lang/String;
data:0xbf0L---content:getDeviceId
data:0xbe2L---content:android/telephony/TelephonyManager
data:0xbb8L---content:Ljava/lang/String;
data:0xbb6L---content:TELEPHONY_SERVICE
data:0xba0L---content:getSystemService
callObjectMth:0xbd8L---_Z7getImeiP7_JNIEnvP8_jobject
caller function address : 0xb80L
data:0xbb8L---content:Ljava/lang/String;
data:0xbb6L---content:TELEPHONY_SERVICE
data:0xba0L---content:getSystemService
__android_log_print: 0xa20L
logging refList:25
logging function_head: 0xcd8L
logging function_head: 0xe24L
logging refList:0
logging function_head: 0xe24L
logging refList:0
logging function_head: 0xed0L
logging refList:0
logging function_head: 0xf0cL
logging refList:0
logging function_head: 0xf4cL
logging refList:0
logging function_head: 0xf88L
logging refList:0
logging function_head: 0xfb8L
logging refList:0
logging function_head: 0xff8L
logging refList:0
logging function_head: 0x1034L
logging refList:0
logging function_head: 0x1080L
logging refList:0
logging function_head: 0x10f4L
logging refList:0
logging function_head: 0x1144L
logging refList:0
logging function_head: 0x1190L
logging refList:0
logging function_head: 0x11f0L
logging refList:0
logging function_head: 0x1238L
logging refList:0
logging function_head: 0x1274L
logging refList:0
logging function_head: 0x12c4L
logging refList:0
logging function_head: 0x12f8L
logging refList:0
logging function_head: 0x12f8L
logging refList:0
logging function_head: 0x12f8L
logging refList:0
logging function_head: 0x12f8L
logging refList:0
logging function_head: 0x12f8L
logging refList:0
logging function_head: 0x1448L
logging refList:0
logging function_head: 0x1448L
logging refList:0
kind: UNIQUE_IDENTIFIER
1---0xe58L---func namesub_E24--segname:.text
source method path......
paths len:1
mth len:2
_Z7getImeiP7_JNIEnvP8_jobject@UNIQUE_IDENTIFIER---0xb80L -> 
sub_E24@UNIQUE_IDENTIFIER---0xe24L -> 
sink method path......
android_log_print........
__android_log_print method called by method: sub_E24
__android_log_print method called by method: sub_12C4
__android_log_print method called by method: sub_E24
__android_log_print method called by method: sub_12F8
__android_log_print method called by method: sub_ED0
__android_log_print method called by method: sub_12F8
__android_log_print method called by method: sub_F0C
__android_log_print method called by method: sub_12F8
__android_log_print method called by method: sub_F4C
__android_log_print method called by method: sub_12F8
__android_log_print method called by method: sub_F88
__android_log_print method called by method: sub_12F8
__android_log_print method called by method: sub_FB8
__android_log_print method called by method: sub_1448
__android_log_print method called by method: sub_FF8
__android_log_print method called by method: sub_1448
__android_log_print method called by method: sub_1034
__android_log_print method called by method: sub_1080
__android_log_print method called by method: sub_10F4
__android_log_print method called by method: sub_1144
__android_log_print method called by method: sub_1190
__android_log_print method called by method: ANativeActivity_onCreate
__android_log_print method called by method: sub_11F0
__android_log_print method called by method: sub_1238
__android_log_print method called by method: sub_1274
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_pure_direct_customized\lib\armeabi\libnative-activity.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000002805) ... ... OK
  1. Creating a new segment  (0000000000003E1C-0000000000004031) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (00000000000009D8-0000000000000B24) ... ... OK
     Additional segment      (0000000000000B24-0000000000002805) ...
  3. Creating a new segment  (0000000000000B24-0000000000002805) ... ... OK
  4. Creating a new segment  (0000000000000B24-0000000000002484) ... ... OK
     Additional segment      (0000000000002484-0000000000002805) ...
     Deleting segment        (0000000000002484-0000000000002805) ...
  4. Creating a new segment  (0000000000002484-0000000000002805) ... ... OK
  5. Creating a new segment  (0000000000002484-0000000000002580) ... ... OK
     Additional segment      (0000000000002580-0000000000002805) ...
     Deleting segment        (0000000000002580-0000000000002805) ...
  5. Creating a new segment  (0000000000002580-0000000000002805) ... ... OK
  6. Creating a new segment  (0000000000002580-0000000000002730) ... ... OK
     Additional segment      (0000000000002730-0000000000002805) ...
     Deleting segment        (0000000000002730-0000000000002805) ...
  6. Creating a new segment  (0000000000002730-0000000000002805) ... ... OK
     Deleting segment        (0000000000002730-0000000000002805) ...
  6. Creating a new segment  (0000000000002730-0000000000002805) ... ... OK
  7. Creating a new segment  (0000000000003E1C-0000000000003E24) ... ... OK
     Additional segment      (0000000000003E24-0000000000004031) ...
     Deleting segment        (0000000000003E24-0000000000004031) ...
  7. Creating a new segment  (0000000000003E24-0000000000004031) ... ... OK
  8. Creating a new segment  (0000000000003E24-0000000000003E28) ... ... OK
     Additional segment      (0000000000003E28-0000000000004031) ...
     Deleting segment        (0000000000003E28-0000000000004031) ...
  8. Creating a new segment  (0000000000003E28-0000000000004031) ... ... OK
  9. Creating a new segment  (0000000000003F68-0000000000004000) ... ... OK
     Additional segment      (0000000000004000-0000000000004031) ...
 10. Creating a new segment  (0000000000004000-0000000000004031) ... ... OK
 11. Creating a new segment  (0000000000004000-000000000000402C) ... ... OK
     Additional segment      (000000000000402C-0000000000004031) ...
     Deleting segment        (000000000000402C-0000000000004031) ...
 11. Creating a new segment  (000000000000402C-0000000000004031) ... ... OK
     Deleting segment        (000000000000402C-0000000000004031) ...
 11. Creating a new segment  (000000000000402C-0000000000004031) ... ... OK
 12. Creating a new segment  (0000000000004034-000000000000409C) ... ... OK
 13. Creating a new segment  (000000000000409C-00000000000040A8) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_pure_direct_customized\lib\armeabi\libnative-activity.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
j__ZN7_JNIEnv16CallObjectMethodEP8_jobjectP10_jmethodIDz
refList:2
function_head: 0xb7cL
function_head: 0xb7cL
len(ssCallMth):2
callObjectMth:0xbd4L---_Z7getImeiP7_JNIEnvP8_jobject
caller function address : 0xb7cL
data:0xbb4L---content:Ljava/lang/String;
data:0xbb2L---content:TELEPHONY_SERVICE
data:0xb9cL---content:getSystemService
callObjectMth:0xbfaL---_Z7getImeiP7_JNIEnvP8_jobject
caller function address : 0xb7cL
data:0xbeeL---content:()Ljava/lang/String;
data:0xbecL---content:getDeviceId
data:0xbdeL---content:android/telephony/TelephonyManager
data:0xbb4L---content:Ljava/lang/String;
data:0xbb2L---content:TELEPHONY_SERVICE
data:0xb9cL---content:getSystemService
__android_log_print: 0xa1cL
logging refList:25
logging function_head: 0xcd4L
logging function_head: 0xe1cL
logging refList:0
logging function_head: 0xe1cL
logging refList:0
logging function_head: 0xec8L
logging refList:0
logging function_head: 0xf04L
logging refList:0
logging function_head: 0xf44L
logging refList:0
logging function_head: 0xf80L
logging refList:0
logging function_head: 0xfb0L
logging refList:0
logging function_head: 0xff0L
logging refList:0
logging function_head: 0x102cL
logging refList:0
logging function_head: 0x1078L
logging refList:0
logging function_head: 0x10ecL
logging refList:0
logging function_head: 0x113cL
logging refList:0
logging function_head: 0x1188L
logging refList:0
logging function_head: 0x11e8L
logging refList:0
logging function_head: 0x1230L
logging refList:0
logging function_head: 0x126cL
logging refList:0
logging function_head: 0x12bcL
logging refList:0
logging function_head: 0x12f0L
logging refList:0
logging function_head: 0x12f0L
logging refList:0
logging function_head: 0x12f0L
logging refList:0
logging function_head: 0x12f0L
logging refList:0
logging function_head: 0x12f0L
logging refList:0
logging function_head: 0x1440L
logging refList:0
logging function_head: 0x1440L
logging refList:0
kind: UNIQUE_IDENTIFIER
1---0xe50L---func namesub_E1C--segname:.text
source method path......
paths len:1
mth len:2
_Z7getImeiP7_JNIEnvP8_jobject@UNIQUE_IDENTIFIER---0xb7cL -> 
sub_E1C@UNIQUE_IDENTIFIER---0xe1cL -> 
sink method path......
android_log_print........
__android_log_print method called by method: sub_E1C
__android_log_print method called by method: sub_12BC
__android_log_print method called by method: sub_E1C
__android_log_print method called by method: sub_12F0
__android_log_print method called by method: sub_EC8
__android_log_print method called by method: sub_12F0
__android_log_print method called by method: sub_F04
__android_log_print method called by method: sub_12F0
__android_log_print method called by method: sub_F44
__android_log_print method called by method: sub_12F0
__android_log_print method called by method: sub_F80
__android_log_print method called by method: sub_12F0
__android_log_print method called by method: sub_FB0
__android_log_print method called by method: sub_1440
__android_log_print method called by method: sub_FF0
__android_log_print method called by method: sub_1440
__android_log_print method called by method: sub_102C
__android_log_print method called by method: sub_1078
__android_log_print method called by method: sub_10EC
__android_log_print method called by method: sub_126C
__android_log_print method called by method: sub_113C
__android_log_print method called by method: sub_1188
__android_log_print method called by method: sub_11E8
__android_log_print method called by method: sub_1230
__android_log_print method called by method: NativeActivity_Entry
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_set_field_from_arg\lib\armeabi-v7a\libset_field_from_arg.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-00000000000004D0) ... ... OK
  1. Creating a new segment  (00000000000014D0-00000000000015D0) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (0000000000000368-00000000000003A0) ... ... OK
     Additional segment      (00000000000003A0-00000000000004D0) ...
  3. Creating a new segment  (00000000000003A0-00000000000004D0) ... ... OK
  4. Creating a new segment  (00000000000003B0-00000000000003BC) ... ... OK
     Additional segment      (00000000000003BC-00000000000004D0) ...
  5. Creating a new segment  (00000000000003BC-00000000000004D0) ... ... OK
  6. Creating a new segment  (00000000000003BC-00000000000003ED) ... ... OK
     Additional segment      (00000000000003ED-00000000000004D0) ...
     Deleting segment        (00000000000003ED-00000000000004D0) ...
  6. Creating a new segment  (00000000000003ED-00000000000004D0) ... ... OK
  7. Creating a new segment  (00000000000003F0-0000000000000490) ... ... OK
     Additional segment      (0000000000000490-00000000000004D0) ...
  8. Creating a new segment  (0000000000000490-00000000000004D0) ... ... OK
     Deleting segment        (0000000000000490-00000000000004D0) ...
  8. Creating a new segment  (0000000000000490-00000000000004D0) ... ... OK
  9. Creating a new segment  (00000000000014D0-00000000000014D4) ... ... OK
     Additional segment      (00000000000014D4-00000000000015D0) ...
     Deleting segment        (00000000000014D4-00000000000015D0) ...
  9. Creating a new segment  (00000000000014D4-00000000000015D0) ... ... OK
 10. Creating a new segment  (00000000000014D4-00000000000014DC) ... ... OK
     Additional segment      (00000000000014DC-00000000000015D0) ...
     Deleting segment        (00000000000014DC-00000000000015D0) ...
 10. Creating a new segment  (00000000000014DC-00000000000015D0) ... ... OK
 11. Creating a new segment  (00000000000015BC-00000000000015D0) ... ... OK
 12. Creating a new segment  (00000000000015D0-00000000000015D8) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_set_field_from_arg\lib\armeabi-v7a\libset_field_from_arg.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
source method path......
sink method path......
android_log_print........
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_set_field_from_arg_field\lib\armeabi-v7a\libset_field_from_arg_field.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-00000000000004F0) ... ... OK
  1. Creating a new segment  (00000000000014F0-00000000000015F0) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (0000000000000374-00000000000003AC) ... ... OK
     Additional segment      (00000000000003AC-00000000000004F0) ...
  3. Creating a new segment  (00000000000003AC-00000000000004F0) ... ... OK
  4. Creating a new segment  (00000000000003BC-00000000000003C8) ... ... OK
     Additional segment      (00000000000003C8-00000000000004F0) ...
  5. Creating a new segment  (00000000000003C8-00000000000004F0) ... ... OK
  6. Creating a new segment  (00000000000003C8-00000000000003FF) ... ... OK
     Additional segment      (00000000000003FF-00000000000004F0) ...
     Deleting segment        (00000000000003FF-00000000000004F0) ...
  6. Creating a new segment  (00000000000003FF-00000000000004F0) ... ... OK
  7. Creating a new segment  (0000000000000400-00000000000004B0) ... ... OK
     Additional segment      (00000000000004B0-00000000000004F0) ...
  8. Creating a new segment  (00000000000004B0-00000000000004F0) ... ... OK
     Deleting segment        (00000000000004B0-00000000000004F0) ...
  8. Creating a new segment  (00000000000004B0-00000000000004F0) ... ... OK
  9. Creating a new segment  (00000000000014F0-00000000000014F4) ... ... OK
     Additional segment      (00000000000014F4-00000000000015F0) ...
     Deleting segment        (00000000000014F4-00000000000015F0) ...
  9. Creating a new segment  (00000000000014F4-00000000000015F0) ... ... OK
 10. Creating a new segment  (00000000000014F4-00000000000014FC) ... ... OK
     Additional segment      (00000000000014FC-00000000000015F0) ...
     Deleting segment        (00000000000014FC-00000000000015F0) ...
 10. Creating a new segment  (00000000000014FC-00000000000015F0) ... ... OK
 11. Creating a new segment  (00000000000015DC-00000000000015F0) ... ... OK
 12. Creating a new segment  (00000000000015F0-00000000000015F8) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_set_field_from_arg_field\lib\armeabi-v7a\libset_field_from_arg_field.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
source method path......
sink method path......
android_log_print........
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_set_field_from_native\lib\armeabi-v7a\libset_field_from_native.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000000990) ... ... OK
  1. Creating a new segment  (0000000000001990-0000000000001AA4) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (00000000000004B0-0000000000000500) ... ... OK
     Additional segment      (0000000000000500-0000000000000990) ...
  3. Creating a new segment  (0000000000000500-0000000000000990) ... ... OK
  4. Creating a new segment  (0000000000000530-0000000000000560) ... ... OK
     Additional segment      (0000000000000560-0000000000000990) ...
  5. Creating a new segment  (0000000000000560-0000000000000990) ... ... OK
  6. Creating a new segment  (0000000000000560-0000000000000693) ... ... OK
     Additional segment      (0000000000000693-0000000000000990) ...
     Deleting segment        (0000000000000693-0000000000000990) ...
  6. Creating a new segment  (0000000000000693-0000000000000990) ... ... OK
  7. Creating a new segment  (0000000000000694-0000000000000904) ... ... OK
     Additional segment      (0000000000000904-0000000000000990) ...
  8. Creating a new segment  (0000000000000904-0000000000000990) ... ... OK
  9. Creating a new segment  (0000000000000910-0000000000000990) ... ... OK
 10. Creating a new segment  (0000000000001990-0000000000001994) ... ... OK
     Additional segment      (0000000000001994-0000000000001AA4) ...
     Deleting segment        (0000000000001994-0000000000001AA4) ...
 10. Creating a new segment  (0000000000001994-0000000000001AA4) ... ... OK
 11. Creating a new segment  (0000000000001994-000000000000199C) ... ... OK
     Additional segment      (000000000000199C-0000000000001AA4) ...
     Deleting segment        (000000000000199C-0000000000001AA4) ...
 11. Creating a new segment  (000000000000199C-0000000000001AA4) ... ... OK
 12. Creating a new segment  (0000000000001A7C-0000000000001A80) ... ... OK
     Additional segment      (0000000000001A80-0000000000001AA4) ...
 13. Creating a new segment  (0000000000001A80-0000000000001AA4) ... ... OK
     Deleting segment        (0000000000001A80-0000000000001AA4) ...
 13. Creating a new segment  (0000000000001A80-0000000000001AA4) ... ... OK
 14. Creating a new segment  (0000000000001AA4-0000000000001AB4) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_set_field_from_native\lib\armeabi-v7a\libset_field_from_native.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
j__ZN7_JNIEnv16CallObjectMethodEP8_jobjectP10_jmethodIDz
refList:4
function_head: 0x6d8L
function_head: 0x8f8L
refList:1
function_head: 0x6d8L
function_head: 0x8f8L
refList:1
function_head: 0x6d8L
function_head: 0x8f8L
refList:1
function_head: 0x6d8L
len(ssCallMth):2
callObjectMth:0x766L---_Z7getImeiP7_JNIEnvP8_jobject
caller function address : 0x6d8L
data:0x750L---content:D
data:0x74eL---content:b
data:0x714L---content:"
data:0x712L---content:g
data:0x6feL---content:Z
callObjectMth:0x732L---_Z7getImeiP7_JNIEnvP8_jobject
caller function address : 0x6d8L
data:0x714L---content:"
data:0x712L---content:g
data:0x6feL---content:Z
source method path......
sink method path......
android_log_print........
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_source\lib\armeabi-v7a\libsource.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-00000000000006D0) ... ... OK
  1. Creating a new segment  (00000000000016D0-00000000000017DC) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (0000000000000400-0000000000000440) ... ... OK
     Additional segment      (0000000000000440-00000000000006D0) ...
  3. Creating a new segment  (0000000000000440-00000000000006D0) ... ... OK
  4. Creating a new segment  (0000000000000460-0000000000000478) ... ... OK
     Additional segment      (0000000000000478-00000000000006D0) ...
  5. Creating a new segment  (0000000000000478-00000000000006D0) ... ... OK
  6. Creating a new segment  (0000000000000478-0000000000000531) ... ... OK
     Additional segment      (0000000000000531-00000000000006D0) ...
     Deleting segment        (0000000000000531-00000000000006D0) ...
  6. Creating a new segment  (0000000000000531-00000000000006D0) ... ... OK
  7. Creating a new segment  (0000000000000534-0000000000000670) ... ... OK
     Additional segment      (0000000000000670-00000000000006D0) ...
  8. Creating a new segment  (0000000000000670-00000000000006D0) ... ... OK
     Deleting segment        (0000000000000670-00000000000006D0) ...
  8. Creating a new segment  (0000000000000670-00000000000006D0) ... ... OK
  9. Creating a new segment  (00000000000016D0-00000000000016D4) ... ... OK
     Additional segment      (00000000000016D4-00000000000017DC) ...
     Deleting segment        (00000000000016D4-00000000000017DC) ...
  9. Creating a new segment  (00000000000016D4-00000000000017DC) ... ... OK
 10. Creating a new segment  (00000000000016D4-00000000000016DC) ... ... OK
     Additional segment      (00000000000016DC-00000000000017DC) ...
     Deleting segment        (00000000000016DC-00000000000017DC) ...
 10. Creating a new segment  (00000000000016DC-00000000000017DC) ... ... OK
 11. Creating a new segment  (00000000000017BC-00000000000017C0) ... ... OK
     Additional segment      (00000000000017C0-00000000000017DC) ...
 12. Creating a new segment  (00000000000017C0-00000000000017DC) ... ... OK
     Deleting segment        (00000000000017C0-00000000000017DC) ...
 12. Creating a new segment  (00000000000017C0-00000000000017DC) ... ... OK
 13. Creating a new segment  (00000000000017DC-00000000000017EC) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_source\lib\armeabi-v7a\libsource.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
j__ZN7_JNIEnv16CallObjectMethodEP8_jobjectP10_jmethodIDz
refList:4
function_head: 0x578L
function_head: 0x664L
refList:1
function_head: 0x578L
function_head: 0x664L
refList:1
function_head: 0x578L
function_head: 0x664L
refList:1
function_head: 0x578L
len(ssCallMth):2
callObjectMth:0x606L---Java_org_arguslab_native_1source_MainActivity_getImei
caller function address : 0x578L
data:0x5b4L---content:P
data:0x5b2L---content:e
data:0x58aL---content:A
callObjectMth:0x5d2L---Java_org_arguslab_native_1source_MainActivity_getImei
caller function address : 0x578L
data:0x5b4L---content:P
data:0x5b2L---content:e
data:0x58aL---content:A
source method path......
sink method path......
android_log_print........
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_source_clean\lib\armeabi-v7a\libsource_clean.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-00000000000004D0) ... ... OK
  1. Creating a new segment  (00000000000014D0-00000000000015D0) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (000000000000035C-0000000000000394) ... ... OK
     Additional segment      (0000000000000394-00000000000004D0) ...
  3. Creating a new segment  (0000000000000394-00000000000004D0) ... ... OK
  4. Creating a new segment  (00000000000003A4-00000000000003B0) ... ... OK
     Additional segment      (00000000000003B0-00000000000004D0) ...
  5. Creating a new segment  (00000000000003B0-00000000000004D0) ... ... OK
  6. Creating a new segment  (00000000000003B0-00000000000003E5) ... ... OK
     Additional segment      (00000000000003E5-00000000000004D0) ...
     Deleting segment        (00000000000003E5-00000000000004D0) ...
  6. Creating a new segment  (00000000000003E5-00000000000004D0) ... ... OK
  7. Creating a new segment  (00000000000003E8-000000000000048C) ... ... OK
     Additional segment      (000000000000048C-00000000000004D0) ...
  8. Creating a new segment  (000000000000048C-00000000000004D0) ... ... OK
  9. Creating a new segment  (0000000000000490-00000000000004D0) ... ... OK
 10. Creating a new segment  (00000000000014D0-00000000000014D4) ... ... OK
     Additional segment      (00000000000014D4-00000000000015D0) ...
     Deleting segment        (00000000000014D4-00000000000015D0) ...
 10. Creating a new segment  (00000000000014D4-00000000000015D0) ... ... OK
 11. Creating a new segment  (00000000000014D4-00000000000014DC) ... ... OK
     Additional segment      (00000000000014DC-00000000000015D0) ...
     Deleting segment        (00000000000014DC-00000000000015D0) ...
 11. Creating a new segment  (00000000000014DC-00000000000015D0) ... ... OK
 12. Creating a new segment  (00000000000015BC-00000000000015D0) ... ... OK
 13. Creating a new segment  (00000000000015D0-00000000000015D8) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_source_clean\lib\armeabi-v7a\libsource_clean.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
source method path......
sink method path......
android_log_print........
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\icc_javatonative\lib\armeabi-v7a\libnative-activity.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000001C00) ... ... OK
  1. Creating a new segment  (0000000000002C00-0000000000002DB8) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (0000000000000B74-0000000000000C64) ... ... OK
     Additional segment      (0000000000000C64-0000000000001C00) ...
  3. Creating a new segment  (0000000000000C64-0000000000001C00) ... ... OK
  4. Creating a new segment  (0000000000000DCC-0000000000000EB0) ... ... OK
     Additional segment      (0000000000000EB0-0000000000001C00) ...
  5. Creating a new segment  (0000000000000EB0-0000000000001C00) ... ... OK
  6. Creating a new segment  (0000000000000EB0-0000000000000F87) ... ... OK
     Additional segment      (0000000000000F87-0000000000001C00) ...
     Deleting segment        (0000000000000F87-0000000000001C00) ...
  6. Creating a new segment  (0000000000000F87-0000000000001C00) ... ... OK
  7. Creating a new segment  (0000000000000F88-0000000000001904) ... ... OK
     Additional segment      (0000000000001904-0000000000001C00) ...
  8. Creating a new segment  (0000000000001904-0000000000001C00) ... ... OK
  9. Creating a new segment  (0000000000001910-0000000000001C00) ... ... OK
 10. Creating a new segment  (0000000000002C00-0000000000002C04) ... ... OK
     Additional segment      (0000000000002C04-0000000000002DB8) ...
     Deleting segment        (0000000000002C04-0000000000002DB8) ...
 10. Creating a new segment  (0000000000002C04-0000000000002DB8) ... ... OK
 11. Creating a new segment  (0000000000002C04-0000000000002C0C) ... ... OK
     Additional segment      (0000000000002C0C-0000000000002DB8) ...
     Deleting segment        (0000000000002C0C-0000000000002DB8) ...
 11. Creating a new segment  (0000000000002C0C-0000000000002DB8) ... ... OK
 12. Creating a new segment  (0000000000002CF4-0000000000002CF8) ... ... OK
     Additional segment      (0000000000002CF8-0000000000002DB8) ...
 13. Creating a new segment  (0000000000002CF8-0000000000002DB8) ... ... OK
     Deleting segment        (0000000000002CF8-0000000000002DB8) ...
 13. Creating a new segment  (0000000000002CF8-0000000000002DB8) ... ... OK
 14. Creating a new segment  (0000000000002DB8-0000000000002E54) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\icc_javatonative\lib\armeabi-v7a\libnative-activity.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
j__ZN7_JNIEnv16CallObjectMethodEP8_jobjectP10_jmethodIDz
refList:2
function_head: 0xfdcL
function_head: 0xfdcL
len(ssCallMth):2
callObjectMth:0x106cL---_Z12handleIntentP11android_app
caller function address : 0xfdcL
data:0x104aL---content:w
data:0x1048L---content:(
callObjectMth:0x102eL---_Z12handleIntentP11android_app
caller function address : 0xfdcL
__android_log_print: 0x1960L
logging refList:6
logging function_head: 0xfdcL
logging function_head: 0x1164L
logging function_head: 0x1338L
logging function_head: 0x18ecL
logging refList:1
logging function_head: 0x1630L
logging refList:13
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x14e4L
logging refList:0
logging function_head: 0x151eL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x15bcL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1698L
logging refList:2
logging function_head: 0x1578L
logging refList:0
logging function_head: 0x157eL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1734L
logging refList:4
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x160eL
logging refList:0
logging function_head: 0x1616L
logging refList:0
logging function_head: 0x18ecL
logging refList:1
logging function_head: 0x1630L
logging refList:13
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x14e4L
logging refList:0
logging function_head: 0x151eL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x15bcL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1698L
logging refList:2
logging function_head: 0x1578L
logging refList:0
logging function_head: 0x157eL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1734L
logging refList:4
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x160eL
logging refList:0
logging function_head: 0x1616L
logging refList:0
logging function_head: 0x18ecL
logging refList:1
logging function_head: 0x1630L
logging refList:13
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x14e4L
logging refList:0
logging function_head: 0x151eL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x15bcL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1698L
logging refList:2
logging function_head: 0x1578L
logging refList:0
logging function_head: 0x157eL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1734L
logging refList:4
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x160eL
logging refList:0
logging function_head: 0x1616L
logging refList:0
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: sub_151E
__android_log_print method called by method: sub_1616
__android_log_print method called by method: sub_1616
__android_log_print method called by method: ANativeActivity_onCreate
__android_log_print method called by method: sub_1578
__android_log_print method called by method: sub_157E
__android_log_print method called by method: sub_15BC
__android_log_print method called by method: sub_15BC
__android_log_print method called by method: sub_1578
__android_log_print method called by method: sub_1616
__android_log_print method called by method: sub_160E
__android_log_print method called by method: sub_157E
__android_log_print method called by method: sub_14E4
__android_log_print method called by method: sub_157E
__android_log_print method called by method: sub_14E4
__android_log_print method called by method: sub_1578
__android_log_print method called by method: sub_151E
__android_log_print method called by method: _Z12handleIntentP11android_app
__android_log_print method called by method: sub_160E
__android_log_print method called by method: android_app_read_cmd
__android_log_print method called by method: sub_14E4
__android_log_print method called by method: sub_151E
__android_log_print method called by method: sub_15BC
__android_log_print method called by method: sub_160E
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\icc_nativetojava\lib\armeabi-v7a\libintent.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000000900) ... ... OK
  1. Creating a new segment  (0000000000001900-0000000000001A14) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (00000000000004A8-00000000000004F8) ... ... OK
     Additional segment      (00000000000004F8-0000000000000900) ...
  3. Creating a new segment  (00000000000004F8-0000000000000900) ... ... OK
  4. Creating a new segment  (0000000000000528-0000000000000558) ... ... OK
     Additional segment      (0000000000000558-0000000000000900) ...
  5. Creating a new segment  (0000000000000558-0000000000000900) ... ... OK
  6. Creating a new segment  (0000000000000558-000000000000065E) ... ... OK
     Additional segment      (000000000000065E-0000000000000900) ...
     Deleting segment        (000000000000065E-0000000000000900) ...
  6. Creating a new segment  (000000000000065E-0000000000000900) ... ... OK
  7. Creating a new segment  (0000000000000660-0000000000000874) ... ... OK
     Additional segment      (0000000000000874-0000000000000900) ...
  8. Creating a new segment  (0000000000000874-0000000000000900) ... ... OK
  9. Creating a new segment  (0000000000000880-0000000000000900) ... ... OK
 10. Creating a new segment  (0000000000001900-0000000000001904) ... ... OK
     Additional segment      (0000000000001904-0000000000001A14) ...
     Deleting segment        (0000000000001904-0000000000001A14) ...
 10. Creating a new segment  (0000000000001904-0000000000001A14) ... ... OK
 11. Creating a new segment  (0000000000001904-000000000000190C) ... ... OK
     Additional segment      (000000000000190C-0000000000001A14) ...
     Deleting segment        (000000000000190C-0000000000001A14) ...
 11. Creating a new segment  (000000000000190C-0000000000001A14) ... ... OK
 12. Creating a new segment  (00000000000019EC-00000000000019F0) ... ... OK
     Additional segment      (00000000000019F0-0000000000001A14) ...
 13. Creating a new segment  (00000000000019F0-0000000000001A14) ... ... OK
     Deleting segment        (00000000000019F0-0000000000001A14) ...
 13. Creating a new segment  (00000000000019F0-0000000000001A14) ... ... OK
 14. Creating a new segment  (0000000000001A14-0000000000001A24) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\icc_nativetojava\lib\armeabi-v7a\libintent.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
j__ZN7_JNIEnv16CallObjectMethodEP8_jobjectP10_jmethodIDz
refList:2
function_head: 0x6a4L
function_head: 0x6a4L
len(ssCallMth):2
callObjectMth:0x754L---Java_org_arguslab_icc_1nativetojava_MainActivity_sendIntent
caller function address : 0x6a4L
data:0x732L---content:
data:0x6ecL---content:y
data:0x6eaL---content:_
data:0x6b8L---content:D
callObjectMth:0x720L---Java_org_arguslab_icc_1nativetojava_MainActivity_sendIntent
caller function address : 0x6a4L
data:0x6ecL---content:y
data:0x6eaL---content:_
data:0x6b8L---content:D
j__ZN7_JNIEnv14CallVoidMethodEP8_jobjectP10_jmethodIDz
refList:3
function_head: 0x868L
refList:1
function_head: 0x6a4L
function_head: 0x868L
refList:1
function_head: 0x6a4L
function_head: 0x868L
refList:1
function_head: 0x6a4L
len(ssCallMth):1
callObjectMth:0x78cL---Java_org_arguslab_icc_1nativetojava_MainActivity_sendIntent
caller function address : 0x6a4L
data:0x772L---content:2
data:0x760L---content:f
data:0x732L---content:
data:0x6ecL---content:y
data:0x6eaL---content:_
data:0x6b8L---content:D
source method path......
sink method path......
android_log_print........
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_complexdata\lib\armeabi-v7a\libdata.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000000790) ... ... OK
  1. Creating a new segment  (0000000000001790-00000000000018A0) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (00000000000004D0-0000000000000520) ... ... OK
     Additional segment      (0000000000000520-0000000000000790) ...
  3. Creating a new segment  (0000000000000520-0000000000000790) ... ... OK
  4. Creating a new segment  (0000000000000548-000000000000056C) ... ... OK
     Additional segment      (000000000000056C-0000000000000790) ...
  5. Creating a new segment  (000000000000056C-0000000000000790) ... ... OK
  6. Creating a new segment  (000000000000056C-000000000000059A) ... ... OK
     Additional segment      (000000000000059A-0000000000000790) ...
     Deleting segment        (000000000000059A-0000000000000790) ...
  6. Creating a new segment  (000000000000059A-0000000000000790) ... ... OK
  7. Creating a new segment  (000000000000059C-0000000000000714) ... ... OK
     Additional segment      (0000000000000714-0000000000000790) ...
  8. Creating a new segment  (0000000000000714-0000000000000790) ... ... OK
  9. Creating a new segment  (0000000000000720-0000000000000790) ... ... OK
 10. Creating a new segment  (0000000000001790-0000000000001794) ... ... OK
     Additional segment      (0000000000001794-00000000000018A0) ...
     Deleting segment        (0000000000001794-00000000000018A0) ...
 10. Creating a new segment  (0000000000001794-00000000000018A0) ... ... OK
 11. Creating a new segment  (0000000000001794-000000000000179C) ... ... OK
     Additional segment      (000000000000179C-00000000000018A0) ...
     Deleting segment        (000000000000179C-00000000000018A0) ...
 11. Creating a new segment  (000000000000179C-00000000000018A0) ... ... OK
 12. Creating a new segment  (000000000000187C-0000000000001880) ... ... OK
     Additional segment      (0000000000001880-00000000000018A0) ...
 13. Creating a new segment  (0000000000001880-00000000000018A0) ... ... OK
     Deleting segment        (0000000000001880-00000000000018A0) ...
 13. Creating a new segment  (0000000000001880-00000000000018A0) ... ... OK
 14. Creating a new segment  (00000000000018A0-00000000000018B4) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_complexdata\lib\armeabi-v7a\libdata.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
j__ZN7_JNIEnv16CallObjectMethodEP8_jobjectP10_jmethodIDz
refList:2
function_head: 0x5f0L
function_head: 0x698L
len(ssCallMth):2
callObjectMth:0x6c8L---Java_org_arguslab_native_1complexdata_MainActivity_send2
caller function address : 0x698L
callObjectMth:0x620L---Java_org_arguslab_native_1complexdata_MainActivity_send
caller function address : 0x5f0L
data:0x612L---content:U
data:0x610L---content:z
__android_log_print: 0x770L
logging refList:3
logging function_head: 0x708L
logging refList:2
logging function_head: 0x5f0L
logging function_head: 0x698L
logging function_head: 0x708L
logging refList:2
logging function_head: 0x5f0L
logging function_head: 0x698L
logging function_head: 0x708L
logging refList:2
logging function_head: 0x5f0L
logging function_head: 0x698L
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: Java_org_arguslab_native_1complexdata_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1complexdata_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1complexdata_MainActivity_send2
__android_log_print method called by method: Java_org_arguslab_native_1complexdata_MainActivity_send2
__android_log_print method called by method: Java_org_arguslab_native_1complexdata_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1complexdata_MainActivity_send2
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_complexdata_stringop\lib\armeabi-v7a\libdata.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000000640) ... ... OK
  1. Creating a new segment  (0000000000001640-000000000000174C) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (0000000000000438-0000000000000478) ... ... OK
     Additional segment      (0000000000000478-0000000000000640) ...
  3. Creating a new segment  (0000000000000478-0000000000000640) ... ... OK
  4. Creating a new segment  (00000000000004A0-00000000000004AC) ... ... OK
     Additional segment      (00000000000004AC-0000000000000640) ...
  5. Creating a new segment  (00000000000004AC-0000000000000640) ... ... OK
  6. Creating a new segment  (00000000000004AC-00000000000004CE) ... ... OK
     Additional segment      (00000000000004CE-0000000000000640) ...
     Deleting segment        (00000000000004CE-0000000000000640) ...
  6. Creating a new segment  (00000000000004CE-0000000000000640) ... ... OK
  7. Creating a new segment  (00000000000004D0-00000000000005C4) ... ... OK
     Additional segment      (00000000000005C4-0000000000000640) ...
  8. Creating a new segment  (00000000000005C4-0000000000000640) ... ... OK
  9. Creating a new segment  (00000000000005D0-0000000000000640) ... ... OK
 10. Creating a new segment  (0000000000001640-0000000000001644) ... ... OK
     Additional segment      (0000000000001644-000000000000174C) ...
     Deleting segment        (0000000000001644-000000000000174C) ...
 10. Creating a new segment  (0000000000001644-000000000000174C) ... ... OK
 11. Creating a new segment  (0000000000001644-000000000000164C) ... ... OK
     Additional segment      (000000000000164C-000000000000174C) ...
     Deleting segment        (000000000000164C-000000000000174C) ...
 11. Creating a new segment  (000000000000164C-000000000000174C) ... ... OK
 12. Creating a new segment  (000000000000172C-000000000000174C) ... ... OK
 13. Creating a new segment  (000000000000174C-0000000000001760) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_complexdata_stringop\lib\armeabi-v7a\libdata.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
__android_log_print: 0x630L
logging refList:3
logging function_head: 0x5b8L
logging refList:1
logging function_head: 0x524L
logging function_head: 0x5b8L
logging refList:1
logging function_head: 0x524L
logging function_head: 0x5b8L
logging refList:1
logging function_head: 0x524L
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: Java_org_arguslab_native_1complexdata_1stringop_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1complexdata_1stringop_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1complexdata_1stringop_MainActivity_send
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_dynamic_register_multiple\lib\armeabi-v7a\libdynamic_register_multiple.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000000820) ... ... OK
  1. Creating a new segment  (0000000000001820-000000000000192C) ... ... OK
  2. Creating a new segment  (000000000000292C-0000000000002950) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  3. Creating a new segment  (00000000000004F8-0000000000000550) ... ... OK
     Additional segment      (0000000000000550-0000000000000820) ...
  4. Creating a new segment  (0000000000000550-0000000000000820) ... ... OK
  5. Creating a new segment  (0000000000000570-0000000000000588) ... ... OK
     Additional segment      (0000000000000588-0000000000000820) ...
  6. Creating a new segment  (0000000000000588-0000000000000820) ... ... OK
  7. Creating a new segment  (0000000000000588-000000000000063F) ... ... OK
     Additional segment      (000000000000063F-0000000000000820) ...
     Deleting segment        (000000000000063F-0000000000000820) ...
  7. Creating a new segment  (000000000000063F-0000000000000820) ... ... OK
  8. Creating a new segment  (0000000000000640-00000000000007B8) ... ... OK
     Additional segment      (00000000000007B8-0000000000000820) ...
  9. Creating a new segment  (00000000000007B8-0000000000000820) ... ... OK
 10. Creating a new segment  (00000000000007C0-0000000000000820) ... ... OK
 11. Creating a new segment  (0000000000001820-0000000000001824) ... ... OK
     Additional segment      (0000000000001824-000000000000192C) ...
     Deleting segment        (0000000000001824-000000000000192C) ...
 11. Creating a new segment  (0000000000001824-000000000000192C) ... ... OK
 12. Creating a new segment  (0000000000001824-000000000000182C) ... ... OK
     Additional segment      (000000000000182C-000000000000192C) ...
     Deleting segment        (000000000000182C-000000000000192C) ...
 12. Creating a new segment  (000000000000182C-000000000000192C) ... ... OK
 13. Creating a new segment  (000000000000190C-0000000000001910) ... ... OK
     Additional segment      (0000000000001910-000000000000192C) ...
 14. Creating a new segment  (0000000000001910-000000000000192C) ... ... OK
     Deleting segment        (0000000000001910-000000000000192C) ...
 14. Creating a new segment  (0000000000001910-000000000000192C) ... ... OK
     Deleting segment        (000000000000292C-0000000000002950) ...
 14. Creating a new segment  (000000000000292C-0000000000002950) ... ... OK
 15. Creating a new segment  (0000000000002950-0000000000002964) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_dynamic_register_multiple\lib\armeabi-v7a\libdynamic_register_multiple.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
__android_log_print: 0x800L
logging refList:3
logging function_head: 0x7acL
logging refList:3
logging function_head: 0x6b0L
logging refList:2
logging function_head: 0x694L
logging function_head: 0x694L
logging function_head: 0x6e4L
logging refList:2
logging function_head: 0x6c8L
logging function_head: 0x6c8L
logging function_head: 0x6fcL
logging function_head: 0x7acL
logging refList:3
logging function_head: 0x6b0L
logging refList:2
logging function_head: 0x694L
logging function_head: 0x694L
logging function_head: 0x6e4L
logging refList:2
logging function_head: 0x6c8L
logging function_head: 0x6c8L
logging function_head: 0x6fcL
logging function_head: 0x7acL
logging refList:3
logging function_head: 0x6b0L
logging refList:2
logging function_head: 0x694L
logging function_head: 0x694L
logging function_head: 0x6e4L
logging refList:2
logging function_head: 0x6c8L
logging function_head: 0x6c8L
logging function_head: 0x6fcL
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: native_sendFoo
__android_log_print method called by method: native_send
__android_log_print method called by method: native_sendFoo
__android_log_print method called by method: native_sendFoo
__android_log_print method called by method: native_send
__android_log_print method called by method: native_send
__android_log_print method called by method: native_send
__android_log_print method called by method: native_sendBar
__android_log_print method called by method: native_sendFoo
__android_log_print method called by method: native_sendFoo
__android_log_print method called by method: native_sendBar
__android_log_print method called by method: native_sendFoo
__android_log_print method called by method: native_send
__android_log_print method called by method: native_sendBar
__android_log_print method called by method: native_send
JNI_OnLoad exist. resolveing native function now...
entry address:0x6c8L
data:0x59eL---content:(ILjava/lang/String;)V
data:0x5d9L---content:sendFoo
entry address:0x694L
data:0x588L---content:(Ljava/lang/String;)V
data:0x5d4L---content:send
entry address:0x6c8L
data:0x59eL---content:(ILjava/lang/String;)V
data:0x5d9L---content:sendFoo
entry address:0x6c8L
data:0x59eL---content:(ILjava/lang/String;)V
data:0x5d9L---content:sendFoo
entry address:0x694L
data:0x588L---content:(Ljava/lang/String;)V
data:0x5d4L---content:send
entry address:0x694L
data:0x588L---content:(Ljava/lang/String;)V
data:0x5d4L---content:send
entry address:0x694L
data:0x588L---content:(Ljava/lang/String;)V
data:0x5d4L---content:send
entry address:0x6fcL
data:0x5b5L---content:(DLjava/lang/String;)V
data:0x5ccL---content:sendBar
entry address:0x6c8L
data:0x59eL---content:(ILjava/lang/String;)V
data:0x5d9L---content:sendFoo
entry address:0x6c8L
data:0x59eL---content:(ILjava/lang/String;)V
data:0x5d9L---content:sendFoo
entry address:0x6fcL
data:0x5b5L---content:(DLjava/lang/String;)V
data:0x5ccL---content:sendBar
entry address:0x6c8L
data:0x59eL---content:(ILjava/lang/String;)V
data:0x5d9L---content:sendFoo
entry address:0x694L
data:0x588L---content:(Ljava/lang/String;)V
data:0x5d4L---content:send
entry address:0x6fcL
data:0x5b5L---content:(DLjava/lang/String;)V
data:0x5ccL---content:sendBar
entry address:0x694L
data:0x588L---content:(Ljava/lang/String;)V
data:0x5d4L---content:send
JNI_OnLoad exist. resolveing native function now...
JNI_OnLoad exist. resolveing native function now...
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_heap_modify\lib\armeabi-v7a\libheap_modify.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-00000000000007A0) ... ... OK
  1. Creating a new segment  (00000000000017A0-00000000000018B0) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (000000000000044C-0000000000000494) ... ... OK
     Additional segment      (0000000000000494-00000000000007A0) ...
  3. Creating a new segment  (0000000000000494-00000000000007A0) ... ... OK
  4. Creating a new segment  (00000000000004BC-00000000000004E0) ... ... OK
     Additional segment      (00000000000004E0-00000000000007A0) ...
  5. Creating a new segment  (00000000000004E0-00000000000007A0) ... ... OK
  6. Creating a new segment  (00000000000004E0-000000000000059D) ... ... OK
     Additional segment      (000000000000059D-00000000000007A0) ...
     Deleting segment        (000000000000059D-00000000000007A0) ...
  6. Creating a new segment  (000000000000059D-00000000000007A0) ... ... OK
  7. Creating a new segment  (00000000000005A0-0000000000000730) ... ... OK
     Additional segment      (0000000000000730-00000000000007A0) ...
  8. Creating a new segment  (0000000000000730-00000000000007A0) ... ... OK
     Deleting segment        (0000000000000730-00000000000007A0) ...
  8. Creating a new segment  (0000000000000730-00000000000007A0) ... ... OK
  9. Creating a new segment  (00000000000017A0-00000000000017A4) ... ... OK
     Additional segment      (00000000000017A4-00000000000018B0) ...
     Deleting segment        (00000000000017A4-00000000000018B0) ...
  9. Creating a new segment  (00000000000017A4-00000000000018B0) ... ... OK
 10. Creating a new segment  (00000000000017A4-00000000000017AC) ... ... OK
     Additional segment      (00000000000017AC-00000000000018B0) ...
     Deleting segment        (00000000000017AC-00000000000018B0) ...
 10. Creating a new segment  (00000000000017AC-00000000000018B0) ... ... OK
 11. Creating a new segment  (000000000000188C-0000000000001890) ... ... OK
     Additional segment      (0000000000001890-00000000000018B0) ...
 12. Creating a new segment  (0000000000001890-00000000000018B0) ... ... OK
     Deleting segment        (0000000000001890-00000000000018B0) ...
 12. Creating a new segment  (0000000000001890-00000000000018B0) ... ... OK
 13. Creating a new segment  (00000000000018B0-00000000000018C0) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_heap_modify\lib\armeabi-v7a\libheap_modify.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
j__ZN7_JNIEnv16CallObjectMethodEP8_jobjectP10_jmethodIDz
refList:4
function_head: 0x5e4L
function_head: 0x724L
refList:1
function_head: 0x5e4L
function_head: 0x724L
refList:1
function_head: 0x5e4L
function_head: 0x724L
refList:1
function_head: 0x5e4L
len(ssCallMth):2
callObjectMth:0x63eL---_Z7getImeiP7_JNIEnvP8_jobject
caller function address : 0x5e4L
data:0x620L---content:P
data:0x61eL---content:e
data:0x5f6L---content:=
callObjectMth:0x672L---_Z7getImeiP7_JNIEnvP8_jobject
caller function address : 0x5e4L
data:0x620L---content:P
data:0x61eL---content:e
data:0x5f6L---content:=
source method path......
sink method path......
android_log_print........
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_leak\lib\armeabi-v7a\libleak.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000000500) ... ... OK
  1. Creating a new segment  (0000000000001500-0000000000001604) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (00000000000003B8-00000000000003F8) ... ... OK
     Additional segment      (00000000000003F8-0000000000000500) ...
  3. Creating a new segment  (00000000000003F8-0000000000000500) ... ... OK
  4. Creating a new segment  (0000000000000410-0000000000000418) ... ... OK
     Additional segment      (0000000000000418-0000000000000500) ...
  5. Creating a new segment  (0000000000000418-0000000000000500) ... ... OK
  6. Creating a new segment  (0000000000000418-00000000000004AC) ... ... OK
     Additional segment      (00000000000004AC-0000000000000500) ...
     Deleting segment        (00000000000004AC-0000000000000500) ...
  6. Creating a new segment  (00000000000004AC-0000000000000500) ... ... OK
  7. Creating a new segment  (00000000000004B0-0000000000000500) ... ... OK
  8. Creating a new segment  (0000000000001500-0000000000001504) ... ... OK
     Additional segment      (0000000000001504-0000000000001604) ...
     Deleting segment        (0000000000001504-0000000000001604) ...
  8. Creating a new segment  (0000000000001504-0000000000001604) ... ... OK
  9. Creating a new segment  (0000000000001504-000000000000150C) ... ... OK
     Additional segment      (000000000000150C-0000000000001604) ...
     Deleting segment        (000000000000150C-0000000000001604) ...
  9. Creating a new segment  (000000000000150C-0000000000001604) ... ... OK
 10. Creating a new segment  (00000000000015EC-0000000000001604) ... ... OK
 11. Creating a new segment  (0000000000001604-0000000000001610) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_leak\lib\armeabi-v7a\libleak.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
__android_log_print: 0x4f0L
logging refList:3
logging function_head: 0x488L
logging refList:2
logging function_head: 0x46cL
logging function_head: 0x46cL
logging function_head: 0x488L
logging refList:2
logging function_head: 0x46cL
logging function_head: 0x46cL
logging function_head: 0x488L
logging refList:2
logging function_head: 0x46cL
logging function_head: 0x46cL
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: Java_org_arguslab_native_1leak_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1leak_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1leak_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1leak_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1leak_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1leak_MainActivity_send
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_leak_array\lib\armeabi-v7a\libleak_array.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000000530) ... ... OK
  1. Creating a new segment  (0000000000001530-0000000000001634) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (00000000000003C4-0000000000000404) ... ... OK
     Additional segment      (0000000000000404-0000000000000530) ...
  3. Creating a new segment  (0000000000000404-0000000000000530) ... ... OK
  4. Creating a new segment  (000000000000041C-0000000000000428) ... ... OK
     Additional segment      (0000000000000428-0000000000000530) ...
  5. Creating a new segment  (0000000000000428-0000000000000530) ... ... OK
  6. Creating a new segment  (0000000000000428-0000000000000430) ... ... OK
     Additional segment      (0000000000000430-0000000000000530) ...
     Deleting segment        (0000000000000430-0000000000000530) ...
  6. Creating a new segment  (0000000000000430-0000000000000530) ... ... OK
  7. Creating a new segment  (0000000000000430-00000000000004D4) ... ... OK
     Additional segment      (00000000000004D4-0000000000000530) ...
     Deleting segment        (00000000000004D4-0000000000000530) ...
  7. Creating a new segment  (00000000000004D4-0000000000000530) ... ... OK
  8. Creating a new segment  (00000000000004E0-0000000000000530) ... ... OK
  9. Creating a new segment  (0000000000001530-0000000000001534) ... ... OK
     Additional segment      (0000000000001534-0000000000001634) ...
     Deleting segment        (0000000000001534-0000000000001634) ...
  9. Creating a new segment  (0000000000001534-0000000000001634) ... ... OK
 10. Creating a new segment  (0000000000001534-000000000000153C) ... ... OK
     Additional segment      (000000000000153C-0000000000001634) ...
     Deleting segment        (000000000000153C-0000000000001634) ...
 10. Creating a new segment  (000000000000153C-0000000000001634) ... ... OK
 11. Creating a new segment  (000000000000161C-0000000000001634) ... ... OK
 12. Creating a new segment  (0000000000001634-0000000000001640) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_leak_array\lib\armeabi-v7a\libleak_array.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
__android_log_print: 0x520L
logging refList:3
logging function_head: 0x4c8L
logging refList:1
logging function_head: 0x484L
logging function_head: 0x4c8L
logging refList:1
logging function_head: 0x484L
logging function_head: 0x4c8L
logging refList:1
logging function_head: 0x484L
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: Java_org_arguslab_native_1leak_1array_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1leak_1array_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1leak_1array_MainActivity_send
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_leak_dynamic_register\lib\armeabi-v7a\libleak_dynamic_register.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-00000000000006D0) ... ... OK
  1. Creating a new segment  (00000000000016D0-00000000000017DC) ... ... OK
  2. Creating a new segment  (00000000000027DC-00000000000027E8) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  3. Creating a new segment  (000000000000046C-00000000000004B4) ... ... OK
     Additional segment      (00000000000004B4-00000000000006D0) ...
  4. Creating a new segment  (00000000000004B4-00000000000006D0) ... ... OK
  5. Creating a new segment  (00000000000004D4-00000000000004E0) ... ... OK
     Additional segment      (00000000000004E0-00000000000006D0) ...
  6. Creating a new segment  (00000000000004E0-00000000000006D0) ... ... OK
  7. Creating a new segment  (00000000000004E0-0000000000000551) ... ... OK
     Additional segment      (0000000000000551-00000000000006D0) ...
     Deleting segment        (0000000000000551-00000000000006D0) ...
  7. Creating a new segment  (0000000000000551-00000000000006D0) ... ... OK
  8. Creating a new segment  (0000000000000554-0000000000000664) ... ... OK
     Additional segment      (0000000000000664-00000000000006D0) ...
  9. Creating a new segment  (0000000000000664-00000000000006D0) ... ... OK
 10. Creating a new segment  (0000000000000670-00000000000006D0) ... ... OK
 11. Creating a new segment  (00000000000016D0-00000000000016D4) ... ... OK
     Additional segment      (00000000000016D4-00000000000017DC) ...
     Deleting segment        (00000000000016D4-00000000000017DC) ...
 11. Creating a new segment  (00000000000016D4-00000000000017DC) ... ... OK
 12. Creating a new segment  (00000000000016D4-00000000000016DC) ... ... OK
     Additional segment      (00000000000016DC-00000000000017DC) ...
     Deleting segment        (00000000000016DC-00000000000017DC) ...
 12. Creating a new segment  (00000000000016DC-00000000000017DC) ... ... OK
 13. Creating a new segment  (00000000000017BC-00000000000017C0) ... ... OK
     Additional segment      (00000000000017C0-00000000000017DC) ...
 14. Creating a new segment  (00000000000017C0-00000000000017DC) ... ... OK
     Deleting segment        (00000000000017C0-00000000000017DC) ...
 14. Creating a new segment  (00000000000017C0-00000000000017DC) ... ... OK
     Deleting segment        (00000000000027DC-00000000000027E8) ...
 14. Creating a new segment  (00000000000027DC-00000000000027E8) ... ... OK
 15. Creating a new segment  (00000000000027E8-00000000000027FC) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_leak_dynamic_register\lib\armeabi-v7a\libleak_dynamic_register.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
__android_log_print: 0x6b0L
logging refList:3
logging function_head: 0x5c4L
logging refList:2
logging function_head: 0x5a8L
logging function_head: 0x5a8L
logging function_head: 0x5c4L
logging refList:2
logging function_head: 0x5a8L
logging function_head: 0x5a8L
logging function_head: 0x5c4L
logging refList:2
logging function_head: 0x5a8L
logging function_head: 0x5a8L
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: native_send
__android_log_print method called by method: native_send
__android_log_print method called by method: native_send
__android_log_print method called by method: native_send
__android_log_print method called by method: native_send
__android_log_print method called by method: native_send
JNI_OnLoad exist. resolveing native function now...
entry address:0x5a8L
data:0x4e0L---content:(Ljava/lang/String;)V
data:0x4f6L---content:send
entry address:0x5a8L
data:0x4e0L---content:(Ljava/lang/String;)V
data:0x4f6L---content:send
entry address:0x5a8L
data:0x4e0L---content:(Ljava/lang/String;)V
data:0x4f6L---content:send
entry address:0x5a8L
data:0x4e0L---content:(Ljava/lang/String;)V
data:0x4f6L---content:send
entry address:0x5a8L
data:0x4e0L---content:(Ljava/lang/String;)V
data:0x4f6L---content:send
entry address:0x5a8L
data:0x4e0L---content:(Ljava/lang/String;)V
data:0x4f6L---content:send
JNI_OnLoad exist. resolveing native function now...
JNI_OnLoad exist. resolveing native function now...
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_method_overloading\lib\armeabi-v7a\libmethod_overloading.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-00000000000005E0) ... ... OK
  1. Creating a new segment  (00000000000015E0-00000000000016E4) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (000000000000046C-00000000000004AC) ... ... OK
     Additional segment      (00000000000004AC-00000000000005E0) ...
  3. Creating a new segment  (00000000000004AC-00000000000005E0) ... ... OK
  4. Creating a new segment  (00000000000004C4-00000000000004DA) ... ... OK
     Additional segment      (00000000000004DA-00000000000005E0) ...
  5. Creating a new segment  (00000000000004DA-00000000000005E0) ... ... OK
  6. Creating a new segment  (00000000000004DC-0000000000000588) ... ... OK
     Additional segment      (0000000000000588-00000000000005E0) ...
  7. Creating a new segment  (0000000000000588-00000000000005E0) ... ... OK
  8. Creating a new segment  (0000000000000590-00000000000005E0) ... ... OK
  9. Creating a new segment  (00000000000015E0-00000000000015E4) ... ... OK
     Additional segment      (00000000000015E4-00000000000016E4) ...
     Deleting segment        (00000000000015E4-00000000000016E4) ...
  9. Creating a new segment  (00000000000015E4-00000000000016E4) ... ... OK
 10. Creating a new segment  (00000000000015E4-00000000000015EC) ... ... OK
     Additional segment      (00000000000015EC-00000000000016E4) ...
     Deleting segment        (00000000000015EC-00000000000016E4) ...
 10. Creating a new segment  (00000000000015EC-00000000000016E4) ... ... OK
 11. Creating a new segment  (00000000000016CC-00000000000016E4) ... ... OK
 12. Creating a new segment  (00000000000016E4-00000000000016F0) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_method_overloading\lib\armeabi-v7a\libmethod_overloading.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
__android_log_print: 0x5d0L
logging refList:3
logging function_head: 0x57cL
logging refList:2
logging function_head: 0x530L
logging function_head: 0x548L
logging function_head: 0x57cL
logging refList:2
logging function_head: 0x530L
logging function_head: 0x548L
logging function_head: 0x57cL
logging refList:2
logging function_head: 0x530L
logging function_head: 0x548L
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: Java_org_arguslab_native_1method_1overloading_MainActivity_send__I
__android_log_print method called by method: Java_org_arguslab_native_1method_1overloading_MainActivity_send__I
__android_log_print method called by method: Java_org_arguslab_native_1method_1overloading_MainActivity_send___3I_3Ljava_lang_String_2Ljava_lang_String_2D
__android_log_print method called by method: Java_org_arguslab_native_1method_1overloading_MainActivity_send__I
__android_log_print method called by method: Java_org_arguslab_native_1method_1overloading_MainActivity_send___3I_3Ljava_lang_String_2Ljava_lang_String_2D
__android_log_print method called by method: Java_org_arguslab_native_1method_1overloading_MainActivity_send___3I_3Ljava_lang_String_2Ljava_lang_String_2D
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_multiple_interactions\lib\armeabi-v7a\libmultiple_interactions.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-00000000000007F0) ... ... OK
  1. Creating a new segment  (00000000000017F0-0000000000001900) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (0000000000000500-0000000000000550) ... ... OK
     Additional segment      (0000000000000550-00000000000007F0) ...
  3. Creating a new segment  (0000000000000550-00000000000007F0) ... ... OK
  4. Creating a new segment  (0000000000000578-0000000000000590) ... ... OK
     Additional segment      (0000000000000590-00000000000007F0) ...
  5. Creating a new segment  (0000000000000590-00000000000007F0) ... ... OK
  6. Creating a new segment  (0000000000000590-000000000000061B) ... ... OK
     Additional segment      (000000000000061B-00000000000007F0) ...
     Deleting segment        (000000000000061B-00000000000007F0) ...
  6. Creating a new segment  (000000000000061B-00000000000007F0) ... ... OK
  7. Creating a new segment  (000000000000061C-0000000000000778) ... ... OK
     Additional segment      (0000000000000778-00000000000007F0) ...
  8. Creating a new segment  (0000000000000778-00000000000007F0) ... ... OK
  9. Creating a new segment  (0000000000000780-00000000000007F0) ... ... OK
 10. Creating a new segment  (00000000000017F0-00000000000017F4) ... ... OK
     Additional segment      (00000000000017F4-0000000000001900) ...
     Deleting segment        (00000000000017F4-0000000000001900) ...
 10. Creating a new segment  (00000000000017F4-0000000000001900) ... ... OK
 11. Creating a new segment  (00000000000017F4-00000000000017FC) ... ... OK
     Additional segment      (00000000000017FC-0000000000001900) ...
     Deleting segment        (00000000000017FC-0000000000001900) ...
 11. Creating a new segment  (00000000000017FC-0000000000001900) ... ... OK
 12. Creating a new segment  (00000000000018DC-00000000000018E0) ... ... OK
     Additional segment      (00000000000018E0-0000000000001900) ...
 13. Creating a new segment  (00000000000018E0-0000000000001900) ... ... OK
     Deleting segment        (00000000000018E0-0000000000001900) ...
 13. Creating a new segment  (00000000000018E0-0000000000001900) ... ... OK
 14. Creating a new segment  (0000000000001900-0000000000001914) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_multiple_interactions\lib\armeabi-v7a\libmultiple_interactions.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
j__ZN7_JNIEnv14CallVoidMethodEP8_jobjectP10_jmethodIDz
refList:3
function_head: 0x760L
refList:1
function_head: 0x670L
function_head: 0x760L
refList:1
function_head: 0x670L
function_head: 0x760L
refList:1
function_head: 0x670L
len(ssCallMth):1
callObjectMth:0x6dcL---Java_org_arguslab_native_1multiple_1interactions_MainActivity_propagateImei
caller function address : 0x670L
data:0x694L---content:l
data:0x692L---content:j
__android_log_print: 0x7e0L
logging refList:3
logging function_head: 0x748L
logging refList:2
logging function_head: 0x72cL
logging function_head: 0x72cL
logging function_head: 0x748L
logging refList:2
logging function_head: 0x72cL
logging function_head: 0x72cL
logging function_head: 0x748L
logging refList:2
logging function_head: 0x72cL
logging function_head: 0x72cL
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1interactions_MainActivity_leakImei
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1interactions_MainActivity_leakImei
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1interactions_MainActivity_leakImei
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1interactions_MainActivity_leakImei
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1interactions_MainActivity_leakImei
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1interactions_MainActivity_leakImei
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_multiple_libraries\lib\armeabi-v7a\libfoo.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-00000000000004A0) ... ... OK
  1. Creating a new segment  (00000000000014A0-00000000000015A4) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (0000000000000384-00000000000003BC) ... ... OK
     Additional segment      (00000000000003BC-00000000000004A0) ...
  3. Creating a new segment  (00000000000003BC-00000000000004A0) ... ... OK
  4. Creating a new segment  (00000000000003D4-00000000000003E2) ... ... OK
     Additional segment      (00000000000003E2-00000000000004A0) ...
  5. Creating a new segment  (00000000000003E2-00000000000004A0) ... ... OK
  6. Creating a new segment  (00000000000003E4-000000000000044C) ... ... OK
     Additional segment      (000000000000044C-00000000000004A0) ...
  7. Creating a new segment  (000000000000044C-00000000000004A0) ... ... OK
  8. Creating a new segment  (0000000000000450-00000000000004A0) ... ... OK
  9. Creating a new segment  (00000000000014A0-00000000000014A4) ... ... OK
     Additional segment      (00000000000014A4-00000000000015A4) ...
     Deleting segment        (00000000000014A4-00000000000015A4) ...
  9. Creating a new segment  (00000000000014A4-00000000000015A4) ... ... OK
 10. Creating a new segment  (00000000000014A4-00000000000014AC) ... ... OK
     Additional segment      (00000000000014AC-00000000000015A4) ...
     Deleting segment        (00000000000014AC-00000000000015A4) ...
 10. Creating a new segment  (00000000000014AC-00000000000015A4) ... ... OK
 11. Creating a new segment  (000000000000158C-00000000000015A4) ... ... OK
 12. Creating a new segment  (00000000000015A4-00000000000015B0) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_multiple_libraries\lib\armeabi-v7a\libfoo.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
__android_log_print: 0x490L
logging refList:3
logging function_head: 0x428L
logging function_head: 0x428L
logging function_head: 0x428L
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1libraries_MainActivity_fooSend
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1libraries_MainActivity_fooSend
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1libraries_MainActivity_fooSend
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_multiple_libraries\lib\armeabi-v7a\libmaster.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000000520) ... ... OK
  1. Creating a new segment  (0000000000001520-0000000000001624) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (00000000000003D0-0000000000000410) ... ... OK
     Additional segment      (0000000000000410-0000000000000520) ...
  3. Creating a new segment  (0000000000000410-0000000000000520) ... ... OK
  4. Creating a new segment  (0000000000000428-0000000000000432) ... ... OK
     Additional segment      (0000000000000432-0000000000000520) ...
  5. Creating a new segment  (0000000000000432-0000000000000520) ... ... OK
  6. Creating a new segment  (0000000000000434-00000000000004C8) ... ... OK
     Additional segment      (00000000000004C8-0000000000000520) ...
  7. Creating a new segment  (00000000000004C8-0000000000000520) ... ... OK
  8. Creating a new segment  (00000000000004D0-0000000000000520) ... ... OK
  9. Creating a new segment  (0000000000001520-0000000000001524) ... ... OK
     Additional segment      (0000000000001524-0000000000001624) ...
     Deleting segment        (0000000000001524-0000000000001624) ...
  9. Creating a new segment  (0000000000001524-0000000000001624) ... ... OK
 10. Creating a new segment  (0000000000001524-000000000000152C) ... ... OK
     Additional segment      (000000000000152C-0000000000001624) ...
     Deleting segment        (000000000000152C-0000000000001624) ...
 10. Creating a new segment  (000000000000152C-0000000000001624) ... ... OK
 11. Creating a new segment  (000000000000160C-0000000000001624) ... ... OK
 12. Creating a new segment  (0000000000001624-0000000000001630) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_multiple_libraries\lib\armeabi-v7a\libmaster.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
__android_log_print: 0x510L
logging refList:3
logging function_head: 0x4a4L
logging refList:2
logging function_head: 0x488L
logging function_head: 0x488L
logging function_head: 0x4a4L
logging refList:2
logging function_head: 0x488L
logging function_head: 0x488L
logging function_head: 0x4a4L
logging refList:2
logging function_head: 0x488L
logging function_head: 0x488L
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1libraries_MainActivity_masterSend
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1libraries_MainActivity_masterSend
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1libraries_MainActivity_masterSend
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1libraries_MainActivity_masterSend
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1libraries_MainActivity_masterSend
__android_log_print method called by method: Java_org_arguslab_native_1multiple_1libraries_MainActivity_masterSend
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_noleak\lib\armeabi-v7a\libnoleak.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-00000000000004A0) ... ... OK
  1. Creating a new segment  (00000000000014A0-00000000000015A4) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (0000000000000378-00000000000003B0) ... ... OK
     Additional segment      (00000000000003B0-00000000000004A0) ...
  3. Creating a new segment  (00000000000003B0-00000000000004A0) ... ... OK
  4. Creating a new segment  (00000000000003C8-00000000000003D9) ... ... OK
     Additional segment      (00000000000003D9-00000000000004A0) ...
  5. Creating a new segment  (00000000000003D9-00000000000004A0) ... ... OK
  6. Creating a new segment  (00000000000003DC-0000000000000444) ... ... OK
     Additional segment      (0000000000000444-00000000000004A0) ...
  7. Creating a new segment  (0000000000000444-00000000000004A0) ... ... OK
  8. Creating a new segment  (0000000000000450-00000000000004A0) ... ... OK
  9. Creating a new segment  (00000000000014A0-00000000000014A4) ... ... OK
     Additional segment      (00000000000014A4-00000000000015A4) ...
     Deleting segment        (00000000000014A4-00000000000015A4) ...
  9. Creating a new segment  (00000000000014A4-00000000000015A4) ... ... OK
 10. Creating a new segment  (00000000000014A4-00000000000014AC) ... ... OK
     Additional segment      (00000000000014AC-00000000000015A4) ...
     Deleting segment        (00000000000014AC-00000000000015A4) ...
 10. Creating a new segment  (00000000000014AC-00000000000015A4) ... ... OK
 11. Creating a new segment  (000000000000158C-00000000000015A4) ... ... OK
 12. Creating a new segment  (00000000000015A4-00000000000015B0) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_noleak\lib\armeabi-v7a\libnoleak.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
__android_log_print: 0x490L
logging refList:3
logging function_head: 0x420L
logging function_head: 0x420L
logging function_head: 0x420L
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: Java_org_arguslab_native_1noleak_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1noleak_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1noleak_MainActivity_send
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_noleak_array\lib\armeabi-v7a\libnoleak_array.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000000530) ... ... OK
  1. Creating a new segment  (0000000000001530-0000000000001634) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (00000000000003C8-0000000000000408) ... ... OK
     Additional segment      (0000000000000408-0000000000000530) ...
  3. Creating a new segment  (0000000000000408-0000000000000530) ... ... OK
  4. Creating a new segment  (0000000000000420-000000000000042C) ... ... OK
     Additional segment      (000000000000042C-0000000000000530) ...
  5. Creating a new segment  (000000000000042C-0000000000000530) ... ... OK
  6. Creating a new segment  (000000000000042C-0000000000000436) ... ... OK
     Additional segment      (0000000000000436-0000000000000530) ...
     Deleting segment        (0000000000000436-0000000000000530) ...
  6. Creating a new segment  (0000000000000436-0000000000000530) ... ... OK
  7. Creating a new segment  (0000000000000438-00000000000004DC) ... ... OK
     Additional segment      (00000000000004DC-0000000000000530) ...
  8. Creating a new segment  (00000000000004DC-0000000000000530) ... ... OK
  9. Creating a new segment  (00000000000004E0-0000000000000530) ... ... OK
 10. Creating a new segment  (0000000000001530-0000000000001534) ... ... OK
     Additional segment      (0000000000001534-0000000000001634) ...
     Deleting segment        (0000000000001534-0000000000001634) ...
 10. Creating a new segment  (0000000000001534-0000000000001634) ... ... OK
 11. Creating a new segment  (0000000000001534-000000000000153C) ... ... OK
     Additional segment      (000000000000153C-0000000000001634) ...
     Deleting segment        (000000000000153C-0000000000001634) ...
 11. Creating a new segment  (000000000000153C-0000000000001634) ... ... OK
 12. Creating a new segment  (000000000000161C-0000000000001634) ... ... OK
 13. Creating a new segment  (0000000000001634-0000000000001640) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_noleak_array\lib\armeabi-v7a\libnoleak_array.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
__android_log_print: 0x520L
logging refList:3
logging function_head: 0x4d0L
logging refList:1
logging function_head: 0x48cL
logging function_head: 0x4d0L
logging refList:1
logging function_head: 0x48cL
logging function_head: 0x4d0L
logging refList:1
logging function_head: 0x48cL
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: Java_org_arguslab_native_1noleak_1array_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1noleak_1array_MainActivity_send
__android_log_print method called by method: Java_org_arguslab_native_1noleak_1array_MainActivity_send
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_nosource\lib\armeabi-v7a\libnosource.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000000440) ... ... OK
  1. Creating a new segment  (0000000000001440-0000000000001540) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (0000000000000350-0000000000000388) ... ... OK
     Additional segment      (0000000000000388-0000000000000440) ...
  3. Creating a new segment  (0000000000000388-0000000000000440) ... ... OK
  4. Creating a new segment  (0000000000000398-00000000000003A2) ... ... OK
     Additional segment      (00000000000003A2-0000000000000440) ...
  5. Creating a new segment  (00000000000003A2-0000000000000440) ... ... OK
  6. Creating a new segment  (00000000000003A4-00000000000003F8) ... ... OK
     Additional segment      (00000000000003F8-0000000000000440) ...
  7. Creating a new segment  (00000000000003F8-0000000000000440) ... ... OK
  8. Creating a new segment  (0000000000000400-0000000000000440) ... ... OK
  9. Creating a new segment  (0000000000001440-0000000000001444) ... ... OK
     Additional segment      (0000000000001444-0000000000001540) ...
     Deleting segment        (0000000000001444-0000000000001540) ...
  9. Creating a new segment  (0000000000001444-0000000000001540) ... ... OK
 10. Creating a new segment  (0000000000001444-000000000000144C) ... ... OK
     Additional segment      (000000000000144C-0000000000001540) ...
     Deleting segment        (000000000000144C-0000000000001540) ...
 10. Creating a new segment  (000000000000144C-0000000000001540) ... ... OK
 11. Creating a new segment  (000000000000152C-0000000000001540) ... ... OK
 12. Creating a new segment  (0000000000001540-0000000000001548) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_nosource\lib\armeabi-v7a\libnosource.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
source method path......
sink method path......
android_log_print........
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_pure\lib\armeabi-v7a\libnative-activity.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000002670) ... ... OK
  1. Creating a new segment  (0000000000003670-000000000000389C) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (000000000000101C-0000000000001134) ... ... OK
     Additional segment      (0000000000001134-0000000000002670) ...
  3. Creating a new segment  (0000000000001134-0000000000002670) ... ... OK
  4. Creating a new segment  (0000000000001354-0000000000001474) ... ... OK
     Additional segment      (0000000000001474-0000000000002670) ...
  5. Creating a new segment  (0000000000001474-0000000000002670) ... ... OK
  6. Creating a new segment  (0000000000001478-00000000000015F5) ... ... OK
     Additional segment      (00000000000015F5-0000000000002670) ...
  7. Creating a new segment  (00000000000015F5-0000000000002670) ... ... OK
  8. Creating a new segment  (00000000000015F8-0000000000002208) ... ... OK
     Additional segment      (0000000000002208-0000000000002670) ...
  9. Creating a new segment  (0000000000002208-0000000000002670) ... ... OK
 10. Creating a new segment  (0000000000002210-0000000000002670) ... ... OK
 11. Creating a new segment  (0000000000003670-0000000000003674) ... ... OK
     Additional segment      (0000000000003674-000000000000389C) ...
     Deleting segment        (0000000000003674-000000000000389C) ...
 11. Creating a new segment  (0000000000003674-000000000000389C) ... ... OK
 12. Creating a new segment  (0000000000003674-000000000000367C) ... ... OK
     Additional segment      (000000000000367C-000000000000389C) ...
     Deleting segment        (000000000000367C-000000000000389C) ...
 12. Creating a new segment  (000000000000367C-000000000000389C) ... ... OK
 13. Creating a new segment  (0000000000003774-0000000000003780) ... ... OK
     Additional segment      (0000000000003780-000000000000389C) ...
 14. Creating a new segment  (0000000000003780-000000000000389C) ... ... OK
     Deleting segment        (0000000000003780-000000000000389C) ...
 14. Creating a new segment  (0000000000003780-000000000000389C) ... ... OK
 15. Creating a new segment  (000000000000389C-0000000000003988) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_pure\lib\armeabi-v7a\libnative-activity.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
__android_log_print: 0x2330L
logging refList:7
logging function_head: 0x163cL
logging function_head: 0x18e0L
logging function_head: 0x1a38L
logging function_head: 0x1c0cL
logging function_head: 0x21f0L
logging refList:1
logging function_head: 0x1f04L
logging refList:13
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1db8L
logging refList:0
logging function_head: 0x1df2L
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1e90L
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1f6cL
logging refList:2
logging function_head: 0x1e4cL
logging refList:0
logging function_head: 0x1e52L
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x2008L
logging refList:4
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1ee2L
logging refList:0
logging function_head: 0x1eeaL
logging refList:0
logging function_head: 0x21f0L
logging refList:1
logging function_head: 0x1f04L
logging refList:13
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1db8L
logging refList:0
logging function_head: 0x1df2L
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1e90L
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1f6cL
logging refList:2
logging function_head: 0x1e4cL
logging refList:0
logging function_head: 0x1e52L
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x2008L
logging refList:4
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1ee2L
logging refList:0
logging function_head: 0x1eeaL
logging refList:0
logging function_head: 0x21f0L
logging refList:1
logging function_head: 0x1f04L
logging refList:13
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1db8L
logging refList:0
logging function_head: 0x1df2L
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1e90L
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1f6cL
logging refList:2
logging function_head: 0x1e4cL
logging refList:0
logging function_head: 0x1e52L
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x2008L
logging refList:4
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0xffffffffffffffffL
logging refList:0
logging function_head: 0x1ee2L
logging refList:0
logging function_head: 0x1eeaL
logging refList:0
j__ZN7_JNIEnv16CallObjectMethodEP8_jobjectP10_jmethodIDz
refList:4
function_head: 0x17f4L
function_head: 0x21a8L
refList:1
function_head: 0x17f4L
function_head: 0x21a8L
refList:1
function_head: 0x17f4L
function_head: 0x21a8L
refList:1
function_head: 0x17f4L
len(ssCallMth):2
callObjectMth:0x184eL---_Z7getImeiP7_JNIEnvP8_jobject
caller function address : 0x17f4L
data:0x1830L---content:W
data:0x1806L---content:.
callObjectMth:0x1882L---_Z7getImeiP7_JNIEnvP8_jobject
caller function address : 0x17f4L
data:0x1830L---content:W
data:0x1806L---content:.
source method path......
sink method path......
android_log_print........
__android_log_print method called by method: sub_1E90
__android_log_print method called by method: sub_1DB8
__android_log_print method called by method: sub_1DF2
__android_log_print method called by method: sub_1EE2
__android_log_print method called by method: sub_1E52
__android_log_print method called by method: sub_1EEA
__android_log_print method called by method: sub_1E4C
__android_log_print method called by method: sub_1DB8
__android_log_print method called by method: _Z12handle_inputP11android_appP11AInputEvent
__android_log_print method called by method: sub_1E90
__android_log_print method called by method: sub_1EE2
__android_log_print method called by method: sub_1EE2
__android_log_print method called by method: ANativeActivity_onCreate
__android_log_print method called by method: sub_1EEA
__android_log_print method called by method: sub_1E90
__android_log_print method called by method: sub_1E52
__android_log_print method called by method: _Z12init_displayP6engine
__android_log_print method called by method: sub_1DF2
__android_log_print method called by method: sub_1E52
__android_log_print method called by method: sub_1E4C
__android_log_print method called by method: sub_1EEA
__android_log_print method called by method: sub_1E4C
__android_log_print method called by method: sub_1DB8
__android_log_print method called by method: android_app_read_cmd
__android_log_print method called by method: sub_1DF2
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_pure_direct\lib\armeabi\libnative-activity.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000002802) ... ... OK
  1. Creating a new segment  (0000000000003E1C-0000000000004031) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (00000000000009DC-0000000000000B28) ... ... OK
     Additional segment      (0000000000000B28-0000000000002802) ...
  3. Creating a new segment  (0000000000000B28-0000000000002802) ... ... OK
  4. Creating a new segment  (0000000000000B28-000000000000248C) ... ... OK
     Additional segment      (000000000000248C-0000000000002802) ...
     Deleting segment        (000000000000248C-0000000000002802) ...
  4. Creating a new segment  (000000000000248C-0000000000002802) ... ... OK
  5. Creating a new segment  (000000000000248C-0000000000002588) ... ... OK
     Additional segment      (0000000000002588-0000000000002802) ...
     Deleting segment        (0000000000002588-0000000000002802) ...
  5. Creating a new segment  (0000000000002588-0000000000002802) ... ... OK
  6. Creating a new segment  (0000000000002588-0000000000002738) ... ... OK
     Additional segment      (0000000000002738-0000000000002802) ...
     Deleting segment        (0000000000002738-0000000000002802) ...
  6. Creating a new segment  (0000000000002738-0000000000002802) ... ... OK
     Deleting segment        (0000000000002738-0000000000002802) ...
  6. Creating a new segment  (0000000000002738-0000000000002802) ... ... OK
  7. Creating a new segment  (0000000000003E1C-0000000000003E24) ... ... OK
     Additional segment      (0000000000003E24-0000000000004031) ...
     Deleting segment        (0000000000003E24-0000000000004031) ...
  7. Creating a new segment  (0000000000003E24-0000000000004031) ... ... OK
  8. Creating a new segment  (0000000000003E24-0000000000003E28) ... ... OK
     Additional segment      (0000000000003E28-0000000000004031) ...
     Deleting segment        (0000000000003E28-0000000000004031) ...
  8. Creating a new segment  (0000000000003E28-0000000000004031) ... ... OK
  9. Creating a new segment  (0000000000003F68-0000000000004000) ... ... OK
     Additional segment      (0000000000004000-0000000000004031) ...
 10. Creating a new segment  (0000000000004000-0000000000004031) ... ... OK
 11. Creating a new segment  (0000000000004000-000000000000402C) ... ... OK
     Additional segment      (000000000000402C-0000000000004031) ...
     Deleting segment        (000000000000402C-0000000000004031) ...
 11. Creating a new segment  (000000000000402C-0000000000004031) ... ... OK
     Deleting segment        (000000000000402C-0000000000004031) ...
 11. Creating a new segment  (000000000000402C-0000000000004031) ... ... OK
 12. Creating a new segment  (0000000000004034-000000000000409C) ... ... OK
 13. Creating a new segment  (000000000000409C-00000000000040A8) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_pure_direct\lib\armeabi\libnative-activity.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
j__ZN7_JNIEnv16CallObjectMethodEP8_jobjectP10_jmethodIDz
refList:2
function_head: 0xb80L
function_head: 0xb80L
len(ssCallMth):2
callObjectMth:0xbfeL---_Z7getImeiP7_JNIEnvP8_jobject
caller function address : 0xb80L
data:0xbf2L---content:()Ljava/lang/String;
data:0xbf0L---content:getDeviceId
data:0xbe2L---content:android/telephony/TelephonyManager
data:0xbb8L---content:Ljava/lang/String;
data:0xbb6L---content:TELEPHONY_SERVICE
data:0xba0L---content:getSystemService
callObjectMth:0xbd8L---_Z7getImeiP7_JNIEnvP8_jobject
caller function address : 0xb80L
data:0xbb8L---content:Ljava/lang/String;
data:0xbb6L---content:TELEPHONY_SERVICE
data:0xba0L---content:getSystemService
__android_log_print: 0xa20L
logging refList:25
logging function_head: 0xcd8L
logging function_head: 0xe24L
logging refList:0
logging function_head: 0xe24L
logging refList:0
logging function_head: 0xed0L
logging refList:0
logging function_head: 0xf0cL
logging refList:0
logging function_head: 0xf4cL
logging refList:0
logging function_head: 0xf88L
logging refList:0
logging function_head: 0xfb8L
logging refList:0
logging function_head: 0xff8L
logging refList:0
logging function_head: 0x1034L
logging refList:0
logging function_head: 0x1080L
logging refList:0
logging function_head: 0x10f4L
logging refList:0
logging function_head: 0x1144L
logging refList:0
logging function_head: 0x1190L
logging refList:0
logging function_head: 0x11f0L
logging refList:0
logging function_head: 0x1238L
logging refList:0
logging function_head: 0x1274L
logging refList:0
logging function_head: 0x12c4L
logging refList:0
logging function_head: 0x12f8L
logging refList:0
logging function_head: 0x12f8L
logging refList:0
logging function_head: 0x12f8L
logging refList:0
logging function_head: 0x12f8L
logging refList:0
logging function_head: 0x12f8L
logging refList:0
logging function_head: 0x1448L
logging refList:0
logging function_head: 0x1448L
logging refList:0
kind: UNIQUE_IDENTIFIER
1---0xe58L---func namesub_E24--segname:.text
source method path......
paths len:1
mth len:2
_Z7getImeiP7_JNIEnvP8_jobject@UNIQUE_IDENTIFIER---0xb80L -> 
sub_E24@UNIQUE_IDENTIFIER---0xe24L -> 
sink method path......
android_log_print........
__android_log_print method called by method: sub_E24
__android_log_print method called by method: sub_12C4
__android_log_print method called by method: sub_E24
__android_log_print method called by method: sub_12F8
__android_log_print method called by method: sub_ED0
__android_log_print method called by method: sub_12F8
__android_log_print method called by method: sub_F0C
__android_log_print method called by method: sub_12F8
__android_log_print method called by method: sub_F4C
__android_log_print method called by method: sub_12F8
__android_log_print method called by method: sub_F88
__android_log_print method called by method: sub_12F8
__android_log_print method called by method: sub_FB8
__android_log_print method called by method: sub_1448
__android_log_print method called by method: sub_FF8
__android_log_print method called by method: sub_1448
__android_log_print method called by method: sub_1034
__android_log_print method called by method: sub_1080
__android_log_print method called by method: sub_10F4
__android_log_print method called by method: sub_1144
__android_log_print method called by method: sub_1190
__android_log_print method called by method: ANativeActivity_onCreate
__android_log_print method called by method: sub_11F0
__android_log_print method called by method: sub_1238
__android_log_print method called by method: sub_1274
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_pure_direct_customized\lib\armeabi\libnative-activity.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000002805) ... ... OK
  1. Creating a new segment  (0000000000003E1C-0000000000004031) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (00000000000009D8-0000000000000B24) ... ... OK
     Additional segment      (0000000000000B24-0000000000002805) ...
  3. Creating a new segment  (0000000000000B24-0000000000002805) ... ... OK
  4. Creating a new segment  (0000000000000B24-0000000000002484) ... ... OK
     Additional segment      (0000000000002484-0000000000002805) ...
     Deleting segment        (0000000000002484-0000000000002805) ...
  4. Creating a new segment  (0000000000002484-0000000000002805) ... ... OK
  5. Creating a new segment  (0000000000002484-0000000000002580) ... ... OK
     Additional segment      (0000000000002580-0000000000002805) ...
     Deleting segment        (0000000000002580-0000000000002805) ...
  5. Creating a new segment  (0000000000002580-0000000000002805) ... ... OK
  6. Creating a new segment  (0000000000002580-0000000000002730) ... ... OK
     Additional segment      (0000000000002730-0000000000002805) ...
     Deleting segment        (0000000000002730-0000000000002805) ...
  6. Creating a new segment  (0000000000002730-0000000000002805) ... ... OK
     Deleting segment        (0000000000002730-0000000000002805) ...
  6. Creating a new segment  (0000000000002730-0000000000002805) ... ... OK
  7. Creating a new segment  (0000000000003E1C-0000000000003E24) ... ... OK
     Additional segment      (0000000000003E24-0000000000004031) ...
     Deleting segment        (0000000000003E24-0000000000004031) ...
  7. Creating a new segment  (0000000000003E24-0000000000004031) ... ... OK
  8. Creating a new segment  (0000000000003E24-0000000000003E28) ... ... OK
     Additional segment      (0000000000003E28-0000000000004031) ...
     Deleting segment        (0000000000003E28-0000000000004031) ...
  8. Creating a new segment  (0000000000003E28-0000000000004031) ... ... OK
  9. Creating a new segment  (0000000000003F68-0000000000004000) ... ... OK
     Additional segment      (0000000000004000-0000000000004031) ...
 10. Creating a new segment  (0000000000004000-0000000000004031) ... ... OK
 11. Creating a new segment  (0000000000004000-000000000000402C) ... ... OK
     Additional segment      (000000000000402C-0000000000004031) ...
     Deleting segment        (000000000000402C-0000000000004031) ...
 11. Creating a new segment  (000000000000402C-0000000000004031) ... ... OK
     Deleting segment        (000000000000402C-0000000000004031) ...
 11. Creating a new segment  (000000000000402C-0000000000004031) ... ... OK
 12. Creating a new segment  (0000000000004034-000000000000409C) ... ... OK
 13. Creating a new segment  (000000000000409C-00000000000040A8) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_pure_direct_customized\lib\armeabi\libnative-activity.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
j__ZN7_JNIEnv16CallObjectMethodEP8_jobjectP10_jmethodIDz
refList:2
function_head: 0xb7cL
function_head: 0xb7cL
len(ssCallMth):2
callObjectMth:0xbd4L---_Z7getImeiP7_JNIEnvP8_jobject
caller function address : 0xb7cL
data:0xbb4L---content:Ljava/lang/String;
data:0xbb2L---content:TELEPHONY_SERVICE
data:0xb9cL---content:getSystemService
callObjectMth:0xbfaL---_Z7getImeiP7_JNIEnvP8_jobject
caller function address : 0xb7cL
data:0xbeeL---content:()Ljava/lang/String;
data:0xbecL---content:getDeviceId
data:0xbdeL---content:android/telephony/TelephonyManager
data:0xbb4L---content:Ljava/lang/String;
data:0xbb2L---content:TELEPHONY_SERVICE
data:0xb9cL---content:getSystemService
__android_log_print: 0xa1cL
logging refList:25
logging function_head: 0xcd4L
logging function_head: 0xe1cL
logging refList:0
logging function_head: 0xe1cL
logging refList:0
logging function_head: 0xec8L
logging refList:0
logging function_head: 0xf04L
logging refList:0
logging function_head: 0xf44L
logging refList:0
logging function_head: 0xf80L
logging refList:0
logging function_head: 0xfb0L
logging refList:0
logging function_head: 0xff0L
logging refList:0
logging function_head: 0x102cL
logging refList:0
logging function_head: 0x1078L
logging refList:0
logging function_head: 0x10ecL
logging refList:0
logging function_head: 0x113cL
logging refList:0
logging function_head: 0x1188L
logging refList:0
logging function_head: 0x11e8L
logging refList:0
logging function_head: 0x1230L
logging refList:0
logging function_head: 0x126cL
logging refList:0
logging function_head: 0x12bcL
logging refList:0
logging function_head: 0x12f0L
logging refList:0
logging function_head: 0x12f0L
logging refList:0
logging function_head: 0x12f0L
logging refList:0
logging function_head: 0x12f0L
logging refList:0
logging function_head: 0x12f0L
logging refList:0
logging function_head: 0x1440L
logging refList:0
logging function_head: 0x1440L
logging refList:0
kind: UNIQUE_IDENTIFIER
1---0xe50L---func namesub_E1C--segname:.text
source method path......
paths len:1
mth len:2
_Z7getImeiP7_JNIEnvP8_jobject@UNIQUE_IDENTIFIER---0xb7cL -> 
sub_E1C@UNIQUE_IDENTIFIER---0xe1cL -> 
sink method path......
android_log_print........
__android_log_print method called by method: sub_E1C
__android_log_print method called by method: sub_12BC
__android_log_print method called by method: sub_E1C
__android_log_print method called by method: sub_12F0
__android_log_print method called by method: sub_EC8
__android_log_print method called by method: sub_12F0
__android_log_print method called by method: sub_F04
__android_log_print method called by method: sub_12F0
__android_log_print method called by method: sub_F44
__android_log_print method called by method: sub_12F0
__android_log_print method called by method: sub_F80
__android_log_print method called by method: sub_12F0
__android_log_print method called by method: sub_FB0
__android_log_print method called by method: sub_1440
__android_log_print method called by method: sub_FF0
__android_log_print method called by method: sub_1440
__android_log_print method called by method: sub_102C
__android_log_print method called by method: sub_1078
__android_log_print method called by method: sub_10EC
__android_log_print method called by method: NativeActivity_Entry
__android_log_print method called by method: sub_113C
__android_log_print method called by method: sub_1188
__android_log_print method called by method: sub_11E8
__android_log_print method called by method: sub_1230
__android_log_print method called by method: sub_126C
writing results....
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_set_field_from_arg\lib\armeabi-v7a\libset_field_from_arg.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-00000000000004D0) ... ... OK
  1. Creating a new segment  (00000000000014D0-00000000000015D0) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (0000000000000368-00000000000003A0) ... ... OK
     Additional segment      (00000000000003A0-00000000000004D0) ...
  3. Creating a new segment  (00000000000003A0-00000000000004D0) ... ... OK
  4. Creating a new segment  (00000000000003B0-00000000000003BC) ... ... OK
     Additional segment      (00000000000003BC-00000000000004D0) ...
  5. Creating a new segment  (00000000000003BC-00000000000004D0) ... ... OK
  6. Creating a new segment  (00000000000003BC-00000000000003ED) ... ... OK
     Additional segment      (00000000000003ED-00000000000004D0) ...
     Deleting segment        (00000000000003ED-00000000000004D0) ...
  6. Creating a new segment  (00000000000003ED-00000000000004D0) ... ... OK
  7. Creating a new segment  (00000000000003F0-0000000000000490) ... ... OK
     Additional segment      (0000000000000490-00000000000004D0) ...
  8. Creating a new segment  (0000000000000490-00000000000004D0) ... ... OK
     Deleting segment        (0000000000000490-00000000000004D0) ...
  8. Creating a new segment  (0000000000000490-00000000000004D0) ... ... OK
  9. Creating a new segment  (00000000000014D0-00000000000014D4) ... ... OK
     Additional segment      (00000000000014D4-00000000000015D0) ...
     Deleting segment        (00000000000014D4-00000000000015D0) ...
  9. Creating a new segment  (00000000000014D4-00000000000015D0) ... ... OK
 10. Creating a new segment  (00000000000014D4-00000000000014DC) ... ... OK
     Additional segment      (00000000000014DC-00000000000015D0) ...
     Deleting segment        (00000000000014DC-00000000000015D0) ...
 10. Creating a new segment  (00000000000014DC-00000000000015D0) ... ... OK
 11. Creating a new segment  (00000000000015BC-00000000000015D0) ... ... OK
 12. Creating a new segment  (00000000000015D0-00000000000015D8) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_set_field_from_arg\lib\armeabi-v7a\libset_field_from_arg.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
source method path......
sink method path......
android_log_print........
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_set_field_from_arg_field\lib\armeabi-v7a\libset_field_from_arg_field.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-00000000000004F0) ... ... OK
  1. Creating a new segment  (00000000000014F0-00000000000015F0) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (0000000000000374-00000000000003AC) ... ... OK
     Additional segment      (00000000000003AC-00000000000004F0) ...
  3. Creating a new segment  (00000000000003AC-00000000000004F0) ... ... OK
  4. Creating a new segment  (00000000000003BC-00000000000003C8) ... ... OK
     Additional segment      (00000000000003C8-00000000000004F0) ...
  5. Creating a new segment  (00000000000003C8-00000000000004F0) ... ... OK
  6. Creating a new segment  (00000000000003C8-00000000000003FF) ... ... OK
     Additional segment      (00000000000003FF-00000000000004F0) ...
     Deleting segment        (00000000000003FF-00000000000004F0) ...
  6. Creating a new segment  (00000000000003FF-00000000000004F0) ... ... OK
  7. Creating a new segment  (0000000000000400-00000000000004B0) ... ... OK
     Additional segment      (00000000000004B0-00000000000004F0) ...
  8. Creating a new segment  (00000000000004B0-00000000000004F0) ... ... OK
     Deleting segment        (00000000000004B0-00000000000004F0) ...
  8. Creating a new segment  (00000000000004B0-00000000000004F0) ... ... OK
  9. Creating a new segment  (00000000000014F0-00000000000014F4) ... ... OK
     Additional segment      (00000000000014F4-00000000000015F0) ...
     Deleting segment        (00000000000014F4-00000000000015F0) ...
  9. Creating a new segment  (00000000000014F4-00000000000015F0) ... ... OK
 10. Creating a new segment  (00000000000014F4-00000000000014FC) ... ... OK
     Additional segment      (00000000000014FC-00000000000015F0) ...
     Deleting segment        (00000000000014FC-00000000000015F0) ...
 10. Creating a new segment  (00000000000014FC-00000000000015F0) ... ... OK
 11. Creating a new segment  (00000000000015DC-00000000000015F0) ... ... OK
 12. Creating a new segment  (00000000000015F0-00000000000015F8) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_set_field_from_arg_field\lib\armeabi-v7a\libset_field_from_arg_field.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
source method path......
sink method path......
android_log_print........
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_set_field_from_native\lib\armeabi-v7a\libset_field_from_native.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-0000000000000990) ... ... OK
  1. Creating a new segment  (0000000000001990-0000000000001AA4) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (00000000000004B0-0000000000000500) ... ... OK
     Additional segment      (0000000000000500-0000000000000990) ...
  3. Creating a new segment  (0000000000000500-0000000000000990) ... ... OK
  4. Creating a new segment  (0000000000000530-0000000000000560) ... ... OK
     Additional segment      (0000000000000560-0000000000000990) ...
  5. Creating a new segment  (0000000000000560-0000000000000990) ... ... OK
  6. Creating a new segment  (0000000000000560-0000000000000693) ... ... OK
     Additional segment      (0000000000000693-0000000000000990) ...
     Deleting segment        (0000000000000693-0000000000000990) ...
  6. Creating a new segment  (0000000000000693-0000000000000990) ... ... OK
  7. Creating a new segment  (0000000000000694-0000000000000904) ... ... OK
     Additional segment      (0000000000000904-0000000000000990) ...
  8. Creating a new segment  (0000000000000904-0000000000000990) ... ... OK
  9. Creating a new segment  (0000000000000910-0000000000000990) ... ... OK
 10. Creating a new segment  (0000000000001990-0000000000001994) ... ... OK
     Additional segment      (0000000000001994-0000000000001AA4) ...
     Deleting segment        (0000000000001994-0000000000001AA4) ...
 10. Creating a new segment  (0000000000001994-0000000000001AA4) ... ... OK
 11. Creating a new segment  (0000000000001994-000000000000199C) ... ... OK
     Additional segment      (000000000000199C-0000000000001AA4) ...
     Deleting segment        (000000000000199C-0000000000001AA4) ...
 11. Creating a new segment  (000000000000199C-0000000000001AA4) ... ... OK
 12. Creating a new segment  (0000000000001A7C-0000000000001A80) ... ... OK
     Additional segment      (0000000000001A80-0000000000001AA4) ...
 13. Creating a new segment  (0000000000001A80-0000000000001AA4) ... ... OK
     Deleting segment        (0000000000001A80-0000000000001AA4) ...
 13. Creating a new segment  (0000000000001A80-0000000000001AA4) ... ... OK
 14. Creating a new segment  (0000000000001AA4-0000000000001AB4) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_set_field_from_native\lib\armeabi-v7a\libset_field_from_native.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
j__ZN7_JNIEnv16CallObjectMethodEP8_jobjectP10_jmethodIDz
refList:4
function_head: 0x6d8L
function_head: 0x8f8L
refList:1
function_head: 0x6d8L
function_head: 0x8f8L
refList:1
function_head: 0x6d8L
function_head: 0x8f8L
refList:1
function_head: 0x6d8L
len(ssCallMth):2
callObjectMth:0x766L---_Z7getImeiP7_JNIEnvP8_jobject
caller function address : 0x6d8L
data:0x750L---content:D
data:0x74eL---content:b
data:0x714L---content:"
data:0x712L---content:g
data:0x6feL---content:Z
callObjectMth:0x732L---_Z7getImeiP7_JNIEnvP8_jobject
caller function address : 0x6d8L
data:0x714L---content:"
data:0x712L---content:g
data:0x6feL---content:Z
source method path......
sink method path......
android_log_print........
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_source\lib\armeabi-v7a\libsource.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-00000000000006D0) ... ... OK
  1. Creating a new segment  (00000000000016D0-00000000000017DC) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (0000000000000400-0000000000000440) ... ... OK
     Additional segment      (0000000000000440-00000000000006D0) ...
  3. Creating a new segment  (0000000000000440-00000000000006D0) ... ... OK
  4. Creating a new segment  (0000000000000460-0000000000000478) ... ... OK
     Additional segment      (0000000000000478-00000000000006D0) ...
  5. Creating a new segment  (0000000000000478-00000000000006D0) ... ... OK
  6. Creating a new segment  (0000000000000478-0000000000000531) ... ... OK
     Additional segment      (0000000000000531-00000000000006D0) ...
     Deleting segment        (0000000000000531-00000000000006D0) ...
  6. Creating a new segment  (0000000000000531-00000000000006D0) ... ... OK
  7. Creating a new segment  (0000000000000534-0000000000000670) ... ... OK
     Additional segment      (0000000000000670-00000000000006D0) ...
  8. Creating a new segment  (0000000000000670-00000000000006D0) ... ... OK
     Deleting segment        (0000000000000670-00000000000006D0) ...
  8. Creating a new segment  (0000000000000670-00000000000006D0) ... ... OK
  9. Creating a new segment  (00000000000016D0-00000000000016D4) ... ... OK
     Additional segment      (00000000000016D4-00000000000017DC) ...
     Deleting segment        (00000000000016D4-00000000000017DC) ...
  9. Creating a new segment  (00000000000016D4-00000000000017DC) ... ... OK
 10. Creating a new segment  (00000000000016D4-00000000000016DC) ... ... OK
     Additional segment      (00000000000016DC-00000000000017DC) ...
     Deleting segment        (00000000000016DC-00000000000017DC) ...
 10. Creating a new segment  (00000000000016DC-00000000000017DC) ... ... OK
 11. Creating a new segment  (00000000000017BC-00000000000017C0) ... ... OK
     Additional segment      (00000000000017C0-00000000000017DC) ...
 12. Creating a new segment  (00000000000017C0-00000000000017DC) ... ... OK
     Deleting segment        (00000000000017C0-00000000000017DC) ...
 12. Creating a new segment  (00000000000017C0-00000000000017DC) ... ... OK
 13. Creating a new segment  (00000000000017DC-00000000000017EC) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_source\lib\armeabi-v7a\libsource.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
j__ZN7_JNIEnv16CallObjectMethodEP8_jobjectP10_jmethodIDz
refList:4
function_head: 0x578L
function_head: 0x664L
refList:1
function_head: 0x578L
function_head: 0x664L
refList:1
function_head: 0x578L
function_head: 0x664L
refList:1
function_head: 0x578L
len(ssCallMth):2
callObjectMth:0x606L---Java_org_arguslab_native_1source_MainActivity_getImei
caller function address : 0x578L
data:0x5b4L---content:P
data:0x5b2L---content:e
data:0x58aL---content:A
callObjectMth:0x5d2L---Java_org_arguslab_native_1source_MainActivity_getImei
caller function address : 0x578L
data:0x5b4L---content:P
data:0x5b2L---content:e
data:0x58aL---content:A
source method path......
sink method path......
android_log_print........
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
Possible file format: ELF for ARM (Shared object) (C:\Program Files\IDA 7.0\loaders\elf64.dll)

  bytes   pages size description
--------- ----- ---- --------------------------------------------
   262144    32 8192 allocating memory for b-tree...
    65536     8 8192 allocating memory for virtual array...
   262144    32 8192 allocating memory for name pointers...
-----------------------------------------------------------------
   589824            total memory allocated

Loading file 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_source_clean\lib\armeabi-v7a\libsource_clean.so' into database...
Detected file format: ELF for ARM (Shared object)
Loading processor module C:\Program Files\IDA 7.0\procs\arm64.dll for arm...OK
Autoanalysis subsystem has been initialized.
Assuming __cdecl calling convention by default
  0. Creating a new segment  (0000000000000000-00000000000004D0) ... ... OK
  1. Creating a new segment  (00000000000014D0-00000000000015D0) ... ... OK
Assuming __cdecl calling convention by default
Type library 'gnulnx_arm' loaded. Applying types...
Types applied to 0 names.
  2. Creating a new segment  (000000000000035C-0000000000000394) ... ... OK
     Additional segment      (0000000000000394-00000000000004D0) ...
  3. Creating a new segment  (0000000000000394-00000000000004D0) ... ... OK
  4. Creating a new segment  (00000000000003A4-00000000000003B0) ... ... OK
     Additional segment      (00000000000003B0-00000000000004D0) ...
  5. Creating a new segment  (00000000000003B0-00000000000004D0) ... ... OK
  6. Creating a new segment  (00000000000003B0-00000000000003E5) ... ... OK
     Additional segment      (00000000000003E5-00000000000004D0) ...
     Deleting segment        (00000000000003E5-00000000000004D0) ...
  6. Creating a new segment  (00000000000003E5-00000000000004D0) ... ... OK
  7. Creating a new segment  (00000000000003E8-000000000000048C) ... ... OK
     Additional segment      (000000000000048C-00000000000004D0) ...
  8. Creating a new segment  (000000000000048C-00000000000004D0) ... ... OK
  9. Creating a new segment  (0000000000000490-00000000000004D0) ... ... OK
 10. Creating a new segment  (00000000000014D0-00000000000014D4) ... ... OK
     Additional segment      (00000000000014D4-00000000000015D0) ...
     Deleting segment        (00000000000014D4-00000000000015D0) ...
 10. Creating a new segment  (00000000000014D4-00000000000015D0) ... ... OK
 11. Creating a new segment  (00000000000014D4-00000000000014DC) ... ... OK
     Additional segment      (00000000000014DC-00000000000015D0) ...
     Deleting segment        (00000000000014DC-00000000000015D0) ...
 11. Creating a new segment  (00000000000014DC-00000000000015D0) ... ... OK
 12. Creating a new segment  (00000000000015BC-00000000000015D0) ... ... OK
 13. Creating a new segment  (00000000000015D0-00000000000015D8) ... ... OK
Adding relocations...
Plan  FLIRT signature: ARM library little endian
autoload.cfg: armlibl.sig autoloads armv12.til
Type library 'armv12' loaded. Applying types...
Types applied to 0 names.
Marking typical code sequences...
Flushing buffers, please wait...ok
File 'C:\Users\suncong\Documents\WORKSPACE\repos\muDep\so\native_source_clean\lib\armeabi-v7a\libsource_clean.so' has been successfully loaded into the database.
 ARM AND THUMB MODE SWITCH INSTRUCTIONS

 This processor has two instruction encodings: ARM and THUMB.
 IDA allows to specify the encoding mode for every single instruction.
 For this IDA uses a virtual register T. If its value is zero, then
 the ARM mode is used, otherwise the THUMB mode is used.
 You can change the value of the register T using
 the 'change segment register value' command
 (the canonical hotkey is Alt-G)
 -> OK
IDA is analysing the input file...
You may start to explore the input file right now.
Using FLIRT signature: ARM library little endian
Propagating type information...
Function argument information has been propagated
The initial autoanalysis has been finished.
source method path......
sink method path......
android_log_print........
Flushing buffers, please wait...ok
Unloading IDP module C:\Program Files\IDA 7.0\procs\arm64.dll...
