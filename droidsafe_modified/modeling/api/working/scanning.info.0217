String gov.nist.javax.sip.Utils.getSignature() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.Utils.getQuotedString(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Utils gov.nist.javax.sip.Utils.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.SipProviderImpl.setListeningPoint(ListeningPoint) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ListeningPoint[] gov.nist.javax.sip.SipProviderImpl.getListeningPoints() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.SipProviderImpl.sendRequest(Request) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ListeningPoint gov.nist.javax.sip.SipProviderImpl.getListeningPoint(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ListeningPoint gov.nist.javax.sip.SipProviderImpl.getListeningPoint() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CallIdHeader gov.nist.javax.sip.SipProviderImpl.getNewCallId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SipListener gov.nist.javax.sip.SipProviderImpl.getSipListener() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.SipProviderImpl.sendResponse(Response) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SipStack gov.nist.javax.sip.SipProviderImpl.getSipStack() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Dialog gov.nist.javax.sip.SipProviderImpl.getNewDialog(Transaction) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ServerTransaction gov.nist.javax.sip.SipProviderImpl.getNewServerTransaction(Request) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ClientTransaction gov.nist.javax.sip.SipProviderImpl.getNewClientTransaction(Request) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Dialog gov.nist.javax.sip.DialogTimeoutEvent.getDialog() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Reason.getText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.Reason.getCause() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Reason.getProtocol() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.Reason.setCause(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.Reason.setText(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Reason.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.Accept.setContentSubType(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.Accept.setQValue(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float gov.nist.javax.sip.header.Accept.getQValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.Accept.setContentType(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Accept.getContentSubType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Accept.getContentType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MediaRange gov.nist.javax.sip.header.Accept.getMediaRange() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ContentDisposition.getHandling() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ContentDisposition.getDispositionType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ContentDisposition.setHandling(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ContentDisposition.getContentDisposition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.Event.setEventId(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Event.getEventId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Event.getEventType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.Warning.getCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Warning.getAgent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Warning.getText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ExtensionHeaderImpl.getHeaderValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.Expires.getExpires() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HostPort gov.nist.javax.sip.header.To.getHostPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.To.getUserAtHostPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.To.setTag(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.To.getTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.To.getDisplayName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CallIdentifier gov.nist.javax.sip.header.CallID.getCallIdentifer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.CallID.getCallId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.CallID.setCallId(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.SIPIfMatch.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.SIPIfMatch.getETag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.MinExpires.getExpires() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
URI gov.nist.javax.sip.header.CallInfo.getInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.CallInfo.setPurpose(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.CallInfo.getPurpose() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.MaxForwards.getMaxForwards() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.AllowEvents.getEventType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.MediaRange.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.MediaRange.getSubtype() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Supported.getOptionTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Require.getOptionTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ListIterator gov.nist.javax.sip.header.Server.getProduct() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Priority.getPriority() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ProxyRequire.getOptionTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Locale gov.nist.javax.sip.header.ContentLanguage.getContentLanguage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ContentLanguage.setLanguageTag(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ContentLanguage.getLanguageTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Protocol.getProtocolVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.Protocol.setProtocol(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Protocol.getTransport() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Protocol.getProtocol() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Protocol.getProtocolName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PServedUser.setSessionCase(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.PServedUser.getSessionCase() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PServedUser.setRegistrationState(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.PServedUser.getRegistrationState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PServedUser.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.SecurityVerify.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PChargingVector.setOriginatingIOI(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.PChargingVector.getICIDGeneratedAt() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.PChargingVector.getTerminatingIOI() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.PChargingVector.getOriginatingIOI() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PChargingVector.setTerminatingIOI(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.PChargingVector.getICID() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PChargingVector.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PChargingVector.setICIDGeneratedAt(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PChargingVector.setICID(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.PMediaAuthorization.getToken() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PMediaAuthorization.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PCalledPartyID.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PProfileKey.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.Path.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PPreferredIdentity.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.SecurityClient.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.PPreferredService.encodeBody() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void gov.nist.javax.sip.header.ims.PPreferredService.setSubserviceIdentifiers(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PPreferredService.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.PPreferredService.getSubserviceIdentifiers() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.PPreferredService.getApplicationIdentifiers() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.SecurityServer.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.Privacy.getPrivacy() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.Privacy.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.PAssertedService.getApplicationIdentifiers() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.PAssertedService.getSubserviceIdentifiers() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PAssertedService.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.PAssertedService.encodeBody() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void gov.nist.javax.sip.header.ims.PAccessNetworkInfo.setUtranCellID3GPP(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PAccessNetworkInfo.setParameter(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PAccessNetworkInfo.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.PAccessNetworkInfo.getAccessType() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String gov.nist.javax.sip.header.ims.PAccessNetworkInfo.getDSLLocation() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String gov.nist.javax.sip.header.ims.PAccessNetworkInfo.getUtranCellID3GPP() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PAccessNetworkInfo.setDSLLocation(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PAccessNetworkInfo.setCGI3GPP(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object gov.nist.javax.sip.header.ims.PAccessNetworkInfo.getExtensionAccessInfo() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String gov.nist.javax.sip.header.ims.PAccessNetworkInfo.getCGI3GPP() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String gov.nist.javax.sip.header.ims.PAccessNetworkInfo.getCI3GPP2() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void gov.nist.javax.sip.header.ims.PAccessNetworkInfo.setCI3GPP2(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PUserDatabase.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.PUserDatabase.getDatabaseName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.SecurityAgree.setPortClient(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.SecurityAgree.setSPIClient(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.SecurityAgree.encodeBody() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.SecurityAgree.setMode(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.SecurityAgree.setEncryptionAlgorithm(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object gov.nist.javax.sip.header.ims.SecurityAgree.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.SecurityAgree.getMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.SecurityAgree.setPortServer(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.SecurityAgree.setAlgorithm(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float gov.nist.javax.sip.header.ims.SecurityAgree.getPreference() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.SecurityAgree.setParameter(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.ims.SecurityAgree.getSPIClient() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.ims.SecurityAgree.getPortServer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.SecurityAgree.setProtocol(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.ims.SecurityAgree.getPortClient() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.SecurityAgree.getSecurityMechanism() - @DSSource({DSSourceKind.FILE_INFORMATION})
void gov.nist.javax.sip.header.ims.SecurityAgree.setPreference(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.SecurityAgree.getProtocol() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.SecurityAgree.getEncryptionAlgorithm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.SecurityAgree.getAlgorithm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.SecurityAgree.setSPIServer(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.ims.SecurityAgree.getSPIServer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.ServiceRoute.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PChargingFunctionAddresses.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ListIterator gov.nist.javax.sip.header.ims.PChargingFunctionAddresses.getChargingCollectionFunctionAddresses() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PChargingFunctionAddresses.setChargingCollectionFunctionAddress(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ListIterator gov.nist.javax.sip.header.ims.PChargingFunctionAddresses.getEventChargingFunctionAddresses() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PChargingFunctionAddresses.setEventChargingFunctionAddress(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ims.PVisitedNetworkID.getVisitedNetworkID() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PVisitedNetworkID.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PVisitedNetworkID.setVisitedNetworkID(Token) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ims.PAssociatedURI.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
URI gov.nist.javax.sip.header.ims.PAssociatedURI.getAssociatedURI() - @DSSource({DSSourceKind.FILE_INFORMATION})
void gov.nist.javax.sip.header.ims.PAssertedIdentity.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Iterator gov.nist.javax.sip.header.extensions.References.getParameterNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.extensions.References.getParameter(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.extensions.References.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.extensions.References.getCallId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.extensions.References.getRel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.extensions.References.setRel(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.extensions.References.setParameter(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.extensions.References.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.extensions.ReferredBy.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.extensions.SessionExpires.setRefresher(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.extensions.SessionExpires.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.extensions.SessionExpires.getExpires() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.extensions.SessionExpires.getRefresher() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.extensions.MinSE.getExpires() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.extensions.MinSE.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CallIdentifier gov.nist.javax.sip.header.extensions.Join.getCallIdentifer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.extensions.Join.getFromTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.extensions.Join.setToTag(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.extensions.Join.getToTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.extensions.Join.getCallId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.extensions.Join.setFromTag(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.extensions.Join.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.extensions.Replaces.getFromTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CallIdentifier gov.nist.javax.sip.header.extensions.Replaces.getCallIdentifer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.extensions.Replaces.setToTag(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.extensions.Replaces.getCallId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.extensions.Replaces.getToTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.extensions.Replaces.setFromTag(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.extensions.Replaces.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AuthenticationInfo.setResponse(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AuthenticationInfo.setNonceCount(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AuthenticationInfo.setNextNonce(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.AuthenticationInfo.getNextNonce() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.AuthenticationInfo.getQop() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.AuthenticationInfo.getNonceCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.AuthenticationInfo.getResponse() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AuthenticationInfo.setQop(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
NameValue gov.nist.javax.sip.header.AuthenticationInfo.getAuthInfo(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AuthenticationInfo.setParameter(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.AuthenticationInfo.getAuthenticationInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AuthenticationInfo.setCNonce(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.AuthenticationInfo.getCNonce() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.MimeVersion.getMajorVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.MimeVersion.getMinorVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.CallIdentifier.getHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.CallIdentifier.getLocalId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.NameMap.addExtensionHeader(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Class gov.nist.javax.sip.header.NameMap.getClassFromName(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.From.getUserAtHostPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.From.setTag(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
HostPort gov.nist.javax.sip.header.From.getHostPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.From.getDisplayName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.From.getTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
URI gov.nist.javax.sip.header.ProxyAuthenticate.getURI() - @DSSource({DSSourceKind.FILE_INFORMATION})
String gov.nist.javax.sip.header.SIPObject.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.SIPObject.debugDump() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.RAck.getMethod() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.RAck.setRSeqNumber(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long gov.nist.javax.sip.header.RAck.getCSequenceNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long gov.nist.javax.sip.header.RAck.getCSeqNumberLong() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.RAck.getRSeqNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long gov.nist.javax.sip.header.RAck.getRSequenceNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.RAck.getCSeqNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.RAck.setCSeqNumber(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.SIPETag.setValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.SIPETag.getETag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.Via.setBranch(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Protocol gov.nist.javax.sip.header.Via.getSentProtocol() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Via.getBranch() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.Via.setPort(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.Via.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.Via.setHost(Host) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Via.getProtocolVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.Via.setReceived(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.Via.setProtocol(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Via.getHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.Via.setTTL(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.Via.setMAddr(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
HostPort gov.nist.javax.sip.header.Via.getSentBy() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.Via.setHost(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Via.getReceived() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Via.getComment() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NameValueList gov.nist.javax.sip.header.Via.getViaParms() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.Via.getRPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.Via.setTransport(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Via.getMAddr() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Via.getProtocol() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.Via.getTTL() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Via.getTransport() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Hop gov.nist.javax.sip.header.Via.getHop() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Via.getSentProtocolField() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Via.getSentByField() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.Via.setProtocolVersion(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Contact.getPubGruuParam() - @DSSource({DSSourceKind.CONTACT_INFORMATION})
void gov.nist.javax.sip.header.Contact.setQValue(float) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
void gov.nist.javax.sip.header.Contact.setSipInstanceParam(String) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
void gov.nist.javax.sip.header.Contact.setTempGruuParam(String) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
void gov.nist.javax.sip.header.Contact.setPubGruuParam(String) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
boolean gov.nist.javax.sip.header.Contact.getWildCardFlag() - @DSSource({DSSourceKind.CONTACT_INFORMATION})
void gov.nist.javax.sip.header.Contact.setParameter(String,String) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
Address gov.nist.javax.sip.header.Contact.getAddress() - @DSSource({DSSourceKind.CONTACT_INFORMATION})
void gov.nist.javax.sip.header.Contact.setExpires(int) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
int gov.nist.javax.sip.header.Contact.getExpires() - @DSSource({DSSourceKind.CONTACT_INFORMATION})
void gov.nist.javax.sip.header.Contact.setWildCardFlag(boolean) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
String gov.nist.javax.sip.header.Contact.getTempGruuParam() - @DSSource({DSSourceKind.CONTACT_INFORMATION})
NameValueList gov.nist.javax.sip.header.Contact.getContactParms() - @DSSource({DSSourceKind.CONTACT_INFORMATION})
String gov.nist.javax.sip.header.Contact.getSipInstanceParam() - @DSSource({DSSourceKind.CONTACT_INFORMATION})
ContactList gov.nist.javax.sip.header.Contact.getContactList() - @DSSource({DSSourceKind.CONTACT_INFORMATION})
int gov.nist.javax.sip.header.RetryAfter.getDuration() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.RetryAfter.setDuration(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.RetryAfter.getComment() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.RetryAfter.setRetryAfter(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.RetryAfter.getRetryAfter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Indentation.getIndentation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.Indentation.getCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.SIPDateHeader.setDate(Calendar) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Calendar gov.nist.javax.sip.header.SIPDateHeader.getDate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Allow.getMethod() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AcceptLanguage gov.nist.javax.sip.header.AcceptLanguageList.getFirst() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AcceptLanguage gov.nist.javax.sip.header.AcceptLanguageList.getLast() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AuthenticationHeader.setNonceCount(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AuthenticationHeader.setNonce(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.AuthenticationHeader.encodeBody() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.AuthenticationHeader.getNonceCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AuthenticationHeader.setResponse(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AuthenticationHeader.setParameter(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.AuthenticationHeader.getDomain() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.AuthenticationHeader.getUsername() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AuthenticationHeader.setCNonce(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.AuthenticationHeader.getAlgorithm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.AuthenticationHeader.getQop() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AuthenticationHeader.setStale(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AuthenticationHeader.setIK(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.AuthenticationHeader.getCNonce() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
URI gov.nist.javax.sip.header.AuthenticationHeader.getURI() - @DSSource({DSSourceKind.FILE_INFORMATION})
void gov.nist.javax.sip.header.AuthenticationHeader.setUsername(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AuthenticationHeader.setAlgorithm(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.AuthenticationHeader.getScheme() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AuthenticationHeader.setChallenge(Challenge) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AuthenticationHeader.setOpaque(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AuthenticationHeader.setDomain(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.AuthenticationHeader.getCK() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.AuthenticationHeader.getRealm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.AuthenticationHeader.getOpaque() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.AuthenticationHeader.getResponse() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.AuthenticationHeader.getIntegrityProtected() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AuthenticationHeader.setIntegrityProtected(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AuthenticationHeader.setRealm(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AuthenticationHeader.setQop(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.AuthenticationHeader.getIK() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.AuthenticationHeader.getNonce() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AuthenticationHeader.setCK(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.ParametersHeader.getParameterAsHexInt(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float gov.nist.javax.sip.header.ParametersHeader.getParameterAsFloat(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NameValue gov.nist.javax.sip.header.ParametersHeader.getNameValue(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
GenericURI gov.nist.javax.sip.header.ParametersHeader.getParameterAsURI(String) - @DSSource({DSSourceKind.FILE_INFORMATION})
String gov.nist.javax.sip.header.ParametersHeader.getMultiParameter(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ParametersHeader.setMultiParameter(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Iterator gov.nist.javax.sip.header.ParametersHeader.getMultiParameterNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ParametersHeader.setParameter(String,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ParametersHeader.setParameter(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ParametersHeader.setParameter(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ParametersHeader.setParameter(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object gov.nist.javax.sip.header.ParametersHeader.getMultiParameterValue(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NameValueList gov.nist.javax.sip.header.ParametersHeader.getParameters() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ParametersHeader.setMultiParameter(NameValue) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
DuplicateNameValueList gov.nist.javax.sip.header.ParametersHeader.getMultiParameters() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ParametersHeader.setParameter(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Iterator gov.nist.javax.sip.header.ParametersHeader.getParameterNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object gov.nist.javax.sip.header.ParametersHeader.getParameterValue(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ParametersHeader.setQuotedParameter(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ParametersHeader.getParameter(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object gov.nist.javax.sip.header.ParametersHeader.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ParametersHeader.setParameter(NameValue) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.ParametersHeader.getParameterAsInt(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean gov.nist.javax.sip.header.ParametersHeader.getParameterAsBoolean(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long gov.nist.javax.sip.header.ParametersHeader.getParameterAsLong(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.InReplyTo.setCallId(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.InReplyTo.getCallId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long gov.nist.javax.sip.header.TimeStamp.getTime() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.TimeStamp.getTimeDelay() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float gov.nist.javax.sip.header.TimeStamp.getDelay() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float gov.nist.javax.sip.header.TimeStamp.getTimeStamp() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HostPort gov.nist.javax.sip.header.ReplyTo.getHostPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ReplyTo.getDisplayName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ListIterator gov.nist.javax.sip.header.AllowList.getMethods() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.SIPHeader.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.SIPHeader.encode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
StringBuffer gov.nist.javax.sip.header.SIPHeader.encodeBody(StringBuffer) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.SIPHeader.getHeaderValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.SIPHeader.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.SIPHeader.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.SIPHeader.getHeaderName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ListIterator gov.nist.javax.sip.header.AllowEventsList.getMethods() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.SubscriptionState.getState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.SubscriptionState.getReasonCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.SubscriptionState.getExpires() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.SubscriptionState.getRetryAfter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.CSeq.setMethod(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.CSeq.getSequenceNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.CSeq.setSequenceNumber(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.CSeq.setSeqNumber(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long gov.nist.javax.sip.header.CSeq.getSeqNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.CSeq.getMethod() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.RequestLine.getVersionMajor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.RequestLine.getMethod() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.RequestLine.getVersionMinor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.RequestLine.getSipVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
GenericURI gov.nist.javax.sip.header.RequestLine.getUri() - @DSSource({DSSourceKind.FILE_INFORMATION})
String gov.nist.javax.sip.header.Organization.getOrganization() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
URI gov.nist.javax.sip.header.AlertInfo.getAlertInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.ContentLength.getContentLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ContentLength.setContentLength(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
RAckHeader gov.nist.javax.sip.header.HeaderFactoryImpl.createRAckHeader(int,int,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AcceptLanguageHeader gov.nist.javax.sip.header.HeaderFactoryImpl.createAcceptLanguageHeader(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ExtensionHeader gov.nist.javax.sip.header.HeaderFactoryImpl.createMinSEHeader(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RSeqHeader gov.nist.javax.sip.header.HeaderFactoryImpl.createRSeqHeader(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CSeqHeader gov.nist.javax.sip.header.HeaderFactoryImpl.createCSeqHeader(int,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.HeaderFactoryImpl.setPrettyEncoding(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
TimeStampHeader gov.nist.javax.sip.header.HeaderFactoryImpl.createTimeStampHeader(float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ContentLengthHeader gov.nist.javax.sip.header.HeaderFactoryImpl.createContentLengthHeader(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MaxForwardsHeader gov.nist.javax.sip.header.HeaderFactoryImpl.createMaxForwardsHeader(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DateHeader gov.nist.javax.sip.header.HeaderFactoryImpl.createDateHeader(Calendar) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ContentLanguageHeader gov.nist.javax.sip.header.HeaderFactoryImpl.createContentLanguageHeader(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SessionExpiresHeader gov.nist.javax.sip.header.HeaderFactoryImpl.createSessionExpiresHeader(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MimeVersionHeader gov.nist.javax.sip.header.HeaderFactoryImpl.createMimeVersionHeader(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RSeqHeader gov.nist.javax.sip.header.HeaderFactoryImpl.createRSeqHeader(long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Header gov.nist.javax.sip.header.HeaderFactoryImpl.createHeader(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RetryAfterHeader gov.nist.javax.sip.header.HeaderFactoryImpl.createRetryAfterHeader(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ReferencesHeader gov.nist.javax.sip.header.HeaderFactoryImpl.createReferencesHeader(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ExpiresHeader gov.nist.javax.sip.header.HeaderFactoryImpl.createExpiresHeader(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MinExpiresHeader gov.nist.javax.sip.header.HeaderFactoryImpl.createMinExpiresHeader(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.SIPHeaderList.encode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Header gov.nist.javax.sip.header.SIPHeaderList.getFirst() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.SIPHeaderList.lastIndexOf(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object[] gov.nist.javax.sip.header.SIPHeaderList.toArray() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object gov.nist.javax.sip.header.SIPHeaderList.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class gov.nist.javax.sip.header.SIPHeaderList.getMyClass() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List gov.nist.javax.sip.header.SIPHeaderList.subList(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.SIPHeaderList.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
StringBuffer gov.nist.javax.sip.header.SIPHeaderList.encodeBody(StringBuffer) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.SIPHeaderList.indexOf(GenericObject) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Header gov.nist.javax.sip.header.SIPHeaderList.getLast() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.SIPHeaderList.debugDump() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ListIterator gov.nist.javax.sip.header.SIPHeaderList.listIterator() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.SIPHeaderList.indexOf(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.SIPHeaderList.encodeBody() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ListIterator gov.nist.javax.sip.header.SIPHeaderList.listIterator(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List gov.nist.javax.sip.header.SIPHeaderList.getHeaderList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Iterator gov.nist.javax.sip.header.SIPHeaderList.iterator() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List gov.nist.javax.sip.header.SIPHeaderList.getHeadersAsEncodedStrings() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object[] gov.nist.javax.sip.header.SIPHeaderList.toArray(Object[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AcceptEncoding.setQValue(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.AcceptEncoding.getEncoding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float gov.nist.javax.sip.header.AcceptEncoding.getQValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MediaRange gov.nist.javax.sip.header.ContentType.getMediaRange() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ContentType.getMediaType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ContentType.getMediaSubType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ContentType.getContentType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ContentType.setContentType(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ContentType.getCharset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ContentType.setContentType(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ContentType.setContentSubType(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ContentType.getContentSubType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Unsupported.getOptionTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AcceptLanguage.setQValue(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AcceptLanguage.setLanguageRange(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float gov.nist.javax.sip.header.AcceptLanguage.getQValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.AcceptLanguage.setAcceptLanguage(Locale) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.AcceptLanguage.getLanguageRange() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Locale gov.nist.javax.sip.header.AcceptLanguage.getAcceptLanguage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.StatusLine.getVersionMinor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.StatusLine.getSipVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.StatusLine.getStatusCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.StatusLine.getVersionMajor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.StatusLine.getReasonPhrase() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Challenge.getRealm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Challenge.getOpaque() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Challenge.getParameter(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.Challenge.setParameter(NameValue) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Challenge.getResponse() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Challenge.getSignature() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Challenge.getScheme() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Challenge.getSignedBy() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Challenge.getAlgorithm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NameValueList gov.nist.javax.sip.header.Challenge.getAuthParams() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Challenge.getDomain() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Challenge.getQOP() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Challenge.getStale() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Challenge.getURI() - @DSSource({DSSourceKind.FILE_INFORMATION})
Object gov.nist.javax.sip.header.AddressParametersHeader.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Address gov.nist.javax.sip.header.AddressParametersHeader.getAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.SIPDate.getWkday() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.SIPDate.getMinute() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.SIPDate.getYear() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.SIPDate.getMonth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.SIPDate.getSecond() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Calendar gov.nist.javax.sip.header.SIPDate.getJavaCal() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.SIPDate.getHour() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.SIPDate.getDeltaSeconds() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long gov.nist.javax.sip.header.RSeq.getSeqNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.RSeq.setSequenceNumber(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.header.RSeq.getSequenceNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.Subject.getSubject() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
URI gov.nist.javax.sip.header.WWWAuthenticate.getURI() - @DSSource({DSSourceKind.FILE_INFORMATION})
String gov.nist.javax.sip.header.ContentEncoding.getEncoding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ListIterator gov.nist.javax.sip.header.UserAgent.getProduct() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
URI gov.nist.javax.sip.header.ErrorInfo.getErrorInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.header.ErrorInfo.getErrorMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.header.ErrorInfo.setErrorMessage(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.HopImpl.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.HopImpl.getHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.HopImpl.getTransport() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.SIPDialogErrorEvent.getErrorID() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPTransactionStack gov.nist.javax.sip.stack.UDPMessageProcessor.getSIPStack() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.UDPMessageProcessor.getMaximumMessageSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.UDPMessageProcessor.getDefaultTargetPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.UDPMessageProcessor.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.UDPMessageProcessor.getTransport() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Certificate[] gov.nist.javax.sip.stack.SIPTransaction.getLocalCertificates() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TransactionState gov.nist.javax.sip.stack.SIPTransaction.getState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.SIPTransaction.getPeerPacketSourcePort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Response gov.nist.javax.sip.stack.SIPTransaction.getResponse() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Request gov.nist.javax.sip.stack.SIPTransaction.getRequest() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPTransaction.sendMessage(SIPMessage) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.SIPTransaction.getKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPRequest gov.nist.javax.sip.stack.SIPTransaction.getOriginalRequest() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.SIPTransaction.getTransactionId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object gov.nist.javax.sip.stack.SIPTransaction.getApplicationData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.SIPTransaction.getHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPTransactionStack gov.nist.javax.sip.stack.SIPTransaction.getSIPStack() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.SIPTransaction.getPeerAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Certificate[] gov.nist.javax.sip.stack.SIPTransaction.getPeerCertificates() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.SIPTransaction.getPeerPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SipProviderImpl gov.nist.javax.sip.stack.SIPTransaction.getSipProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.SIPTransaction.getRetransmitTimer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.SIPTransaction.getBranchId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.SIPTransaction.getCipherSuite() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MessageProcessor gov.nist.javax.sip.stack.SIPTransaction.getMessageProcessor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.SIPTransaction.getViaHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.SIPTransaction.getMethod() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Via gov.nist.javax.sip.stack.SIPTransaction.getViaHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.SIPTransaction.getTransport() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.SIPTransaction.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPResponse gov.nist.javax.sip.stack.SIPTransaction.getLastResponse() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.SIPTransaction.getBranch() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MessageChannel gov.nist.javax.sip.stack.SIPTransaction.getMessageChannel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress gov.nist.javax.sip.stack.SIPTransaction.getPeerInetAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long gov.nist.javax.sip.stack.SIPTransaction.getCSeq() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress gov.nist.javax.sip.stack.SIPTransaction.getPeerPacketSourceAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.SIPTransaction.getPeerProtocol() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.SIPTransaction.getViaPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.UDPMessageChannel.getTransport() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.UDPMessageChannel.sendMessage(byte[],InetAddress,int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.UDPMessageChannel.getPeerPacketSourcePort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.UDPMessageChannel.sendMessage(byte[],InetAddress,int,String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InetAddress gov.nist.javax.sip.stack.UDPMessageChannel.getPeerInetAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress gov.nist.javax.sip.stack.UDPMessageChannel.getPeerPacketSourceAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.UDPMessageChannel.sendMessage(SIPMessage) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.UDPMessageChannel.getViaPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.UDPMessageChannel.getPeerProtocol() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.UDPMessageChannel.getPeerPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPTransactionStack gov.nist.javax.sip.stack.UDPMessageChannel.getSIPStack() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.UDPMessageChannel.getHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.UDPMessageChannel.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.UDPMessageChannel.getPeerAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.UDPMessageChannel.getKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.UDPMessageChannel.getViaHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.UDPMessageChannel.getPeerName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HandshakeCompletedEvent gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl.getHandshakeCompletedEvent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SocketAddress gov.nist.javax.sip.stack.IOHandler.obtainLocalAddress(InetAddress,int,InetAddress,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Socket gov.nist.javax.sip.stack.IOHandler.sendBytes(InetAddress,InetAddress,int,String,byte[],boolean,MessageChannel) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Socket gov.nist.javax.sip.stack.IOHandler.getSocket(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.MessageProcessor.getDefaultPort(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Via gov.nist.javax.sip.stack.MessageProcessor.getViaHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.MessageProcessor.getTransport() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.MessageProcessor.getSavedIpAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.MessageProcessor.getSentBy() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress gov.nist.javax.sip.stack.MessageProcessor.getIpAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ListeningPointImpl gov.nist.javax.sip.stack.MessageProcessor.getListeningPoint() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.MessageProcessor.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPServerTransaction.setOriginalRequest(SIPRequest) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SIPResponse gov.nist.javax.sip.stack.SIPServerTransaction.getReliableProvisionalResponse() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPResponse gov.nist.javax.sip.stack.SIPServerTransaction.getLastResponse() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.SIPServerTransaction.getViaPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPServerTransaction.setState(TransactionState) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPServerTransaction.sendResponse(Response) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPServerTransaction.processRequest(SIPRequest,MessageChannel) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SIPServerTransaction gov.nist.javax.sip.stack.SIPServerTransaction.getCanceledInviteTransaction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.SIPServerTransaction.getViaHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPServerTransaction.setMapped(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
TransactionState gov.nist.javax.sip.stack.SIPServerTransaction.getState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Dialog gov.nist.javax.sip.stack.SIPServerTransaction.getDialog() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPServerTransaction.sendMessage(SIPMessage) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
MessageChannel gov.nist.javax.sip.stack.SIPServerTransaction.getResponseChannel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.SIPTransactionStack.getServerTransactionTableSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.SIPTransactionStack.getHostAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ThreadAuditor gov.nist.javax.sip.stack.SIPTransactionStack.getThreadAuditor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ServerResponseInterface gov.nist.javax.sip.stack.SIPTransactionStack.newSIPServerResponse(SIPResponse,MessageChannel) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Dialog gov.nist.javax.sip.stack.SIPTransactionStack.getReplacesDialog(ReplacesHeader) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.SIPTransactionStack.getReceiveUdpBufferSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NetworkLayer gov.nist.javax.sip.stack.SIPTransactionStack.getNetworkLayer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection gov.nist.javax.sip.stack.SIPTransactionStack.getDialogs() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MessageProcessor gov.nist.javax.sip.stack.SIPTransactionStack.createMessageProcessor(InetAddress,int,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Hop gov.nist.javax.sip.stack.SIPTransactionStack.getNextHop(SIPRequest) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Dialog gov.nist.javax.sip.stack.SIPTransactionStack.getJoinDialog(JoinHeader) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.SIPTransactionStack.getClientTransactionTableSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPTransaction gov.nist.javax.sip.stack.SIPTransactionStack.findTransaction(SIPMessage,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Router gov.nist.javax.sip.stack.SIPTransactionStack.getRouter(SIPRequest) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPDialog gov.nist.javax.sip.stack.SIPTransactionStack.createDialog(SIPTransaction) - @DSSink({DSSinkKind.VOIP})
SIPClientTransaction gov.nist.javax.sip.stack.SIPTransactionStack.findSubscribeTransaction(SIPRequest,ListeningPointImpl) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
StackLogger gov.nist.javax.sip.stack.SIPTransactionStack.getStackLogger() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MessageChannel gov.nist.javax.sip.stack.SIPTransactionStack.createRawMessageChannel(String,int,Hop) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPTransactionStack.setHostAddress(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SIPServerTransaction gov.nist.javax.sip.stack.SIPTransactionStack.findPendingTransaction(SIPRequest) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPClientTransaction gov.nist.javax.sip.stack.SIPTransactionStack.createClientTransaction(SIPRequest,MessageChannel) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPTransaction gov.nist.javax.sip.stack.SIPTransactionStack.findCancelTransaction(SIPRequest,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.SIPTransactionStack.getSendUdpBufferSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPTransactionStack.putDialog(SIPDialog) - @DSSink({DSSinkKind.VOIP})
SIPDialog gov.nist.javax.sip.stack.SIPTransactionStack.getDialog(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ServerRequestInterface gov.nist.javax.sip.stack.SIPTransactionStack.newSIPServerRequest(SIPRequest,MessageChannel) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
Timer gov.nist.javax.sip.stack.SIPTransactionStack.getTimer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPServerTransaction gov.nist.javax.sip.stack.SIPTransactionStack.getRetransmissionAlertTransaction(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPTransactionStack.putPendingTransaction(SIPServerTransaction) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPTransactionStack.addForkedClientTransaction(SIPClientTransaction) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.SIPTransactionStack.getMaxMessageSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.SIPTransactionStack.getActiveClientTransactionCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPClientTransaction gov.nist.javax.sip.stack.SIPTransactionStack.getForkedTransaction(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPTransactionStack.putInMergeTable(SIPServerTransaction,SIPRequest) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
MessageChannel gov.nist.javax.sip.stack.SIPTransactionStack.createMessageChannel(SIPRequest,MessageProcessor,Hop) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection gov.nist.javax.sip.stack.SIPTransactionStack.getDialogs(DialogState) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Router gov.nist.javax.sip.stack.SIPTransactionStack.getRouter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MessageProcessor[] gov.nist.javax.sip.stack.SIPTransactionStack.getMessageProcessors() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ServerLogger gov.nist.javax.sip.stack.SIPTransactionStack.getServerLogger() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPTransactionStack.addTransactionPendingAck(SIPServerTransaction) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
AddressResolver gov.nist.javax.sip.stack.SIPTransactionStack.getAddressResolver() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.TCPMessageChannel.getTransport() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.TCPMessageChannel.getViaPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress gov.nist.javax.sip.stack.TCPMessageChannel.getPeerInetAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.TCPMessageChannel.getPeerAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.TCPMessageChannel.getPeerPacketSourcePort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPTransactionStack gov.nist.javax.sip.stack.TCPMessageChannel.getSIPStack() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.TCPMessageChannel.processMessage(SIPMessage) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.TCPMessageChannel.getPeerProtocol() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.TCPMessageChannel.sendMessage(byte[],InetAddress,int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.TCPMessageChannel.getViaHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress gov.nist.javax.sip.stack.TCPMessageChannel.getPeerPacketSourceAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.TCPMessageChannel.getKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.TCPMessageChannel.getPeerPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.TCPMessageChannel.sendMessage(SIPMessage) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.SIPTransactionErrorEvent.getErrorID() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPDialog.sendReliableProvisionalResponse(Response) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SIPTransaction gov.nist.javax.sip.stack.SIPDialog.getLastTransaction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long gov.nist.javax.sip.stack.SIPDialog.getOriginalLocalSequenceNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Address gov.nist.javax.sip.stack.SIPDialog.getRemoteParty() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPDialog.startRetransmitTimer(SIPServerTransaction,Response) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPDialog.sendRequest(ClientTransaction) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.SIPDialog.getMethod() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.SIPDialog.getEarlyDialogId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPDialog.sendRequest(ClientTransaction,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Response gov.nist.javax.sip.stack.SIPDialog.createReliableProvisionalResponse(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.SIPDialog.getDialogId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPDialog.setState(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SIPTransactionStack gov.nist.javax.sip.stack.SIPDialog.getStack() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Address gov.nist.javax.sip.stack.SIPDialog.getRemoteTarget() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Transaction gov.nist.javax.sip.stack.SIPDialog.getFirstTransaction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long gov.nist.javax.sip.stack.SIPDialog.getLocalSeqNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Request gov.nist.javax.sip.stack.SIPDialog.createAck(long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPServerTransaction gov.nist.javax.sip.stack.SIPDialog.getInviteTransaction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.SIPDialog.getRemoteTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPRequest gov.nist.javax.sip.stack.SIPDialog.getLastAckSent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPDialog.setLastResponse(SIPTransaction,SIPResponse) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Address gov.nist.javax.sip.stack.SIPDialog.getLocalParty() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long gov.nist.javax.sip.stack.SIPDialog.getRemoteSeqNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
EventHeader gov.nist.javax.sip.stack.SIPDialog.getEventHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.SIPDialog.getLocalTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.SIPDialog.getRemoteSequenceNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object gov.nist.javax.sip.stack.SIPDialog.getApplicationData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.SIPDialog.getLocalSequenceNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Request gov.nist.javax.sip.stack.SIPDialog.createRequest(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPDialog.sendAck(Request) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SipProviderImpl gov.nist.javax.sip.stack.SIPDialog.getSipProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Iterator gov.nist.javax.sip.stack.SIPDialog.getRouteSet() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CallIdHeader gov.nist.javax.sip.stack.SIPDialog.getCallId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPResponse gov.nist.javax.sip.stack.SIPDialog.getLastResponse() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPRequest gov.nist.javax.sip.stack.SIPDialog.getLastAckReceived() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Request gov.nist.javax.sip.stack.SIPDialog.createPrack(Response) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Contact gov.nist.javax.sip.stack.SIPDialog.getMyContactHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPDialog.setResponseTags(SIPResponse) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
DialogState gov.nist.javax.sip.stack.SIPDialog.getState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HostPort gov.nist.javax.sip.stack.MessageChannel.getViaHostPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.MessageChannel.getRawIpSourceAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.MessageChannel.sendMessage(SIPMessage,InetAddress,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.MessageChannel.getHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HostPort gov.nist.javax.sip.stack.MessageChannel.getHostPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.MessageChannel.getKey(InetAddress,int,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MessageProcessor gov.nist.javax.sip.stack.MessageChannel.getMessageProcessor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.MessageChannel.getKey(HostPort,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.MessageChannel.sendMessage(SIPMessage,Hop) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
HostPort gov.nist.javax.sip.stack.MessageChannel.getPeerHostPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Via gov.nist.javax.sip.stack.MessageChannel.getViaHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.MessageChannel.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.TLSMessageProcessor.cacheMessageChannel(TLSMessageChannel) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.TLSMessageProcessor.getDefaultTargetPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MessageChannel gov.nist.javax.sip.stack.TLSMessageProcessor.createMessageChannel(HostPort) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.TLSMessageProcessor.getMaximumMessageSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MessageChannel gov.nist.javax.sip.stack.TLSMessageProcessor.createMessageChannel(InetAddress,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SIPTransactionStack gov.nist.javax.sip.stack.TLSMessageProcessor.getSIPStack() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.TLSMessageChannel.sendMessage(SIPMessage) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.TLSMessageChannel.getViaHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.TLSMessageChannel.processMessage(SIPMessage) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.TLSMessageChannel.getPeerAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.TLSMessageChannel.getKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HandshakeCompletedListenerImpl gov.nist.javax.sip.stack.TLSMessageChannel.getHandshakeCompletedListener() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.TLSMessageChannel.getPeerProtocol() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress gov.nist.javax.sip.stack.TLSMessageChannel.getPeerInetAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.TLSMessageChannel.sendMessage(byte[],InetAddress,int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SIPTransactionStack gov.nist.javax.sip.stack.TLSMessageChannel.getSIPStack() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.TLSMessageChannel.getPeerPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.TLSMessageChannel.getTransport() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.TLSMessageChannel.getPeerPacketSourcePort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress gov.nist.javax.sip.stack.TLSMessageChannel.getPeerPacketSourceAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.TLSMessageChannel.getViaPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MessageChannel gov.nist.javax.sip.stack.TCPMessageProcessor.createMessageChannel(InetAddress,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.TCPMessageProcessor.getDefaultTargetPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPTransactionStack gov.nist.javax.sip.stack.TCPMessageProcessor.getSIPStack() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.TCPMessageProcessor.cacheMessageChannel(TCPMessageChannel) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
MessageChannel gov.nist.javax.sip.stack.TCPMessageProcessor.createMessageChannel(HostPort) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.TCPMessageProcessor.getMaximumMessageSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.TCPMessageProcessor.getTransport() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ListIterator gov.nist.javax.sip.stack.DefaultRouter.getNextHops(Request) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Hop gov.nist.javax.sip.stack.DefaultRouter.getOutboundProxy() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Hop gov.nist.javax.sip.stack.DefaultRouter.getNextHop(Request) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPClientTransaction.processResponse(SIPResponse,MessageChannel) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Request gov.nist.javax.sip.stack.SIPClientTransaction.createAck() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.stack.SIPClientTransaction.getViaPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPDialog gov.nist.javax.sip.stack.SIPClientTransaction.getDefaultDialog() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MessageChannel gov.nist.javax.sip.stack.SIPClientTransaction.getRequestChannel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPDialog gov.nist.javax.sip.stack.SIPClientTransaction.getDialog(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPClientTransaction.setDialog(SIPDialog,String) - @DSSink({DSSinkKind.VOIP})
void gov.nist.javax.sip.stack.SIPClientTransaction.sendMessage(SIPMessage) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Hop gov.nist.javax.sip.stack.SIPClientTransaction.getNextHop() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.stack.SIPClientTransaction.setState(TransactionState) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Dialog gov.nist.javax.sip.stack.SIPClientTransaction.getDialog() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.stack.SIPClientTransaction.getViaHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Via gov.nist.javax.sip.stack.SIPClientTransaction.getOutgoingViaHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Request gov.nist.javax.sip.stack.SIPClientTransaction.createCancel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.DialogFilter.getProcessingInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.DialogFilter.processResponse(SIPResponse,MessageChannel) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.DialogFilter.processRequest(SIPRequest,MessageChannel) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.DialogFilter.processResponse(SIPResponse,MessageChannel,SIPDialog) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.NetObject.debugDump() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.NetObject.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.SipUri.getUserAtHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.SipUri.setSecure(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.SipUri.getParameter(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.SipUri.setHost(Host) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.address.SipUri.getTTLParam() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.SipUri.setMAddr(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.SipUri.setMethod(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.SipUri.setGrParam(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.SipUri.setScheme(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.SipUri.getUserParam() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.SipUri.getUserPassword() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void gov.nist.javax.sip.address.SipUri.setUser(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.SipUri.getUserType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.SipUri.setQHeader(NameValue) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.SipUri.setIsdnSubAddress(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.SipUri.getGrParam() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.SipUri.setParameter(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.SipUri.setPort(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Iterator gov.nist.javax.sip.address.SipUri.getHeaderNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.SipUri.getMethodParam() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NameValueList gov.nist.javax.sip.address.SipUri.getQheaders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.SipUri.setDefaultParm(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.SipUri.setUriParameter(NameValue) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object gov.nist.javax.sip.address.SipUri.getParm(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.SipUri.getMethod() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NameValueList gov.nist.javax.sip.address.SipUri.getParameters() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.SipUri.getUserAtHostPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.SipUri.setHeader(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
HostPort gov.nist.javax.sip.address.SipUri.getHostPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.SipUri.getUser() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.SipUri.setMAddrParam(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Authority gov.nist.javax.sip.address.SipUri.getAuthority() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.SipUri.getTransportParam() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Iterator gov.nist.javax.sip.address.SipUri.getParameterNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.SipUri.setUserPassword(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.SipUri.setUriParm(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.SipUri.getScheme() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TelephoneNumber gov.nist.javax.sip.address.SipUri.getTelephoneSubscriber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.SipUri.setUserParam(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.SipUri.getHeader(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.SipUri.getMAddrParam() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.SipUri.setHostPort(HostPort) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.address.SipUri.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.SipUri.setMethodParam(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.SipUri.setTTLParam(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.SipUri.setHost(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.SipUri.getHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.SipUri.getLrParam() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.SipUri.setTransportParam(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
HostPort gov.nist.javax.sip.address.Authority.getHostPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.Authority.setHost(Host) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.Authority.setPort(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
UserInfo gov.nist.javax.sip.address.Authority.getUserInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.address.Authority.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.Authority.getUser() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Host gov.nist.javax.sip.address.Authority.getHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.Authority.getPassword() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void gov.nist.javax.sip.address.Authority.setPassword(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.Authority.setUser(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.TelURLImpl.getPostDial() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.TelURLImpl.getPhoneNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.TelURLImpl.setGlobal(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.TelURLImpl.setIsdnSubAddress(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.TelURLImpl.setParameter(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
NameValueList gov.nist.javax.sip.address.TelURLImpl.getParameters() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.TelURLImpl.setPhoneNumber(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.TelURLImpl.getPhoneContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.TelURLImpl.setPhoneContext(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.TelURLImpl.getIsdnSubAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Iterator gov.nist.javax.sip.address.TelURLImpl.getParameterNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.TelURLImpl.getParameter(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.TelURLImpl.setPostDial(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.TelURLImpl.getScheme() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.address.UserInfo.getUserType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.UserInfo.getPassword() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String gov.nist.javax.sip.address.UserInfo.getUser() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.TelephoneNumber.getPhoneNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.TelephoneNumber.setParm(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
NameValueList gov.nist.javax.sip.address.TelephoneNumber.getParameters() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.TelephoneNumber.setPostDial(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.TelephoneNumber.setIsdnSubaddress(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.TelephoneNumber.getParameter(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.TelephoneNumber.getPostDial() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.TelephoneNumber.getIsdnSubaddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.TelephoneNumber.setParameter(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Iterator gov.nist.javax.sip.address.TelephoneNumber.getParameterNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.GenericURI.getScheme() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.address.AddressImpl.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.AddressImpl.getUserAtHostPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HostPort gov.nist.javax.sip.address.AddressImpl.getHostPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
URI gov.nist.javax.sip.address.AddressImpl.getURI() - @DSSource({DSSourceKind.FILE_INFORMATION})
int gov.nist.javax.sip.address.AddressImpl.getAddressType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.AddressImpl.getDisplayName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.address.AddressImpl.getHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.address.AddressImpl.setUser(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SipProviderImpl gov.nist.javax.sip.ListeningPointImpl.getProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.ListeningPointImpl.sendHeartbeat(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.ListeningPointImpl.getSentBy() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MessageProcessor gov.nist.javax.sip.ListeningPointImpl.getMessageProcessor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.ListeningPointImpl.setSentBy(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Via gov.nist.javax.sip.ListeningPointImpl.getViaHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.ListeningPointImpl.getIPAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.ListeningPointImpl.getTransport() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.ListeningPointImpl.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.ListeningPointImpl.getKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ServerRequestInterface gov.nist.javax.sip.NistSipMessageFactoryImpl.newSIPServerRequest(SIPRequest,MessageChannel) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
UserAgentHeader gov.nist.javax.sip.message.MessageFactoryImpl.getDefaultUserAgentHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Response gov.nist.javax.sip.message.MessageFactoryImpl.createResponse(int,CallIdHeader,CSeqHeader,FromHeader,ToHeader,List,MaxForwardsHeader,Object,ContentTypeHeader) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.message.MessageFactoryImpl.setDefaultContentEncodingCharset(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Response gov.nist.javax.sip.message.MessageFactoryImpl.createResponse(int,CallIdHeader,CSeqHeader,FromHeader,ToHeader,List,MaxForwardsHeader) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Response gov.nist.javax.sip.message.MessageFactoryImpl.createResponse(int,Request,ContentTypeHeader,Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Response gov.nist.javax.sip.message.MessageFactoryImpl.createResponse(int,CallIdHeader,CSeqHeader,FromHeader,ToHeader,List,MaxForwardsHeader,ContentTypeHeader,byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Response gov.nist.javax.sip.message.MessageFactoryImpl.createResponse(int,Request,ContentTypeHeader,byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ServerHeader gov.nist.javax.sip.message.MessageFactoryImpl.getDefaultServerHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Response gov.nist.javax.sip.message.MessageFactoryImpl.createResponse(int,CallIdHeader,CSeqHeader,FromHeader,ToHeader,List,MaxForwardsHeader,byte[],ContentTypeHeader) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.MessageFactoryImpl.getDefaultContentEncodingCharset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Response gov.nist.javax.sip.message.MessageFactoryImpl.createResponse(int,CallIdHeader,CSeqHeader,FromHeader,ToHeader,List,MaxForwardsHeader,ContentTypeHeader,Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Response gov.nist.javax.sip.message.MessageFactoryImpl.createResponse(int,Request) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPHeaderList gov.nist.javax.sip.message.ListMap.getList(SIPHeader) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.MessageObject.debugDump() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPResponse.getSIPVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] gov.nist.javax.sip.message.SIPResponse.encodeAsBytes(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.message.SIPResponse.getStatusCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.message.SIPResponse.setReasonPhrase(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SIPRequest gov.nist.javax.sip.message.SIPResponse.createRequest(SipUri,Via,CSeq,From,To) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPResponse.getDialogId(boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
StatusLine gov.nist.javax.sip.message.SIPResponse.getStatusLine() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
LinkedList gov.nist.javax.sip.message.SIPResponse.getMessageAsEncodedStrings() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPResponse.getReasonPhrase() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPResponse.getDialogId(boolean,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPResponse.getReasonPhrase(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.message.SIPResponse.setSIPVersion(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.message.SIPResponse.setStatusCode(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPResponse.getFirstLine() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ContentDispositionHeader gov.nist.javax.sip.message.ContentImpl.getContentDispositionHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object gov.nist.javax.sip.message.ContentImpl.getContent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ContentTypeHeader gov.nist.javax.sip.message.ContentImpl.getContentTypeHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPHeader gov.nist.javax.sip.message.SIPDuplicateHeaderException.getSIPHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPMessage gov.nist.javax.sip.message.SIPDuplicateHeaderException.getSIPMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.message.HeaderIterator.set(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.message.MultipartMimeContentImpl.getContentCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Iterator gov.nist.javax.sip.message.MultipartMimeContentImpl.getContents() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Content gov.nist.javax.sip.message.MultipartMimeContentImpl.getContentByType(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ContentTypeHeader gov.nist.javax.sip.message.MultipartMimeContentImpl.getContentTypeHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPRequest.getSIPVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.message.SIPRequest.setSIPVersion(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPRequest.getDialogId(boolean,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object gov.nist.javax.sip.message.SIPRequest.getTransaction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPRequest gov.nist.javax.sip.message.SIPRequest.createBYERequest(boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] gov.nist.javax.sip.message.SIPRequest.encodeAsBytes(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPRequest.getMergeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object gov.nist.javax.sip.message.SIPRequest.getMessageChannel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPResponse gov.nist.javax.sip.message.SIPRequest.createResponse(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.message.SIPRequest.getViaPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SIPRequest gov.nist.javax.sip.message.SIPRequest.createACKRequest() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object gov.nist.javax.sip.message.SIPRequest.getInviteTransaction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPRequest.getFirstLine() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPRequest.getViaHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
LinkedList gov.nist.javax.sip.message.SIPRequest.getMessageAsEncodedStrings() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPRequest.getMethod() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPRequest.getCannonicalName(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.message.SIPRequest.setMethod(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
RequestLine gov.nist.javax.sip.message.SIPRequest.getRequestLine() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
URI gov.nist.javax.sip.message.SIPRequest.getRequestURI() - @DSSource({DSSourceKind.FILE_INFORMATION})
SIPRequest gov.nist.javax.sip.message.SIPRequest.createSIPRequest(RequestLine,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPRequest.getDialogId(boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
LinkedList gov.nist.javax.sip.message.SIPMessage.getMessageAsEncodedStrings() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPMessage.getHeaderAsFormattedString(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ExpiresHeader gov.nist.javax.sip.message.SIPMessage.getExpires() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ViaList gov.nist.javax.sip.message.SIPMessage.getViaHeaders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object gov.nist.javax.sip.message.SIPMessage.getApplicationData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ToHeader gov.nist.javax.sip.message.SIPMessage.getTo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPMessage.getToTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ListIterator gov.nist.javax.sip.message.SIPMessage.getHeaders(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.message.SIPMessage.setFromTag(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ViaHeader gov.nist.javax.sip.message.SIPMessage.getTopmostViaHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ToHeader gov.nist.javax.sip.message.SIPMessage.getToHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ErrorInfoList gov.nist.javax.sip.message.SIPMessage.getErrorInfoHeaders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.message.SIPMessage.attachHeader(SIPHeader,boolean,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
FromHeader gov.nist.javax.sip.message.SIPMessage.getFromHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CSeqHeader gov.nist.javax.sip.message.SIPMessage.getCSeqHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CSeqHeader gov.nist.javax.sip.message.SIPMessage.getCSeq() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RecordRouteList gov.nist.javax.sip.message.SIPMessage.getRecordRouteHeaders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ContactList gov.nist.javax.sip.message.SIPMessage.getContactHeaders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CallIdHeader gov.nist.javax.sip.message.SIPMessage.getCallId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Contact gov.nist.javax.sip.message.SIPMessage.getContactHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.message.SIPMessage.setCallId(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object gov.nist.javax.sip.message.SIPMessage.getContent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ContentEncodingHeader gov.nist.javax.sip.message.SIPMessage.getContentEncoding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.message.SIPMessage.setHeader(SIPHeaderList) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
MultipartMimeContent gov.nist.javax.sip.message.SIPMessage.getMultipartMimeContent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPMessage.getTransactionId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] gov.nist.javax.sip.message.SIPMessage.getRawContent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.message.SIPMessage.setMessageContent(String,String,byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ContentLanguageHeader gov.nist.javax.sip.message.SIPMessage.getContentLanguage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RouteList gov.nist.javax.sip.message.SIPMessage.getRouteHeaders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPMessage.debugDump() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ContentType gov.nist.javax.sip.message.SIPMessage.getContentTypeHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ContentLengthHeader gov.nist.javax.sip.message.SIPMessage.getContentLengthHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Iterator gov.nist.javax.sip.message.SIPMessage.getHeaders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] gov.nist.javax.sip.message.SIPMessage.encodeAsBytes(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CallIdHeader gov.nist.javax.sip.message.SIPMessage.getCallIdHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPMessage.getCharset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Via gov.nist.javax.sip.message.SIPMessage.getTopmostVia() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FromHeader gov.nist.javax.sip.message.SIPMessage.getFrom() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPMessage.getFromTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ListIterator gov.nist.javax.sip.message.SIPMessage.getUnrecognizedHeaders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.message.SIPMessage.setToTag(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Authorization gov.nist.javax.sip.message.SIPMessage.getAuthorization() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object gov.nist.javax.sip.message.SIPMessage.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ContentDispositionHeader gov.nist.javax.sip.message.SIPMessage.getContentDisposition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPMessage.encodeSIPHeaders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.message.SIPMessage.getSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Header gov.nist.javax.sip.message.SIPMessage.getHeader(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MaxForwardsHeader gov.nist.javax.sip.message.SIPMessage.getMaxForwards() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPMessage.getMessageContent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ListIterator gov.nist.javax.sip.message.SIPMessage.getHeaderNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.message.SIPMessage.encode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ContentLengthHeader gov.nist.javax.sip.message.SIPMessage.getContentLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ClientTransaction gov.nist.javax.sip.clientauthutils.AuthenticationHelperImpl.handleChallenge(Response,ClientTransaction,SipProvider,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection gov.nist.javax.sip.clientauthutils.CredentialsCache.getCachedAuthorizationHeaders(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.clientauthutils.CredentialsCache.cacheAuthorizationHeader(String,AuthorizationHeader,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SipProvider gov.nist.javax.sip.SipStackImpl.createSipProvider(ListeningPoint) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ListeningPoint gov.nist.javax.sip.SipStackImpl.createListeningPoint(String,int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
EventScanner gov.nist.javax.sip.SipStackImpl.getEventScanner() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.javax.sip.SipStackImpl.<init>(Properties) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
AuthenticationHelper gov.nist.javax.sip.SipStackImpl.getAuthenticationHelper(AccountManager,HeaderFactory) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.SipStackImpl.getIPAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AuthenticationHelper gov.nist.javax.sip.SipStackImpl.getSecureAuthenticationHelper(SecureAccountManager,HeaderFactory) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Iterator gov.nist.javax.sip.SipStackImpl.getListeningPoints() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Iterator gov.nist.javax.sip.SipStackImpl.getSipProviders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.SipStackImpl.getStackName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] gov.nist.javax.sip.SipStackImpl.getEnabledCipherSuites() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
SipListener gov.nist.javax.sip.SipStackImpl.getSipListener() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ListeningPoint gov.nist.javax.sip.SipStackImpl.createListeningPoint(int,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] gov.nist.javax.sip.SipStackImpl.getEnabledProtocols() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
LogRecordFactory gov.nist.javax.sip.SipStackImpl.getLogRecordFactory() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ClientTransactionExt gov.nist.javax.sip.ResponseEventExt.getOriginalTransaction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.parser.Lexer.getHeaderName(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.parser.Lexer.getHeaderValue(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.javax.sip.parser.Pipeline$Buffer.getNextByte() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HeaderParser gov.nist.javax.sip.parser.ParserFactory.createParser(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SIPHeader gov.nist.javax.sip.parser.StringMsgParser.parseSIPHeader(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.parser.Parser.method() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Lexer gov.nist.javax.sip.parser.Parser.getLexer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.javax.sip.parser.Parser.sipVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.core.InternalErrorHandler.handleException(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.core.GenericObject.getIndentation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.core.GenericObject.dbgPrint(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object gov.nist.core.GenericObject.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.core.GenericObject.debugDump() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Match gov.nist.core.GenericObject.getMatcher() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class gov.nist.core.GenericObject.getClassFromName(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Iterator gov.nist.core.NameValueList.getNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NameValue gov.nist.core.NameValueList.getNameValue(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NameValue gov.nist.core.NameValueList.put(String,NameValue) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.core.NameValueList.getParameter(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NameValue gov.nist.core.NameValueList.get(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.core.NameValueList.set(NameValue) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object gov.nist.core.NameValueList.getValue(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.core.NameValueList.set(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.core.DuplicateNameValueList.set(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.core.DuplicateNameValueList.set(NameValue) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.core.DuplicateNameValueList.getParameter(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Iterator gov.nist.core.DuplicateNameValueList.getNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object gov.nist.core.DuplicateNameValueList.getValue(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NameValue gov.nist.core.DuplicateNameValueList.put(String,NameValue) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Collection gov.nist.core.DuplicateNameValueList.getNameValue(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long gov.nist.core.ThreadAuditor.getPingIntervalInMillisecs() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.core.ThreadAuditor$ThreadHandle.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long gov.nist.core.ThreadAuditor$ThreadHandle.getPingIntervalInMillisecs() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Thread gov.nist.core.ThreadAuditor$ThreadHandle.getThread() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.core.GenericObjectList.debugDump() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean gov.nist.core.GenericObjectList.match(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object gov.nist.core.GenericObjectList.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.core.GenericObjectList.encode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
GenericObject gov.nist.core.GenericObjectList.next() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.core.GenericObjectList.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.core.GenericObjectList.getIndentation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
GenericObject gov.nist.core.GenericObjectList.first() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Hashtable gov.nist.core.LexerCore.addLexer(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Token gov.nist.core.LexerCore.getNextToken() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.core.LexerCore.getBuffer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.core.LexerCore.getNextId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Token gov.nist.core.LexerCore.match(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.core.LexerCore.getRest() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.core.LexerCore.getPtr() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.core.LexerCore.addKeyword(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.core.LexerCore.getString(char) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Host gov.nist.core.HostPort.getHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.core.HostPort.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress gov.nist.core.HostPort.getInetAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NameValue gov.nist.core.ParserCore.nameValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.core.ParserCore.dbg_leave(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.core.ParserCore.peekLine(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.core.ParserCore.dbg_enter(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List gov.nist.core.MultiValueMapImpl.put(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List gov.nist.core.MultiValueMapImpl.put(String,List) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Vector gov.nist.core.StringTokenizer.getLines() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.core.StringTokenizer.getNextToken(char) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char gov.nist.core.StringTokenizer.getNextChar() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.core.StringTokenizer.getSDPFieldName(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.core.StringTokenizer.getLine() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int gov.nist.core.Token.getTokenType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.core.Token.getTokenValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SSLServerSocket gov.nist.core.net.DefaultNetworkLayer.createSSLServerSocket(int,int,InetAddress) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Socket gov.nist.core.net.DefaultNetworkLayer.createSocket(InetAddress,int,InetAddress,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SSLSocket gov.nist.core.net.DefaultNetworkLayer.createSSLSocket(InetAddress,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SSLSocket gov.nist.core.net.DefaultNetworkLayer.createSSLSocket(InetAddress,int,InetAddress) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SSLSocket gov.nist.core.net.SslNetworkLayer.createSSLSocket(InetAddress,int) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
Socket gov.nist.core.net.SslNetworkLayer.createSocket(InetAddress,int,InetAddress,int) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
SSLSocket gov.nist.core.net.SslNetworkLayer.createSSLSocket(InetAddress,int,InetAddress) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
SSLServerSocket gov.nist.core.net.SslNetworkLayer.createSSLServerSocket(int,int,InetAddress) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void gov.nist.core.Host.setHostAddress(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.core.Host.getIpAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.core.Host.getAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.core.Host.setAddress(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.core.Host.getHostname() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress gov.nist.core.Host.getInetAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void gov.nist.core.Host.setHostname(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object gov.nist.core.NameValue.getValueAsObject() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String gov.nist.core.NameValue.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Unsafe sun.misc.Unsafe.getUnsafe() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AlgorithmParameters java.security.AlgorithmParameters.getInstance(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Provider java.security.AlgorithmParameters.getProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] java.security.AlgorithmParameters.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.AlgorithmParameters.getAlgorithm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] java.security.AlgorithmParameters.getEncoded(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AlgorithmParameters java.security.AlgorithmParameters.getInstance(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AlgorithmParameters java.security.AlgorithmParameters.getInstance(String,Provider) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Timestamp java.security.CodeSigner.getTimestamp() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CertPath java.security.CodeSigner.getSignerCertPath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.security.Signature.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.security.Signature.getParameter(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Signature java.security.Signature.getInstance(String,Provider) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Signature java.security.Signature.getInstance(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.security.Signature.setParameter(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Signature java.security.Signature.getInstance(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Provider java.security.Signature.getProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] java.security.Signature.sign() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.Signature.getAlgorithm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AlgorithmParameters java.security.Signature.getParameters() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.Signature.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] java.security.Signature$SignatureImpl.engineSign() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection java.security.Provider.values() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.Provider$Service.getAttribute(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Set java.security.Provider.entrySet() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.security.Provider$Service.putAttribute(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.security.Provider.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.security.Provider.getProviderNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.Provider$Service.getClassName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
List java.security.Provider$Service.getAliases() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String java.security.Provider$Service.getAlgorithm() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Set java.security.Provider.getServices() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
double java.security.Provider.getVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.Provider$Service.getType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String java.security.Provider.getInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Set java.security.Provider.keySet() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.Provider.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Provider java.security.Provider$Service.getProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.security.KeyStore.setKeyEntry(String,Key,char[],Certificate[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
KeyStore java.security.KeyStore.getInstance(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SecretKey java.security.KeyStore$SecretKeyEntry.getSecretKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Certificate[] java.security.KeyStore.getCertificateChain(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Certificate java.security.KeyStore$TrustedCertificateEntry.getTrustedCertificate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.security.KeyStore.setCertificateEntry(String,Certificate) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
KeyStore java.security.KeyStore.getInstance(String,Provider) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Provider java.security.KeyStore.getProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.KeyStore.getCertificateAlias(Certificate) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Certificate java.security.KeyStore$PrivateKeyEntry.getCertificate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CallbackHandler java.security.KeyStore$CallbackHandlerProtection.getCallbackHandler() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.security.KeyStore.setKeyEntry(String,byte[],Certificate[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
KeyStore java.security.KeyStore.getInstance(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Date java.security.KeyStore.getCreationDate(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Key java.security.KeyStore.getKey(String,char[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.KeyStore.getDefaultType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
KeyStore java.security.KeyStore$Builder$BuilderImpl.getKeyStore() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Certificate java.security.KeyStore.getCertificate(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Certificate[] java.security.KeyStore$PrivateKeyEntry.getCertificateChain() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PrivateKey java.security.KeyStore$PrivateKeyEntry.getPrivateKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.KeyStore.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char[] java.security.KeyStore$PasswordProtection.getPassword() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Exception java.security.PrivilegedActionException.getException() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PermissionCollection java.security.Permission.newPermissionCollection() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.Permission.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SecureRandom java.security.SecureRandom.getInstance(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SecureRandom java.security.SecureRandom.getInstance(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Provider java.security.SecureRandom.getProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.SecureRandom.getAlgorithm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SecureRandom java.security.SecureRandom.getInstance(String,Provider) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.security.SecureRandom.setSeed(byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] java.security.SecureRandom.generateSeed(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.security.SecureRandom.setSeed(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] java.security.SecureRandom.getSeed(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Permission java.security.AccessControlException.getPermission() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Date java.security.Timestamp.getTimestamp() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CertPath java.security.Timestamp.getSignerCertPath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger java.security.spec.DSAPrivateKeySpec.getX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger java.security.spec.DSAPrivateKeySpec.getQ() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger java.security.spec.DSAPrivateKeySpec.getP() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger java.security.spec.DSAPrivateKeySpec.getG() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] java.security.spec.EncodedKeySpec.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.spec.X509EncodedKeySpec.getFormat() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] java.security.spec.X509EncodedKeySpec.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger java.security.spec.RSAPublicKeySpec.getPublicExponent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger java.security.spec.RSAPublicKeySpec.getModulus() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger java.security.spec.RSAPrivateCrtKeySpec.getPrimeP() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger java.security.spec.RSAPrivateCrtKeySpec.getPublicExponent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger java.security.spec.RSAPrivateCrtKeySpec.getPrimeQ() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger java.security.spec.RSAPrivateCrtKeySpec.getPrimeExponentP() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger java.security.spec.RSAPrivateCrtKeySpec.getPrimeExponentQ() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger java.security.spec.RSAPrivateCrtKeySpec.getCrtCoefficient() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger java.security.spec.RSAPrivateKeySpec.getPrivateExponent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger java.security.spec.RSAPrivateKeySpec.getModulus() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.MessageDigest.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MessageDigest java.security.MessageDigest.getInstance(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MessageDigest java.security.MessageDigest.getInstance(String,Provider) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MessageDigest java.security.MessageDigest.getInstance(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.security.MessageDigest.getDigestLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.security.MessageDigest.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] java.security.MessageDigest$MessageDigestImpl.engineDigest() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.MessageDigest.getAlgorithm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Provider java.security.MessageDigest.getProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] java.security.MessageDigest.digest() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] java.security.MessageDigest.digest(byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.BasicPermission.getActions() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Iterator java.security.cert.CertificateFactory.getCertPathEncodings() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Provider java.security.cert.CertificateFactory.getProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.cert.CertificateFactory.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.cert.CRL.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.cert.CertPath.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.cert.CertPath.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.security.cert.CertPath.writeReplace() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.cert.Certificate.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.security.cert.Certificate.writeReplace() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Iterator java.security.cert.CertificateFactorySpi.engineGetCertPathEncodings() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection java.security.cert.X509Certificate.getSubjectAlternativeNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List java.security.cert.X509Certificate.getExtendedKeyUsage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection java.security.cert.X509Certificate.getIssuerAlternativeNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
X500Principal java.security.cert.X509Certificate.getIssuerX500Principal() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
X500Principal java.security.cert.X509Certificate.getSubjectX500Principal() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.Security.getProperty(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Provider[] java.security.Security.getProviders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Set java.security.Security.getAlgorithms(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Provider java.security.Security.getProvider(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.security.Security.setProperty(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Provider[] java.security.Security.getProviders(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.Security.getAlgorithmProperty(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.AllPermission.getActions() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AccessControlContext java.security.AccessController.getContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
KeyFactory java.security.KeyFactory.getInstance(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
KeyFactory java.security.KeyFactory.getInstance(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
KeyFactory java.security.KeyFactory.getInstance(String,Provider) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Provider java.security.KeyFactory.getProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.KeyFactory.getAlgorithm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DomainCombiner java.security.AccessControlContext.getDomainCombiner() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PublicKey java.security.KeyPair.getPublic() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PrivateKey java.security.KeyPair.getPrivate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.security.MessageDigestSpi.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
KeyPairGenerator java.security.KeyPairGenerator.getInstance(String,Provider) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
KeyPairGenerator java.security.KeyPairGenerator.getInstance(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
KeyPairGenerator java.security.KeyPairGenerator.getInstance(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Provider java.security.KeyPairGenerator.getProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.security.KeyPairGenerator.getAlgorithm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
KeyPair java.security.KeyPairGenerator.generateKeyPair() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
KeyPair java.security.KeyPairGenerator.genKeyPair() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AlgorithmParameters java.security.SignatureSpi.engineGetParameters() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.security.SignatureSpi.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.text.ParseException.getErrorOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.text.ParsePosition.getIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.text.ParsePosition.getErrorIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.text.FieldPosition.getField() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.text.FieldPosition.getBeginIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.text.FieldPosition.getEndIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.text.Collator.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.Collator.setDecomposition(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Locale[] java.text.Collator.getAvailableLocales() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.Collator.setStrength(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.text.Collator.getStrength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.text.Collator.compare(Object,Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.text.Collator.getDecomposition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collator java.text.Collator.getInstance(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collator java.text.Collator.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharacterIterator java.text.RuleBasedBreakIterator.getText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.RuleBasedBreakIterator.setText(CharacterIterator) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.text.AttributedString$AttributedIterator.getEndIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Map java.text.AttributedString$AttributedIterator.getAttributes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.text.AttributedString$AttributedIterator.getRunLimit() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Set java.text.AttributedString$AttributedIterator.getAllAttributeKeys() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.text.AttributedString$AttributedIterator.getBeginIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.text.AttributedString$AttributedIterator.getRunStart() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.text.AttributedString$AttributedIterator.getIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AttributedCharacterIterator java.text.AttributedString.getIterator() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.SimpleDateFormat.setDateFormatSymbols(DateFormatSymbols) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Date java.text.SimpleDateFormat.get2DigitYearStart() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DateFormatSymbols java.text.SimpleDateFormat.getDateFormatSymbols() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Date java.text.SimpleDateFormat.parse(String,ParsePosition) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.SimpleDateFormat.set2DigitYearStart(Date) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.text.Format.format(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.text.Format.parseObject(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.text.Format.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.text.DateFormat.format(Date) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DateFormat java.text.DateFormat.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Date java.text.DateFormat.parse(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.text.DateFormat$Field.getCalendarField() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DateFormat java.text.DateFormat.getTimeInstance(int,Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Calendar java.text.DateFormat.getCalendar() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DateFormat java.text.DateFormat.getDateTimeInstance(int,int,Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DateFormat java.text.DateFormat.getDateTimeInstance(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DateFormat java.text.DateFormat.getDateInstance(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.DateFormat.setTimeZone(TimeZone) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
TimeZone java.text.DateFormat.getTimeZone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DateFormat java.text.DateFormat.getDateTimeInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Locale[] java.text.DateFormat.getAvailableLocales() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
StringBuffer java.text.DateFormat.format(Object,StringBuffer,FieldPosition) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DateFormat java.text.DateFormat.getTimeInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.text.DateFormat.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DateFormat java.text.DateFormat.getTimeInstance(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.DateFormat.setLenient(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
DateFormat java.text.DateFormat.getDateInstance(int,Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DateFormat java.text.DateFormat.getDateInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NumberFormat java.text.DateFormat.getNumberFormat() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.text.DateFormat.parseObject(String,ParsePosition) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Number java.text.ChoiceFormat.parse(String,ParsePosition) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
double[] java.text.ChoiceFormat.getLimits() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object[] java.text.ChoiceFormat.getFormats() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.text.DecimalFormatSymbols.getInternationalCurrencySymbol() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.text.DecimalFormatSymbols.getGroupingSeparator() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.text.DecimalFormatSymbols.getZeroDigit() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.text.DecimalFormatSymbols.getCurrencySymbol() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.DecimalFormatSymbols.setInternationalCurrencySymbol(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
char java.text.DecimalFormatSymbols.getDecimalSeparator() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.text.DecimalFormatSymbols.getInfinity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.text.DecimalFormatSymbols.getMonetaryDecimalSeparator() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.text.DecimalFormatSymbols.getDigit() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DecimalFormatSymbols java.text.DecimalFormatSymbols.getInstance(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DecimalFormatSymbols java.text.DecimalFormatSymbols.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Locale[] java.text.DecimalFormatSymbols.getAvailableLocales() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.text.DecimalFormatSymbols.getPerMill() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.text.DecimalFormatSymbols.getExponentSeparator() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.text.DecimalFormatSymbols.getPercent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.text.DecimalFormatSymbols.getNaN() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Currency java.text.DecimalFormatSymbols.getCurrency() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.text.DecimalFormatSymbols.getMinusSign() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.text.DecimalFormatSymbols.getPatternSeparator() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.text.CollationKey.getSourceString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.text.StringCharacterIterator.getEndIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.text.StringCharacterIterator.getIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.text.StringCharacterIterator.getBeginIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.MessageFormat.setFormatByArgumentIndex(int,Format) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.text.MessageFormat.setFormats(Format[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Locale java.text.MessageFormat.getLocale() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Format[] java.text.MessageFormat.getFormatsByArgumentIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.MessageFormat.setFormatsByArgumentIndex(Format[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object[] java.text.MessageFormat.parse(String,ParsePosition) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Format[] java.text.MessageFormat.getFormats() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.MessageFormat.setFormat(int,Format) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.text.RuleBasedCollator.getRules() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CollationKey java.text.RuleBasedCollator.getCollationKey(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CollationElementIterator java.text.RuleBasedCollator.getCollationElementIterator(CharacterIterator) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CollationElementIterator java.text.RuleBasedCollator.getCollationElementIterator(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NumberFormat java.text.NumberFormat.getCurrencyInstance(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.text.NumberFormat.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NumberFormat java.text.NumberFormat.getNumberInstance(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NumberFormat java.text.NumberFormat.getInstance(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NumberFormat java.text.NumberFormat.getIntegerInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.text.NumberFormat.format(long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RoundingMode java.text.NumberFormat.getRoundingMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.text.NumberFormat.parseObject(String,ParsePosition) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NumberFormat java.text.NumberFormat.getPercentInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.NumberFormat.setRoundingMode(RoundingMode) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.text.NumberFormat.setCurrency(Currency) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
NumberFormat java.text.NumberFormat.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.text.NumberFormat.getMinimumFractionDigits() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NumberFormat java.text.NumberFormat.getPercentInstance(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Number java.text.NumberFormat.parse(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.text.NumberFormat.getMinimumIntegerDigits() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NumberFormat java.text.NumberFormat.getNumberInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Locale[] java.text.NumberFormat.getAvailableLocales() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.text.NumberFormat.getMaximumIntegerDigits() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.text.NumberFormat.format(double) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Currency java.text.NumberFormat.getCurrency() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
StringBuffer java.text.NumberFormat.format(Object,StringBuffer,FieldPosition) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NumberFormat java.text.NumberFormat.getIntegerInstance(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NumberFormat java.text.NumberFormat.getCurrencyInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.text.NumberFormat.getMaximumFractionDigits() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.text.AttributedCharacterIterator$Attribute.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BreakIterator java.text.BreakIterator.getSentenceInstance(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BreakIterator java.text.BreakIterator.getLineInstance(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.BreakIterator.setText(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
BreakIterator java.text.BreakIterator.getWordInstance(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Locale[] java.text.BreakIterator.getAvailableLocales() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BreakIterator java.text.BreakIterator.getSentenceInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BreakIterator java.text.BreakIterator.getWordInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.text.BreakIterator.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BreakIterator java.text.BreakIterator.getLineInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BreakIterator java.text.BreakIterator.getCharacterInstance(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BreakIterator java.text.BreakIterator.getCharacterInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.DecimalFormat.setNegativePrefix(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.text.DecimalFormat.getPositiveSuffix() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.text.DecimalFormat.getPositivePrefix() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.DecimalFormat.setMaximumIntegerDigits(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.text.DecimalFormat.setParseBigDecimal(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.text.DecimalFormat.getNegativeSuffix() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.text.DecimalFormat.getGroupingSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.DecimalFormat.setGroupingUsed(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.text.DecimalFormat.setMultiplier(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.text.DecimalFormat.setMinimumIntegerDigits(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.text.DecimalFormat.setNegativeSuffix(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.text.DecimalFormat.getMultiplier() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.DecimalFormat.setPositiveSuffix(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.text.DecimalFormat.setMinimumFractionDigits(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.text.DecimalFormat.setGroupingSize(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.text.DecimalFormat.getNegativePrefix() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DecimalFormatSymbols java.text.DecimalFormat.getDecimalFormatSymbols() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.DecimalFormat.setDecimalSeparatorAlwaysShown(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
RoundingMode java.text.DecimalFormat.getRoundingMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.DecimalFormat.setCurrency(Currency) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.text.DecimalFormat.setParseIntegerOnly(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Currency java.text.DecimalFormat.getCurrency() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.DecimalFormat.setPositivePrefix(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.text.DecimalFormat.setDecimalFormatSymbols(DecimalFormatSymbols) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.text.DecimalFormat.setMaximumFractionDigits(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object java.text.Annotation.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.text.CollationElementIterator.getOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.CollationElementIterator.setOffset(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.text.CollationElementIterator.setText(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.text.CollationElementIterator.getMaxExpansion(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.DateFormatSymbols.setShortWeekdays(String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.text.DateFormatSymbols.setShortMonths(String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.text.DateFormatSymbols.setWeekdays(String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
DateFormatSymbols java.text.DateFormatSymbols.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.DateFormatSymbols.setEras(String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.text.DateFormatSymbols.setMonths(String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] java.text.DateFormatSymbols.getShortMonths() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] java.text.DateFormatSymbols.getShortWeekdays() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] java.text.DateFormatSymbols.getEras() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.DateFormatSymbols.setAmPmStrings(String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] java.text.DateFormatSymbols.getMonths() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.text.DateFormatSymbols.setZoneStrings(String[][]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Locale[] java.text.DateFormatSymbols.getAvailableLocales() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] java.text.DateFormatSymbols.getAmPmStrings() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.text.DateFormatSymbols.getLocalPatternChars() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[][] java.text.DateFormatSymbols.getZoneStrings() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[][] java.text.DateFormatSymbols.internalZoneStrings() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] java.text.DateFormatSymbols.getWeekdays() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DateFormatSymbols java.text.DateFormatSymbols.getInstance(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.sql.Date.getSeconds() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.sql.Date.getMinutes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.sql.Date.setSeconds(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.sql.Date.getHours() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.sql.Date.setMinutes(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.sql.Date.setHours(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.sql.Date.setTime(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Throwable java.lang.reflect.UndeclaredThrowableException.getUndeclaredThrowable() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Throwable java.lang.reflect.UndeclaredThrowableException.getCause() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Throwable java.lang.reflect.InvocationTargetException.getCause() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Throwable java.lang.reflect.InvocationTargetException.getTargetException() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.reflect.AccessibleObject.getSignatureAttribute() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Annotation[] java.lang.reflect.AccessibleObject.getAnnotations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.reflect.AccessibleObject.getClassSignatureAttribute(Class) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.reflect.AccessibleObject.getSignature(Class) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Annotation[] java.lang.reflect.AccessibleObject.getDeclaredAnnotations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.lang.reflect.Array.getInt(Object,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
double java.lang.reflect.Array.getDouble(Object,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.lang.reflect.Array.getLong(Object,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.lang.reflect.Array.newInstance(Class,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float java.lang.reflect.Array.getFloat(Object,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte java.lang.reflect.Array.getByte(Object,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
short java.lang.reflect.Array.getShort(Object,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.lang.reflect.Array.set(Object,int,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object java.lang.reflect.Array.get(Object,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.lang.reflect.Array.getChar(Object,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.lang.reflect.Array.newInstance(Class,int[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.lang.reflect.Array.getLength(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.lang.reflect.Field.getInt(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.lang.reflect.Field.setBoolean(Object,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float java.lang.reflect.Field.getFloat(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.lang.reflect.Field.getLong(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
short java.lang.reflect.Field.getShort(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class java.lang.reflect.Field.getDeclaringClass() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.lang.reflect.Field.setFloat(Object,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Class java.lang.reflect.Field.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.lang.reflect.Field.getChar(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.lang.reflect.Field.setShort(Object,short) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.lang.reflect.Field.setDouble(Object,double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.lang.reflect.Field.setLong(Object,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Annotation[] java.lang.reflect.Field.getDeclaredAnnotations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.lang.reflect.Field.get(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Type java.lang.reflect.Field.getGenericType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.lang.reflect.Field.set(Object,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.lang.reflect.Field.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
double java.lang.reflect.Field.getDouble(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.lang.reflect.Field.setByte(Object,byte) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.lang.reflect.Field.getModifiers() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.lang.reflect.Field.setChar(Object,char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte java.lang.reflect.Field.getByte(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.reflect.Field.getSignatureAttribute() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.lang.reflect.Field.setInt(Object,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Class java.lang.reflect.Constructor.getDeclaringClass() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.reflect.Constructor.getSignatureAttribute() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Annotation[] java.lang.reflect.Constructor.getDeclaredAnnotations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TypeVariable[] java.lang.reflect.Constructor.getTypeParameters() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Annotation[][] java.lang.reflect.Constructor.getParameterAnnotations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.lang.reflect.Constructor.getModifiers() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class[] java.lang.reflect.Constructor.getParameterTypes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class[] java.lang.reflect.Constructor.getExceptionTypes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Type[] java.lang.reflect.Constructor.getGenericParameterTypes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.reflect.Constructor.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Type[] java.lang.reflect.Constructor.getGenericExceptionTypes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InvocationHandler java.lang.reflect.Proxy.getInvocationHandler(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class java.lang.reflect.Proxy.getProxyClass(ClassLoader,Class[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TypeVariable[] java.lang.reflect.Method.getTypeParameters() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.reflect.Method.getSignatureAttribute() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class java.lang.reflect.Method.getReturnType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class[] java.lang.reflect.Method.getExceptionTypes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Type java.lang.reflect.Method.getGenericReturnType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.lang.reflect.Method.getModifiers() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.reflect.Method.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.lang.reflect.Method.getDefaultValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Type[] java.lang.reflect.Method.getGenericExceptionTypes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Type[] java.lang.reflect.Method.getGenericParameterTypes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Annotation[][] java.lang.reflect.Method.getParameterAnnotations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class[] java.lang.reflect.Method.getParameterTypes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class java.lang.reflect.Method.getDeclaringClass() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Annotation[] java.lang.reflect.Method.getDeclaredAnnotations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
OutputStream java.lang.Runtime.getLocalizedOutputStream(OutputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Process java.lang.Runtime.exec(String[],String[],File) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Runtime java.lang.Runtime.getRuntime() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream java.lang.Runtime.getLocalizedInputStream(InputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.lang.Math.getExponent(float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.lang.Math.getExponent(double) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ClassLoader java.lang.Thread.getContextClassLoader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ThreadGroup java.lang.Thread.getThreadGroup() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
StackTraceElement[] java.lang.Thread.getStackTrace() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.lang.Thread.getPriority() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.Thread.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Map java.lang.Thread.getAllStackTraces() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.lang.Thread.getId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
StackTraceElement[] java.lang.Daemons$Daemon.getStackTrace() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Process java.lang.ProcessManager.exec(String[],String[],File,boolean) - @DSSink({DSSinkKind.FILE})
void java.lang.ProcessManager$ProcessImpl.setExitValue(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ProcessManager java.lang.ProcessManager.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
OutputStream java.lang.ProcessManager$ProcessImpl.getOutputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream java.lang.ProcessManager$ProcessImpl.getErrorStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream java.lang.ProcessManager$ProcessImpl.getInputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.lang.StringBuffer.setLength(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.lang.StringBuffer.setCharAt(int,char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] java.lang.UnsafeByteSequence.toByteArray() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Throwable[] java.lang.Throwable.getSuppressed() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
StackTraceElement[] java.lang.Throwable.getStackTrace() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.Throwable.getLocalizedMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.lang.Throwable.setStackTrace(StackTraceElement[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Throwable java.lang.Throwable.getCause() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.Throwable.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Throwable java.lang.ExceptionInInitializerError.getException() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Throwable java.lang.ExceptionInInitializerError.getCause() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] java.lang.String.getBytes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.lang.String.startsWith(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] java.lang.String.getBytes(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.String.substring(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] java.lang.String.getBytes(Charset) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.StackTraceElement.getMethodName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.lang.StackTraceElement.getLineNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.StackTraceElement.getFileName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.StackTraceElement.getClassName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte java.lang.Number.byteValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
short java.lang.Number.shortValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte java.lang.Character.getDirectionality(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.Character.getName(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte java.lang.Character.getDirectionality(char) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.lang.ThreadLocal.set(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object java.lang.ThreadLocal$Values.getAfterMiss(ThreadLocal) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.lang.ThreadLocal.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ClassLoader java.lang.Class.getClassLoader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Constructor[] java.lang.Class.getConstructors() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Constructor java.lang.Class.getDeclaredConstructor(Class[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.Class.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ClassLoader java.lang.Class.getClassLoaderImpl() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Method[] java.lang.Class.getMethods() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Annotation[] java.lang.Class.getAnnotations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.Class.getCanonicalName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TypeVariable[] java.lang.Class.getTypeParameters() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Method[] java.lang.Class.getDeclaredMethods() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ProtectionDomain java.lang.Class.getProtectionDomain() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Constructor java.lang.Class.getConstructor(Class[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Field java.lang.Class.getField(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Type java.lang.Class.getGenericSuperclass() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Field[] java.lang.Class.getFields() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.Class.getSimpleName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Method java.lang.Class.getMethod(String,Class[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Constructor[] java.lang.Class.getDeclaredConstructors() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
URL java.lang.Class.getResource(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Field java.lang.Class.getDeclaredField(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream java.lang.Class.getResourceAsStream(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.lang.Class.getModifiers() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object[] java.lang.Class.getSigners() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Field[] java.lang.Class.getDeclaredFields() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class[] java.lang.Class.getClasses() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Method java.lang.Class.getDeclaredMethod(String,Class[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class[] java.lang.Class.getDeclaredClasses() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Package java.lang.Class.getPackage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object[] java.lang.Class.getEnumConstants() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Type[] java.lang.Class.getGenericInterfaces() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ThreadGroup java.lang.ThreadGroup.getParent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.ThreadGroup.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.lang.ThreadGroup.getMaxPriority() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.lang.ThreadGroup.setMaxPriority(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.lang.AbstractStringBuilder.substring(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
char[] java.lang.AbstractStringBuilder.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.lang.AbstractStringBuilder.setCharAt(int,char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InputStream java.lang.ClassLoader.getResourceAsStream(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
URL java.lang.ClassLoader.getResource(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Class java.lang.ClassLoader.loadClass(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Package java.lang.BootClassLoader.getPackage(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Class java.lang.ClassLoader.findClass(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Enumeration java.lang.ClassLoader.getSystemResources(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Package[] java.lang.ClassLoader.getPackages() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
URL java.lang.ClassLoader.findResource(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Enumeration java.lang.ClassLoader.findResources(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void java.lang.ClassLoader.setPackageAssertionStatus(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Class java.lang.ClassLoader.findLoadedClass(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Class java.lang.ClassLoader.defineClass(String,byte[],int,int,ProtectionDomain) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void java.lang.ClassLoader.setDefaultAssertionStatus(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Package java.lang.ClassLoader.definePackage(String,String,String,String,String,String,String,URL) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ClassLoader java.lang.ClassLoader.getParent() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Class java.lang.ClassLoader.loadClass(String,boolean) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Class java.lang.ClassLoader.defineClass(String,byte[],int,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Enumeration java.lang.BootClassLoader.getResources(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Class java.lang.ClassLoader.defineClass(String,ByteBuffer,ProtectionDomain) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
BootClassLoader java.lang.BootClassLoader.getInstance() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
URL java.lang.ClassLoader.getSystemResource(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ClassLoader java.lang.ClassLoader.getSystemClassLoader() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
URL java.lang.BootClassLoader.getResource(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String java.lang.ClassLoader.findLibrary(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Package java.lang.ClassLoader.getPackage(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Enumeration java.lang.ClassLoader.getResources(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void java.lang.ClassLoader.setClassAssertionStatus(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Class java.lang.ClassLoader.defineClass(byte[],int,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
InputStream java.lang.ClassLoader.getSystemResourceAsStream(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Package[] java.lang.Package.getPackages() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.Package.getImplementationTitle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Package java.lang.Package.getPackage(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.Package.getImplementationVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.Package.getSpecificationVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.Package.getSpecificationTitle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Annotation[] java.lang.Package.getAnnotations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Annotation[] java.lang.Package.getDeclaredAnnotations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.Package.getImplementationVendor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.Package.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.Package.getSpecificationVendor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Throwable java.lang.ClassNotFoundException.getException() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Throwable java.lang.ClassNotFoundException.getCause() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.RuntimePermission.getActions() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
URL java.lang.VMClassLoader.getResource(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
List java.lang.VMClassLoader.getResources(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object java.lang.SecurityManager.getSecurityContext() - @DSSource({DSSourceKind.FILE_INFORMATION})
Class java.lang.SecurityManager.currentLoadedClass() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.lang.SecurityManager.checkWrite(FileDescriptor) - @DSSink({DSSinkKind.FILE})
ThreadGroup java.lang.SecurityManager.getThreadGroup() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.lang.SecurityManager.getInCheck() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.lang.SecurityManager.checkRead(FileDescriptor) - @DSSink({DSSinkKind.FILE})
ClassLoader java.lang.SecurityManager.currentClassLoader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.lang.SecurityManager.classLoaderDepth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class[] java.lang.SecurityManager.getClassContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Long java.lang.Long.getLong(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Long java.lang.Long.getLong(String,Long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Long java.lang.Long.getLong(String,long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.System.getProperty(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.System.getProperty(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SecurityManager java.lang.System.getSecurityManager() - @DSSource({DSSourceKind.FILE_INFORMATION})
void java.lang.System.setOut(PrintStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Properties java.lang.System.getProperties() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.lang.System.setIn(InputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.lang.System.setErr(PrintStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.lang.System.setProperty(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.lang.System.getenv(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Map java.lang.System.getenv() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Integer java.lang.Integer.getInteger(String,Integer) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Integer java.lang.Integer.getInteger(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Integer java.lang.Integer.getInteger(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RealToString java.lang.RealToString.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.Enum.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.lang.Enum.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.lang.Enum.name() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class java.lang.Enum.getDeclaringClass() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Process java.lang.ProcessBuilder.start() - @DSSink({DSSinkKind.OS_COMMAND})
List java.lang.ProcessBuilder.command() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.lang.ref.Reference.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.lang.ref.FinalizerReference.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.math.MathContext.getPrecision() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RoundingMode java.math.MathContext.getRoundingMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigDecimal java.math.BigDecimal.setScale(int,RoundingMode) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
BigDecimal java.math.BigDecimal.setScale(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
BigDecimal java.math.BigDecimal.setScale(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
BigDecimal java.math.BigDecimal.divideToIntegralValue(BigDecimal,MathContext) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.math.BigInt.getNativeBIGNUM() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] java.math.BigInt.bigEndianMagnitude() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.math.BigInt.setSign(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
BigInt java.math.BigInteger.getBigInt() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.math.BigInteger.getLowestSetBit() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger java.math.BigInteger.copy() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger java.math.BigInteger.setBit(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] java.math.BigInteger.toByteArray() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger java.math.BigInteger.shiftLeftOneBit() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.math.BigInteger.getFirstNonzeroDigit() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.io.FilterOutputStream.write(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.FilterOutputStream.write(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
char java.io.EmulatedFieldsForLoading.get(String,char) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte java.io.EmulatedFieldsForLoading.get(String,byte) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float java.io.EmulatedFieldsForLoading.get(String,float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
short java.io.EmulatedFieldsForLoading.get(String,short) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.io.EmulatedFieldsForLoading.get(String,long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ObjectStreamClass java.io.EmulatedFieldsForLoading.getObjectStreamClass() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
double java.io.EmulatedFieldsForLoading.get(String,double) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.io.EmulatedFieldsForLoading.get(String,Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.io.BufferedWriter.write(char[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.BufferedWriter.write(String,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.io.OutputStreamWriter.getEncoding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintStream.println(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintStream.print(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintStream.println(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintStream.println(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintStream.println(char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintStream.println(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintStream.println(double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintStream.println(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintStream.write(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintStream.write(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintStream.println(char[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Throwable java.io.WriteAbortedException.getCause() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.io.WriteAbortedException.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.io.FileOutputStream.write(int) - @DSSink({DSSinkKind.FILE})
void java.io.FileOutputStream.write(byte[],int,int) - @DSSink({DSSinkKind.FILE})
FileChannel java.io.FileOutputStream.getChannel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FileDescriptor java.io.FileOutputStream.getFD() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.io.PipedOutputStream.write(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.BufferedOutputStream.write(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.OutputStream.write(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.OutputStream.write(byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long java.io.File.getTotalSpace() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File java.io.File.getCanonicalFile() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.io.File.setReadable(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean java.io.File.setLastModified(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean java.io.File.setReadable(boolean,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
File java.io.File.createTempFile(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.io.File.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.io.File.getPath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.io.File.getFreeSpace() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File java.io.File.getParentFile() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.io.File.getAbsolutePath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.io.File.setWritable(boolean,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
File java.io.File.getAbsoluteFile() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.io.File.setWritable(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.io.File.getParent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.io.File.getUsableSpace() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.io.File.getCanonicalPath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.io.File.setExecutable(boolean,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean java.io.File.setExecutable(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.Writer.write(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Writer java.io.Writer.append(char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Writer java.io.Writer.append(CharSequence,int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.io.Writer.write(char[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long java.io.RandomAccessFile.getFilePointer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.io.RandomAccessFile.writeUTF(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.RandomAccessFile.writeFloat(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.RandomAccessFile.writeChar(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
FileDescriptor java.io.RandomAccessFile.getFD() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FileChannel java.io.RandomAccessFile.getChannel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.io.RandomAccessFile.write(byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.RandomAccessFile.setLength(long) - @DSSink({DSSinkKind.FILE})
void java.io.RandomAccessFile.write(byte[],int,int) - @DSSink({DSSinkKind.FILE})
void java.io.RandomAccessFile.writeChars(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.RandomAccessFile.writeDouble(double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.ObjectOutputStream.writeClassDescriptor(ObjectStreamClass) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.ObjectOutputStream.writeUTF(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.ObjectOutputStream.writeChar(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.ObjectOutputStream.write(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.ObjectOutputStream.writeChars(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.ObjectOutputStream.writeObject(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.ObjectOutputStream.writeInt(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.ObjectOutputStream.write(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.ObjectOutputStream.writeLong(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.ObjectOutputStream.writeShort(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.ObjectOutputStream.writeBytes(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.ObjectOutputStream.writeBoolean(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.ObjectOutputStream.writeByte(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.ObjectOutputStream.writeUnshared(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.ObjectOutputStream.writeFloat(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.ObjectOutputStream.writeDouble(double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.EmulatedFieldsForDumping.put(String,short) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.EmulatedFieldsForDumping.put(String,double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.EmulatedFieldsForDumping.put(String,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.EmulatedFieldsForDumping.put(String,char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.EmulatedFieldsForDumping.put(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.EmulatedFieldsForDumping.put(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.EmulatedFieldsForDumping.put(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.EmulatedFieldsForDumping.put(String,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.EmulatedFieldsForDumping.put(String,byte) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.io.FileDescriptor.getInt$() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.io.ObjectStreamClass.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ObjectStreamClass java.io.ObjectStreamClass.getSuperclass() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Method java.io.ObjectStreamClass.getMethodWriteReplace() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ObjectStreamField[] java.io.ObjectStreamClass.fields() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ObjectStreamClass java.io.ObjectStreamClass.lookupStreamClass(Class) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.io.ObjectStreamClass.getSerialVersionUID() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.io.ObjectStreamClass.getConstructor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ObjectStreamField java.io.ObjectStreamClass.getField(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Method java.io.ObjectStreamClass.getMethodReadResolve() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Field java.io.ObjectStreamClass.getReflectionField(ObjectStreamField) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ObjectStreamField[] java.io.ObjectStreamClass.getLoadFields() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Method java.io.ObjectStreamClass.getMethodReadObjectNoData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Method java.io.ObjectStreamClass.getMethodReadObject() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ObjectStreamField[] java.io.ObjectStreamClass.getFields() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List java.io.ObjectStreamClass.getHierarchy() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte java.io.ObjectStreamClass.getFlags() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Method java.io.ObjectStreamClass.getMethodWriteObject() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
StringBuffer java.io.StringWriter.getBuffer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
StringWriter java.io.StringWriter.append(char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.io.FilePermission.getActions() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.io.EmulatedFields.get(String,long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.io.EmulatedFields.get(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ObjectStreamField java.io.EmulatedFields$ObjectSlot.getField() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
short java.io.EmulatedFields.get(String,short) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.io.EmulatedFields$ObjectSlot.getFieldValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.io.EmulatedFields.get(String,Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte java.io.EmulatedFields.get(String,byte) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.io.EmulatedFields.get(String,char) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float java.io.EmulatedFields.get(String,float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
double java.io.EmulatedFields.get(String,double) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.io.DataOutputStream.writeChars(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.DataOutputStream.writeUTF(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.DataOutputStream.writeDouble(double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.DataOutputStream.write(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.DataOutputStream.write(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.DataOutputStream.writeByte(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.DataOutputStream.writeFloat(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.DataOutputStream.writeChar(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.io.InputStreamReader.getEncoding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.io.InvalidClassException.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.io.SerializablePermission.getActions() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Console java.io.Console.getConsole() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.io.ObjectStreamField.getOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.io.ObjectStreamField.getTypeString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class java.io.ObjectStreamField.getTypeInternal() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.io.ObjectStreamField.getTypeCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class java.io.ObjectStreamField.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.io.ObjectStreamField.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] java.io.ByteArrayOutputStream.toByteArray() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintWriter.println(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintWriter.println(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintWriter.println(char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintWriter.write(char[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintWriter.println(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintWriter.println(char[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintWriter.println(double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintWriter.println(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintWriter.write(String,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintWriter.print(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintWriter.write(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.io.PrintWriter.println(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
PrintWriter java.io.PrintWriter.append(char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long java.io.Reader.skip(long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.io.Reader.read(CharBuffer) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharArrayWriter java.io.CharArrayWriter.append(char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
FileChannel java.io.FileInputStream.getChannel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FileDescriptor java.io.FileInputStream.getFD() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.beans.PropertyChangeEvent.getOldValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.beans.PropertyChangeEvent.getPropagationId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.beans.PropertyChangeEvent.getNewValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.beans.PropertyChangeEvent.getPropertyName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.beans.PropertyChangeListenerProxy.getPropertyName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PropertyChangeListener[] java.beans.PropertyChangeSupport.getPropertyChangeListeners() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PropertyChangeListener[] java.beans.PropertyChangeSupport.getPropertyChangeListeners(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.beans.IndexedPropertyChangeEvent.getIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] java.nio.ReadOnlyHeapByteBuffer.protectedArray() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharBuffer java.nio.CharSequenceAdapter.get(char[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.nio.CharSequenceAdapter.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.nio.CharSequenceAdapter.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ShortBuffer java.nio.ShortBuffer.get(short[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ShortBuffer java.nio.ShortBuffer.get(short[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ShortBuffer java.nio.ShortBuffer.put(short[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Buffer java.nio.Buffer.rewind() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Buffer java.nio.Buffer.flip() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.nio.Buffer.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Buffer java.nio.Buffer.mark() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Buffer java.nio.Buffer.reset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
short java.nio.MappedByteBufferAdapter.getShort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte java.nio.MappedByteBufferAdapter.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.MappedByteBufferAdapter.put(byte) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.MappedByteBufferAdapter.putShort(short) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.MappedByteBufferAdapter.get(byte[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.nio.MappedByteBufferAdapter.getInt() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte java.nio.MappedByteBufferAdapter.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.nio.MappedByteBufferAdapter.getChar(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
double java.nio.MappedByteBufferAdapter.getDouble() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.MappedByteBufferAdapter.putLong(int,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.MappedByteBufferAdapter.putDouble(int,double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
char java.nio.MappedByteBufferAdapter.getChar() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.MappedByteBufferAdapter.putFloat(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.MappedByteBufferAdapter.putShort(int,short) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.MappedByteBufferAdapter.putChar(int,char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.MappedByteBufferAdapter.putFloat(int,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float java.nio.MappedByteBufferAdapter.getFloat() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.nio.MappedByteBufferAdapter.getLong() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.nio.MappedByteBufferAdapter.getLong(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float java.nio.MappedByteBufferAdapter.getFloat(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
short java.nio.MappedByteBufferAdapter.getShort(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.MappedByteBufferAdapter.putInt(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.MappedByteBufferAdapter.putChar(char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] java.nio.MappedByteBufferAdapter.protectedArray() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.MappedByteBufferAdapter.put(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.MappedByteBufferAdapter.put(int,byte) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
double java.nio.MappedByteBufferAdapter.getDouble(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.MappedByteBufferAdapter.putLong(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.MappedByteBufferAdapter.putInt(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.MappedByteBufferAdapter.putDouble(double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long java.nio.MemoryBlock.getSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] java.nio.MemoryBlock.array() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] java.nio.MemoryBlock$NonMovableHeapBlock.array() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MappedByteBuffer java.nio.MappedByteBuffer.load() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MappedByteBuffer java.nio.MappedByteBuffer.force() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DoubleBuffer java.nio.DoubleArrayBuffer.get(double[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
double java.nio.DoubleArrayBuffer.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
double java.nio.DoubleArrayBuffer.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
LongBuffer java.nio.LongArrayBuffer.get(long[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.nio.LongArrayBuffer.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.nio.LongArrayBuffer.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
LongBuffer java.nio.LongBuffer.get(long[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
LongBuffer java.nio.LongBuffer.put(long[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
LongBuffer java.nio.LongBuffer.get(long[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.nio.CharArrayBuffer.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharBuffer java.nio.CharArrayBuffer.get(char[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.nio.CharArrayBuffer.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.nio.BaseByteBuffer.getChar() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.BaseByteBuffer.putChar(int,char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.BaseByteBuffer.putChar(char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
char java.nio.BaseByteBuffer.getChar(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
short java.nio.ShortArrayBuffer.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
short java.nio.ShortArrayBuffer.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ShortBuffer java.nio.ShortArrayBuffer.get(short[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FloatBuffer java.nio.FloatArrayBuffer.get(float[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float java.nio.FloatArrayBuffer.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float java.nio.FloatArrayBuffer.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.nio.IoVec.doTransfer(FileDescriptor) - @DSSink({DSSinkKind.FILE})
long java.nio.channels.DatagramChannel.read(ByteBuffer[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.nio.channels.DatagramChannel.write(ByteBuffer[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SelectionKey java.nio.channels.SelectableChannel.register(Selector,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.nio.channels.SelectionKey.attachment() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FileLock java.nio.channels.FileChannel.lock() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.nio.channels.FileChannel.read(ByteBuffer[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FileLock java.nio.channels.FileChannel.tryLock() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.nio.channels.FileChannel.write(ByteBuffer[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.nio.channels.Channels$OutputStreamChannel.write(ByteBuffer) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.nio.channels.Channels$ChannelOutputStream.write(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SelectorProvider java.nio.channels.spi.AbstractSelector.provider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Set java.nio.channels.spi.AbstractSelector.cancelledKeys() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.nio.channels.spi.AbstractSelectableChannel.blockingLock() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SelectorProvider java.nio.channels.spi.AbstractSelectableChannel.provider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SelectableChannel java.nio.channels.spi.AbstractSelectableChannel.configureBlocking(boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SelectionKey java.nio.channels.spi.AbstractSelectableChannel.register(Selector,int,Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Channel java.nio.channels.spi.SelectorProvider.inheritedChannel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.nio.channels.SocketChannel.write(ByteBuffer[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.nio.channels.SocketChannel.read(ByteBuffer[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.nio.channels.FileLock.size() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FileChannel java.nio.channels.FileLock.channel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.nio.channels.FileLock.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.nio.channels.FileLock.position() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] java.nio.ReadOnlyDirectByteBuffer.protectedArray() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.nio.DirectByteBuffer.getInt() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
short java.nio.DirectByteBuffer.getShort(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
double java.nio.DirectByteBuffer.getDouble(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.nio.DirectByteBuffer.getChar() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.nio.DirectByteBuffer.getLong(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte java.nio.DirectByteBuffer.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.nio.DirectByteBuffer.getInt(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.DirectByteBuffer.get(byte[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte java.nio.DirectByteBuffer.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float java.nio.DirectByteBuffer.getFloat() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.nio.DirectByteBuffer.getChar(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
double java.nio.DirectByteBuffer.getDouble() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] java.nio.DirectByteBuffer.protectedArray() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.nio.DirectByteBuffer.getLong() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float java.nio.DirectByteBuffer.getFloat(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
short java.nio.DirectByteBuffer.getShort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.ReadWriteHeapByteBuffer.putFloat(int,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.ReadWriteHeapByteBuffer.putDouble(double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.ReadWriteHeapByteBuffer.putFloat(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.ReadWriteHeapByteBuffer.putDouble(int,double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] java.nio.ReadWriteHeapByteBuffer.protectedArray() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.nio.charset.MalformedInputException.getInputLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.nio.charset.MalformedInputException.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CoderResult java.nio.charset.CharsetEncoder.implFlush(ByteBuffer) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CodingErrorAction java.nio.charset.CharsetEncoder.unmappableCharacterAction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float java.nio.charset.CharsetEncoder.averageBytesPerChar() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharsetEncoder java.nio.charset.CharsetEncoder.reset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] java.nio.charset.CharsetEncoder.replacement() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Charset java.nio.charset.CharsetEncoder.charset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CodingErrorAction java.nio.charset.CharsetEncoder.malformedInputAction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float java.nio.charset.CharsetEncoder.maxBytesPerChar() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CoderResult java.nio.charset.CharsetEncoder.encode(CharBuffer,ByteBuffer,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.nio.charset.UnsupportedCharsetException.getCharsetName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharsetDecoder java.nio.charset.CharsetDecoder.reset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CoderResult java.nio.charset.CharsetDecoder.implFlush(CharBuffer) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CoderResult java.nio.charset.CharsetDecoder.decode(ByteBuffer,CharBuffer,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float java.nio.charset.CharsetDecoder.maxCharsPerByte() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float java.nio.charset.CharsetDecoder.averageCharsPerByte() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Charset java.nio.charset.CharsetDecoder.charset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CodingErrorAction java.nio.charset.CharsetDecoder.unmappableCharacterAction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CodingErrorAction java.nio.charset.CharsetDecoder.malformedInputAction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.nio.charset.CharsetDecoder.replacement() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Charset java.nio.charset.CharsetDecoder.detectedCharset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.nio.charset.UnmappableCharacterException.getInputLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.nio.charset.UnmappableCharacterException.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Set java.nio.charset.Charset.aliases() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.nio.charset.Charset.displayName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.nio.charset.Charset.name() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CoderResult java.nio.charset.CoderResult.malformedForLength(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CoderResult java.nio.charset.CoderResult.unmappableForLength(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.nio.charset.IllegalCharsetNameException.getCharsetName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.nio.IntArrayBuffer.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IntBuffer java.nio.IntArrayBuffer.get(int[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.nio.IntArrayBuffer.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.nio.NioUtils.getDirectBufferAddress(Buffer) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FileDescriptor java.nio.NioUtils.getFD(FileChannel) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharBuffer java.nio.CharBuffer.put(String,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharBuffer java.nio.CharBuffer.get(char[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.nio.CharBuffer.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharBuffer java.nio.CharBuffer.put(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharBuffer java.nio.CharBuffer.get(char[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharBuffer java.nio.CharBuffer.put(char[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
DoubleBuffer java.nio.DoubleToByteBufferAdapter.put(double[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
DoubleBuffer java.nio.DoubleToByteBufferAdapter.get(double[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DoubleBuffer java.nio.DoubleToByteBufferAdapter.put(int,double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
double java.nio.DoubleToByteBufferAdapter.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DoubleBuffer java.nio.DoubleToByteBufferAdapter.put(double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
double java.nio.DoubleToByteBufferAdapter.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DoubleBuffer java.nio.DoubleBuffer.get(double[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DoubleBuffer java.nio.DoubleBuffer.put(double[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
DoubleBuffer java.nio.DoubleBuffer.get(double[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ByteOrder java.nio.ByteBuffer.order() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.ByteBuffer.get(byte[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.ByteBuffer.put(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.ByteBuffer.get(byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.nio.PipeImpl$PipeSinkChannel.write(ByteBuffer[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.nio.PipeImpl$PipeSinkChannel.write(ByteBuffer) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long java.nio.PipeImpl$PipeSinkChannel.write(ByteBuffer[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FileDescriptor java.nio.PipeImpl$PipeSinkChannel.getFD() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FileDescriptor java.nio.PipeImpl$PipeSourceChannel.getFD() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.nio.CharToByteBufferAdapter.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharBuffer java.nio.CharToByteBufferAdapter.put(int,char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharBuffer java.nio.CharToByteBufferAdapter.get(char[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.nio.CharToByteBufferAdapter.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharBuffer java.nio.CharToByteBufferAdapter.put(char[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharBuffer java.nio.CharToByteBufferAdapter.put(char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
short java.nio.ShortToByteBufferAdapter.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
short java.nio.ShortToByteBufferAdapter.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ShortBuffer java.nio.ShortToByteBufferAdapter.put(short[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ShortBuffer java.nio.ShortToByteBufferAdapter.get(short[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ShortBuffer java.nio.ShortToByteBufferAdapter.put(int,short) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ShortBuffer java.nio.ShortToByteBufferAdapter.put(short) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.nio.ServerSocketChannelImpl$ServerSocketAdapter.bind(SocketAddress,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ServerSocketChannel java.nio.ServerSocketChannelImpl$ServerSocketAdapter.getChannel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FileDescriptor java.nio.ServerSocketChannelImpl.getFD() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.nio.ServerSocketChannelImpl$ServerSocketAdapter.bind(SocketAddress) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
LongBuffer java.nio.LongToByteBufferAdapter.put(long[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
LongBuffer java.nio.LongToByteBufferAdapter.get(long[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.nio.LongToByteBufferAdapter.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
LongBuffer java.nio.LongToByteBufferAdapter.put(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
LongBuffer java.nio.LongToByteBufferAdapter.put(int,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long java.nio.LongToByteBufferAdapter.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.nio.DatagramChannelImpl.getLocalAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.nio.DatagramChannelImpl.write(ByteBuffer) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.nio.DatagramChannelImpl.send(ByteBuffer,SocketAddress) - @DSSink({DSSinkKind.FILE})
int java.nio.DatagramChannelImpl$DatagramSocketAdapter.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DatagramChannel java.nio.DatagramChannelImpl$DatagramSocketAdapter.getChannel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.nio.DatagramChannelImpl.read(ByteBuffer[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.nio.DatagramChannelImpl$DatagramSocketAdapter.send(DatagramPacket) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long java.nio.DatagramChannelImpl.write(ByteBuffer[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.nio.DatagramChannelImpl$DatagramSocketAdapter.bind(SocketAddress) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.nio.DatagramChannelImpl$DatagramSocketAdapter.getLocalAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FileDescriptor java.nio.DatagramChannelImpl.getFD() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.nio.DatagramChannelImpl$DatagramSocketAdapter.getInetAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FloatBuffer java.nio.FloatToByteBufferAdapter.put(float[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
FloatBuffer java.nio.FloatToByteBufferAdapter.put(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float java.nio.FloatToByteBufferAdapter.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FloatBuffer java.nio.FloatToByteBufferAdapter.get(float[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FloatBuffer java.nio.FloatToByteBufferAdapter.put(int,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float java.nio.FloatToByteBufferAdapter.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.nio.SocketChannelImpl.write(ByteBuffer) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.nio.SocketChannelImpl$SocketAdapter.bind(SocketAddress) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long java.nio.SocketChannelImpl.read(ByteBuffer[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
FileDescriptor java.nio.SocketChannelImpl$SocketAdapter.getFileDescriptor$() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SocketChannel java.nio.SocketChannelImpl$SocketAdapter.getChannel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream java.nio.SocketChannelImpl$SocketAdapter.getInputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FileDescriptor java.nio.SocketChannelImpl.getFD() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.nio.SocketChannelImpl.write(ByteBuffer[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.nio.SocketChannelImpl$SocketAdapter.getLocalAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
OutputStream java.nio.SocketChannelImpl$SocketAdapter.getOutputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.nio.SocketChannelImpl$SocketChannelOutputStream.write(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.nio.SocketChannelImpl.getLocalAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IntBuffer java.nio.IntBuffer.get(int[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IntBuffer java.nio.IntBuffer.get(int[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IntBuffer java.nio.IntBuffer.put(int[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.nio.FileChannelImpl.write(ByteBuffer) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.nio.FileChannelImpl.write(ByteBuffer,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long java.nio.FileChannelImpl.transferTo(long,long,WritableByteChannel) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FileDescriptor java.nio.FileChannelImpl.getFD() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FloatBuffer java.nio.FloatBuffer.get(float[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FloatBuffer java.nio.FloatBuffer.get(float[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FloatBuffer java.nio.FloatBuffer.put(float[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IntBuffer java.nio.IntToByteBufferAdapter.put(int[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IntBuffer java.nio.IntToByteBufferAdapter.put(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.nio.IntToByteBufferAdapter.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IntBuffer java.nio.IntToByteBufferAdapter.put(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IntBuffer java.nio.IntToByteBufferAdapter.get(int[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.nio.HeapByteBuffer.getLong(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.nio.HeapByteBuffer.getLong() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
double java.nio.HeapByteBuffer.getDouble() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ByteBuffer java.nio.HeapByteBuffer.get(byte[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.nio.HeapByteBuffer.getInt(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
short java.nio.HeapByteBuffer.getShort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.nio.HeapByteBuffer.getInt() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte java.nio.HeapByteBuffer.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float java.nio.HeapByteBuffer.getFloat() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
double java.nio.HeapByteBuffer.getDouble(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.nio.HeapByteBuffer.getChar() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float java.nio.HeapByteBuffer.getFloat(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.nio.HeapByteBuffer.getChar(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte java.nio.HeapByteBuffer.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
short java.nio.HeapByteBuffer.getShort(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.ThreadPoolExecutor.getMaximumPoolSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.concurrent.ThreadPoolExecutor.setKeepAliveTime(long,TimeUnit) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long java.util.concurrent.ThreadPoolExecutor.getKeepAliveTime(TimeUnit) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ThreadFactory java.util.concurrent.ThreadPoolExecutor.getThreadFactory() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.ThreadPoolExecutor.getCorePoolSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.ThreadPoolExecutor.getActiveCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.util.concurrent.ThreadPoolExecutor.getCompletedTaskCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BlockingQueue java.util.concurrent.ThreadPoolExecutor.getQueue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.ThreadPoolExecutor.getPoolSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.util.concurrent.ThreadPoolExecutor.getTaskCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List java.util.concurrent.ThreadPoolExecutor.shutdownNow() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RejectedExecutionHandler java.util.concurrent.ThreadPoolExecutor.getRejectedExecutionHandler() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.ThreadPoolExecutor.getLargestPoolSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Future java.util.concurrent.ExecutorCompletionService.poll(long,TimeUnit) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void java.util.concurrent.atomic.AtomicBoolean.set(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object java.util.concurrent.atomic.AtomicReference.getAndSet(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.concurrent.atomic.AtomicReference.lazySet(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object java.util.concurrent.atomic.AtomicReference.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.atomic.AtomicInteger.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.atomic.AtomicInteger.getAndIncrement() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.concurrent.atomic.AtomicInteger.lazySet(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.atomic.AtomicInteger.getAndSet(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.atomic.AtomicInteger.getAndDecrement() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.atomic.AtomicInteger.getAndAdd(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.util.concurrent.atomic.AtomicLong.getAndAdd(long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.util.concurrent.atomic.AtomicLong.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.util.concurrent.atomic.AtomicLong.getAndSet(long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.util.concurrent.atomic.AtomicLong.getAndIncrement() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.util.concurrent.atomic.AtomicLong.getAndDecrement() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.concurrent.atomic.AtomicLong.lazySet(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object java.util.concurrent.ConcurrentHashMap.get(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.concurrent.ConcurrentHashMap$WriteThroughEntry.setValue(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object java.util.concurrent.ConcurrentHashMap.put(Object,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object java.util.concurrent.ConcurrentHashMap.putIfAbsent(Object,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.getDelay(TimeUnit) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List java.util.concurrent.ScheduledThreadPoolExecutor.shutdownNow() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BlockingQueue java.util.concurrent.ScheduledThreadPoolExecutor.getQueue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.util.concurrent.ScheduledThreadPoolExecutor.getContinueExistingPeriodicTasksAfterShutdownPolicy() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.util.concurrent.ScheduledThreadPoolExecutor.getRemoveOnCancelPolicy() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.util.concurrent.ScheduledThreadPoolExecutor.getExecuteExistingDelayedTasksAfterShutdownPolicy() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.concurrent.CopyOnWriteArrayList$CowSubList.set(int,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object java.util.concurrent.CopyOnWriteArrayList$CowSubList.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.concurrent.CopyOnWriteArrayList.set(int,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object[] java.util.concurrent.CopyOnWriteArrayList.getArray() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.concurrent.CopyOnWriteArrayList.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.concurrent.CopyOnWriteArrayList$CowIterator.set(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.CountDownLatch$Sync.getCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.util.concurrent.CountDownLatch.getCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.concurrent.FutureTask.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.concurrent.FutureTask.get(long,TimeUnit) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.locks.ReentrantReadWriteLock$Sync.getCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.locks.ReentrantReadWriteLock$Sync.getWriteHoldCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.locks.ReentrantReadWriteLock.getWriteHoldCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection java.util.concurrent.locks.ReentrantReadWriteLock.getQueuedReaderThreads() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.locks.ReentrantReadWriteLock.getReadLockCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection java.util.concurrent.locks.ReentrantReadWriteLock.getWaitingThreads(Condition) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Thread java.util.concurrent.locks.ReentrantReadWriteLock.getOwner() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.locks.ReentrantReadWriteLock$Sync.getReadLockCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.locks.ReentrantReadWriteLock$Sync.getReadHoldCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection java.util.concurrent.locks.ReentrantReadWriteLock.getQueuedThreads() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.locks.ReentrantReadWriteLock.getReadHoldCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.locks.ReentrantReadWriteLock.getQueueLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.getHoldCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Thread java.util.concurrent.locks.ReentrantReadWriteLock$Sync.getOwner() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection java.util.concurrent.locks.ReentrantReadWriteLock.getQueuedWriterThreads() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.concurrent.locks.LockSupport.getBlocker(Thread) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.locks.AbstractQueuedSynchronizer.getQueueLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Thread java.util.concurrent.locks.AbstractQueuedSynchronizer.getFirstQueuedThread() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.concurrent.locks.AbstractQueuedSynchronizer.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection java.util.concurrent.locks.AbstractQueuedSynchronizer.getQueuedThreads() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.getWaitingThreads() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection java.util.concurrent.locks.AbstractQueuedSynchronizer.getExclusiveQueuedThreads() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection java.util.concurrent.locks.AbstractQueuedSynchronizer.getSharedQueuedThreads() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.getWaitQueueLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.locks.AbstractQueuedSynchronizer.getState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Thread java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection java.util.concurrent.locks.ReentrantLock.getWaitingThreads(Condition) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.locks.ReentrantLock.getHoldCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.locks.ReentrantLock.getQueueLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.locks.ReentrantLock$Sync.getHoldCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection java.util.concurrent.locks.ReentrantLock.getQueuedThreads() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Thread java.util.concurrent.locks.ReentrantLock$Sync.getOwner() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Thread java.util.concurrent.locks.ReentrantLock.getOwner() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List java.util.concurrent.AbstractExecutorService.invokeAll(Collection) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
List java.util.concurrent.AbstractExecutorService.invokeAll(Collection,long,TimeUnit) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int java.util.concurrent.Semaphore$Sync.getPermits() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.concurrent.Semaphore.getQueueLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection java.util.concurrent.Semaphore.getQueuedThreads() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.UnsafeArrayList.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.Currency.getSymbol(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Set java.util.Currency.getAvailableCurrencies() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.Currency.getDefaultFractionDigits() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.Currency.getDisplayName(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.Currency.getDisplayName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Currency java.util.Currency.getInstance(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Currency java.util.Currency.getInstance(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.Currency.getCurrencyCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.Currency.getSymbol() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.IllegalFormatPrecisionException.getPrecision() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.IllegalFormatPrecisionException.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.MissingFormatArgumentException.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.MissingFormatArgumentException.getFormatSpecifier() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List java.util.AbstractList.subList(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ListIterator java.util.AbstractList.listIterator() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Iterator java.util.AbstractList.iterator() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.AbstractList.set(int,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object java.util.AbstractList$SubAbstractList.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Hashtable$HashtableEntry.getKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Hashtable.get(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Hashtable$HashtableEntry.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Iterator java.util.ServiceLoader.iterator() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.GregorianCalendar.getGreatestMinimum(int) - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
int java.util.GregorianCalendar.getMinimum(int) - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
int java.util.GregorianCalendar.getActualMaximum(int) - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
void java.util.GregorianCalendar.setGregorianChange(Date) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.util.GregorianCalendar.getMaximum(int) - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
int java.util.GregorianCalendar.getLeastMaximum(int) - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
Date java.util.GregorianCalendar.getGregorianChange() - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
int java.util.GregorianCalendar.getActualMinimum(int) - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
void java.util.Random.setSeed(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.util.BitSet.set(int,int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.util.BitSet.set(int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] java.util.BitSet.toByteArray() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BitSet java.util.BitSet.get(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.BitSet.set(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.util.BitSet.set(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.util.Date.setMinutes(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.util.Date.setHours(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.util.Date.getTimezoneOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.Date.getHours() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.util.Date.getTime() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.Date.getMinutes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.Date.setYear(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.util.Date.getDate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.Date.getMonth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.Date.getDay() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.Date.setMonth(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.util.Date.setSeconds(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.util.Date.setDate(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.util.Date.getYear() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.Date.getSeconds() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.zip.ZipFile.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream java.util.zip.ZipFile.getInputStream(ZipEntry) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ZipEntry java.util.zip.ZipFile.getEntry(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Checksum java.util.zip.CheckedInputStream.getChecksum() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.zip.Deflater.setDictionary(byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.util.zip.Deflater.getAdler() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.zip.Deflater.setDictionary(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.util.zip.Deflater.getTotalOut() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.util.zip.Deflater.getBytesWritten() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.zip.Deflater.setInput(byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long java.util.zip.Deflater.getBytesRead() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.zip.Deflater.getTotalIn() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.zip.CRC32.update(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.util.zip.CRC32.update(byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.util.zip.CRC32.update(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long java.util.zip.CRC32.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.zip.Inflater.setDictionary(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.util.zip.Inflater.setInput(byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.util.zip.Inflater.getTotalOut() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.zip.Inflater.getRemaining() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.util.zip.Inflater.getBytesWritten() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.zip.Inflater.getTotalIn() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.zip.Inflater.getAdler() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.zip.Inflater.setDictionary(byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.util.zip.Inflater.setFileInput(FileDescriptor,long,int) - @DSSink({DSSinkKind.FILE})
long java.util.zip.Inflater.getBytesRead() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.zip.ZipOutputStream.write(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.util.zip.GZIPOutputStream.write(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.util.zip.ZipEntry.getComment() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.zip.ZipEntry.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.util.zip.ZipEntry.getSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.zip.ZipEntry.setTime(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] java.util.zip.ZipEntry.getExtra() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.util.zip.ZipEntry.getTime() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.zip.ZipEntry.getMethod() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.util.zip.ZipEntry.getCrc() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.util.zip.ZipEntry.getCompressedSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.zip.DeflaterOutputStream.write(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.util.IllegalFormatCodePointException.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.IllegalFormatCodePointException.getCodePoint() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.EnumSet.writeReplace() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Logger java.util.logging.Logger.getParent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.logging.Logger.setManager(LogManager) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Logger java.util.logging.Logger.getAnonymousLogger(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Logger java.util.logging.Logger.getLogger(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Logger java.util.logging.Logger.getLogger(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Filter java.util.logging.Logger.getFilter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.logging.Logger.setLevel(Level) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.util.logging.Logger.setParent(Logger) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Level java.util.logging.Logger.getLevel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.logging.Logger.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Handler[] java.util.logging.Logger.getHandlers() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Logger java.util.logging.Logger.getGlobal() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Logger java.util.logging.Logger.getAnonymousLogger() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.util.logging.Logger.getUseParentHandlers() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ResourceBundle java.util.logging.Logger.getResourceBundle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.logging.Logger.getResourceBundleName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object[] java.util.logging.LogRecord.getParameters() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ResourceBundle java.util.logging.LogRecord.getResourceBundle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.logging.LogRecord.getLoggerName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.logging.LogRecord.getThreadID() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.logging.LogRecord.getResourceBundleName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.util.logging.LogRecord.getSequenceNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.logging.LogRecord.getSourceMethodName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.logging.LogRecord.getSourceClassName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.util.logging.LogRecord.getMillis() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.logging.LogRecord.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Level java.util.logging.LogRecord.getLevel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Throwable java.util.logging.LogRecord.getThrown() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.util.logging.LogManager.addLogger(Logger) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Logger java.util.logging.LogManager.getOrCreate(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
LogManager java.util.logging.LogManager.getLogManager() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Enumeration java.util.logging.LogManager.getLoggerNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Logger java.util.logging.LogManager.getLogger(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
LoggingMXBean java.util.logging.LogManager.getLoggingMXBean() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.logging.LogManager.getProperty(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.logging.LoggingPermission.getActions() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.logging.Level.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.logging.Level.getResourceBundleName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.logging.Level.getLocalizedName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.logging.Formatter.getTail(Handler) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.logging.Formatter.getHead(Handler) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.logging.ErrorManager.error(String,Exception,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Formatter java.util.logging.Handler.getFormatter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.logging.Handler.setEncoding(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ErrorManager java.util.logging.Handler.getErrorManager() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.logging.Handler.getEncoding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Filter java.util.logging.Handler.getFilter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Level java.util.logging.Handler.getLevel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.IllegalFormatWidthException.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.IllegalFormatWidthException.getWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.util.UUID.getLeastSignificantBits() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.util.UUID.getMostSignificantBits() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Calendar java.util.Calendar.getInstance(TimeZone) - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
int java.util.Calendar.get(int) - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
int java.util.Calendar.getActualMinimum(int) - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
int java.util.Calendar.getActualMaximum(int) - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
Calendar java.util.Calendar.getInstance(TimeZone,Locale) - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
void java.util.Calendar.set(int,int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Map java.util.Calendar.getDisplayNames(int,int,Locale) - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
Locale[] java.util.Calendar.getAvailableLocales() - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
Calendar java.util.Calendar.getInstance() - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
Object java.util.Calendar.clone() - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
void java.util.Calendar.setTime(Date) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
TimeZone java.util.Calendar.getTimeZone() - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
void java.util.Calendar.set(int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Calendar java.util.Calendar.getInstance(Locale) - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
int java.util.Calendar.getFirstDayOfWeek() - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
void java.util.Calendar.set(int,int,int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.util.Calendar.getDisplayName(int,int,Locale) - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
Date java.util.Calendar.getTime() - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
int java.util.Calendar.getMinimalDaysInFirstWeek() - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
String java.util.Calendar.toString() - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
long java.util.Calendar.getTimeInMillis() - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
Object java.util.Arrays$ArrayList.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Arrays$ArrayList.set(int,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object java.util.EventObject.getSource() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
EventListener java.util.EventListenerProxy.getListener() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class java.util.IllegalFormatConversionException.getArgumentClass() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.IllegalFormatConversionException.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.util.IllegalFormatConversionException.getConversion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.Properties.getProperty(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Properties.setProperty(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.util.Properties.store(Writer,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.util.Properties.getProperty(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.Properties.storeToXML(OutputStream,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ResourceBundle java.util.ResourceBundle.getBundle(String,Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Set java.util.ResourceBundle.keySet() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.util.ResourceBundle$Control.getTimeToLive(String,Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Locale java.util.ResourceBundle$NoFallbackControl.getFallbackLocale(String,Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ResourceBundle java.util.ResourceBundle.getBundle(String,Locale,ClassLoader) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.ResourceBundle.getString(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Enumeration java.util.ResourceBundle$MissingBundle.getKeys() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ResourceBundle java.util.ResourceBundle.getBundle(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] java.util.ResourceBundle.getStringArray(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.ResourceBundle.getObject(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List java.util.ResourceBundle$Control.getFormats(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List java.util.ResourceBundle$Control.getCandidateLocales(String,Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Set java.util.ResourceBundle.handleKeySet() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Locale java.util.ResourceBundle.getLocale() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Locale java.util.ResourceBundle$Control.getFallbackLocale(String,Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.ArrayList.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.AbstractSequentialList.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.AbstractSequentialList.set(int,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Iterator java.util.AbstractSequentialList.iterator() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.AbstractSequentialList.remove(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.MissingFormatWidthException.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.MissingFormatWidthException.getFormatSpecifier() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.ArrayDeque.getLast() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.ArrayDeque.getFirst() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.IllegalFormatFlagsException.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.IllegalFormatFlagsException.getFlags() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.Vector.setElementAt(Object,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Vector.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.util.Formatter$FormatToken.setFlag(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
NativeDecimalFormat java.util.Formatter$CachedDecimalFormat.update(LocaleData,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
char java.util.Formatter$FormatToken.getDateSuffix() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.Formatter$FormatToken.getArgIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.Formatter$FormatToken.getPrecision() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.Formatter$FormatToken.getStrFlags() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.util.Formatter$FormatToken.getConversionType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.Formatter$FormatToken.getWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.Formatter$FormatSpecifierParser.getFormatSpecifierText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.MissingResourceException.getKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.MissingResourceException.getClassName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.DuplicateFormatFlagsException.getFlags() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.DuplicateFormatFlagsException.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableMapEntry.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Collections$SynchronizedList.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Collections$CopiesList.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Collections$CheckedList.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Collections$SynchronizedMap.get(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Collections$SynchronizedMap.put(Object,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Collections$CheckedMap.get(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Collections$CheckedMap.put(Object,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Collections$SingletonList.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableMapEntry.setValue(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Collections$CheckedMap$CheckedEntry.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.Collections$CheckedListIterator.set(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Collections$EmptyList.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Collections$UnmodifiableMap.get(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Collections$CheckedMap$CheckedEntry.setValue(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Collections$UnmodifiableList.set(int,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Collections$SynchronizedList.set(int,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean java.util.Collections$SetFromMap.add(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Collections$EmptyMap.get(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableMapEntry.getKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Collections$CheckedMap$CheckedEntry.getKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Collections$UnmodifiableList.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Collections$CheckedList.set(int,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object java.util.Collections$SingletonMap.get(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.WeakHashMap$Entry.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.WeakHashMap$Entry.getKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object[] java.util.AbstractCollection.toArray() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.AbstractCollection.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.FormatFlagsConversionMismatchException.getFlags() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.FormatFlagsConversionMismatchException.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char java.util.FormatFlagsConversionMismatchException.getConversion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.Locale.getDisplayCountry() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.Locale.getDisplayVariant(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.Locale.getDisplayLanguage(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.Locale.getLanguage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.Locale.getCountry() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Locale[] java.util.Locale.getAvailableLocales() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.Locale.getDisplayName(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] java.util.Locale.getISOCountries() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.Locale.getDisplayCountry(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.Locale.getDisplayName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.Locale.getVariant() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.Locale.getISO3Country() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] java.util.Locale.getISOLanguages() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.Locale.getDisplayVariant() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Locale java.util.Locale.getDefault() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.Locale.getISO3Language() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.Locale.getDisplayLanguage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CodeSigner[] java.util.jar.JarEntry.getCodeSigners() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Certificate[] java.util.jar.JarEntry.getCertificates() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Attributes java.util.jar.JarEntry.getAttributes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.jar.JarFile$JarFileInputStream.read(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
JarEntry java.util.jar.JarFile.getJarEntry(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream java.util.jar.JarFile.getInputStream(ZipEntry) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Manifest java.util.jar.JarFile.getManifest() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ZipEntry java.util.jar.JarFile.getEntry(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.jar.InitManifest.getPos() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.jar.JarVerifier$VerifierEntry.write(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.util.jar.JarVerifier$VerifierEntry.write(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Certificate[] java.util.jar.JarVerifier.getCertificates(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.jar.JarVerifier.addMetaEntry(String,byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Vector java.util.jar.JarVerifier.getSignerCertificates(String,Map) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.jar.Attributes$Name.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.jar.Attributes.get(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.jar.Attributes.put(Object,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.util.jar.Attributes.putValue(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.util.jar.Attributes.getValue(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.jar.Manifest.write(OutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.util.jar.Manifest.getMainAttributesEnd() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Attributes java.util.jar.Manifest.getAttributes(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Map java.util.jar.Manifest.getEntries() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Attributes java.util.jar.Manifest.getMainAttributes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.util.jar.Manifest.write(Manifest,OutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.util.SimpleTimeZone.getRawOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.SimpleTimeZone.getDSTSavings() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.SimpleTimeZone.getOffset(int,int,int,int,int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.SimpleTimeZone.getOffset(long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.regex.PatternSyntaxException.getPattern() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.regex.PatternSyntaxException.getDescription() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.regex.PatternSyntaxException.getIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.regex.PatternSyntaxException.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.AbstractQueue.remove() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.AbstractQueue.element() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.LinkedList.getLast() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.LinkedList.getFirst() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.util.TreeSet.add(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Set java.util.AbstractMap.keySet() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.AbstractMap$SimpleImmutableEntry.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.AbstractMap.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.AbstractMap$SimpleEntry.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.AbstractMap.get(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.AbstractMap$SimpleImmutableEntry.getKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.AbstractMap$SimpleEntry.getKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.AbstractMap$SimpleImmutableEntry.setValue(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Collection java.util.AbstractMap.values() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.AbstractMap.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.UnknownFormatConversionException.getConversion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.UnknownFormatConversionException.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.util.TimerTask.getWhen() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.util.TimerTask.scheduledExecutionTime() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TimeZone java.util.TimeZone.getDefault() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.TimeZone.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.TimeZone.getDSTSavings() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.TimeZone.getDisplayName(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] java.util.TimeZone.getAvailableIDs(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.TimeZone.getDisplayName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.util.TimeZone.getOffset(long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.TimeZone.getID() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TimeZone java.util.TimeZone.getTimeZone(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.TimeZone.getDisplayName(boolean,int,Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] java.util.TimeZone.getAvailableIDs() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.util.TimeZone.getDisplayName(boolean,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.MapEntry.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.util.MapEntry.getKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Enumeration java.util.PropertyResourceBundle.getKeys() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char[] java.net.PasswordAuthentication.getPassword() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.PasswordAuthentication.getUserName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Enumeration java.net.NetworkInterface.getInetAddresses() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Enumeration java.net.NetworkInterface.getNetworkInterfaces() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.NetworkInterface.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NetworkInterface java.net.NetworkInterface.getByInetAddress(InetAddress) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] java.net.NetworkInterface.getHardwareAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.NetworkInterface.getDisplayName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List java.net.NetworkInterface.getInterfaceAddresses() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NetworkInterface java.net.NetworkInterface.getByName(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.NetworkInterface.getIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NetworkInterface java.net.NetworkInterface.getByIndex(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NetworkInterface java.net.NetworkInterface.getParent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.NetworkInterface.getMTU() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Enumeration java.net.NetworkInterface.getSubInterfaces() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.URLConnection.setRequestProperty(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long java.net.URLConnection.getDate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream java.net.URLConnection.getInputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URLConnection.getHeaderField(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
URL java.net.URLConnection.getURL() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URLConnection.getContentEncoding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.net.URLConnection$DefaultContentHandler.getContent(URLConnection) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.net.URLConnection.getContent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.net.URLConnection.getAllowUserInteraction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Map java.net.URLConnection.getHeaderFields() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FileNameMap java.net.URLConnection.getFileNameMap() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.URLConnection.setDefaultRequestProperty(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long java.net.URLConnection.getExpiration() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.net.URLConnection.getHeaderFieldDate(String,long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URLConnection.getHeaderFieldKey(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.net.URLConnection.getContent(Class[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URLConnection.getRequestProperty(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URLConnection.getDefaultRequestProperty(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URLConnection.getHeaderField(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
OutputStream java.net.URLConnection.getOutputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.net.URLConnection.getDefaultUseCaches() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.net.URLConnection.getDoInput() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.net.URLConnection.getDoOutput() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Permission java.net.URLConnection.getPermission() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.net.URLConnection.getUseCaches() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.net.URLConnection.getIfModifiedSince() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.net.URLConnection.getLastModified() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URLConnection.getContentType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URLConnection.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.URLConnection.setDefaultUseCaches(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.net.URLConnection.getContentLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.URLConnection.getConnectTimeout() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.URLConnection.getHeaderFieldInt(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.URLConnection.getReadTimeout() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Map java.net.URLConnection.getRequestProperties() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.net.URLConnection.getDefaultAllowUserInteraction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.Socket.setSoLinger(boolean,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.net.Socket.getLocalAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.Socket.getSendBufferSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.Socket.setReuseAddress(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.net.Socket.sendUrgentData(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.net.Socket.setKeepAlive(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.net.Socket.getSoLinger() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.Socket.getTrafficClass() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.Socket.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.Socket.getSoTimeout() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream java.net.Socket.getInputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.Socket.setTrafficClass(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.net.Socket.setPerformancePreferences(int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SocketAddress java.net.Socket.getLocalSocketAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.Socket.setReceiveBufferSize(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SocketAddress java.net.Socket.getRemoteSocketAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.net.Socket.getInetAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.net.Socket.getOOBInline() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.Socket.bind(SocketAddress) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.net.Socket.getReceiveBufferSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.Socket.getLocalPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.net.Socket.getTcpNoDelay() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.net.Socket.getReuseAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.Socket.setSoTimeout(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
FileDescriptor java.net.Socket.getFileDescriptor$() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SocketChannel java.net.Socket.getChannel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.Socket.setTcpNoDelay(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
OutputStream java.net.Socket.getOutputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.net.Socket.getKeepAlive() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.Socket.setSendBufferSize(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.net.Socket.setOOBInline(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
FileDescriptor java.net.SocketImpl.getFileDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FileDescriptor java.net.SocketImpl.getFD$() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.SocketImpl.setPerformancePreferences(int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.net.SocketImpl.getInetAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.SocketImpl.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.SocketImpl.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.SocketImpl.getLocalPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.DatagramSocket.getSendBufferSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.DatagramSocket.setNetworkInterface(NetworkInterface) - @DSSink({DSSinkKind.FILE})
boolean java.net.DatagramSocket.getReuseAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.DatagramSocket.setTrafficClass(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.net.DatagramSocket.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.DatagramSocket.setSendBufferSize(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.net.DatagramSocket.getLocalAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.net.DatagramSocket.getInetAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.DatagramSocket.send(DatagramPacket) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.net.DatagramSocket.getLocalPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.DatagramSocket.setBroadcast(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SocketAddress java.net.DatagramSocket.getRemoteSocketAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.DatagramSocket.getSoTimeout() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.DatagramSocket.getTrafficClass() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SocketAddress java.net.DatagramSocket.getLocalSocketAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DatagramChannel java.net.DatagramSocket.getChannel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FileDescriptor java.net.DatagramSocket.getFileDescriptor$() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.DatagramSocket.getReceiveBufferSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.net.DatagramSocket.getBroadcast() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.DatagramSocket.bind(SocketAddress) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.net.DatagramSocket.setReuseAddress(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.net.DatagramSocket.setReceiveBufferSize(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.net.DatagramSocket.setSoTimeout(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.net.Inet6Address.getScopeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NetworkInterface java.net.Inet6Address.getScopedInterface() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Inet6Address java.net.Inet6Address.getByAddress(String,byte[],NetworkInterface) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Inet6Address java.net.Inet6Address.getByAddress(String,byte[],int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.net.DatagramPacket.getAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.DatagramPacket.setSocketAddress(SocketAddress) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.net.DatagramPacket.getOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SocketAddress java.net.DatagramPacket.getSocketAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.DatagramPacket.getLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.DatagramPacket.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] java.net.DatagramPacket.getData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.MulticastSocket.setNetworkInterface(NetworkInterface) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.net.MulticastSocket.getInterface() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.MulticastSocket.getTimeToLive() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.MulticastSocket.setTTL(byte) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.net.MulticastSocket.send(DatagramPacket,byte) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.net.MulticastSocket.setTimeToLive(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean java.net.MulticastSocket.getLoopbackMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte java.net.MulticastSocket.getTTL() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NetworkInterface java.net.MulticastSocket.getNetworkInterface() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.MulticastSocket.setLoopbackMode(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.net.MulticastSocket.setInterface(InetAddress) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SocketAddress java.net.ServerSocket.getLocalSocketAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.net.ServerSocket.getReuseAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.net.ServerSocket.getInetAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.ServerSocket.setReuseAddress(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.net.ServerSocket.setPerformancePreferences(int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SocketImpl java.net.ServerSocket.getImpl$() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.ServerSocket.bind(SocketAddress) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.net.ServerSocket.setReceiveBufferSize(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ServerSocketChannel java.net.ServerSocket.getChannel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.ServerSocket.getLocalPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.ServerSocket.getReceiveBufferSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.ServerSocket.bind(SocketAddress,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.net.ServerSocket.setSoTimeout(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.net.ServerSocket.getSoTimeout() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] java.net.Socks4Message.getBytes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.Socks4Message.getUserId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.Socks4Message.getLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.Socks4Message.setIP(byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.net.Socks4Message.getCommandOrResult() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.Socks4Message.setCommandOrResult(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.net.Socks4Message.getErrorString(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.Socks4Message.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.Socks4Message.setPort(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.net.Socks4Message.setUserId(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int java.net.Socks4Message.getIP() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.HttpURLConnection.setRequestMethod(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.net.HttpURLConnection.getRequestMethod() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.HttpURLConnection.getResponseMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.net.HttpURLConnection.getInstanceFollowRedirects() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.HttpURLConnection.getResponseCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long java.net.HttpURLConnection.getHeaderFieldDate(String,long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.HttpURLConnection.getContentEncoding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream java.net.HttpURLConnection.getErrorStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Permission java.net.HttpURLConnection.getPermission() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean java.net.HttpURLConnection.getFollowRedirects() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.net.InetAddress.getLoopbackAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.net.InetAddress.getByAddress(byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.InetAddress.getCanonicalHostName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.net.InetAddress.getLocalHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] java.net.InetAddress.getAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress[] java.net.InetAddress.getAllByName(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.net.InetAddress.getByName(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.InetAddress.getHostName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.net.InetAddress.getByAddress(String,byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.InetAddress.getHostAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URL.getRef() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URL.getAuthority() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
URLConnection java.net.URL.openConnection() - @DSSink({DSSinkKind.NETWORK})
String java.net.URL.getFile() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URL.getProtocol() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.net.URL.getContent(Class[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.URL.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URL.getQuery() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URL.getPath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URL.getHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URL.getUserInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.URL.getDefaultPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream java.net.URL.openStream() - @DSSink({DSSinkKind.NETWORK})
int java.net.URL.getEffectivePort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.net.URL.getContent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CookieHandler java.net.CookieHandler.getDefault() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.Authenticator.getRequestingPrompt() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.Authenticator.getRequestingPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.Authenticator.getRequestingHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
URL java.net.Authenticator.getRequestingURL() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.Authenticator.getRequestingProtocol() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.net.Authenticator.getRequestingSite() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PasswordAuthentication java.net.Authenticator.getPasswordAuthentication() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.Authenticator.getRequestingScheme() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.DefaultFileNameMap.getContentTypeFor(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.InetSocketAddress.getHostString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.InetSocketAddress.getHostName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.InetSocketAddress.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.net.InetSocketAddress.getAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte java.net.PlainDatagramSocketImpl.getTTL() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.PlainDatagramSocketImpl.setOption(int,Object) - @DSSink({DSSinkKind.FILE})
void java.net.PlainDatagramSocketImpl.send(DatagramPacket) - @DSSink({DSSinkKind.FILE})
int java.net.PlainDatagramSocketImpl.getTimeToLive() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.PlainDatagramSocketImpl.bind(int,InetAddress) - @DSSink({DSSinkKind.FILE})
void java.net.PlainDatagramSocketImpl.setTimeToLive(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object java.net.PlainDatagramSocketImpl.getOption(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.PlainDatagramSocketImpl.setTTL(byte) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.net.HttpRetryException.getReason() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.HttpRetryException.getLocation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.SocketPermission.getActions() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.PlainSocketImpl.bind(InetAddress,int) - @DSSink({DSSinkKind.FILE})
OutputStream java.net.PlainSocketImpl.getOutputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream java.net.PlainSocketImpl.getInputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.net.PlainSocketImpl.getOption(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.PlainSocketImpl$PlainSocketOutputStream.write(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.net.PlainSocketImpl.setOption(int,Object) - @DSSink({DSSinkKind.FILE})
String java.net.URLStreamHandler.toExternalForm(URL,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URLStreamHandler.toExternalForm(URL) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.URLStreamHandler.getDefaultPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.net.URLStreamHandler.getHostAddress(URL) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.net.AddressCache.get(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void java.net.AddressCache.put(String,InetAddress[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void java.net.AddressCache.putUnknownHost(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String java.net.JarURLConnection.getEntryName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Certificate[] java.net.JarURLConnection.getCertificates() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
URL java.net.JarURLConnection.getJarFileURL() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
JarEntry java.net.JarURLConnection.getJarEntry() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Attributes java.net.JarURLConnection.getMainAttributes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Manifest java.net.JarURLConnection.getManifest() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Attributes java.net.JarURLConnection.getAttributes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URI.getHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.URI.getEffectivePort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URI.getScheme() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URI.getUserInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URI.getPath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.URI.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URI.getRawPath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URI.getQuery() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URI.getAuthority() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URI.getRawFragment() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URI.getSchemeSpecificPart() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URI.getFragment() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URI.getRawQuery() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URI.getRawAuthority() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URI.getRawUserInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URI.getRawSchemeSpecificPart() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.net.InterfaceAddress.getBroadcast() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
short java.net.InterfaceAddress.getNetworkPrefixLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.net.InterfaceAddress.getAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URISyntaxException.getReason() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.URISyntaxException.getIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URISyntaxException.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String java.net.URISyntaxException.getInput() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int java.net.DatagramSocketImpl.getLocalPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress java.net.DatagramSocketImpl.getLocalAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FileDescriptor java.net.DatagramSocketImpl.getFileDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object java.net.ContentHandler.getContent(URLConnection,Class[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ProxySelector java.net.ProxySelector.getDefault() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ResponseCache java.net.ResponseCache.getDefault() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
GL com.google.android.gles_jni.EGLContextImpl.getGL() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.google.android.maps.MapView.getLatitudeSpan() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int com.google.android.maps.MapView.getLongitudeSpan() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
boolean com.google.android.maps.GeoPoint.equals(Object) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int com.google.android.maps.GeoPoint.hashCode() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int com.google.android.maps.GeoPoint.getLatitudeE6() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
String com.google.android.maps.GeoPoint.toString() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int com.google.android.maps.GeoPoint.getLongitudeE6() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
float com.google.android.maps.MyLocationOverlay.getOrientation() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
byte[] com.android.internal.telephony.SmsRawData.getBytes() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.SmsResponse.toString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.IccServiceTable.toString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.ApnSetting.toString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.gsm.VoiceMailConstants.getVoiceMailNumber(String) - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.gsm.VoiceMailConstants.getVoiceMailTag(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.gsm.VoiceMailConstants.getCarrierName(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Phone com.android.internal.telephony.gsm.GsmCall.getPhone() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
List com.android.internal.telephony.gsm.GsmCall.getConnections() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Connection com.android.internal.telephony.gsm.GsmCallTracker.dial(String,UUSInfo) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
GsmConnection com.android.internal.telephony.gsm.GsmCallTracker.getConnectionByIndex(GsmCall,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.gsm.GsmCallTracker.getMute() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Connection com.android.internal.telephony.gsm.GsmCallTracker.dial(String) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
Connection com.android.internal.telephony.gsm.GsmCallTracker.dial(String,int) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
Connection com.android.internal.telephony.gsm.GsmCallTracker.dial(String,int,UUSInfo) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
String com.android.internal.telephony.gsm.GsmSmsAddress.getAddressString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.gsm.SmsMessage.getStatus() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.gsm.SmsMessage$PduParser.getUserDataKSC5601(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.gsm.SmsMessage$PduParser.getUserDataUCS2(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.gsm.SmsMessage$PduParser.getSCAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.gsm.SmsMessage.getDataCodingScheme() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.gsm.SmsMessage$PduParser.getUserDataSeptetPadding() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.gsm.SmsMessage.getTPLayerLengthForPDU(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
GsmSmsAddress com.android.internal.telephony.gsm.SmsMessage$PduParser.getAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long com.android.internal.telephony.gsm.SmsMessage$PduParser.getSCTimestampMillis() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.gsm.SmsMessage$PduParser.getUserDataGSM7Bit(int,int,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.gsm.SmsMessage.getProtocolIdentifier() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.gsm.SmsMessage$PduParser.getByte() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SmsHeader com.android.internal.telephony.gsm.SmsMessage$PduParser.getUserDataHeader() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] com.android.internal.telephony.gsm.SmsMessage$PduParser.getUserData() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.gsm.GsmSMSDispatcher.sendNewSubmitPdu(String,String,String,SmsHeader,int,PendingIntent,PendingIntent,boolean) - @DSSink({DSSinkKind.SMS_MMS})
String com.android.internal.telephony.gsm.GsmSMSDispatcher.getFormat() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.gsm.GsmSMSDispatcher.sendData(String,String,int,byte[],PendingIntent,PendingIntent) - @DSSink({DSSinkKind.SMS_MMS})
int com.android.internal.telephony.gsm.GsmSMSDispatcher.dispatchMessage(SmsMessageBase) - @DSSink({DSSinkKind.SMS_MMS})
void com.android.internal.telephony.gsm.GsmSMSDispatcher.sendText(String,String,String,PendingIntent,PendingIntent) - @DSSink({DSSinkKind.SMS_MMS})
LinkProperties com.android.internal.telephony.gsm.GsmDataConnectionTracker.getLinkProperties(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] com.android.internal.telephony.gsm.GsmDataConnectionTracker.getActiveApnTypes() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.gsm.GsmDataConnectionTracker.onDisconnectDone(int,AsyncResult) - @DSSink({DSSinkKind.PHONE_CONNECTION})
void com.android.internal.telephony.gsm.GsmDataConnectionTracker.onDataSetupComplete(AsyncResult) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.gsm.GsmDataConnectionTracker.notifyOffApnsOfAvailability(String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.gsm.GsmDataConnectionTracker.getActionIntentReconnectAlarm() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.gsm.GsmDataConnectionTracker.getActionIntentDataStallAlarm() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
LinkCapabilities com.android.internal.telephony.gsm.GsmDataConnectionTracker.getLinkCapabilities(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.gsm.GsmDataConnectionTracker.getApnProfileID(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.gsm.GsmDataConnectionTracker.notifyDataConnection(String) - @DSSink({DSSinkKind.PHONE_STATE})
String com.android.internal.telephony.gsm.GsmDataConnectionTracker.getActiveApnString(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.gsm.GsmDataConnectionTracker.getAnyDataEnabled() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
List com.android.internal.telephony.gsm.GSMPhone.getPendingMmiCodes() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.gsm.GSMPhone.getPhoneName() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.gsm.GSMPhone.getDataCallList(Message) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.gsm.GSMPhone.setOnPostDialCharacter(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.gsm.GSMPhone.notifyServiceStateChanged(ServiceState) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
int com.android.internal.telephony.gsm.GSMPhone.getPhoneType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.gsm.GSMPhone.getEsn() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
boolean com.android.internal.telephony.gsm.GSMPhone.handlePinMmi(String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.gsm.GSMPhone.getVoiceMailNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
Connection com.android.internal.telephony.gsm.GSMPhone.dial(String,UUSInfo) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.gsm.GSMPhone.sendBurstDtmf(String) - @DSSink({DSSinkKind.PHONE_CONNECTION})
void com.android.internal.telephony.gsm.GSMPhone.setOutgoingCallerIdDisplay(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.gsm.GSMPhone.getDeviceSvn() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.gsm.GSMPhone.getCallWaiting(Message) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
ServiceStateTracker com.android.internal.telephony.gsm.GSMPhone.getServiceStateTracker() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.gsm.GSMPhone.setCallForwardingOption(int,int,String,int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.gsm.GSMPhone.getAvailableNetworks(Message) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.gsm.GSMPhone.getVoiceMailAlphaTag() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.gsm.GSMPhone.getMeid() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.gsm.GSMPhone.startDtmf(char) - @DSSink({DSSinkKind.PHONE_CONNECTION})
String com.android.internal.telephony.gsm.GSMPhone.getDeviceId() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.gsm.GSMPhone.notifyDisconnect(Connection) - @DSSink({DSSinkKind.PHONE_STATE})
void com.android.internal.telephony.gsm.GSMPhone.setSystemProperty(String,String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.gsm.GSMPhone.getSubscriberId() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
Connection com.android.internal.telephony.gsm.GSMPhone.dial(String) - @DSSink({DSSinkKind.VOIP})
String com.android.internal.telephony.gsm.GSMPhone.getMsisdn() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
boolean com.android.internal.telephony.gsm.GSMPhone.getDataRoamingEnabled() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.gsm.GSMPhone.setCellBroadcastSmsConfig(int[],Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
IccSmsInterfaceManager com.android.internal.telephony.gsm.GSMPhone.getIccSmsInterfaceManager() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.gsm.GSMPhone.setMute(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
PhoneSubInfo com.android.internal.telephony.gsm.GSMPhone.getPhoneSubInfo() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.gsm.GSMPhone.getLine1Number() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.gsm.GSMPhone.saveClirSetting(int) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.gsm.GSMPhone.getNeighboringCids(Message) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
CellLocation com.android.internal.telephony.gsm.GSMPhone.getCellLocation() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
boolean com.android.internal.telephony.gsm.GSMPhone.getMute() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
IccPhoneBookInterfaceManager com.android.internal.telephony.gsm.GSMPhone.getIccPhoneBookInterfaceManager() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.gsm.GSMPhone.notifyNewRingingConnection(Connection) - @DSSink({DSSinkKind.PHONE_STATE})
String com.android.internal.telephony.gsm.GSMPhone.getLine1AlphaTag() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.gsm.GSMPhone.setCallWaiting(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.gsm.GSMPhone.setLine1Number(String,String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.gsm.GSMPhone.handleMessage(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.gsm.GSMPhone.getImei() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.gsm.GSMPhone.setRadioPower(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.gsm.GSMPhone.setDataRoamingEnabled(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
ServiceState com.android.internal.telephony.gsm.GSMPhone.getServiceState() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
CallTracker com.android.internal.telephony.gsm.GSMPhone.getCallTracker() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.gsm.GSMPhone.sendUssdResponse(String) - @DSSink({DSSinkKind.PHONE_CONNECTION})
void com.android.internal.telephony.gsm.GSMPhone.getCallForwardingOption(int,Message) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.gsm.GSMPhone.sendDtmf(char) - @DSSink({DSSinkKind.PHONE_CONNECTION})
String com.android.internal.telephony.gsm.SpnOverride.getSpn(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.gsm.GsmMmiCode.sendUssd(String) - @DSSink({DSSinkKind.PHONE_CONNECTION})
int com.android.internal.telephony.gsm.GsmMmiCode.getCLIRMode() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
CharSequence com.android.internal.telephony.gsm.GsmMmiCode.getMessage() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.gsm.SimSmsInterfaceManager.updateMessageOnIccEf(int,int,byte[]) - @DSSink({DSSinkKind.SMS_MMS})
List com.android.internal.telephony.gsm.SimSmsInterfaceManager.getAllMessagesFromIccEf() - @DSSource({DSSourceKind.CONTACT_INFORMATION})
boolean com.android.internal.telephony.gsm.SimSmsInterfaceManager.enableCellBroadcastRange(int,int) - @DSSink({DSSinkKind.SMS_MMS})
boolean com.android.internal.telephony.gsm.SimSmsInterfaceManager.copyMessageToIccEf(int,byte[],byte[]) - @DSSink({DSSinkKind.SMS_MMS})
boolean com.android.internal.telephony.gsm.SimSmsInterfaceManager.enableCellBroadcast(int) - @DSSink({DSSinkKind.SMS_MMS})
long com.android.internal.telephony.gsm.GsmConnection.getCreateTime() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.gsm.GsmConnection.getGSMIndex() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
UUSInfo com.android.internal.telephony.gsm.GsmConnection.getUUSInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long com.android.internal.telephony.gsm.GsmConnection.getConnectTime() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.gsm.GsmConnection.getRemainingPostDialString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long com.android.internal.telephony.gsm.GsmConnection.getDurationMillis() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.gsm.GsmConnection.getNumberPresentation() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.gsm.GsmConnection.getAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long com.android.internal.telephony.gsm.GsmConnection.getDisconnectTime() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long com.android.internal.telephony.gsm.GsmConnection.getHoldDurationMillis() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] com.android.internal.telephony.gsm.SimTlv.getData() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.gsm.SimTlv.getTag() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.gsm.GsmServiceStateTracker.getCurrentGprsState() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Phone com.android.internal.telephony.gsm.GsmServiceStateTracker.getPhone() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.gsm.GsmServiceStateTracker.getCurrentDataConnectionState() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int[] com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager.getAdnRecordsSize(int) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
void com.android.internal.telephony.gsm.UsimPhoneBookManager$PbrFile.parseTag(SimTlv,int) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
void com.android.internal.telephony.gsm.UsimPhoneBookManager$PbrFile.parseEf(SimTlv,Map,int) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
ArrayList com.android.internal.telephony.gsm.UsimPhoneBookManager.loadEfFilesFromUsim() - @DSSource({DSSourceKind.CONTACT_INFORMATION})
String com.android.internal.telephony.gsm.SIMFileHandler.getEFPath(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.gsm.GsmDataConnection.getProfileId() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object[] com.android.internal.telephony.gsm.UsimServiceTable.getValues() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.gsm.UsimServiceTable.getTag() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.gsm.SmsBroadcastConfigInfo.getToServiceId() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.gsm.SmsBroadcastConfigInfo.getFromCodeScheme() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.gsm.SmsBroadcastConfigInfo.getFromServiceId() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.gsm.SmsBroadcastConfigInfo.getToCodeScheme() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.gsm.SIMRecords.getOperatorNumeric() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.gsm.SIMRecords.getDisplayRule(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.gsm.SIMRecords.getVoiceMailNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.gsm.SIMRecords.getMsisdnAlphaTag() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
UsimServiceTable com.android.internal.telephony.gsm.SIMRecords.getUsimServiceTable() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.gsm.SIMRecords.getVoiceMailAlphaTag() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.gsm.SIMRecords.getMsisdnNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.gsm.SIMRecords.getIMSI() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.gsm.SIMRecords.getVoiceCallForwardingFlag() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
List com.android.internal.telephony.IccPhoneBookInterfaceManager.getAdnRecordsInEf(int) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
boolean com.android.internal.telephony.IccPhoneBookInterfaceManager.updateAdnRecordsInEfByIndex(int,String,String,int,String) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
boolean com.android.internal.telephony.IccPhoneBookInterfaceManager.updateAdnRecordsInEfBySearch(int,String,String,String,String,String) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
String com.android.internal.telephony.OperatorInfo.getOperatorNumeric() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.OperatorInfo.toString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.OperatorInfo.getOperatorAlphaShort() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.OperatorInfo.getOperatorAlphaLong() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.DefaultPhoneNotifier.notifyOtaspChanged(Phone,int) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.DefaultPhoneNotifier.notifySignalStrength(Phone) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.DefaultPhoneNotifier.notifyDataActivity(Phone) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.DefaultPhoneNotifier.notifyPhoneState(Phone) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.DefaultPhoneNotifier.notifyServiceState(Phone) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.DefaultPhoneNotifier.notifyCallForwardingChanged(Phone) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.DefaultPhoneNotifier.notifyMessageWaitingChanged(Phone) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.DefaultPhoneNotifier.notifyDataConnectionFailed(Phone,String,String) - @DSSink({DSSinkKind.PHONE_STATE})
IWapPushManager com.android.internal.telephony.WapPushOverSms$WapPushConnection.getWapPushManager() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.WapPushOverSms.dispatchWapPdu(byte[]) - @DSSink({DSSinkKind.SMS_MMS})
String com.android.internal.telephony.DriverCall.toString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifySignalStrength(SignalStrength) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyCallForwardingChanged(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyCellLocation(Bundle) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.ITelephonyRegistry$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyDataActivity(int) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyDataConnection(int,boolean,String,String,String,LinkProperties,LinkCapabilities,int,boolean) - @DSSink({DSSinkKind.PHONE_STATE})
void com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyOtaspChanged(int) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
ITelephonyRegistry com.android.internal.telephony.ITelephonyRegistry$Stub.asInterface(IBinder) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
IBinder com.android.internal.telephony.ITelephonyRegistry$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyServiceState(ServiceState) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyDataConnectionFailed(String,String) - @DSSink({DSSinkKind.PHONE_STATE})
void com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.listen(String,IPhoneStateListener,int,boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyCallState(int,String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyMessageWaitingChanged(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.BaseCommands.setOnSmsOnSim(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.BaseCommands.setOnUnsolOemHookRaw(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.BaseCommands.setOnSmsStatus(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.BaseCommands.setOnNITZTime(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.BaseCommands.setOnCatSessionEnd(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.BaseCommands.setOnCallRing(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.BaseCommands.setOnIccSmsFull(Handler,int,Object) - @DSSink({DSSinkKind.PHONE_STATE})
void com.android.internal.telephony.BaseCommands.setOnNewGsmBroadcastSms(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.BaseCommands.setOnCatProactiveCmd(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.BaseCommands.setOnUSSD(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.BaseCommands.setOnCatEvent(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.BaseCommands.setOnCatCallSetUp(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.BaseCommands.setOnNewGsmSms(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.BaseCommands.setEmergencyCallbackMode(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.BaseCommands.setOnNewCdmaSms(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
int com.android.internal.telephony.BaseCommands.getLteOnCdmaMode() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.BaseCommands.setOnSuppServiceNotification(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.BaseCommands.setOnRestrictedStateChanged(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.BaseCommands.setOnIccRefresh(Handler,int,Object) - @DSSink({DSSinkKind.PHONE_STATE})
void com.android.internal.telephony.BaseCommands.setOnSignalStrengthUpdate(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
byte[] com.android.internal.telephony.SmsHeader.toByteArray(SmsHeader) - @DSSink({DSSinkKind.SMS_MMS})
String com.android.internal.telephony.SmsHeader.toString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.AdnRecordCache.requestLoadAllAdnLike(int,int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.AdnRecordCache.updateAdnBySearch(int,AdnRecord,AdnRecord,String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.AdnRecordCache.updateAdnByIndex(int,AdnRecord,int,String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
ArrayList com.android.internal.telephony.AdnRecordCache.getRecordsIfLoaded(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.AdnRecordCache.handleMessage(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
ApnSetting com.android.internal.telephony.ApnContext.getApnSetting() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
DataConnectionAc com.android.internal.telephony.ApnContext.getDataConnectionAc() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ArrayList com.android.internal.telephony.ApnContext.getWaitingApns() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.ApnContext.getApnType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.ApnContext.getDependencyMet() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.ApnContext.setDataConnection(DataConnection) - @DSSink({DSSinkKind.PHONE_STATE})
void com.android.internal.telephony.ApnContext.setDependencyMet(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
ApnSetting com.android.internal.telephony.ApnContext.getNextWaitingApn() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.ApnContext.getWaitingApnsPermFailCount() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.ApnContext.setReason(String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.ApnContext.setDataConnectionAc(DataConnectionAc) - @DSSink({DSSinkKind.PHONE_STATE})
void com.android.internal.telephony.ApnContext.setApnSetting(ApnSetting) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.ApnContext.setWaitingApns(ArrayList) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.ApnContext.setEnabled(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
DataConnection com.android.internal.telephony.ApnContext.getDataConnection() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.ApnContext.getReason() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpiLoaded.getEfName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.ims.IsimUiccRecords$EfIsimDomainLoaded.getEfName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.ims.IsimUiccRecords.getIsimDomain() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.ims.IsimUiccRecords.getIsimImpi() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpuLoaded.getEfName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] com.android.internal.telephony.ims.IsimUiccRecords.getIsimImpu() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Message com.android.internal.telephony.CallTracker.obtainNoPollCompleteMessage(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] com.android.internal.telephony.SmsMessageBase.getUserData() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.SmsMessageBase.getDisplayMessageBody() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SmsHeader com.android.internal.telephony.SmsMessageBase.getUserDataHeader() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.SmsMessageBase.getOriginatingAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.SmsMessageBase$SubmitPduBase.toString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.SmsMessageBase.getPseudoSubject() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] com.android.internal.telephony.SmsMessageBase.getPdu() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.SmsMessageBase.getStatusOnIcc() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long com.android.internal.telephony.SmsMessageBase.getTimestampMillis() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.SmsMessageBase.getDisplayOriginatingAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.SmsMessageBase.getEmailFrom() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.SmsMessageBase.getMessageBody() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.SmsMessageBase.getServiceCenterAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.SmsMessageBase.getIndexOnIcc() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.SmsMessageBase.getEmailBody() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Bitmap com.android.internal.telephony.IccUtils.parseToBnW(byte[],int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Bitmap com.android.internal.telephony.IccUtils.parseToRGB(byte[],int,boolean) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] com.android.internal.telephony.IccUtils.hexStringToBytes(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.SMSDispatcher.dispatchPdus(byte[][]) - @DSSink({DSSinkKind.SMS_MMS})
void com.android.internal.telephony.SMSDispatcher.handleSendComplete(AsyncResult) - @DSSink({DSSinkKind.SMS_MMS})
void com.android.internal.telephony.SMSDispatcher.dispatchPortAddressedPdus(byte[][],int) - @DSSink({DSSinkKind.SMS_MMS})
int com.android.internal.telephony.SMSDispatcher.getNextConcatenatedRef() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.SMSDispatcher.dispatch(Intent,String) - @DSSink({DSSinkKind.SMS_MMS})
int com.android.internal.telephony.SMSDispatcher.processMessagePart(byte[],String,int,int,int,long,int,boolean) - @DSSink({DSSinkKind.SMS_MMS})
int[] com.android.internal.telephony.GsmAlphabet.getEnabledSingleShiftTables() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
byte[] com.android.internal.telephony.GsmAlphabet.stringToGsm7BitPacked(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] com.android.internal.telephony.GsmAlphabet.stringToGsm7BitPackedWithHeader(String,byte[],int,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] com.android.internal.telephony.GsmAlphabet.stringToGsm7BitPackedWithHeader(String,byte[]) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int[] com.android.internal.telephony.GsmAlphabet.getEnabledLockingShiftTables() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
byte[] com.android.internal.telephony.GsmAlphabet.stringToGsm7BitPacked(String,int,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] com.android.internal.telephony.GsmAlphabet.stringToGsm8BitPacked(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.GsmAlphabet.gsm8BitUnpackedToString(byte[],int,int,String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
byte[] com.android.internal.telephony.GsmAlphabet.stringToGsm7BitPacked(String,int,boolean,int,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
IccException com.android.internal.telephony.IccIoResult.getException() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.IccIoResult.toString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.CallForwardInfo.toString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.ServiceStateTracker.getDesiredPowerState() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.DataConnectionTracker.notifyOffApnsOfAvailability(String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
int com.android.internal.telephony.DataConnectionTracker.enableApnType(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.DataConnectionTracker.notifyDataConnection(String) - @DSSink({DSSinkKind.PHONE_STATE})
String com.android.internal.telephony.DataConnectionTracker.apnIdToType(int) - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
boolean com.android.internal.telephony.DataConnectionTracker.getAnyDataEnabled() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
ApnSetting com.android.internal.telephony.DataConnectionTracker.fetchDunApn() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
LinkProperties com.android.internal.telephony.DataConnectionTracker.getLinkProperties(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.DataConnectionTracker.getDataOnRoamingEnabled() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
int com.android.internal.telephony.DataConnectionTracker.disableApnType(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.DataConnectionTracker.setInternalDataEnabled(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
LinkCapabilities com.android.internal.telephony.DataConnectionTracker.getLinkCapabilities(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.DataConnectionTracker.getReryConfig(boolean) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.DataConnectionTracker$TxRxSum.toString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.DataConnectionTracker.getActiveApnString(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.DataConnectionTracker.setDataOnRoamingEnabled(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String[] com.android.internal.telephony.DataConnectionTracker.getActiveApnTypes() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.IccCardStatus.setUniversalPinState(int) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.IccCardStatus.toString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.IccCardStatus.setCardState(int) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
long com.android.internal.telephony.Call.getEarliestCreateTime() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long com.android.internal.telephony.Call.getEarliestConnectTime() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Connection com.android.internal.telephony.Call.getLatestConnection() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Connection com.android.internal.telephony.Call.getEarliestConnection() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
IBinder com.android.internal.telephony.IIccPhoneBook$Stub.asBinder() - @DSSource({DSSourceKind.CONTACT_INFORMATION})
List com.android.internal.telephony.IIccPhoneBook$Stub$Proxy.getAdnRecordsInEf(int) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
boolean com.android.internal.telephony.IIccPhoneBook$Stub$Proxy.updateAdnRecordsInEfBySearch(int,String,String,String,String,String) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
String com.android.internal.telephony.IIccPhoneBook$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
boolean com.android.internal.telephony.IIccPhoneBook$Stub$Proxy.updateAdnRecordsInEfByIndex(int,String,String,int,String) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
boolean com.android.internal.telephony.IIccPhoneBook$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
int[] com.android.internal.telephony.IIccPhoneBook$Stub$Proxy.getAdnRecordsSize(int) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
IIccPhoneBook com.android.internal.telephony.IIccPhoneBook$Stub.asInterface(IBinder) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
int com.android.internal.telephony.RetryManager.getRetryCount() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.RetryManager.getRetryTimer() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
CallerInfo com.android.internal.telephony.CallerInfo.markAsVoiceMail() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
CallerInfo com.android.internal.telephony.CallerInfo.getCallerInfo(Context,Uri) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.CallerInfo.getCallerId(Context,String) - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
CallerInfo com.android.internal.telephony.CallerInfo.getCallerInfo(Context,String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.CallerInfo.toString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
CallerInfo com.android.internal.telephony.CallerInfo.getCallerInfo(Context,Uri,Cursor) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
CallerInfo com.android.internal.telephony.CallerInfo.markAsEmergency(Context) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.IccFileHandler.getCommonIccEFPath(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.IccFileHandler.getEFLinearRecordSize(int,Message) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.IccFileHandler.updateEFLinearFixed(int,int,byte[],String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.IccFileHandler.handleMessage(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.IntRangeManager.isEmpty() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.IntRangeManager.disableRange(int,int,String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.IntRangeManager.enableRange(int,int,String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.SmsUsageMonitor.check(String,int) - @DSSink({DSSinkKind.SMS_MMS})
int com.android.internal.telephony.DataConnection$FailCause.getErrorCode() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.DataConnection.getRetryCount() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.DataConnection.getRetryTimer() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.DataConnection$DcDefaultState.processMessage(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.DataConnection$DcActiveState.processMessage(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection.processMessage(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.DataConnection.isRetryForever() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.DataConnection$DcInactiveState.processMessage(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.DataConnection$DcActivatingState.processMessage(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.DataConnection.isRetryNeeded() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.DataConnection$DcDisconnectingState.processMessage(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
int com.android.internal.telephony.DataConnection$CallSetupException.getRetryOverride() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.DataConnection.getDataConnectionId() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.cdma.CdmaLteServiceStateTracker.setCdmaTechnology(int) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.cdma.CDMALTEPhone.getMsisdn() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.cdma.CDMALTEPhone.getDeviceSvn() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.cdma.CDMALTEPhone.getImei() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
IsimRecords com.android.internal.telephony.cdma.CDMALTEPhone.getIsimRecords() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.cdma.CDMALTEPhone.getSubscriberId() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.cdma.CDMALTEPhone.getAvailableNetworks(Message) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.cdma.CdmaServiceStateTracker.getImsi() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Phone com.android.internal.telephony.cdma.CdmaServiceStateTracker.getPhone() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.cdma.CdmaServiceStateTracker.fixTimeZone(String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
int com.android.internal.telephony.cdma.CdmaServiceStateTracker.getOtasp() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.cdma.CdmaServiceStateTracker.getCurrentDataConnectionState() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.cdma.CdmaServiceStateTracker.getCdmaMin() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.cdma.CdmaServiceStateTracker.getPrlVersion() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.cdma.CdmaServiceStateTracker.getMdnNumber() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int[] com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager.getAdnRecordsSize(int) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
String com.android.internal.telephony.cdma.RuimRecords.getPrlVersion() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.cdma.RuimRecords.getCdmaMin() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.cdma.RuimRecords.setVoiceMailNumber(String,String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.cdma.RuimRecords.getRUIMOperatorNumeric() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.cdma.RuimRecords.getDisplayRule(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.cdma.RuimRecords.getMdnNumber() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long com.android.internal.telephony.cdma.CdmaConnection.getDurationMillis() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.cdma.CdmaConnection.getRemainingPostDialString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.cdma.CdmaConnection.getAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long com.android.internal.telephony.cdma.CdmaConnection.getHoldDurationMillis() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.cdma.CdmaConnection.getOrigDialString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
UUSInfo com.android.internal.telephony.cdma.CdmaConnection.getUUSInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.cdma.CdmaConnection.getNumberPresentation() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long com.android.internal.telephony.cdma.CdmaConnection.getCreateTime() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long com.android.internal.telephony.cdma.CdmaConnection.getDisconnectTime() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long com.android.internal.telephony.cdma.CdmaConnection.getConnectTime() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.cdma.CdmaConnection.getCDMAIndex() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.cdma.CdmaSMSDispatcher.sendNewSubmitPdu(String,String,String,SmsHeader,int,PendingIntent,PendingIntent,boolean) - @DSSink({DSSinkKind.SMS_MMS})
int com.android.internal.telephony.cdma.CdmaSMSDispatcher.dispatchMessage(SmsMessageBase) - @DSSink({DSSinkKind.SMS_MMS})
String com.android.internal.telephony.cdma.CdmaSMSDispatcher.getFormat() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.cdma.CdmaSMSDispatcher.sendText(String,String,String,PendingIntent,PendingIntent) - @DSSink({DSSinkKind.SMS_MMS})
void com.android.internal.telephony.cdma.CdmaSMSDispatcher.sendData(String,String,int,byte[],PendingIntent,PendingIntent) - @DSSink({DSSinkKind.SMS_MMS})
int com.android.internal.telephony.cdma.SmsMessage.getNumOfVoicemails() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.cdma.SmsMessage.getTeleService() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.cdma.SmsMessage.getMessageType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.cdma.SmsMessage.getNextMessageId() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] com.android.internal.telephony.cdma.SmsMessage.getIncomingSmsFingerprint() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.cdma.SmsMessage.getProtocolIdentifier() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.cdma.SmsMessage.getStatus() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
List com.android.internal.telephony.cdma.CdmaCall.getConnections() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Phone com.android.internal.telephony.cdma.CdmaCall.getPhone() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.cdma.RuimFileHandler.getEFPath(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Connection com.android.internal.telephony.cdma.CdmaCallTracker.dial(String,int) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
CdmaConnection com.android.internal.telephony.cdma.CdmaCallTracker.getConnectionByIndex(CdmaCall,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.cdma.CdmaCallTracker.getMute() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Connection com.android.internal.telephony.cdma.CdmaCallTracker.dial(String) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
CharSequence com.android.internal.telephony.cdma.CdmaMmiCode.getMessage() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.cdma.EriManager.getCdmaEriIconIndex(int,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.cdma.EriManager.getCdmaEriIconMode(int,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.cdma.EriManager.getEriFileVersion() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.cdma.EriManager.getEriFileType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.cdma.EriManager.getEriNumberOfEntries() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.cdma.EriManager.getCdmaEriText(int,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.cdma.CDMAPhone.startDtmf(char) - @DSSink({DSSinkKind.PHONE_CONNECTION})
boolean com.android.internal.telephony.cdma.CDMAPhone.handlePinMmi(String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.cdma.CDMAPhone.getCallWaiting(Message) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.cdma.CDMAPhone.notifyServiceStateChanged(ServiceState) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.cdma.CDMAPhone.updateCurrentCarrierInProvider(String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.cdma.CDMAPhone.getCdmaEriText() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.cdma.CDMAPhone.setLine1Number(String,String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
IccSmsInterfaceManager com.android.internal.telephony.cdma.CDMAPhone.getIccSmsInterfaceManager() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.cdma.CDMAPhone.getEsn() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.cdma.CDMAPhone.setMute(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
Connection com.android.internal.telephony.cdma.CDMAPhone.dial(String,UUSInfo) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.cdma.CDMAPhone.getLine1Number() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
ServiceStateTracker com.android.internal.telephony.cdma.CDMAPhone.getServiceStateTracker() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.cdma.CDMAPhone.getCdmaEriIconIndex() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
CallTracker com.android.internal.telephony.cdma.CDMAPhone.getCallTracker() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.cdma.CDMAPhone.getPhoneName() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.cdma.CDMAPhone.setCallWaiting(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.cdma.CDMAPhone.getDataRoamingEnabled() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.cdma.CDMAPhone.getEnhancedVoicePrivacy(Message) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
int com.android.internal.telephony.cdma.CDMAPhone.getCdmaEriIconMode() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.cdma.CDMAPhone.getPhoneType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.cdma.CDMAPhone.getCallForwardingIndicator() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.cdma.CDMAPhone.enableEnhancedVoicePrivacy(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.cdma.CDMAPhone.getMute() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.cdma.CDMAPhone.setOnPostDialCharacter(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.cdma.CDMAPhone.sendBurstDtmf(String,int,int,Message) - @DSSink({DSSinkKind.PHONE_CONNECTION})
Connection com.android.internal.telephony.cdma.CDMAPhone.dial(String) - @DSSink({DSSinkKind.VOIP})
void com.android.internal.telephony.cdma.CDMAPhone.notifyDisconnect(Connection) - @DSSink({DSSinkKind.PHONE_STATE})
void com.android.internal.telephony.cdma.CDMAPhone.setNetworkSelectionModeAutomatic(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.cdma.CDMAPhone.getCdmaPrlVersion() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
List com.android.internal.telephony.cdma.CDMAPhone.getPendingMmiCodes() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.cdma.CDMAPhone.getDataCallList(Message) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.cdma.CDMAPhone.sendUssdResponse(String) - @DSSink({DSSinkKind.SMS_MMS})
String com.android.internal.telephony.cdma.CDMAPhone.getSubscriberId() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
int com.android.internal.telephony.cdma.CDMAPhone.getVoiceMessageCount() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.cdma.CDMAPhone.sendDtmf(char) - @DSSink({DSSinkKind.PHONE_CONNECTION})
void com.android.internal.telephony.cdma.CDMAPhone.setRadioPower(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.cdma.CDMAPhone.setOutgoingCallerIdDisplay(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.cdma.CDMAPhone.getDeviceId() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
boolean com.android.internal.telephony.cdma.CDMAPhone.getMessageWaitingIndicator() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.cdma.CDMAPhone.getLine1AlphaTag() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.cdma.CDMAPhone.setSystemProperty(String,String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
PhoneSubInfo com.android.internal.telephony.cdma.CDMAPhone.getPhoneSubInfo() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.cdma.CDMAPhone.setCellBroadcastSmsConfig(int[],Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
CellLocation com.android.internal.telephony.cdma.CDMAPhone.getCellLocation() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
IccPhoneBookInterfaceManager com.android.internal.telephony.cdma.CDMAPhone.getIccPhoneBookInterfaceManager() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.cdma.CDMAPhone.getMeid() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.cdma.CDMAPhone.setOnEcbModeExitResponse(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.cdma.CDMAPhone.notifyNewRingingConnection(Connection) - @DSSink({DSSinkKind.PHONE_STATE})
String com.android.internal.telephony.cdma.CDMAPhone.getVoiceMailAlphaTag() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.cdma.CDMAPhone.setCallForwardingOption(int,int,String,int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.cdma.CDMAPhone.setDataRoamingEnabled(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
ServiceState com.android.internal.telephony.cdma.CDMAPhone.getServiceState() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.cdma.CDMAPhone.getCdmaMin() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.cdma.CDMAPhone.getImei() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.cdma.CDMAPhone.getDeviceSvn() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.cdma.CDMAPhone.getVoiceMailNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
boolean com.android.internal.telephony.cdma.RuimSmsInterfaceManager.copyMessageToIccEf(int,byte[],byte[]) - @DSSink({DSSinkKind.SMS_MMS})
boolean com.android.internal.telephony.cdma.RuimSmsInterfaceManager.enableCellBroadcastRange(int,int) - @DSSink({DSSinkKind.SMS_MMS})
boolean com.android.internal.telephony.cdma.RuimSmsInterfaceManager.updateMessageOnIccEf(int,int,byte[]) - @DSSink({DSSinkKind.SMS_MMS})
List com.android.internal.telephony.cdma.RuimSmsInterfaceManager.getAllMessagesFromIccEf() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.cdma.RuimSmsInterfaceManager.enableCellBroadcast(int) - @DSSink({DSSinkKind.SMS_MMS})
void com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onDisconnectDone(int,AsyncResult) - @DSSink({DSSinkKind.PHONE_CONNECTION})
String com.android.internal.telephony.cdma.CdmaDataConnectionTracker.getActionIntentReconnectAlarm() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.cdma.CdmaDataConnectionTracker.onDataSetupComplete(AsyncResult) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.cdma.CdmaDataConnectionTracker.getActionIntentDataStallAlarm() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
CommandParamsFactory com.android.internal.telephony.cat.CommandParamsFactory.getInstance(RilMessageDecoder,IccFileHandler) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.cat.Menu.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.cat.CommandParams.setIcon(Bitmap) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
ComprehensionTlvTag com.android.internal.telephony.cat.CommandDetails.getTag() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ComprehensionTlvTag com.android.internal.telephony.cat.ItemsIconId.getTag() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ComprehensionTlvTag com.android.internal.telephony.cat.IconId.getTag() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ComprehensionTlvTag com.android.internal.telephony.cat.DeviceIdentities.getTag() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.cat.Item.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
CommandDetails com.android.internal.telephony.cat.CatResponseMessage.getCmdDetails() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Bitmap com.android.internal.telephony.cat.IconLoader.parseToRGB(byte[],int,boolean,byte[]) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Bitmap com.android.internal.telephony.cat.IconLoader.parseToBnW(byte[],int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
IconLoader com.android.internal.telephony.cat.IconLoader.getInstance(Handler,IccFileHandler) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.cat.ResponseData.writeLength(ByteArrayOutputStream,int) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.cat.GetInkeyInputResponseData.format(ByteArrayOutputStream) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
Menu com.android.internal.telephony.cat.CatCmdMessage.getMenu() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ToneSettings com.android.internal.telephony.cat.CatCmdMessage.getToneSettings() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.cat.ComprehensionTlv.getValueIndex() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] com.android.internal.telephony.cat.ComprehensionTlv.getRawValue() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.cat.ComprehensionTlv.getTag() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.cat.ComprehensionTlv.getLength() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
List com.android.internal.telephony.cat.BerTlv.getComprehensionTlvs() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.cat.BerTlv.getTag() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.cat.Input.setIcon(Bitmap) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
AppInterface com.android.internal.telephony.cat.CatService.getInstance() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.cat.CatService.handleMessage(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.cat.RilMessageDecoder.sendMsgParamsDecoded(ResultCode,CommandParams) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.cat.RilMessageDecoder$StateStart.processMessage(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.processMessage(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.cat.RilMessageDecoder.sendStartDecodingMessageParams(RilMessage) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
RilMessageDecoder com.android.internal.telephony.cat.RilMessageDecoder.getInstance(Handler,IccFileHandler) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Phone com.android.internal.telephony.PhoneFactory.getDefaultPhone() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
Phone com.android.internal.telephony.PhoneFactory.getCdmaPhone() - @DSSource({DSSourceKind.CONTACT_INFORMATION})
Phone com.android.internal.telephony.PhoneFactory.getGsmPhone() - @DSSource({DSSourceKind.CONTACT_INFORMATION})
String com.android.internal.telephony.PhoneProxy.getMsisdn() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneProxy.getMeid() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.PhoneProxy.getCallForwardingOption(int,Message) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.setEchoSuppressionEnabled(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.PhoneProxy.getCdmaPrlVersion() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.PhoneProxy.setCellBroadcastSmsConfig(int[],Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
Connection com.android.internal.telephony.PhoneProxy.dial(String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.PhoneProxy.getDeviceId() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.PhoneProxy.setBandMode(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.setCallForwardingOption(int,int,String,int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.getCallWaiting(Message) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.PhoneProxy.getActiveApnHost(String) - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.PhoneProxy.setLine1Number(String,String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.sendDtmf(char) - @DSSink({DSSinkKind.PHONE_CONNECTION})
void com.android.internal.telephony.PhoneProxy.setUnitTestMode(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.setTTYMode(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
Call com.android.internal.telephony.PhoneProxy.getBackgroundCall() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
IccSmsInterfaceManager com.android.internal.telephony.PhoneProxy.getIccSmsInterfaceManager() - @DSSource({DSSourceKind.CONTACT_INFORMATION})
void com.android.internal.telephony.PhoneProxy.getAvailableNetworks(Message) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
Connection com.android.internal.telephony.PhoneProxy.dial(String,UUSInfo) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
List com.android.internal.telephony.PhoneProxy.getPendingMmiCodes() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.setOnPostDialCharacter(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.setPreferredNetworkType(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.PhoneProxy.getSubscriberId() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneProxy.getEsn() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
IccCard com.android.internal.telephony.PhoneProxy.getIccCard() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.enableEnhancedVoicePrivacy(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.PhoneProxy.getIccRecordsLoaded() - @DSSource({DSSourceKind.CONTACT_INFORMATION})
void com.android.internal.telephony.PhoneProxy.setOnEcbModeExitResponse(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
int com.android.internal.telephony.PhoneProxy.getCdmaEriIconIndex() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.PhoneProxy.getVoiceMailNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneProxy.getPhoneName() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.PhoneProxy.startDtmf(char) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.setNetworkSelectionModeAutomatic(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
PhoneSubInfo com.android.internal.telephony.PhoneProxy.getPhoneSubInfo() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
IccPhoneBookInterfaceManager com.android.internal.telephony.PhoneProxy.getIccPhoneBookInterfaceManager() - @DSSource({DSSourceKind.CONTACT_INFORMATION})
String com.android.internal.telephony.PhoneProxy.getIccSerialNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.PhoneProxy.setCdmaSubscription(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.setDataRoamingEnabled(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
SignalStrength com.android.internal.telephony.PhoneProxy.getSignalStrength() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.setVoiceMailNumber(String,String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
int com.android.internal.telephony.PhoneProxy.getPhoneType() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
LinkCapabilities com.android.internal.telephony.PhoneProxy.getLinkCapabilities(String) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.PhoneProxy.getMessageWaitingIndicator() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
int com.android.internal.telephony.PhoneProxy.enableApnType(String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.PhoneProxy.getLine1Number() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.PhoneProxy.sendUssdResponse(String) - @DSSink({DSSinkKind.PHONE_CONNECTION})
Call com.android.internal.telephony.PhoneProxy.getForegroundCall() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.setSmscAddress(String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
Call com.android.internal.telephony.PhoneProxy.getRingingCall() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.PhoneProxy.getCdmaMin() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
UsimServiceTable com.android.internal.telephony.PhoneProxy.getUsimServiceTable() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.PhoneProxy.getImei() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneProxy.getDeviceSvn() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
LinkProperties com.android.internal.telephony.PhoneProxy.getLinkProperties(String) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.getPreferredNetworkType(Message) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
boolean com.android.internal.telephony.PhoneProxy.getCallForwardingIndicator() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
int com.android.internal.telephony.PhoneProxy.getVoiceMessageCount() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
SimulatedRadioControl com.android.internal.telephony.PhoneProxy.getSimulatedRadioControl() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.handleMessage(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.getDataCallList(Message) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
int com.android.internal.telephony.PhoneProxy.getCdmaEriIconMode() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
CellLocation com.android.internal.telephony.PhoneProxy.getCellLocation() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
void com.android.internal.telephony.PhoneProxy.getNeighboringCids(Message) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.setMute(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
IsimRecords com.android.internal.telephony.PhoneProxy.getIsimRecords() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.setOutgoingCallerIdDisplay(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.PhoneProxy.getDataRoamingEnabled() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.getOutgoingCallerIdDisplay(Message) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.PhoneProxy.getMute() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.getSmscAddress(Message) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.sendBurstDtmf(String,int,int,Message) - @DSSink({DSSinkKind.PHONE_CONNECTION})
String com.android.internal.telephony.PhoneProxy.getLine1AlphaTag() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.PhoneProxy.setCallWaiting(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
Phone com.android.internal.telephony.PhoneProxy.getActivePhone() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.setVoiceMessageWaiting(int,int) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.PhoneProxy.getUnitTestMode() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.setCdmaRoamingPreference(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.PhoneProxy.getCdmaEriText() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
Context com.android.internal.telephony.PhoneProxy.getContext() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.getCellBroadcastSmsConfig(Message) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
ServiceState com.android.internal.telephony.PhoneProxy.getServiceState() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.PhoneProxy.getVoiceMailAlphaTag() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String[] com.android.internal.telephony.PhoneProxy.getActiveApnTypes() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.setRadioPower(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
int com.android.internal.telephony.PhoneProxy.getLteOnCdmaMode() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneProxy.getEnhancedVoicePrivacy(Message) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy.updateAdnRecordsInEfBySearch(int,String,String,String,String,String) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
int[] com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy.getAdnRecordsSize(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
List com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy.getAdnRecordsInEf(int) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
boolean com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy.updateAdnRecordsInEfByIndex(int,String,String,int,String) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
String com.android.internal.telephony.SmsAddress.getAddressString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.AdnRecordLoader.handleMessage(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.RestrictedState.toString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] com.android.internal.telephony.UUSInfo.getUserData() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.UUSInfo.getDcs() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.UUSInfo.getType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.PhoneSubInfo.getSubscriberId() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneSubInfo.getLine1AlphaTag() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneSubInfo.getVoiceMailAlphaTag() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneSubInfo.getDeviceSvn() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneSubInfo.getIsimDomain() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneSubInfo.getDeviceId() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneSubInfo.getIccSerialNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneSubInfo.getVoiceMailNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneSubInfo.getIsimImpi() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneSubInfo.getLine1Number() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneSubInfo.getCompleteVoiceMailNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneSubInfo.getMsisdn() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String[] com.android.internal.telephony.PhoneSubInfo.getIsimImpu() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneSubInfo.dump(FileDescriptor,PrintWriter,String[]) - @DSSink({DSSinkKind.FILE})
RILRequest com.android.internal.telephony.RILRequest.obtain(int,Message) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.supplyIccPinForApp(String,String,Message) - @DSSink({DSSinkKind.PHONE_STATE})
void com.android.internal.telephony.RIL.sendDtmf(char,Message) - @DSSink({DSSinkKind.PHONE_CONNECTION})
void com.android.internal.telephony.RIL.invokeOemRilRequestRaw(byte[],Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.invokeOemRilRequestStrings(String[],Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.separateConnection(int,Message) - @DSSink({DSSinkKind.PHONE_STATE})
void com.android.internal.telephony.RIL.writeSmsToSim(int,String,String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL$RILSender.handleMessage(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.conference(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.setCurrentPreferredNetworkType() - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.queryFacilityLockForApp(String,String,int,String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.handleCallSetupRequestFromSim(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.setCdmaRoamingPreference(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.switchWaitingOrHoldingAndActive(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.setCdmaBroadcastConfig(int[],Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.supplyIccPukForApp(String,String,String,Message) - @DSSink({DSSinkKind.PHONE_STATE})
void com.android.internal.telephony.RIL.sendSMS(String,String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.setOnNITZTime(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.setNetworkSelectionModeAutomatic(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.setCallForward(int,int,int,String,int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.sendEnvelopeWithStatus(String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.setBandMode(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.sendCdmaSms(byte[],Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.setRadioPower(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.deleteSmsOnSim(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.sendEnvelope(String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.setCdmaSubscriptionSource(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.dial(String,int,UUSInfo,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.setGsmBroadcastActivation(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.setCallWaiting(boolean,int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.setNetworkSelectionModeManual(String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.reportSmsMemoryStatus(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.stopDtmf(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.supplyNetworkDepersonalization(String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.cancelPendingUssd(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.changeIccPin2ForApp(String,String,String,Message) - @DSSink({DSSinkKind.PHONE_STATE})
void com.android.internal.telephony.RIL.rejectCall(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.setFacilityLockForApp(String,boolean,String,int,String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.requestIsimAuthentication(String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.startDtmf(char,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.setMute(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.sendBurstDtmf(String,int,int,Message) - @DSSink({DSSinkKind.PHONE_CONNECTION})
void com.android.internal.telephony.RIL.setupDataCall(String,String,String,String,String,String,String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.deactivateDataCall(int,int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.setGsmBroadcastConfig(SmsBroadcastConfigInfo[],Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.writeSmsToRuim(int,String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.acknowledgeIncomingGsmSmsWithPdu(boolean,String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.hangupConnection(int,Message) - @DSSink({DSSinkKind.PHONE_STATE})
void com.android.internal.telephony.RIL.setPreferredVoicePrivacy(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.hangupForegroundResumeBackground(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.sendTerminalResponse(String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.queryCallWaiting(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.changeBarringPassword(String,String,String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.queryCallForwardStatus(int,int,String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.getSmscAddress(Message) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.dial(String,int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.supplyIccPin2ForApp(String,String,Message) - @DSSink({DSSinkKind.PHONE_STATE})
void com.android.internal.telephony.RIL.setSuppServiceNotifications(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.explicitCallTransfer(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.deleteSmsOnRuim(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.acknowledgeLastIncomingGsmSms(boolean,int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.setSmscAddress(String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.resetRadio(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.setTTYMode(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.setCLIR(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.reportStkServiceIsRunning(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.changeIccPinForApp(String,String,String,Message) - @DSSink({DSSinkKind.PHONE_STATE})
void com.android.internal.telephony.RIL.sendCDMAFeatureCode(String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.acceptCall(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.setPreferredNetworkType(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.setLocationUpdates(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.acknowledgeLastIncomingCdmaSms(boolean,int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.supplyIccPuk2ForApp(String,String,String,Message) - @DSSink({DSSinkKind.PHONE_STATE})
void com.android.internal.telephony.RIL.exitEmergencyCallbackMode(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.hangupWaitingOrBackground(Message) - @DSSink({DSSinkKind.PHONE_CONNECTION})
void com.android.internal.telephony.RIL.setFacilityLock(String,boolean,String,int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.sendUSSD(String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.RIL.setCdmaBroadcastActivation(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.ISms$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SMS_MMS})
boolean com.android.internal.telephony.ISms$Stub$Proxy.updateMessageOnIccEf(int,int,byte[]) - @DSSink({DSSinkKind.SMS_MMS})
IBinder com.android.internal.telephony.ISms$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
List com.android.internal.telephony.ISms$Stub$Proxy.getAllMessagesFromIccEf() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.ISms$Stub$Proxy.enableCellBroadcast(int) - @DSSink({DSSinkKind.SMS_MMS})
boolean com.android.internal.telephony.ISms$Stub$Proxy.copyMessageToIccEf(int,byte[],byte[]) - @DSSink({DSSinkKind.SMS_MMS})
boolean com.android.internal.telephony.ISms$Stub$Proxy.disableCellBroadcastRange(int,int) - @DSSink({DSSinkKind.SMS_MMS})
ISms com.android.internal.telephony.ISms$Stub.asInterface(IBinder) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.ISms$Stub$Proxy.sendData(String,String,int,byte[],PendingIntent,PendingIntent) - @DSSink({DSSinkKind.SMS_MMS})
boolean com.android.internal.telephony.ISms$Stub$Proxy.enableCellBroadcastRange(int,int) - @DSSink({DSSinkKind.SMS_MMS})
boolean com.android.internal.telephony.ISms$Stub$Proxy.disableCellBroadcast(int) - @DSSink({DSSinkKind.SMS_MMS})
void com.android.internal.telephony.ISms$Stub$Proxy.sendText(String,String,String,PendingIntent,PendingIntent) - @DSSink({DSSinkKind.SMS_MMS})
String com.android.internal.telephony.ISms$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.WspTypeDecoder.getValueString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long com.android.internal.telephony.WspTypeDecoder.getValue32() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.WspTypeDecoder.getDecodedDataLength() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
HashMap com.android.internal.telephony.WspTypeDecoder.getContentParameters() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.AdnRecord.getNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.AdnRecord.getAlphaTag() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] com.android.internal.telephony.AdnRecord.buildAdnString(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.AdnRecord.toString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] com.android.internal.telephony.AdnRecord.getEmails() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.IccSmsInterfaceManagerProxy.updateMessageOnIccEf(int,int,byte[]) - @DSSink({DSSinkKind.SMS_MMS})
boolean com.android.internal.telephony.IccSmsInterfaceManagerProxy.enableCellBroadcastRange(int,int) - @DSSink({DSSinkKind.SMS_MMS})
List com.android.internal.telephony.IccSmsInterfaceManagerProxy.getAllMessagesFromIccEf() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.IccSmsInterfaceManagerProxy.sendText(String,String,String,PendingIntent,PendingIntent) - @DSSink({DSSinkKind.SMS_MMS})
void com.android.internal.telephony.IccSmsInterfaceManagerProxy.sendData(String,String,int,byte[],PendingIntent,PendingIntent) - @DSSink({DSSinkKind.SMS_MMS})
boolean com.android.internal.telephony.IccSmsInterfaceManagerProxy.enableCellBroadcast(int) - @DSSink({DSSinkKind.SMS_MMS})
int com.android.internal.telephony.IWapPushManager$Stub$Proxy.processMessage(String,String,Intent) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.IWapPushManager$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.IWapPushManager$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.IWapPushManager$Stub$Proxy.addPackage(String,String,String,String,int,boolean,boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
IBinder com.android.internal.telephony.IWapPushManager$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.IWapPushManager$Stub$Proxy.deletePackage(String,String,String,String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.IWapPushManager$Stub$Proxy.updatePackage(String,String,String,String,int,boolean,boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
IWapPushManager com.android.internal.telephony.IWapPushManager$Stub.asInterface(IBinder) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getIsimImpu() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
IBinder com.android.internal.telephony.IPhoneSubInfo$Stub.asBinder() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getVoiceMailNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getVoiceMailAlphaTag() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getSubscriberId() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getIsimDomain() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getDeviceId() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getIccSerialNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
IPhoneSubInfo com.android.internal.telephony.IPhoneSubInfo$Stub.asInterface(IBinder) - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getIsimImpi() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getLine1AlphaTag() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getDeviceSvn() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getMsisdn() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getCompleteVoiceMailNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getLine1Number() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.DataCallState.toString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.ATResponseParser.nextString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
UsimServiceTable com.android.internal.telephony.IccRecords.getUsimServiceTable() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.IccRecords.getMsisdnNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
IsimRecords com.android.internal.telephony.IccRecords.getIsimRecords() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.IccRecords.getVoiceMessageWaiting() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.IccRecords.getMsisdnAlphaTag() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.IccRecords.getRecordsLoaded() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.IccRecords.setMsisdnNumber(String,String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.IccRecords.getVoiceCallForwardingFlag() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
AdnRecordCache com.android.internal.telephony.IccRecords.getAdnCache() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.IccRecords.getIMSI() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.IccRecords.getVoiceMessageCount() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.IccRecords.setVoiceCallForwardingFlag(int,boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.IccRecords.getVoiceMailAlphaTag() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.IccRecords.getOperatorNumeric() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.IccRecords.getServiceProviderName() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.IccRecords.getVoiceMailNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.Connection.getCnapName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.Connection.getCnapNamePresentation() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object com.android.internal.telephony.Connection.getUserData() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.Connection.toString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.Connection.getOrigDialString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.IPhoneStateListener$Stub$Proxy.onDataConnectionStateChanged(int,int) - @DSSink({DSSinkKind.PHONE_STATE})
IPhoneStateListener com.android.internal.telephony.IPhoneStateListener$Stub.asInterface(IBinder) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.IPhoneStateListener$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.IPhoneStateListener$Stub$Proxy.onSignalStrengthChanged(int) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
IBinder com.android.internal.telephony.IPhoneStateListener$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.IPhoneStateListener$Stub$Proxy.onDataActivity(int) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.IPhoneStateListener$Stub$Proxy.onOtaspChanged(int) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.IPhoneStateListener$Stub$Proxy.onCallStateChanged(int,String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneBase.setTTYMode(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.PhoneBase.getActiveApnHost(String) - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
boolean com.android.internal.telephony.PhoneBase.isDataConnectivityPossible() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
int com.android.internal.telephony.PhoneBase.getCdmaEriIconMode() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneBase.setOnEcbModeExitResponse(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
CallTracker com.android.internal.telephony.PhoneBase.getCallTracker() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneBase.setVoiceMessageWaiting(int,int) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneBase.notifyDisconnectP(Connection) - @DSSink({DSSinkKind.PHONE_STATE})
String com.android.internal.telephony.PhoneBase.getCdmaMin() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.PhoneBase.getEnhancedVoicePrivacy(Message) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
LinkProperties com.android.internal.telephony.PhoneBase.getLinkProperties(String) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneBase.setCdmaRoamingPreference(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.PhoneBase.getMessageWaitingIndicator() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneBase.setCdmaSubscription(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.PhoneBase.getCdmaEriText() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
int com.android.internal.telephony.PhoneBase.getLteOnCdmaMode() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.PhoneBase.getUnitTestMode() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.PhoneBase.getIccSerialNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
int com.android.internal.telephony.PhoneBase.getVoiceMessageCount() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.PhoneBase.getMsisdn() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
int com.android.internal.telephony.PhoneBase.getCdmaEriIconIndex() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneBase.notifyNewRingingConnectionP(Connection) - @DSSink({DSSinkKind.PHONE_STATE})
Context com.android.internal.telephony.PhoneBase.getContext() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
UsimServiceTable com.android.internal.telephony.PhoneBase.getUsimServiceTable() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneBase.setSmscAddress(String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneBase.notifyDataConnection(String) - @DSSink({DSSinkKind.PHONE_STATE})
boolean com.android.internal.telephony.PhoneBase.getCallForwardingIndicator() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneBase.getPreferredNetworkType(Message) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
void com.android.internal.telephony.PhoneBase.notifyServiceStateChangedP(ServiceState) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneBase.getSmscAddress(Message) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneBase.restoreSavedNetworkSelection(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
Handler com.android.internal.telephony.PhoneBase.getHandler() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneBase.notifyOtaspChanged(int) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
IsimRecords com.android.internal.telephony.PhoneBase.getIsimRecords() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
LinkCapabilities com.android.internal.telephony.PhoneBase.getLinkCapabilities(String) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneBase.setSystemProperty(String,String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneBase.notifyDataConnectionFailed(String,String) - @DSSink({DSSinkKind.PHONE_STATE})
IccFileHandler com.android.internal.telephony.PhoneBase.getIccFileHandler() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneBase.setBandMode(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.PhoneBase.getIccRecordsLoaded() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String[] com.android.internal.telephony.PhoneBase.getActiveApnTypes() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneBase.invokeOemRilRequestStrings(String[],Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
SimulatedRadioControl com.android.internal.telephony.PhoneBase.getSimulatedRadioControl() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
int com.android.internal.telephony.PhoneBase.enableApnType(String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneBase.notifyDataConnection(String,String) - @DSSink({DSSinkKind.PHONE_STATE})
String com.android.internal.telephony.PhoneBase.getCdmaPrlVersion() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.PhoneBase.setEchoSuppressionEnabled(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneBase.setPreferredNetworkType(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
ServiceStateTracker com.android.internal.telephony.PhoneBase.getServiceStateTracker() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneBase.disableDnsCheck(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
IccCard com.android.internal.telephony.PhoneBase.getIccCard() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.PhoneBase.sendBurstDtmf(String,int,int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.PhoneSubInfoProxy.getIccSerialNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneSubInfoProxy.getIsimDomain() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.PhoneSubInfoProxy.dump(FileDescriptor,PrintWriter,String[]) - @DSSink({DSSinkKind.FILE})
String com.android.internal.telephony.PhoneSubInfoProxy.getVoiceMailAlphaTag() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneSubInfoProxy.getMsisdn() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneSubInfoProxy.getDeviceSvn() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneSubInfoProxy.getVoiceMailNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneSubInfoProxy.getLine1Number() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String[] com.android.internal.telephony.PhoneSubInfoProxy.getIsimImpu() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.PhoneSubInfoProxy.getDeviceId() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneSubInfoProxy.getSubscriberId() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneSubInfoProxy.getCompleteVoiceMailNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneSubInfoProxy.getLine1AlphaTag() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.PhoneSubInfoProxy.getIsimImpi() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
byte[] com.android.internal.telephony.IccSmsInterfaceManager.makeSmsRecordData(int,byte[]) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.IccSmsInterfaceManager.sendData(String,String,int,byte[],PendingIntent,PendingIntent) - @DSSink({DSSinkKind.SMS_MMS})
ArrayList com.android.internal.telephony.IccSmsInterfaceManager.buildValidRawData(ArrayList) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.IccSmsInterfaceManager.sendText(String,String,String,PendingIntent,PendingIntent) - @DSSink({DSSinkKind.SMS_MMS})
boolean com.android.internal.telephony.ITelephony$Stub$Proxy.handlePinMmi(String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.ITelephony$Stub$Proxy.dial(String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.ITelephony$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
int com.android.internal.telephony.ITelephony$Stub$Proxy.getVoiceMessageCount() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Bundle com.android.internal.telephony.ITelephony$Stub$Proxy.getCellLocation() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.ITelephony$Stub$Proxy.getCdmaEriIconMode() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.ITelephony$Stub$Proxy.getCdmaEriText() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.ITelephony$Stub$Proxy.getDataActivity() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.ITelephony$Stub$Proxy.enableApnType(String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
int com.android.internal.telephony.ITelephony$Stub$Proxy.getNetworkType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.ITelephony$Stub$Proxy.getDataState() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.ITelephony$Stub$Proxy.getLteOnCdmaMode() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
List com.android.internal.telephony.ITelephony$Stub$Proxy.getNeighboringCellInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.ITelephony$Stub$Proxy.call(String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.ITelephony$Stub$Proxy.setRadio(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
IBinder com.android.internal.telephony.ITelephony$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.ITelephony$Stub$Proxy.getCdmaEriIconIndex() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.telephony.ITelephony$Stub$Proxy.supplyPuk(String,String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.ITelephony$Stub$Proxy.supplyPin(String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
int com.android.internal.telephony.ITelephony$Stub$Proxy.getCallState() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.ITelephony$Stub$Proxy.disableApnType(String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
int com.android.internal.telephony.ITelephony$Stub$Proxy.getActivePhoneType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.telephony.ITelephony$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ITelephony com.android.internal.telephony.ITelephony$Stub.asInterface(IBinder) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
List com.android.internal.telephony.sip.SipCallBase.getConnections() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.telephony.sip.SipCommandInterface.setRadioPower(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setSuppServiceNotifications(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.sendEnvelopeWithStatus(String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.sendUSSD(String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setCallWaiting(boolean,int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.sendTerminalResponse(String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setPreferredNetworkType(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setCallForward(int,int,int,String,int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setLocationUpdates(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.sendCDMAFeatureCode(String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setTTYMode(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setCdmaRoamingPreference(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setFacilityLock(String,boolean,String,int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setNetworkSelectionModeAutomatic(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setPhoneType(int) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setSmscAddress(String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setFacilityLockForApp(String,boolean,String,int,String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setGsmBroadcastActivation(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.sendDtmf(char,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setNetworkSelectionModeManual(String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setCdmaBroadcastActivation(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.sendSMS(String,String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.sendBurstDtmf(String,int,int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setOnNITZTime(Handler,int,Object) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setCdmaSubscriptionSource(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setMute(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setGsmBroadcastConfig(SmsBroadcastConfigInfo[],Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setPreferredVoicePrivacy(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setupDataCall(String,String,String,String,String,String,String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setCLIR(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.sendCdmaSms(byte[],Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setCdmaBroadcastConfig(int[],Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.setBandMode(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipCommandInterface.sendEnvelope(String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
List com.android.internal.telephony.sip.SipPhoneBase.getPendingMmiCodes() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.sip.SipPhoneBase.getDeviceSvn() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.sip.SipPhoneBase.getEsn() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.sip.SipPhoneBase.setCallWaiting(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipPhoneBase.setDataRoamingEnabled(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.sip.SipPhoneBase.getCallForwardingIndicator() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.sip.SipPhoneBase.getIccRecordsLoaded() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
Connection com.android.internal.telephony.sip.SipPhoneBase.dial(String,UUSInfo) - @DSSink({DSSinkKind.VOIP})
int com.android.internal.telephony.sip.SipPhoneBase.getPhoneType() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipPhoneBase.setNetworkSelectionModeAutomatic(Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.sip.SipPhoneBase.getVoiceMailAlphaTag() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.sip.SipPhoneBase.setVoiceMailNumber(String,String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
IccCard com.android.internal.telephony.sip.SipPhoneBase.getIccCard() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.sip.SipPhoneBase.getVoiceMailNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.sip.SipPhoneBase.getLine1AlphaTag() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
SignalStrength com.android.internal.telephony.sip.SipPhoneBase.getSignalStrength() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipPhoneBase.setLine1Number(String,String,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
CellLocation com.android.internal.telephony.sip.SipPhoneBase.getCellLocation() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
void com.android.internal.telephony.sip.SipPhoneBase.setCellBroadcastSmsConfig(int[],Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.sip.SipPhoneBase.getDataRoamingEnabled() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipPhoneBase.setOnPostDialCharacter(Handler,int,Object) - @DSSink({DSSinkKind.VOIP})
String com.android.internal.telephony.sip.SipPhoneBase.getLine1Number() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.sip.SipPhoneBase.getMeid() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.sip.SipPhoneBase.getIccSerialNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.sip.SipPhoneBase.getSubscriberId() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.sip.SipPhoneBase.setCallForwardingOption(int,int,String,int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.sip.SipPhoneBase.getDeviceId() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
List com.android.internal.telephony.sip.SipPhoneBase.getCurrentDataConnectionList() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
ServiceState com.android.internal.telephony.sip.SipPhoneBase.getServiceState() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
IccPhoneBookInterfaceManager com.android.internal.telephony.sip.SipPhoneBase.getIccPhoneBookInterfaceManager() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.sip.SipPhoneBase.getMessageWaitingIndicator() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
IccSmsInterfaceManager com.android.internal.telephony.sip.SipPhoneBase.getIccSmsInterfaceManager() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipPhoneBase.notifyDisconnect(Connection) - @DSSink({DSSinkKind.PHONE_STATE})
String com.android.internal.telephony.sip.SipPhoneBase.getImei() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
LinkProperties com.android.internal.telephony.sip.SipPhoneBase.getLinkProperties(String) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipPhoneBase.sendUssdResponse(String) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipPhoneBase.setRadioPower(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipPhoneBase.notifyNewRingingConnection(Connection) - @DSSink({DSSinkKind.PHONE_STATE})
void com.android.internal.telephony.sip.SipPhoneBase.setOutgoingCallerIdDisplay(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
IccFileHandler com.android.internal.telephony.sip.SipPhoneBase.getIccFileHandler() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
PhoneSubInfo com.android.internal.telephony.sip.SipPhoneBase.getPhoneSubInfo() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipPhoneBase.notifyServiceStateChanged(ServiceState) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
Connection com.android.internal.telephony.sip.SipPhone$SipCall.dial(String) - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
AudioGroup com.android.internal.telephony.sip.SipPhone$SipConnection.getAudioGroup() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipPhone.setMute(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
Phone com.android.internal.telephony.sip.SipPhone$SipCall.getPhone() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.sip.SipPhone.getSipUri() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.sip.SipPhone.startDtmf(char) - @DSSink({DSSinkKind.PHONE_CONNECTION})
void com.android.internal.telephony.sip.SipPhone.sendBurstDtmf(String) - @DSSink({DSSinkKind.PHONE_CONNECTION})
Call com.android.internal.telephony.sip.SipPhone.getRingingCall() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
List com.android.internal.telephony.sip.SipPhone$SipCall.getConnections() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
int com.android.internal.telephony.sip.SipPhone$SipConnection.getNumberPresentation() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
Call com.android.internal.telephony.sip.SipPhone.getBackgroundCall() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
Call com.android.internal.telephony.sip.SipPhone.getForegroundCall() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
boolean com.android.internal.telephony.sip.SipPhone$SipConnection.getMute() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipPhone.sendDtmf(char) - @DSSink({DSSinkKind.PHONE_CONNECTION})
boolean com.android.internal.telephony.sip.SipPhone.getMute() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
Phone com.android.internal.telephony.sip.SipPhone$SipConnection.getPhone() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
Connection com.android.internal.telephony.sip.SipPhone.dial(String) - @DSSink({DSSinkKind.VOIP})
void com.android.internal.telephony.sip.SipPhone.setCallWaiting(boolean,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipPhone.setEchoSuppressionEnabled(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
ServiceState com.android.internal.telephony.sip.SipPhone.getServiceState() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipPhone.setOutgoingCallerIdDisplay(int,Message) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.sip.SipPhone$SipConnection.setMute(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.sip.SipPhone.getPhoneName() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.sip.SipPhone$SipConnection.getAddress() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
void com.android.internal.telephony.sip.SipPhone$SipCall.setMute(boolean) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String com.android.internal.telephony.sip.SipPhone$SipConnection.getCnapName() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String com.android.internal.telephony.sip.SipConnectionBase.getRemainingPostDialString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long com.android.internal.telephony.sip.SipConnectionBase.getHoldDurationMillis() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long com.android.internal.telephony.sip.SipConnectionBase.getDurationMillis() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long com.android.internal.telephony.sip.SipConnectionBase.getConnectTime() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
UUSInfo com.android.internal.telephony.sip.SipConnectionBase.getUUSInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long com.android.internal.telephony.sip.SipConnectionBase.getCreateTime() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long com.android.internal.telephony.sip.SipConnectionBase.getDisconnectTime() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int com.android.internal.telephony.sip.SipConnectionBase.getNumberPresentation() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
int com.android.internal.telephony.DataConnectionAc.getRefCountSync() - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
void com.android.internal.telephony.DataConnectionAc.setLinkPropertiesHttpProxySync(ProxyProperties) - @DSSink({DSSinkKind.PHONE_CONNECTION})
void com.android.internal.telephony.DataConnectionAc.reqUpdateLinkPropertiesDataCallState(DataCallState) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
Collection com.android.internal.telephony.DataConnectionAc.getApnListSync() - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
int com.android.internal.telephony.DataConnectionAc.getCidSync() - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
void com.android.internal.telephony.DataConnectionAc.reqSetLinkPropertiesHttpProxy(ProxyProperties) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.DataConnectionAc.reqRemomveApnContext(ApnContext) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
ApnSetting com.android.internal.telephony.DataConnectionAc.getApnSettingSync() - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
void com.android.internal.telephony.DataConnectionAc.removeApnContextSync(ApnContext) - @DSSink({DSSinkKind.PHONE_CONNECTION})
LinkProperties com.android.internal.telephony.DataConnectionAc.getLinkPropertiesSync() - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
void com.android.internal.telephony.DataConnectionAc.reqSetReconnectIntent(PendingIntent) - @DSSink({DSSinkKind.PHONE_CONNECTION})
PendingIntent com.android.internal.telephony.DataConnectionAc.getReconnectIntentSync() - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
void com.android.internal.telephony.DataConnectionAc.reqAddApnContext(ApnContext) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
void com.android.internal.telephony.DataConnectionAc.setReconnectIntentSync(PendingIntent) - @DSSink({DSSinkKind.PHONE_CONNECTION})
void com.android.internal.telephony.DataConnectionAc.addApnContextSync(ApnContext) - @DSSink({DSSinkKind.PHONE_CONNECTION})
LinkCapabilities com.android.internal.telephony.DataConnectionAc.getLinkCapabilitiesSync() - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
void com.android.internal.appwidget.IAppWidgetService$Stub$Proxy.partiallyUpdateAppWidgetIds(int[],RemoteViews) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.appwidget.IAppWidgetService$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
RemoteViews com.android.internal.appwidget.IAppWidgetService$Stub$Proxy.getAppWidgetViews(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.appwidget.IAppWidgetService$Stub$Proxy.updateAppWidgetIds(int[],RemoteViews) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int[] com.android.internal.appwidget.IAppWidgetService$Stub$Proxy.startListening(IAppWidgetHost,String,int,List) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.appwidget.IAppWidgetService$Stub$Proxy.deleteAppWidgetId(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.appwidget.IAppWidgetService$Stub$Proxy.deleteHost(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder com.android.internal.appwidget.IAppWidgetService$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int[] com.android.internal.appwidget.IAppWidgetService$Stub$Proxy.getAppWidgetIds(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.appwidget.IAppWidgetService$Stub$Proxy.allocateAppWidgetId(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.appwidget.IAppWidgetService$Stub$Proxy.notifyAppWidgetViewDataChanged(int[],int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
AppWidgetProviderInfo com.android.internal.appwidget.IAppWidgetService$Stub$Proxy.getAppWidgetInfo(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.appwidget.IAppWidgetService$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.appwidget.IAppWidgetService$Stub$Proxy.stopListening(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy.providerChanged(int,AppWidgetProviderInfo) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy.updateAppWidget(int,RemoteViews) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder com.android.internal.appwidget.IAppWidgetHost$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy.viewDataChanged(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.database.SortCursor.getType(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.database.SortCursor.getString(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long com.android.internal.database.SortCursor.getLong(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
double com.android.internal.database.SortCursor.getDouble(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
short com.android.internal.database.SortCursor.getShort(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.database.SortCursor.getCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float com.android.internal.database.SortCursor.getFloat(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.database.SortCursor.getInt(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] com.android.internal.database.SortCursor.getBlob(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] com.android.internal.database.SortCursor.getColumnNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodSession$Stub$Proxy.displayCompletions(CompletionInfo[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.view.IInputMethodSession$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.view.IInputMethodSession$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodSession$Stub$Proxy.updateSelection(int,int,int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodSession$Stub$Proxy.dispatchKeyEvent(int,KeyEvent,IInputMethodCallback) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodSession$Stub$Proxy.toggleSoftInput(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodSession$Stub$Proxy.dispatchTrackballEvent(int,MotionEvent,IInputMethodCallback) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodSession$Stub$Proxy.appPrivateCommand(String,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder com.android.internal.view.IInputMethodSession$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodSession$Stub$Proxy.updateExtractedText(int,ExtractedText) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.view.IInputMethodManager$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodManager$Stub$Proxy.showInputMethodAndSubtypeEnablerFromClient(IInputMethodClient,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodManager$Stub$Proxy.setInputMethod(IBinder,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodManager$Stub$Proxy.showInputMethodPickerFromClient(IInputMethodClient) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.view.IInputMethodManager$Stub$Proxy.switchToLastInputMethod(IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodManager$Stub$Proxy.showMySoftInput(IBinder,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodManager$Stub$Proxy.updateStatusIcon(IBinder,String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodManager$Stub$Proxy.removeClient(IInputMethodClient) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.view.IInputMethodManager$Stub$Proxy.showSoftInput(IInputMethodClient,int,ResultReceiver) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.view.IInputMethodManager$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodManager$Stub$Proxy.addClient(IInputMethodClient,IInputContext,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List com.android.internal.view.IInputMethodManager$Stub$Proxy.getShortcutInputMethodsAndSubtypes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodManager$Stub$Proxy.registerSuggestionSpansForNotification(SuggestionSpan[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List com.android.internal.view.IInputMethodManager$Stub$Proxy.getEnabledInputMethodList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.view.IInputMethodManager$Stub$Proxy.hideSoftInput(IInputMethodClient,int,ResultReceiver) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodManager$Stub$Proxy.finishInput(IInputMethodClient) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List com.android.internal.view.IInputMethodManager$Stub$Proxy.getInputMethodList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputMethodSubtype com.android.internal.view.IInputMethodManager$Stub$Proxy.getCurrentInputMethodSubtype() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List com.android.internal.view.IInputMethodManager$Stub$Proxy.getEnabledInputMethodSubtypeList(InputMethodInfo,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputMethodSubtype com.android.internal.view.IInputMethodManager$Stub$Proxy.getLastInputMethodSubtype() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder com.android.internal.view.IInputMethodManager$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodManager$Stub$Proxy.setInputMethodAndSubtype(IBinder,String,InputMethodSubtype) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodManager$Stub$Proxy.setImeWindowStatus(IBinder,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodManager$Stub$Proxy.hideMySoftInput(IBinder,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.view.IInputMethodManager$Stub$Proxy.setInputMethodEnabled(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.view.IInputMethodManager$Stub$Proxy.notifySuggestionPicked(SuggestionSpan,String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodManager$Stub$Proxy.setAdditionalInputMethodSubtypes(String,InputMethodSubtype[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.view.IInputMethodManager$Stub$Proxy.setCurrentInputMethodSubtype(InputMethodSubtype) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputContextCallback$Stub$Proxy.setExtractedText(ExtractedText,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputContextCallback$Stub$Proxy.setCursorCapsMode(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.view.IInputContextCallback$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder com.android.internal.view.IInputContextCallback$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputContextCallback$Stub$Proxy.setSelectedText(CharSequence,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputContextCallback$Stub$Proxy.setTextAfterCursor(CharSequence,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputContextCallback$Stub$Proxy.setTextBeforeCursor(CharSequence,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.view.IInputMethod$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethod$Stub$Proxy.startInput(IInputContext,EditorInfo) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethod$Stub$Proxy.setSessionEnabled(IInputMethodSession,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.view.IInputMethod$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethod$Stub$Proxy.createSession(IInputMethodCallback) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethod$Stub$Proxy.hideSoftInput(int,ResultReceiver) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethod$Stub$Proxy.attachToken(IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethod$Stub$Proxy.revokeSession(IInputMethodSession) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethod$Stub$Proxy.showSoftInput(int,ResultReceiver) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder com.android.internal.view.IInputMethod$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethod$Stub$Proxy.restartInput(IInputContext,EditorInfo) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputConnectionWrapper.dispatchMessage(Message) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputConnectionWrapper.setComposingRegion(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputConnectionWrapper.setSelection(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.view.BaseSurfaceHolder.getRequestedWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Rect com.android.internal.view.BaseSurfaceHolder.getSurfaceFrame() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.view.BaseSurfaceHolder.getRequestedType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Canvas com.android.internal.view.BaseSurfaceHolder.lockCanvas() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.view.BaseSurfaceHolder.getRequestedHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.view.BaseSurfaceHolder.getRequestedFormat() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Surface com.android.internal.view.BaseSurfaceHolder.getSurface() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence com.android.internal.view.InputConnectionWrapper.getSelectedText(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.view.InputConnectionWrapper.sendKeyEvent(KeyEvent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence com.android.internal.view.InputConnectionWrapper.getTextBeforeCursor(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.view.InputConnectionWrapper.setSelection(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.view.InputConnectionWrapper.setComposingRegion(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.view.InputConnectionWrapper.performEditorAction(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.view.InputConnectionWrapper.performContextMenuAction(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence com.android.internal.view.InputConnectionWrapper.getTextAfterCursor(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.view.InputConnectionWrapper.performPrivateCommand(String,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ExtractedText com.android.internal.view.InputConnectionWrapper.getExtractedText(ExtractedTextRequest,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.view.InputConnectionWrapper.getCursorCapsMode(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodCallback$Stub$Proxy.finishedEvent(int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.view.IInputMethodCallback$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodCallback$Stub$Proxy.sessionCreated(IInputMethodSession) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder com.android.internal.view.IInputMethodCallback$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MenuView com.android.internal.view.menu.BaseMenuPresenter.getMenuView(ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View com.android.internal.view.menu.BaseMenuPresenter.getItemView(MenuItemImpl,View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.view.menu.BaseMenuPresenter.getId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.view.menu.MenuItemImpl.getGroupId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View com.android.internal.view.menu.MenuItemImpl.getActionView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MenuItem com.android.internal.view.menu.MenuItemImpl.setActionView(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent com.android.internal.view.menu.MenuItemImpl.getIntent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Runnable com.android.internal.view.menu.MenuItemImpl.getCallback() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.view.menu.MenuItemImpl.setVisibleInt(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
char com.android.internal.view.menu.MenuItemImpl.getAlphabeticShortcut() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MenuItem com.android.internal.view.menu.MenuItemImpl.setEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.view.menu.MenuItemImpl.getOrdering() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence com.android.internal.view.menu.MenuItemImpl.getTitle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MenuItem com.android.internal.view.menu.MenuItemImpl.setChecked(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.view.menu.MenuItemImpl.getOrder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MenuItem com.android.internal.view.menu.MenuItemImpl.setVisible(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
MenuItem com.android.internal.view.menu.MenuItemImpl.setShowAsActionFlags(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SubMenu com.android.internal.view.menu.MenuItemImpl.getSubMenu() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.menu.MenuItemImpl.setExclusiveCheckable(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
MenuItem com.android.internal.view.menu.MenuItemImpl.setTitle(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Drawable com.android.internal.view.menu.MenuItemImpl.getIcon() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MenuItem com.android.internal.view.menu.MenuItemImpl.setCheckable(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ActionProvider com.android.internal.view.menu.MenuItemImpl.getActionProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.view.menu.MenuItemImpl.getItemId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence com.android.internal.view.menu.MenuItemImpl.getTitleCondensed() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char com.android.internal.view.menu.MenuItemImpl.getShortcut() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MenuItem com.android.internal.view.menu.MenuItemImpl.setAlphabeticShortcut(char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.menu.MenuItemImpl.setIsActionButton(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
char com.android.internal.view.menu.MenuItemImpl.getNumericShortcut() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.view.menu.MenuItemImpl.getShortcutLabel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MenuItemImpl com.android.internal.view.menu.MenuPopupHelper$MenuAdapter.getItem(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.menu.MenuPopupHelper.onItemClick(AdapterView,View,int,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long com.android.internal.view.menu.MenuPopupHelper$MenuAdapter.getItemId(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.view.menu.MenuPopupHelper$MenuAdapter.getCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.view.menu.MenuPopupHelper.getId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View com.android.internal.view.menu.MenuPopupHelper$MenuAdapter.getView(int,View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MenuView com.android.internal.view.menu.MenuPopupHelper.getMenuView(ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SubMenu com.android.internal.view.menu.ActionMenuItem.getSubMenu() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.view.menu.ActionMenuItem.getItemId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View com.android.internal.view.menu.ActionMenuItem.getActionView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.view.menu.ActionMenuItem.getGroupId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence com.android.internal.view.menu.ActionMenuItem.getTitle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable com.android.internal.view.menu.ActionMenuItem.getIcon() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ActionMenuItem com.android.internal.view.menu.ActionMenuItem.setExclusiveCheckable(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
MenuItem com.android.internal.view.menu.ActionMenuItem.setActionView(View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
MenuItem com.android.internal.view.menu.ActionMenuItem.setTitle(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
MenuItem com.android.internal.view.menu.ActionMenuItem.setActionView(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence com.android.internal.view.menu.ActionMenuItem.getTitleCondensed() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.view.menu.ActionMenuItem.getOrder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MenuItem com.android.internal.view.menu.ActionMenuItem.setEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
char com.android.internal.view.menu.ActionMenuItem.getNumericShortcut() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MenuItem com.android.internal.view.menu.ActionMenuItem.setShowAsActionFlags(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ActionProvider com.android.internal.view.menu.ActionMenuItem.getActionProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MenuItem com.android.internal.view.menu.ActionMenuItem.setChecked(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.menu.ActionMenuItem.setShowAsAction(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent com.android.internal.view.menu.ActionMenuItem.getIntent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char com.android.internal.view.menu.ActionMenuItem.getAlphabeticShortcut() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MenuItem com.android.internal.view.menu.ActionMenuItem.setVisible(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
MenuItem com.android.internal.view.menu.ActionMenuItem.setActionProvider(ActionProvider) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
MenuItem com.android.internal.view.menu.ActionMenuItem.setCheckable(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
View com.android.internal.view.menu.ActionMenuPresenter.getItemView(MenuItemImpl,View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MenuView com.android.internal.view.menu.ActionMenuPresenter.getMenuView(ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.menu.ActionMenuPresenter.updateMenuView(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.menu.MenuBuilder.setGroupVisible(int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Context com.android.internal.view.menu.MenuBuilder.getContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.view.menu.MenuBuilder.addIntentOptions(int,int,int,ComponentName,Intent[],Intent,int,MenuItem[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ArrayList com.android.internal.view.menu.MenuBuilder.getNonActionItems() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.view.menu.MenuBuilder.getOptionalIconsVisible() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Resources com.android.internal.view.menu.MenuBuilder.getResources() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.view.menu.MenuBuilder.getActionViewStatesKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SubMenu com.android.internal.view.menu.MenuBuilder.addSubMenu(int,int,int,CharSequence) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MenuBuilder com.android.internal.view.menu.MenuBuilder.setHeaderIconInt(Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
MenuItemImpl com.android.internal.view.menu.MenuBuilder.getExpandedItem() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View com.android.internal.view.menu.MenuBuilder.getHeaderView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.menu.MenuBuilder.saveActionViewStates(Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
MenuBuilder com.android.internal.view.menu.MenuBuilder.setHeaderIconInt(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.menu.MenuBuilder.setShortcutsVisible(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.menu.MenuBuilder.setGroupCheckable(int,boolean,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.menu.MenuBuilder.setGroupEnabled(int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ArrayList com.android.internal.view.menu.MenuBuilder.getActionItems() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable com.android.internal.view.menu.MenuBuilder.getHeaderIcon() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MenuBuilder com.android.internal.view.menu.MenuBuilder.getRootMenu() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MenuBuilder com.android.internal.view.menu.MenuBuilder.setHeaderViewInt(View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.view.menu.MenuBuilder.performIdentifierAction(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
MenuItem com.android.internal.view.menu.MenuBuilder.getItem(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.menu.MenuBuilder.restoreActionViewStates(Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ArrayList com.android.internal.view.menu.MenuBuilder.getVisibleItems() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence com.android.internal.view.menu.MenuBuilder.getHeaderTitle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MenuBuilder com.android.internal.view.menu.MenuBuilder.setHeaderTitleInt(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.menu.ActionMenuItemView.setCheckable(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.menu.ActionMenuItemView.setShortcut(boolean,char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.menu.ActionMenuItemView.setChecked(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
MenuItemImpl com.android.internal.view.menu.ActionMenuItemView.getItemData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SubMenu com.android.internal.view.menu.SubMenuBuilder.setHeaderTitle(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SubMenu com.android.internal.view.menu.SubMenuBuilder.setHeaderIcon(Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.view.menu.SubMenuBuilder.getActionViewStatesKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SubMenu com.android.internal.view.menu.SubMenuBuilder.setHeaderView(View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.menu.SubMenuBuilder.setShortcutsVisible(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Menu com.android.internal.view.menu.SubMenuBuilder.getParentMenu() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SubMenu com.android.internal.view.menu.SubMenuBuilder.setIcon(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SubMenu com.android.internal.view.menu.SubMenuBuilder.setHeaderIcon(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.menu.SubMenuBuilder.setQwertyMode(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SubMenu com.android.internal.view.menu.SubMenuBuilder.setIcon(Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
MenuItem com.android.internal.view.menu.SubMenuBuilder.getItem() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MenuBuilder com.android.internal.view.menu.SubMenuBuilder.getRootMenu() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.view.menu.ActionMenuView.invokeItem(MenuItemImpl) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.view.menu.ActionMenuView.getWindowAnimations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.menu.ListMenuItemView.setIcon(Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.menu.ListMenuItemView.setShortcut(boolean,char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
MenuItemImpl com.android.internal.view.menu.ListMenuItemView.getItemData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.menu.ListMenuItemView.setChecked(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.menu.ListMenuItemView.setCheckable(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodClient$Stub$Proxy.onUnbindMethod(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.view.IInputMethodClient$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodClient$Stub$Proxy.setActive(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder com.android.internal.view.IInputMethodClient$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputMethodClient$Stub$Proxy.setUsingInputMethod(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputContext$Stub$Proxy.getCursorCapsMode(int,int,IInputContextCallback) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputContext$Stub$Proxy.getTextBeforeCursor(int,int,int,IInputContextCallback) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputContext$Stub$Proxy.getSelectedText(int,int,IInputContextCallback) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputContext$Stub$Proxy.deleteSurroundingText(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputContext$Stub$Proxy.performContextMenuAction(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputContext$Stub$Proxy.setComposingText(CharSequence,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputContext$Stub$Proxy.setComposingRegion(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputContext$Stub$Proxy.getExtractedText(ExtractedTextRequest,int,int,IInputContextCallback) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputContext$Stub$Proxy.performEditorAction(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputContext$Stub$Proxy.clearMetaKeyStates(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputContext$Stub$Proxy.performPrivateCommand(String,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputContext$Stub$Proxy.setSelection(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputContext$Stub$Proxy.commitText(CharSequence,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.view.IInputContext$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.view.IInputContext$Stub$Proxy.getTextAfterCursor(int,int,int,IInputContextCallback) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder com.android.internal.view.IInputContext$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.logging.AndroidHandler.publish(LogRecord) - @DSSink({DSSinkKind.LOG})
String com.android.internal.logging.AndroidHandler$1.format(LogRecord) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.logging.AndroidHandler.getAndroidLevel(Level) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.logging.AndroidHandler.publish(Logger,String,Level,String) - @DSSink({DSSinkKind.LOG})
Window com.android.internal.policy.PolicyManager.makeNewWindow(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
LayoutInflater com.android.internal.policy.PolicyManager.makeNewLayoutInflater(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FallbackEventHandler com.android.internal.policy.PolicyManager.makeNewFallbackEventHandler(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View com.android.internal.widget.ActionBarContainer.getTabContainer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.widget.ScrollingTabContainerView$TabAdapter.getCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View com.android.internal.widget.ScrollingTabContainerView$TabAdapter.getView(int,View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long com.android.internal.widget.ScrollingTabContainerView$TabAdapter.getItemId(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object com.android.internal.widget.ScrollingTabContainerView$TabAdapter.getItem(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.widget.AbsActionBarView.setVisibility(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.widget.AbsActionBarView.getContentHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.widget.AbsActionBarView.getAnimatedVisibility() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder com.android.internal.widget.IRemoteViewsFactory$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.widget.IRemoteViewsFactory$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy.getItemId(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy.getCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RemoteViews com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy.getViewAt(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy.getViewTypeCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RemoteViews com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy.getLoadingView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.widget.ActionBarContextView.setSplitActionBar(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence com.android.internal.widget.ActionBarContextView.getTitle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence com.android.internal.widget.ActionBarContextView.getSubtitle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder com.android.internal.widget.IRemoteViewsAdapterConnection$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.widget.IRemoteViewsAdapterConnection$Stub$Proxy.onServiceConnected(IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.widget.IRemoteViewsAdapterConnection$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence com.android.internal.widget.ActionBarView.getSubtitle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence com.android.internal.widget.ActionBarView.getTitle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.widget.ActionBarView.setDropdownSelectedPosition(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.widget.ActionBarView$HomeView.setIcon(Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.widget.ActionBarView$HomeView.setUp(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.widget.ActionBarView.getDropdownSelectedPosition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.widget.ActionBarView.setHomeButtonEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter.getId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.widget.ActionBarView$SavedState.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SpinnerAdapter com.android.internal.widget.ActionBarView.getDropdownAdapter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.widget.ActionBarView.setSplitActionBar(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
MenuView com.android.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter.getMenuView(ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View com.android.internal.widget.ActionBarView.getCustomNavigationView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.widget.ActionBarView.getDisplayOptions() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.widget.ActionBarView.setIcon(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.widget.ActionBarView.setLogo(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.widget.ActionBarView.getNavigationMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ExtractedText com.android.internal.widget.EditableInputConnection.getExtractedText(ExtractedTextRequest,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Editable com.android.internal.widget.EditableInputConnection.getEditable() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] com.android.internal.util.BitwiseInputStream.readByteArray(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.util.FastXmlSerializer.setFeature(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.util.FastXmlSerializer.getNamespace() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.util.FastXmlSerializer.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object com.android.internal.util.FastXmlSerializer.getProperty(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.util.FastXmlSerializer.getPrefix(String,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.util.FastXmlSerializer.setPrefix(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.util.FastXmlSerializer.getDepth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.util.FastXmlSerializer.setProperty(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.util.FastXmlSerializer.setOutput(OutputStream,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long com.android.internal.util.MemInfoReader.getCachedSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long com.android.internal.util.MemInfoReader.getFreeSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long com.android.internal.util.MemInfoReader.getTotalSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Message com.android.internal.util.AsyncChannel.sendMessageSynchronously(int) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
void com.android.internal.util.AsyncChannel.sendMessage(Message) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.util.AsyncChannel.sendMessage(int,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Message com.android.internal.util.AsyncChannel.sendMessageSynchronously(int,Object) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
void com.android.internal.util.AsyncChannel.sendMessage(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.util.AsyncChannel.sendMessage(int,int,int,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Message com.android.internal.util.AsyncChannel.sendMessageSynchronously(int,int) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
void com.android.internal.util.AsyncChannel.sendMessage(int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Message com.android.internal.util.AsyncChannel.sendMessageSynchronously(int,int,int) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
Message com.android.internal.util.AsyncChannel.sendMessageSynchronously(Message) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
void com.android.internal.util.AsyncChannel.sendMessage(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Message com.android.internal.util.AsyncChannel.sendMessageSynchronously(int,int,int,Object) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
byte[] com.android.internal.util.BitwiseOutputStream.toByteArray() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.util.XmlUtils.writeValueXml(Object,String,XmlSerializer) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ArrayList com.android.internal.util.XmlUtils.readListXml(InputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.util.State.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.util.StateMachine$SmHandler$QuittingState.processMessage(Message) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.util.StateMachine.sendMessageDelayed(int,Object,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.util.StateMachine.sendMessageDelayed(Message,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.util.StateMachine.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.util.StateMachine.sendMessageAtFrontOfQueue(Message) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.util.StateMachine$SmHandler$HaltingState.processMessage(Message) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.util.StateMachine.sendMessage(Message) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IState com.android.internal.util.StateMachine.getCurrentState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.util.StateMachine.sendMessageDelayed(int,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.util.StateMachine.setDbg(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Message com.android.internal.util.StateMachine.getCurrentMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Handler com.android.internal.util.StateMachine.getHandler() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Handler com.android.internal.util.AsyncService.getHandler() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
float com.android.internal.util.TypedProperties.getFloat(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
short com.android.internal.util.TypedProperties.getShort(String,short) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte com.android.internal.util.TypedProperties.getByte(String,byte) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte com.android.internal.util.TypedProperties.getByte(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.util.TypedProperties.getString(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
double com.android.internal.util.TypedProperties.getDouble(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float com.android.internal.util.TypedProperties.getFloat(String,float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.util.TypedProperties.getString(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.util.TypedProperties.getInt(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
double com.android.internal.util.TypedProperties.getDouble(String,double) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object com.android.internal.util.TypedProperties.get(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long com.android.internal.util.TypedProperties.getLong(String,long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.util.TypedProperties.getInt(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long com.android.internal.util.TypedProperties.getLong(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.util.TypedProperties.getStringInfo(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
short com.android.internal.util.TypedProperties.getShort(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.textservice.ITextServicesManager$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SpellCheckerInfo com.android.internal.textservice.ITextServicesManager$Stub$Proxy.getCurrentSpellChecker(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.textservice.ITextServicesManager$Stub$Proxy.setCurrentSpellCheckerSubtype(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder com.android.internal.textservice.ITextServicesManager$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.textservice.ITextServicesManager$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.textservice.ITextServicesManager$Stub$Proxy.getSpellCheckerService(String,String,ITextServicesSessionListener,ISpellCheckerSessionListener,Bundle) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SpellCheckerSubtype com.android.internal.textservice.ITextServicesManager$Stub$Proxy.getCurrentSpellCheckerSubtype(String,boolean) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.textservice.ITextServicesManager$Stub$Proxy.setCurrentSpellChecker(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SpellCheckerInfo[] com.android.internal.textservice.ITextServicesManager$Stub$Proxy.getEnabledSpellCheckers() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.textservice.ITextServicesManager$Stub$Proxy.finishSpellCheckerService(ISpellCheckerSessionListener) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.textservice.ITextServicesManager$Stub$Proxy.setSpellCheckerEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.textservice.ITextServicesSessionListener$Stub$Proxy.onServiceConnected(ISpellCheckerSession) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.textservice.ITextServicesSessionListener$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
IBinder com.android.internal.textservice.ITextServicesSessionListener$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
IBinder com.android.internal.textservice.ISpellCheckerSession$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.textservice.ISpellCheckerSession$Stub$Proxy.onGetSuggestionsMultiple(TextInfo[],int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.textservice.ISpellCheckerSession$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.textservice.ISpellCheckerSessionListener$Stub$Proxy.onGetSuggestions(SuggestionsInfo[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.textservice.ISpellCheckerSessionListener$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
IBinder com.android.internal.textservice.ISpellCheckerSessionListener$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] com.android.internal.os.AtomicFile.readFully() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File com.android.internal.os.AtomicFile.getBaseFile() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder com.android.internal.os.RuntimeInit.getApplicationObject() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.os.RuntimeInit$1.getId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.os.BinderInternal.forceGc(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long com.android.internal.os.BinderInternal.getLastGcTime() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FileDescriptor com.android.internal.os.ZygoteConnection.getFileDesciptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.os.IDropBoxManagerService$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.os.IDropBoxManagerService$Stub$Proxy.isTagEnabled(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder com.android.internal.os.IDropBoxManagerService$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean com.android.internal.os.IDropBoxManagerService$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.os.AndroidPrintStream.log(String) - @DSSink({DSSinkKind.LOG})
IBinder com.android.internal.os.IResultReceiver$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.os.IResultReceiver$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.os.IResultReceiver$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.os.IResultReceiver$Stub$Proxy.send(int,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.os.LoggingPrintStream.write(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.os.LoggingPrintStream.write(byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.os.HandlerCaller.sendMessage(Message) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.statusbar.StatusBarNotification.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.statusbar.IStatusBarService$Stub$Proxy.setHardKeyboardEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.statusbar.IStatusBarService$Stub$Proxy.onNotificationClear(String,String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder com.android.internal.statusbar.IStatusBarService$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String com.android.internal.statusbar.IStatusBarService$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void com.android.internal.statusbar.IStatusBarService$Stub$Proxy.removeIcon(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.statusbar.IStatusBarService$Stub$Proxy.setIcon(String,String,int,int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.statusbar.IStatusBarService$Stub$Proxy.onNotificationClick(String,String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.statusbar.IStatusBarService$Stub$Proxy.setIconVisibility(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.statusbar.IStatusBarService$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.statusbar.IStatusBarService$Stub$Proxy.disable(int,IBinder,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.statusbar.IStatusBarService$Stub$Proxy.onNotificationError(String,String,int,int,int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.statusbar.IStatusBarService$Stub$Proxy.setImeWindowStatus(IBinder,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.statusbar.IStatusBar$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.statusbar.IStatusBar$Stub$Proxy.updateNotification(IBinder,StatusBarNotification) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.statusbar.IStatusBar$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.statusbar.IStatusBar$Stub$Proxy.setIcon(int,StatusBarIcon) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.statusbar.IStatusBar$Stub$Proxy.setImeWindowStatus(IBinder,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.statusbar.IStatusBar$Stub$Proxy.removeNotification(IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.statusbar.IStatusBar$Stub$Proxy.disable(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder com.android.internal.statusbar.IStatusBar$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.statusbar.IStatusBar$Stub$Proxy.removeIcon(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.statusbar.IStatusBar$Stub$Proxy.addNotification(IBinder,StatusBarNotification) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.statusbar.IStatusBar$Stub$Proxy.setHardKeyboardStatus(boolean,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.statusbar.StatusBarIconList.getSlotIndex(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.statusbar.StatusBarIconList.getSlot(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.statusbar.StatusBarIconList.setIcon(int,StatusBarIcon) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.statusbar.StatusBarIconList.getViewIndex(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
StatusBarIcon com.android.internal.statusbar.StatusBarIconList.getIcon(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.statusbar.StatusBarIconList.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.content.PackageMonitor.getPackageName(Intent) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder com.android.internal.app.IUsageStats$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.internal.app.IUsageStats$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.internal.app.IUsageStats$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
PkgUsageStats com.android.internal.app.IUsageStats$Stub$Proxy.getPkgUsageStats(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PkgUsageStats[] com.android.internal.app.IUsageStats$Stub$Proxy.getAllPkgUsageStats() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.IUsageStats$Stub$Proxy.noteLaunchTime(ComponentName,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ListView com.android.internal.app.AlertController.getListView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Button com.android.internal.app.AlertController.getButton(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View com.android.internal.app.AlertController$AlertParams$1.getView(int,View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl.setTitle(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
View com.android.internal.app.ActionBarImpl.getCustomView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl.setLogo(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl.setIcon(Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence com.android.internal.app.ActionBarImpl$TabImpl.getText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl$ActionModeImpl.setTitle(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl.setDisplayOptions(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.app.ActionBarImpl.getNavigationItemCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl.setSubtitle(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl.setHomeButtonEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl.setCustomView(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl.setDisplayShowTitleEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.app.ActionBarImpl$TabImpl.getPosition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.app.ActionBarImpl.getDisplayOptions() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl.setIcon(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
View com.android.internal.app.ActionBarImpl$ActionModeImpl.getCustomView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MenuInflater com.android.internal.app.ActionBarImpl$ActionModeImpl.getMenuInflater() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl.setDisplayUseLogoEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl.setBackgroundDrawable(Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence com.android.internal.app.ActionBarImpl$ActionModeImpl.getSubtitle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl$ActionModeImpl.setSubtitle(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence com.android.internal.app.ActionBarImpl$ActionModeImpl.getTitle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl.setSplitBackgroundDrawable(Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.app.ActionBarImpl.getTabCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable com.android.internal.app.ActionBarImpl$TabImpl.getIcon() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Menu com.android.internal.app.ActionBarImpl$ActionModeImpl.getMenu() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl.setNavigationMode(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl.setDisplayOptions(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl.setDisplayHomeAsUpEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Context com.android.internal.app.ActionBarImpl.getThemedContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence com.android.internal.app.ActionBarImpl$TabImpl.getContentDescription() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence com.android.internal.app.ActionBarImpl.getSubtitle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence com.android.internal.app.ActionBarImpl.getTitle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl.setLogo(Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl$ActionModeImpl.setCustomView(View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl.setSelectedNavigationItem(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.app.ActionBarImpl.getHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.app.ActionBarImpl.getSelectedNavigationIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl.setStackedBackgroundDrawable(Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
View com.android.internal.app.ActionBarImpl$TabImpl.getCustomView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object com.android.internal.app.ActionBarImpl$TabImpl.getTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl.setDisplayShowHomeEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl.setDisplayShowCustomEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.app.ActionBarImpl.setCustomView(View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int com.android.internal.app.ActionBarImpl.getNavigationMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.net.LegacyVpnInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent com.android.internal.net.VpnConfig.getIntentForConfirmation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PendingIntent com.android.internal.net.VpnConfig.getIntentForStatusPanel(Context,VpnConfig) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.internal.net.VpnConfig.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void com.android.i18n.phonenumbers.RegexCache$LRUCache.put(Object,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Pattern com.android.i18n.phonenumbers.RegexCache.getPatternForRegex(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object com.android.i18n.phonenumbers.RegexCache$LRUCache.get(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Map com.android.i18n.phonenumbers.CountryCodeToRegionCodeMap.getCountryCodeToRegionCodeMap() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.Phonemetadata$NumberFormat.getLeadingDigitsPattern(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection.getMetadataCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata.getNationalPrefixForParsing() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.Phonemetadata$NumberFormat.getPattern() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata.getPreferredExtnPrefix() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata.getNationalPrefix() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.Phonemetadata$NumberFormat.getNationalPrefixFormattingRule() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata.getInternationalPrefix() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata.getMainCountryForCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc.getExampleNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata.getNationalPrefixTransformRule() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.Phonemetadata$NumberFormat.getFormat() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata.getCountryCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata.getId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.Phonemetadata$NumberFormat.getDomesticCarrierCodeFormattingRule() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc.getNationalNumberPattern() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata.getPreferredInternationalPrefix() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata.getLeadingDigits() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata.writeExternal(ObjectOutput) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List com.android.i18n.phonenumbers.Phonemetadata$NumberFormat.leadingDigitPatterns() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc.getPossibleNumberPattern() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata.intlNumberFormats() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection.writeExternal(ObjectOutput) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata.numberFormats() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection.getMetadataList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.PhoneNumberUtil.getNddPrefixForRegion(String,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PhoneNumberUtil com.android.i18n.phonenumbers.PhoneNumberUtil.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PhoneNumberUtil com.android.i18n.phonenumbers.PhoneNumberUtil.getInstance(String,Map) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.PhoneNumberUtil.getRegionCodeForCountryCode(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AsYouTypeFormatter com.android.i18n.phonenumbers.PhoneNumberUtil.getAsYouTypeFormatter(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Set com.android.i18n.phonenumbers.PhoneNumberUtil.getSupportedRegions() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.i18n.phonenumbers.PhoneNumberUtil.getCountryCodeForRegion(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long com.android.i18n.phonenumbers.Phonenumber$PhoneNumber.getNationalNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.Phonenumber$PhoneNumber.getPreferredDomesticCarrierCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.Phonenumber$PhoneNumber.getExtension() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.i18n.phonenumbers.Phonenumber$PhoneNumber.getCountryCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.Phonenumber$PhoneNumber.getRawInput() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.i18n.phonenumbers.AsYouTypeFormatter.getRememberedPosition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.geocoding.MappingFileProvider.getFileName(int,String,String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.geocoding.DefaultMapStorage.getDescription(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.i18n.phonenumbers.geocoding.DefaultMapStorage.getPrefix(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PhoneNumberOfflineGeocoder com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AreaCodeMapStorageStrategy com.android.i18n.phonenumbers.geocoding.AreaCodeMap.getSmallerMapStorage(SortedMap) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.i18n.phonenumbers.geocoding.AreaCodeMap.writeExternal(ObjectOutput) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
AreaCodeMapStorageStrategy com.android.i18n.phonenumbers.geocoding.AreaCodeMap.getAreaCodeMapStorage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void com.android.i18n.phonenumbers.geocoding.FlyweightMapStorage.writeExternal(ObjectOutput) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int com.android.i18n.phonenumbers.geocoding.FlyweightMapStorage.getPrefix(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String com.android.i18n.phonenumbers.geocoding.FlyweightMapStorage.getDescription(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.i18n.phonenumbers.geocoding.AreaCodeMapStorageStrategy.getNumOfEntries() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TreeSet com.android.i18n.phonenumbers.geocoding.AreaCodeMapStorageStrategy.getPossibleLengths() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int com.android.server.NetworkManagementSocketTagger.getThreadSocketStatsTag() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
byte droidsafe.runtime.DroidSafeAndroidRuntime.getUnmodeledTaintByte() - @DSSource(DSSourceKind.UNMODELED)
char droidsafe.runtime.DroidSafeAndroidRuntime.getUnmodeledTaintChar() - @DSSource(DSSourceKind.UNMODELED)
String droidsafe.runtime.DroidSafeAndroidRuntime.getUnmodeledTaintString() - @DSSource(DSSourceKind.UNMODELED)
double droidsafe.runtime.DroidSafeAndroidRuntime.getUnmodeledTaintDouble() - @DSSource(DSSourceKind.UNMODELED)
boolean droidsafe.runtime.DroidSafeAndroidRuntime.getUnmodeledTaintBoolean() - @DSSource(DSSourceKind.UNMODELED)
long droidsafe.runtime.DroidSafeAndroidRuntime.getUnmodeledTaintLong() - @DSSource(DSSourceKind.UNMODELED)
int droidsafe.runtime.DroidSafeAndroidRuntime.getUnmodeledTaintInt() - @DSSource(DSSourceKind.UNMODELED)
short droidsafe.runtime.DroidSafeAndroidRuntime.getUnmodeledTaintShort() - @DSSource(DSSourceKind.UNMODELED)
float droidsafe.runtime.DroidSafeAndroidRuntime.getUnmodeledTaintFloat() - @DSSource(DSSourceKind.UNMODELED)
String org.kxml2.io.KXmlParser.getAttributeNamespace(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.kxml2.io.KXmlParser.getAttributeName(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.kxml2.io.KXmlParser.getPositionDescription() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.kxml2.io.KXmlParser.getText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.kxml2.io.KXmlParser.getNamespaceCount(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.kxml2.io.KXmlParser.getColumnNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.kxml2.io.KXmlParser.getAttributeType(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.kxml2.io.KXmlParser.getPrefix() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.kxml2.io.KXmlParser.getAttributePrefix(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.kxml2.io.KXmlParser.getInputEncoding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.kxml2.io.KXmlParser.getDepth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.kxml2.io.KXmlParser.defineEntityReplacementText(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.kxml2.io.KXmlParser.getNamespaceUri(int) - @DSSource({DSSourceKind.FILE_INFORMATION})
String org.kxml2.io.KXmlParser.getNamespace() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char[] org.kxml2.io.KXmlParser.getTextCharacters(int[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.kxml2.io.KXmlParser.getSystemId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.kxml2.io.KXmlParser.getAttributeValue(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.kxml2.io.KXmlParser.getAttributeValue(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.kxml2.io.KXmlParser.getProperty(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.kxml2.io.KXmlParser.setProperty(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.kxml2.io.KXmlParser.getLineNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.kxml2.io.KXmlParser.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.kxml2.io.KXmlParser.getNamespace(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.kxml2.io.KXmlParser.getEventType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.kxml2.io.KXmlParser.getAttributeCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.kxml2.io.KXmlParser.getPublicId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.kxml2.io.KXmlParser.getNamespacePrefix(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.kxml2.io.KXmlParser.setInput(InputStream,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.kxml2.io.KXmlParser.getRootElementName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
double org.json.JSONObject.getDouble(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long org.json.JSONObject.getLong(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.json.JSONObject.getString(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.json.JSONObject.get(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
JSONObject org.json.JSONObject.putOpt(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
JSONObject org.json.JSONObject.put(String,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
JSONArray org.json.JSONObject.getJSONArray(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
JSONObject org.json.JSONObject.put(String,double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
JSONObject org.json.JSONObject.put(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
JSONObject org.json.JSONObject.accumulate(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.json.JSONObject.getInt(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
JSONObject org.json.JSONObject.getJSONObject(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
JSONObject org.json.JSONObject.put(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.json.JSONObject.toString(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
JSONObject org.json.JSONObject.put(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
JSONArray org.json.JSONArray.getJSONArray(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
JSONArray org.json.JSONArray.put(int,Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.json.JSONArray.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.json.JSONArray.toString(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
JSONArray org.json.JSONArray.put(int,double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
JSONArray org.json.JSONArray.put(int,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.json.JSONArray.getString(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
JSONArray org.json.JSONArray.put(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
double org.json.JSONArray.getDouble(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
JSONObject org.json.JSONArray.getJSONObject(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.json.JSONArray.getInt(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
JSONObject org.json.JSONArray.toJSONObject(JSONArray) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long org.json.JSONArray.getLong(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
JSONArray org.json.JSONArray.put(int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.xmlpull.v1.XmlPullParserException.getColumnNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Throwable org.xmlpull.v1.XmlPullParserException.getDetail() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.xmlpull.v1.XmlPullParserException.getLineNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.xmlpull.v1.XmlPullParserFactory.setValidating(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.xmlpull.v1.XmlPullParserFactory.setNamespaceAware(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.xmlpull.v1.XmlPullParserFactory.setFeature(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.ccil.cowan.tagsoup.HTMLScanner.getPublicId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.ccil.cowan.tagsoup.HTMLScanner.getSystemId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.ccil.cowan.tagsoup.HTMLScanner.getLineNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.HTMLScanner.scan(Reader,ScanHandler) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.ccil.cowan.tagsoup.HTMLScanner.getColumnNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.ElementType.setAttribute(String,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.ElementType.setAttribute(AttributesImpl,String,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.PYXWriter.pitarget(char[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.PYXWriter.endElement(String,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.PYXWriter.startElement(String,String,String,Attributes) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.PYXWriter.processingInstruction(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.PYXWriter.aname(char[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.PYXWriter.aval(char[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.PYXWriter.pi(char[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.PYXWriter.etag(char[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.PYXWriter.gi(char[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.ccil.cowan.tagsoup.PYXWriter.getEntity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.ccil.cowan.tagsoup.Schema.getURI() - @DSSource({DSSourceKind.FILE_INFORMATION})
String org.ccil.cowan.tagsoup.Schema.getPrefix() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ElementType org.ccil.cowan.tagsoup.Schema.getElementType(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.Schema.entity(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.Schema.elementType(String,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.ccil.cowan.tagsoup.Schema.getEntity(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ElementType org.ccil.cowan.tagsoup.Schema.rootElementType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.Element.setAttribute(String,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.ccil.cowan.tagsoup.AttributesImpl.getValue(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.ccil.cowan.tagsoup.AttributesImpl.getValue(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.AttributesImpl.setType(int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.AttributesImpl.setURI(int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.AttributesImpl.setQName(int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.ccil.cowan.tagsoup.AttributesImpl.getLocalName(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.AttributesImpl.setLocalName(int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.ccil.cowan.tagsoup.AttributesImpl.getQName(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.ccil.cowan.tagsoup.AttributesImpl.getLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.ccil.cowan.tagsoup.AttributesImpl.getIndex(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.ccil.cowan.tagsoup.AttributesImpl.getIndex(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.AttributesImpl.setValue(int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.ccil.cowan.tagsoup.AttributesImpl.getURI(int) - @DSSource({DSSourceKind.FILE_INFORMATION})
String org.ccil.cowan.tagsoup.AttributesImpl.getValue(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.ccil.cowan.tagsoup.AttributesImpl.getType(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.ccil.cowan.tagsoup.AttributesImpl.getType(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.ccil.cowan.tagsoup.AttributesImpl.getType(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.AttributesImpl.setAttribute(int,String,String,String,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ErrorHandler org.ccil.cowan.tagsoup.Parser.getErrorHandler() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.Parser.setProperty(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.ccil.cowan.tagsoup.Parser.getEntity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.ccil.cowan.tagsoup.Parser.getProperty(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ContentHandler org.ccil.cowan.tagsoup.Parser.getContentHandler() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DTDHandler org.ccil.cowan.tagsoup.Parser.getDTDHandler() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
EntityResolver org.ccil.cowan.tagsoup.Parser.getEntityResolver() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.ccil.cowan.tagsoup.Parser.setFeature(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InputStream org.xml.sax.InputSource.getByteStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.InputSource.getPublicId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.InputSource.getSystemId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Reader org.xml.sax.InputSource.getCharacterStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.InputSource.getEncoding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ClassLoader org.xml.sax.helpers.NewInstance.getClassLoader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.xml.sax.helpers.ParserAdapter.getProperty(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ErrorHandler org.xml.sax.helpers.ParserAdapter.getErrorHandler() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.xml.sax.helpers.ParserAdapter.setProperty(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.helpers.ParserAdapter$AttributeListAdapter.getValue(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.helpers.ParserAdapter$AttributeListAdapter.getURI(int) - @DSSource({DSSourceKind.FILE_INFORMATION})
String org.xml.sax.helpers.ParserAdapter$AttributeListAdapter.getType(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ContentHandler org.xml.sax.helpers.ParserAdapter.getContentHandler() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.helpers.ParserAdapter$AttributeListAdapter.getValue(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.helpers.ParserAdapter$AttributeListAdapter.getType(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.helpers.ParserAdapter$AttributeListAdapter.getValue(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.helpers.ParserAdapter$AttributeListAdapter.getLocalName(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DTDHandler org.xml.sax.helpers.ParserAdapter.getDTDHandler() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.xml.sax.helpers.ParserAdapter$AttributeListAdapter.getLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.xml.sax.helpers.ParserAdapter.startElement(String,AttributeList) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
EntityResolver org.xml.sax.helpers.ParserAdapter.getEntityResolver() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.helpers.ParserAdapter$AttributeListAdapter.getQName(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.helpers.ParserAdapter$AttributeListAdapter.getType(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.helpers.LocatorImpl.getSystemId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.xml.sax.helpers.LocatorImpl.getLineNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.xml.sax.helpers.LocatorImpl.getColumnNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.helpers.LocatorImpl.getPublicId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.xml.sax.helpers.AttributesImpl.setType(int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.xml.sax.helpers.AttributesImpl.setValue(int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.xml.sax.helpers.AttributesImpl.getIndex(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.helpers.AttributesImpl.getType(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.xml.sax.helpers.AttributesImpl.getLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.helpers.AttributesImpl.getValue(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.xml.sax.helpers.AttributesImpl.setAttribute(int,String,String,String,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.helpers.AttributesImpl.getURI(int) - @DSSource({DSSourceKind.FILE_INFORMATION})
void org.xml.sax.helpers.AttributesImpl.setLocalName(int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.xml.sax.helpers.AttributesImpl.getIndex(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.helpers.AttributesImpl.getLocalName(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.helpers.AttributesImpl.getValue(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.xml.sax.helpers.AttributesImpl.setQName(int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.helpers.AttributesImpl.getType(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.helpers.AttributesImpl.getValue(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.xml.sax.helpers.AttributesImpl.setURI(int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.helpers.AttributesImpl.getType(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.helpers.AttributesImpl.getQName(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Enumeration org.xml.sax.helpers.NamespaceSupport.getDeclaredPrefixes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Enumeration org.xml.sax.helpers.NamespaceSupport$Context.getPrefixes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] org.xml.sax.helpers.NamespaceSupport$Context.processName(String,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Enumeration org.xml.sax.helpers.NamespaceSupport.getPrefixes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.xml.sax.helpers.NamespaceSupport$Context.declarePrefix(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Enumeration org.xml.sax.helpers.NamespaceSupport.getPrefixes(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.helpers.NamespaceSupport$Context.getURI(String) - @DSSource({DSSourceKind.FILE_INFORMATION})
String org.xml.sax.helpers.NamespaceSupport.getURI(String) - @DSSource({DSSourceKind.FILE_INFORMATION})
String org.xml.sax.helpers.NamespaceSupport.getPrefix(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.helpers.NamespaceSupport$Context.getPrefix(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Enumeration org.xml.sax.helpers.NamespaceSupport$Context.getDeclaredPrefixes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.xml.sax.SAXParseException.getColumnNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.xml.sax.SAXParseException.getLineNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.SAXParseException.getSystemId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.SAXParseException.getPublicId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Exception org.xml.sax.SAXException.getException() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.xml.sax.SAXException.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.asn1.ASN1OctetString.setEncodingContent(BerOutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.asn1.ASN1OctetString.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ASN1OctetString org.apache.harmony.security.asn1.ASN1OctetString.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.asn1.ASN1Set.setEncodingContent(BerOutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.asn1.ASN1GeneralizedTime.setEncodingContent(BerOutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ASN1GeneralizedTime org.apache.harmony.security.asn1.ASN1GeneralizedTime.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection org.apache.harmony.security.asn1.ASN1ValueCollection.getValues(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.asn1.ASN1Oid.setEncodingContent(BerOutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ASN1Oid org.apache.harmony.security.asn1.ASN1Oid.getInstanceForString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.asn1.ASN1Oid$1.setEncodingContent(BerOutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.asn1.ASN1Oid$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.asn1.ASN1Oid.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ASN1Oid org.apache.harmony.security.asn1.ASN1Oid.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.asn1.ASN1Time.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.asn1.BerInputStream.getBuffer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.asn1.BerInputStream.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.security.asn1.BerInputStream.getLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.security.asn1.BerInputStream.getLength(byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.security.asn1.BerInputStream.getOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.asn1.BerInputStream.get(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.security.asn1.BerInputStream.getEndOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.security.asn1.BerInputStream.getTagOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ASN1Any org.apache.harmony.security.asn1.ASN1Any.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.asn1.ASN1Any.setEncodingContent(BerOutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.security.asn1.ASN1Any.getEncodedLength(BerOutputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.asn1.ASN1Any.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.asn1.ASN1TypeCollection.getValues(Object,Object[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.asn1.ASN1Boolean.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.asn1.ASN1Boolean.setEncodingContent(BerOutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ASN1Boolean org.apache.harmony.security.asn1.ASN1Boolean.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.asn1.ASN1SetOf.setEncodingContent(BerOutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.asn1.BitString.setBit(int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.asn1.ASN1Enumerated.setEncodingContent(BerOutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ASN1Enumerated org.apache.harmony.security.asn1.ASN1Enumerated.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.asn1.ASN1Enumerated.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.security.asn1.ASN1Type.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.asn1.ASN1Type.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.asn1.ASN1Type.decode(byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.asn1.ASN1Type.decode(InputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.security.asn1.ASN1Type.getEncodedLength(BerOutputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.asn1.ASN1Type.encode(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.asn1.ASN1Type.decode(byte[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ASN1Integer org.apache.harmony.security.asn1.ASN1Integer.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.asn1.ASN1Integer.setEncodingContent(BerOutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.asn1.ASN1Integer.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.asn1.ASN1Implicit.setEncodingContent(BerOutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ASN1UTCTime org.apache.harmony.security.asn1.ASN1UTCTime.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.asn1.ASN1UTCTime.setEncodingContent(BerOutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.asn1.ASN1Explicit.setEncodingContent(BerOutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.asn1.ASN1Choice.decode(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.asn1.ASN1StringType$7.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.asn1.ASN1StringType.setEncodingContent(BerOutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.asn1.ASN1StringType.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.asn1.ASN1BitString$ASN1NamedBitList.setEncodingContent(BerOutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.asn1.ASN1BitString.setEncodingContent(BerOutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ASN1BitString org.apache.harmony.security.asn1.ASN1BitString.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.asn1.ASN1BitString$ASN1NamedBitList.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.asn1.ASN1BitString.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.asn1.ASN1SequenceOf.setEncodingContent(BerOutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.asn1.ASN1Sequence.setEncodingContent(BerOutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.pkcs7.SignerInfo.getEncryptedDigest() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.pkcs7.SignerInfo.getEncodedAuthenticatedAttributes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.security.pkcs7.SignerInfo.getDigestAlgorithm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.pkcs7.SignerInfo$2.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger org.apache.harmony.security.pkcs7.SignerInfo.getSerialNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.security.pkcs7.SignerInfo.getDigestEncryptionAlgorithm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List org.apache.harmony.security.pkcs7.SignerInfo.getAuthenticatedAttributes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
X500Principal org.apache.harmony.security.pkcs7.SignerInfo.getIssuer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.pkcs7.ContentInfo.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.pkcs7.ContentInfo$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.pkcs7.ContentInfo.getContent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int[] org.apache.harmony.security.pkcs7.ContentInfo.getContentType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SignedData org.apache.harmony.security.pkcs7.ContentInfo.getSignedData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List org.apache.harmony.security.pkcs7.AuthenticatedAttributes.getAttributes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.pkcs7.AuthenticatedAttributes.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.pkcs7.SignedData$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List org.apache.harmony.security.pkcs7.SignedData.getCertificates() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List org.apache.harmony.security.pkcs7.SignedData.getSignerInfos() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.security.pkcs7.SignedData.getVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List org.apache.harmony.security.pkcs7.SignedData.getCRLs() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.x501.AttributeTypeAndValue$1.setEncodingContent(BerOutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x501.AttributeTypeAndValue$2.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ObjectIdentifier org.apache.harmony.security.x501.AttributeTypeAndValue.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x501.AttributeTypeAndValue$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x501.DirectoryString$1.getObjectToEncode(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.security.x501.AttributeValue.getHexString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.security.x501.AttributeValue.getTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection org.apache.harmony.security.x501.Name$1.getValues(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x501.Name.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.security.x501.Name.getName(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x501.Name$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
X500Principal org.apache.harmony.security.x501.Name.getX500Principal() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Certificate[] org.apache.harmony.security.utils.JarUtils.verifySignature(InputStream,InputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.utils.ObjectIdentifier.getGroup() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int[] org.apache.harmony.security.utils.ObjectIdentifier.getOid() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.security.utils.ObjectIdentifier.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.security.utils.AlgNameMapper.getStandardName(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.security.utils.Array.getBytesAsString(byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.X509PublicKey.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.security.x509.X509PublicKey.getFormat() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.security.x509.X509PublicKey.getAlgorithm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.InfoAccessSyntax.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection org.apache.harmony.security.x509.InfoAccessSyntax$1.getValues(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Date org.apache.harmony.security.x509.InvalidityDate.getDate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.InvalidityDate.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean[] org.apache.harmony.security.x509.TBSCertificate.getSubjectUniqueID() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Validity org.apache.harmony.security.x509.TBSCertificate.getValidity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Name org.apache.harmony.security.x509.TBSCertificate.getSubject() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.x509.TBSCertificate.dumpValue(StringBuilder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SubjectPublicKeyInfo org.apache.harmony.security.x509.TBSCertificate.getSubjectPublicKeyInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Name org.apache.harmony.security.x509.TBSCertificate.getIssuer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.TBSCertificate$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean[] org.apache.harmony.security.x509.TBSCertificate.getIssuerUniqueID() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.TBSCertificate.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.security.x509.TBSCertificate.getVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger org.apache.harmony.security.x509.TBSCertificate.getSerialNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AlgorithmIdentifier org.apache.harmony.security.x509.TBSCertificate.getSignature() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Extensions org.apache.harmony.security.x509.TBSCertificate.getExtensions() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.PolicyInformation$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.security.x509.PolicyInformation.getPolicyIdentifier() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.PolicyInformation.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.ExtensionValue.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.x509.ExtensionValue.dumpValue(StringBuilder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
X500Principal org.apache.harmony.security.x509.CertificateIssuer.getIssuer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.x509.CertificateIssuer.dumpValue(StringBuilder,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.GeneralSubtree$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.GeneralSubtree.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
GeneralName org.apache.harmony.security.x509.GeneralSubtree.getBase() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.Time$1.getObjectToEncode(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.ORAddress.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.x509.AuthorityKeyIdentifier.dumpValue(StringBuilder,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.AuthorityKeyIdentifier$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.AuthorityKeyIdentifier.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.SubjectKeyIdentifier.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.PolicyConstraints$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.PolicyConstraints.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.ReasonCode.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.security.x509.BasicConstraints.getPathLenConstraint() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.BasicConstraints.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.BasicConstraints$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.GeneralNames.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection org.apache.harmony.security.x509.GeneralNames$1.getValues(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection org.apache.harmony.security.x509.GeneralNames.getPairsList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List org.apache.harmony.security.x509.GeneralNames.getNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.OtherName.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.OtherName.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.OtherName$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.InhibitAnyPolicy.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.CertificateList.getSignatureValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TBSCertList org.apache.harmony.security.x509.CertificateList.getTbsCertList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.CertificateList$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.CertificateList.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.DistributionPointName$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.DistributionPointName$1.getObjectToEncode(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.x509.DistributionPointName.dumpValue(StringBuilder,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.x509.Extensions.dumpValue(StringBuilder,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Extension org.apache.harmony.security.x509.Extensions.getExtensionByOID(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.Extensions$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection org.apache.harmony.security.x509.Extensions$1.getValues(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Set org.apache.harmony.security.x509.Extensions.getNonCriticalExtensions() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Set org.apache.harmony.security.x509.Extensions.getCriticalExtensions() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.Extensions.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TBSCertificate org.apache.harmony.security.x509.Certificate.getTbsCertificate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.Certificate.getSignatureValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.Certificate.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.Certificate$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.x509.AlternativeName.dumpValue(StringBuilder,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.AlternativeName.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.AccessDescription$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.AccessDescription.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char org.apache.harmony.security.x509.DNParser.getUTF8() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List org.apache.harmony.security.x509.DNParser.parse() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List org.apache.harmony.security.x509.ExtendedKeyUsage.getExtendedKeyUsage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.x509.ExtendedKeyUsage.dumpValue(StringBuilder,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.ExtendedKeyUsage.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.CRLNumber.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger org.apache.harmony.security.x509.CRLNumber.getNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.GeneralName$1.getObjectToEncode(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.security.x509.GeneralName.getTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List org.apache.harmony.security.x509.GeneralName.getAsList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.GeneralName.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.GeneralName.getEncodedName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.GeneralName$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.GeneralName.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.KeyUsage.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean[] org.apache.harmony.security.x509.KeyUsage.getKeyUsage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.x509.DistributionPoint.dumpValue(StringBuilder,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.DistributionPoint$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.TBSCertList$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger org.apache.harmony.security.x509.TBSCertList$RevokedCertificate.getUserCertificate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Extensions org.apache.harmony.security.x509.TBSCertList.getCrlExtensions() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.x509.TBSCertList.dumpValue(StringBuilder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Date org.apache.harmony.security.x509.TBSCertList.getNextUpdate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Name org.apache.harmony.security.x509.TBSCertList.getIssuer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List org.apache.harmony.security.x509.TBSCertList.getRevokedCertificates() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Extensions org.apache.harmony.security.x509.TBSCertList$RevokedCertificate.getCrlEntryExtensions() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Date org.apache.harmony.security.x509.TBSCertList.getThisUpdate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.x509.TBSCertList$RevokedCertificate.dumpValue(StringBuilder,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.TBSCertList.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
X500Principal org.apache.harmony.security.x509.TBSCertList$RevokedCertificate.getIssuer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.TBSCertList$RevokedCertificate$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.security.x509.TBSCertList.getVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Date org.apache.harmony.security.x509.TBSCertList$RevokedCertificate.getRevocationDate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.TBSCertList$RevokedCertificate.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AlgorithmIdentifier org.apache.harmony.security.x509.TBSCertList.getSignature() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.SubjectPublicKeyInfo.getSubjectPublicKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.SubjectPublicKeyInfo$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AlgorithmIdentifier org.apache.harmony.security.x509.SubjectPublicKeyInfo.getAlgorithmIdentifier() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PublicKey org.apache.harmony.security.x509.SubjectPublicKeyInfo.getPublicKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.SubjectPublicKeyInfo.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.security.x509.AlgorithmIdentifier.getAlgorithmName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.AlgorithmIdentifier$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.security.x509.AlgorithmIdentifier.getAlgorithm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.AlgorithmIdentifier.getParameters() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.AlgorithmIdentifier.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.GeneralSubtrees.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List org.apache.harmony.security.x509.GeneralSubtrees.getSubtrees() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection org.apache.harmony.security.x509.GeneralSubtrees$1.getValues(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.GeneralSubtrees$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.Extension.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ExtensionValue org.apache.harmony.security.x509.Extension.getDecodedExtensionValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.Extension$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean org.apache.harmony.security.x509.Extension.getCritical() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.security.x509.Extension.getExtnID() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.Extension.getExtnValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.Extension.getRawExtnValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
KeyUsage org.apache.harmony.security.x509.Extension.getKeyUsageValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.x509.Extension.dumpValue(StringBuilder,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
BasicConstraints org.apache.harmony.security.x509.Extension.getBasicConstraintsValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.EDIPartyName.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.EDIPartyName$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection org.apache.harmony.security.x509.CertificatePolicies$1.getValues(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List org.apache.harmony.security.x509.CertificatePolicies.getPolicyInformations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.CertificatePolicies.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.x509.CertificatePolicies.dumpValue(StringBuilder,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.IssuingDistributionPoint.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.IssuingDistributionPoint$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.x509.IssuingDistributionPoint.dumpValue(StringBuilder,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.x509.ReasonFlags$1.setEncodingContent(BerOutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.NameConstraints$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.x509.NameConstraints.dumpValue(StringBuilder,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.NameConstraints.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.x509.Validity$1.getDecodedObject(BerInputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.Validity.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Date org.apache.harmony.security.x509.Validity.getNotAfter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Date org.apache.harmony.security.x509.Validity.getNotBefore() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection org.apache.harmony.security.x509.CRLDistributionPoints$1.getValues(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.x509.CRLDistributionPoints.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.x509.CRLDistributionPoints.dumpValue(StringBuilder,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.security.fortress.Engine.getInstance(String,Provider,Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Provider org.apache.harmony.security.fortress.Services.getProvider(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.security.fortress.Services.initServiceInfo(Provider) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Provider[] org.apache.harmony.security.fortress.Services.getProviders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List org.apache.harmony.security.fortress.Services.getProvidersList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.provider.crypto.RandomBitsSupplier.getRandomBits(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl.engineGenerateSeed(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.security.provider.cert.X509CertImpl.getVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Set org.apache.harmony.security.provider.cert.X509CertImpl.getNonCriticalExtensionOIDs() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Set org.apache.harmony.security.provider.cert.X509CertImpl.getCriticalExtensionOIDs() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Principal org.apache.harmony.security.provider.cert.X509CertImpl.getIssuerDN() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.provider.cert.X509CertImpl.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Date org.apache.harmony.security.provider.cert.X509CertImpl.getNotBefore() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
X500Principal org.apache.harmony.security.provider.cert.X509CertImpl.getIssuerX500Principal() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean[] org.apache.harmony.security.provider.cert.X509CertImpl.getIssuerUniqueID() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Date org.apache.harmony.security.provider.cert.X509CertImpl.getNotAfter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.provider.cert.X509CertImpl.getSigAlgParams() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
X500Principal org.apache.harmony.security.provider.cert.X509CertImpl.getSubjectX500Principal() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.provider.cert.X509CertImpl.getTBSCertificate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.provider.cert.X509CertImpl.getSignature() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.security.provider.cert.X509CertImpl.getSigAlgName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Principal org.apache.harmony.security.provider.cert.X509CertImpl.getSubjectDN() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PublicKey org.apache.harmony.security.provider.cert.X509CertImpl.getPublicKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.security.provider.cert.X509CertImpl.getBasicConstraints() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List org.apache.harmony.security.provider.cert.X509CertImpl.getExtendedKeyUsage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection org.apache.harmony.security.provider.cert.X509CertImpl.getIssuerAlternativeNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.security.provider.cert.X509CertImpl.getExtensionValue(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger org.apache.harmony.security.provider.cert.X509CertImpl.getSerialNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean[] org.apache.harmony.security.provider.cert.X509CertImpl.getKeyUsage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.security.provider.cert.X509CertImpl.getSigAlgOID() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection org.apache.harmony.security.provider.cert.X509CertImpl.getSubjectAlternativeNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean[] org.apache.harmony.security.provider.cert.X509CertImpl.getSubjectUniqueID() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3.decrypt(byte,byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3.<init>(SSLSessionImpl) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3.encrypt(byte,byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.HandshakeProtocol.send(Message) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Runnable org.apache.harmony.xnet.provider.jsse.HandshakeProtocol.getTask() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SSLSessionImpl org.apache.harmony.xnet.provider.jsse.HandshakeProtocol.getSession() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.HandshakeProtocol.wrap() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] org.apache.harmony.xnet.provider.jsse.NativeCrypto.getSupportedCipherSuites() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.NativeCrypto.setEnabledCipherSuites(int,String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] org.apache.harmony.xnet.provider.jsse.NativeCrypto.getDefaultCipherSuites() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.NativeCrypto.setEnabledProtocols(int,String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] org.apache.harmony.xnet.provider.jsse.NativeCrypto.getSupportedProtocols() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long org.apache.harmony.xnet.provider.jsse.SSLInputStream.readUint32() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long org.apache.harmony.xnet.provider.jsse.SSLInputStream.readUint64() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] org.apache.harmony.xnet.provider.jsse.SSLInputStream.read(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.CertificateRequest.send(HandshakeIODataStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xnet.provider.jsse.CertificateRequest.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] org.apache.harmony.xnet.provider.jsse.CertificateRequest.getTypesAsString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.Logger$Stream.println(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.setSendBufferSize(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InetAddress org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.getLocalAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.setSoTimeout(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.getReceiveBufferSize() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
InetAddress org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.getInetAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.getTrafficClass() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.setReceiveBufferSize(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.getTcpNoDelay() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.getReuseAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SocketAddress org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.getRemoteSocketAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.setTrafficClass(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.setKeepAlive(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.getKeepAlive() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.getLocalPort() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.setSoLinger(boolean,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.setReuseAddress(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
FileDescriptor org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.getFileDescriptor$() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.getPort() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.getSoLinger() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.getSoTimeout() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.getSendBufferSize() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.getOOBInline() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.setTcpNoDelay(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SocketAddress org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper.getLocalSocketAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xnet.provider.jsse.ClientHello.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.ClientHello.getRandom() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.ClientHello.send(HandshakeIODataStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl.getSupportedCipherSuites() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl.getDefaultCipherSuites() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLSessionContext org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl.getSessionContext() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl.getPacketBufferSize() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Certificate[] org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl.getLocalCertificates() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl.getCipherSuite() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl.getId() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl.getLastAccessedTime() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Certificate[] org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl.getPeerCertificates() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl.getValueNames() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl.getPeerHost() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl.putValue(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Principal org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl.getPeerPrincipal() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Principal org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl.getLocalPrincipal() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl.getEncoded() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
X509Certificate[] org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl.getPeerCertificateChain() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl.getProtocol() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl.getApplicationBufferSize() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl.getCreationTime() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl.getPeerPort() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl.getValue(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.SSLSocketImpl.setOOBInline(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InputStream org.apache.harmony.xnet.provider.jsse.SSLSocketImpl.getInputStream() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.SSLSocketImpl.setEnabledCipherSuites(String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.SSLSocketImpl.setEnableSessionCreation(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean org.apache.harmony.xnet.provider.jsse.SSLSocketImpl.getUseClientMode() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean org.apache.harmony.xnet.provider.jsse.SSLSocketImpl.getNeedClientAuth() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.SSLSocketImpl.setWantClientAuth(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
OutputStream org.apache.harmony.xnet.provider.jsse.SSLSocketImpl.getOutputStream() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.SSLSocketImpl.setNeedClientAuth(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] org.apache.harmony.xnet.provider.jsse.SSLSocketImpl.getEnabledProtocols() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String[] org.apache.harmony.xnet.provider.jsse.SSLSocketImpl.getEnabledCipherSuites() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String[] org.apache.harmony.xnet.provider.jsse.SSLSocketImpl.getSupportedCipherSuites() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean org.apache.harmony.xnet.provider.jsse.SSLSocketImpl.getWantClientAuth() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.SSLSocketImpl.setEnabledProtocols(String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SSLSession org.apache.harmony.xnet.provider.jsse.SSLSocketImpl.getSession() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.SSLSocketImpl.setUseClientMode(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.SSLSocketImpl.sendUrgentData(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean org.apache.harmony.xnet.provider.jsse.SSLSocketImpl.getEnableSessionCreation() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.SSLSocketImpl.writeAppData(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] org.apache.harmony.xnet.provider.jsse.SSLSocketImpl.getSupportedProtocols() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.setSoTimeout(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.getOOBInline() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.setReceiveBufferSize(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InetAddress org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.getInetAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.setTrafficClass(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.getTcpNoDelay() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.setTcpNoDelay(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.setSendBufferSize(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.setSoLinger(boolean,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InetAddress org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.getLocalAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.getReuseAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.getSoTimeout() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SocketAddress org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.getLocalSocketAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.getKeepAlive() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.setReuseAddress(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.getTrafficClass() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SocketAddress org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.getRemoteSocketAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.getPort() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.getReceiveBufferSize() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.getSendBufferSize() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.getLocalPort() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.getSoLinger() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper.setKeepAlive(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.getEnabledProtocols() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.setEnabledProtocols(String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.getEnableSessionCreation() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.setNeedClientAuth(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.sendUrgentData(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.getEnabledCipherSuites() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$SSLOutputStream.write(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.getSupportedProtocols() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.getUseClientMode() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.getSupportedCipherSuites() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.getNeedClientAuth() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.setUseClientMode(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
OutputStream org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.getOutputStream() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.setEnableSessionCreation(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.setWantClientAuth(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.setOOBInline(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.setEnabledCipherSuites(String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.getSoTimeout() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLSession org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.getSession() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
FileDescriptor org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.getFileDescriptor$() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
InputStream org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.getInputStream() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.getWantClientAuth() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl.getSupportedCipherSuites() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl.getDefaultCipherSuites() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
KeyManager[] org.apache.harmony.xnet.provider.jsse.DefaultSSLContextImpl.getKeyManagers() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
TrustManager[] org.apache.harmony.xnet.provider.jsse.DefaultSSLContextImpl.getTrustManagers() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.ServerHelloDone.send(HandshakeIODataStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xnet.provider.jsse.ServerHelloDone.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl.getUseClientMode() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl.getWantClientAuth() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl.setEnabledProtocols(String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl.setNeedClientAuth(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl.setEnabledCipherSuites(String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl.getSupportedProtocols() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl.getSupportedCipherSuites() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl.getNeedClientAuth() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl.getEnabledCipherSuites() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
boolean org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl.getEnableSessionCreation() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl.setEnableSessionCreation(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl.setUseClientMode(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl.setWantClientAuth(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl.getEnabledProtocols() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
byte[] org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS.decrypt(byte,byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS.encrypt(byte,byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte org.apache.harmony.xnet.provider.jsse.AlertProtocol.getDescriptionCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.AlertProtocol.wrap() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.AlertProtocol.alert(byte,byte) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.xnet.provider.jsse.AlertProtocol.getAlertDescription() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xnet.provider.jsse.AbstractSessionContext.getSessionTimeout() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.AbstractSessionContext.toBytes(SSLSession) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SSLSession org.apache.harmony.xnet.provider.jsse.AbstractSessionContext.getSession(byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Enumeration org.apache.harmony.xnet.provider.jsse.AbstractSessionContext.getIds() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xnet.provider.jsse.AbstractSessionContext.getSessionCacheSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.AbstractSessionContext.setSessionTimeout(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl.getWantClientAuth() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl.getSupportedCipherSuites() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl.getSupportedProtocols() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl.getEnabledCipherSuites() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl.setUseClientMode(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl.getEnableSessionCreation() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl.setNeedClientAuth(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl.setWantClientAuth(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl.getNeedClientAuth() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl.setEnabledProtocols(String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl.setEnableSessionCreation(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl.setEnabledCipherSuites(String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl.getUseClientMode() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl.getEnabledProtocols() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
SSLSession org.apache.harmony.xnet.provider.jsse.ServerSessionContext.getSession(byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long org.apache.harmony.xnet.provider.jsse.SSLSessionImpl.getLastAccessedTime() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xnet.provider.jsse.SSLSessionImpl.getCipherSuite() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.SSLSessionImpl.putValue(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Principal org.apache.harmony.xnet.provider.jsse.SSLSessionImpl.getPeerPrincipal() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLSessionContext org.apache.harmony.xnet.provider.jsse.SSLSessionImpl.getSessionContext() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long org.apache.harmony.xnet.provider.jsse.SSLSessionImpl.getCreationTime() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xnet.provider.jsse.SSLSessionImpl.getApplicationBufferSize() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Certificate[] org.apache.harmony.xnet.provider.jsse.SSLSessionImpl.getPeerCertificates() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xnet.provider.jsse.SSLSessionImpl.getPeerPort() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object org.apache.harmony.xnet.provider.jsse.SSLSessionImpl.getValue(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Principal org.apache.harmony.xnet.provider.jsse.SSLSessionImpl.getLocalPrincipal() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] org.apache.harmony.xnet.provider.jsse.SSLSessionImpl.getId() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
X509Certificate[] org.apache.harmony.xnet.provider.jsse.SSLSessionImpl.getPeerCertificateChain() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] org.apache.harmony.xnet.provider.jsse.SSLSessionImpl.getValueNames() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xnet.provider.jsse.SSLSessionImpl.getPeerHost() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xnet.provider.jsse.SSLSessionImpl.getProtocol() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xnet.provider.jsse.SSLSessionImpl.getPacketBufferSize() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Certificate[] org.apache.harmony.xnet.provider.jsse.SSLSessionImpl.getLocalCertificates() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.CertificateMessage.send(HandshakeIODataStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xnet.provider.jsse.CertificateMessage.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.xnet.provider.jsse.CertificateMessage.getAuthType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] org.apache.harmony.xnet.provider.jsse.SSLEngineImpl.getSupportedCipherSuites() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] org.apache.harmony.xnet.provider.jsse.SSLEngineImpl.getEnabledProtocols() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String[] org.apache.harmony.xnet.provider.jsse.SSLEngineImpl.getEnabledCipherSuites() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
SSLSession org.apache.harmony.xnet.provider.jsse.SSLEngineImpl.getSession() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean org.apache.harmony.xnet.provider.jsse.SSLEngineImpl.getUseClientMode() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean org.apache.harmony.xnet.provider.jsse.SSLEngineImpl.getNeedClientAuth() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLEngineResult org.apache.harmony.xnet.provider.jsse.SSLEngineImpl.wrap(ByteBuffer[],int,int,ByteBuffer) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean org.apache.harmony.xnet.provider.jsse.SSLEngineImpl.getWantClientAuth() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Runnable org.apache.harmony.xnet.provider.jsse.SSLEngineImpl.getDelegatedTask() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] org.apache.harmony.xnet.provider.jsse.SSLEngineImpl.getSupportedProtocols() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.SSLEngineImpl.setEnabledProtocols(String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.SSLEngineImpl.setUseClientMode(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.SSLEngineImpl.setEnableSessionCreation(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.SSLEngineImpl.setEnabledCipherSuites(String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.SSLEngineImpl.setWantClientAuth(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.SSLEngineImpl.setNeedClientAuth(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean org.apache.harmony.xnet.provider.jsse.SSLEngineImpl.getEnableSessionCreation() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xnet.provider.jsse.ServerHello.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.ServerHello.getRandom() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.ServerHello.send(HandshakeIODataStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream.getMessages() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream.getDigestMD5() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream.read(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream.getDigestMD5withoutLast() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream.getDigestSHA() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream.getData(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream.getDigestSHAwithoutLast() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.SSLSocketOutputStream.write(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.SSLSocketOutputStream.write(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xnet.provider.jsse.Finished.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.Finished.getData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.Finished.send(HandshakeIODataStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean org.apache.harmony.xnet.provider.jsse.SSLParametersImpl.getNeedClientAuth() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
X509TrustManager org.apache.harmony.xnet.provider.jsse.SSLParametersImpl.getTrustManager() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ServerSessionContext org.apache.harmony.xnet.provider.jsse.SSLParametersImpl.getServerSessionContext() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
X509TrustManager org.apache.harmony.xnet.provider.jsse.SSLParametersImpl.getDefaultTrustManager() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean org.apache.harmony.xnet.provider.jsse.SSLParametersImpl.getWantClientAuth() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean org.apache.harmony.xnet.provider.jsse.SSLParametersImpl.getEnableSessionCreation() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ClientSessionContext org.apache.harmony.xnet.provider.jsse.SSLParametersImpl.getClientSessionContext() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
X509KeyManager org.apache.harmony.xnet.provider.jsse.SSLParametersImpl.getKeyManager() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
CipherSuite[] org.apache.harmony.xnet.provider.jsse.SSLParametersImpl.getEnabledCipherSuitesMember() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String[] org.apache.harmony.xnet.provider.jsse.SSLParametersImpl.getEnabledCipherSuites() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String[] org.apache.harmony.xnet.provider.jsse.SSLParametersImpl.getEnabledProtocols() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
SecureRandom org.apache.harmony.xnet.provider.jsse.SSLParametersImpl.getSecureRandom() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean org.apache.harmony.xnet.provider.jsse.SSLParametersImpl.getUseClientMode() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLParametersImpl org.apache.harmony.xnet.provider.jsse.SSLParametersImpl.getDefault() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SecureRandom org.apache.harmony.xnet.provider.jsse.SSLParametersImpl.getSecureRandomMember() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.ClientKeyExchange.send(HandshakeIODataStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xnet.provider.jsse.ClientKeyExchange.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.DHParameters.getPrime() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl.putSessionData(SSLSession,byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SSLClientSessionCache org.apache.harmony.xnet.provider.jsse.FileClientSessionCache.usingDirectory(File) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl.getSessionData(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SSLSession org.apache.harmony.xnet.provider.jsse.ClientSessionContext.getSession(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.DigitalSignature.sign() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.DigitalSignature.update(byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol.wrap(byte,byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol.getRecordSize(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol.getMinRecordSize() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLSessionImpl org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol.getSession() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol.getChangeCipherSpecMesage(SSLSessionImpl) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol.wrap(byte,DataStream) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol.alert(byte,byte) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol.getDataSize(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ProtocolVersion org.apache.harmony.xnet.provider.jsse.ProtocolVersion.getByVersion(byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ProtocolVersion org.apache.harmony.xnet.provider.jsse.ProtocolVersion.getLatestVersion(String[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ProtocolVersion org.apache.harmony.xnet.provider.jsse.ProtocolVersion.getByName(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.xnet.provider.jsse.CipherSuite.getClientKeyType(byte) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] org.apache.harmony.xnet.provider.jsse.CipherSuite.getSupportedCipherSuiteNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.xnet.provider.jsse.CipherSuite.getAuthType(boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.xnet.provider.jsse.CipherSuite.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.xnet.provider.jsse.CipherSuite.getServerKeyType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xnet.provider.jsse.CipherSuite.getMACLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.xnet.provider.jsse.CipherSuite.getHashName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CipherSuite org.apache.harmony.xnet.provider.jsse.CipherSuite.getByName(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.CipherSuite.toBytes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xnet.provider.jsse.CipherSuite.getBlockSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CipherSuite org.apache.harmony.xnet.provider.jsse.CipherSuite.getByCode(byte,byte,byte) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.xnet.provider.jsse.CipherSuite.getHmacName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.xnet.provider.jsse.CipherSuite.getBulkEncryptionAlgorithm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CipherSuite org.apache.harmony.xnet.provider.jsse.CipherSuite.getByCode(byte,byte) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CipherSuite[] org.apache.harmony.xnet.provider.jsse.CipherSuite.getSupported() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketFactoryImpl.getSupportedCipherSuites() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketFactoryImpl.getDefaultCipherSuites() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream.getData(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
RSAPublicKey org.apache.harmony.xnet.provider.jsse.ServerKeyExchange.getRSAPublicKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xnet.provider.jsse.ServerKeyExchange.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.ServerKeyExchange.send(HandshakeIODataStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.CertificateVerify.send(HandshakeIODataStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xnet.provider.jsse.CertificateVerify.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xnet.provider.jsse.ConnectionState.getContentSize(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xnet.provider.jsse.ConnectionState.getMinFragmentSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.ConnectionState.decrypt(byte,byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xnet.provider.jsse.ConnectionState.getPaddingSize(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.xnet.provider.jsse.ConnectionState.encrypt(byte,byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xnet.provider.jsse.ConnectionState.getFragmentSize(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Date org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore.getCreationDate(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Certificate org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore.getCertificate(String,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore.installCertificate(X509Certificate) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore.getCertificateAlias(Certificate) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Certificate org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore.getCertificate(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SSLException org.apache.harmony.xnet.provider.jsse.AlertException.getReason() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte org.apache.harmony.xnet.provider.jsse.AlertException.getDescriptionCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] org.apache.harmony.xnet.provider.jsse.SSLServerSocketFactoryImpl.getSupportedCipherSuites() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] org.apache.harmony.xnet.provider.jsse.SSLServerSocketFactoryImpl.getDefaultCipherSuites() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.crypto.internal.NullCipherSpi.engineUpdate(ByteBuffer,ByteBuffer) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.crypto.internal.NullCipherSpi.engineWrap(Key) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.crypto.internal.NullCipherSpi.engineDoFinal(byte[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.crypto.internal.NullCipherSpi.engineUpdate(byte[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.harmony.crypto.internal.NullCipherSpi.engineGetIV() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
short org.apache.harmony.xml.dom.CommentImpl.getNodeType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.CommentImpl.getNodeName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.DocumentTypeImpl.getTextContent() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
NamedNodeMap org.apache.harmony.xml.dom.DocumentTypeImpl.getNotations() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.DocumentTypeImpl.getName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
short org.apache.harmony.xml.dom.DocumentTypeImpl.getNodeType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.DocumentTypeImpl.getNodeName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.DocumentTypeImpl.getSystemId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.xml.dom.DocumentTypeImpl.getPublicId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NamedNodeMap org.apache.harmony.xml.dom.DocumentTypeImpl.getEntities() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.DocumentTypeImpl.getInternalSubset() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
NodeList org.apache.harmony.xml.dom.InnerNodeImpl.getChildNodes() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xml.dom.InnerNodeImpl.getElementsByTagNameNS(NodeListImpl,String,String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Node org.apache.harmony.xml.dom.InnerNodeImpl.insertChildAt(Node,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.InnerNodeImpl.getTextContent() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xml.dom.InnerNodeImpl.getTextContent(StringBuilder) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xml.dom.InnerNodeImpl.getElementsByTagName(NodeListImpl,String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Node org.apache.harmony.xml.dom.InnerNodeImpl.getNextSibling() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Node org.apache.harmony.xml.dom.InnerNodeImpl.getLastChild() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Node org.apache.harmony.xml.dom.InnerNodeImpl.getFirstChild() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object org.apache.harmony.xml.dom.NodeImpl.getFeature(String,String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
NamedNodeMap org.apache.harmony.xml.dom.NodeImpl.getAttributes() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.NodeImpl.getNodeName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.NodeImpl.getLocalName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.NodeImpl.getTextContent() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object org.apache.harmony.xml.dom.NodeImpl.setUserData(String,Object,UserDataHandler) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.xml.dom.NodeImpl.getBaseURI() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Node org.apache.harmony.xml.dom.NodeImpl.getPreviousSibling() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.NodeImpl.getNamespaceURI() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Document org.apache.harmony.xml.dom.NodeImpl.getOwnerDocument() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.NodeImpl$1.getTypeName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object org.apache.harmony.xml.dom.NodeImpl.getUserData(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.NodeImpl.getPrefix() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.NodeImpl.getNodeValue() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Node org.apache.harmony.xml.dom.NodeImpl.getLastChild() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Node org.apache.harmony.xml.dom.NodeImpl.getNextSibling() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Node org.apache.harmony.xml.dom.NodeImpl.getFirstChild() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.NodeImpl$1.getTypeNamespace() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xml.dom.NodeImpl.getTextContent(StringBuilder) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xml.dom.NodeImpl.setNodeValue(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xml.dom.NodeImpl.setPrefix(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Node org.apache.harmony.xml.dom.NodeImpl.getParentNode() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
NodeList org.apache.harmony.xml.dom.NodeImpl.getChildNodes() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xml.dom.NodeImpl.setTextContent(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Map org.apache.harmony.xml.dom.DocumentImpl.getUserDataMapForRead(NodeImpl) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.DocumentImpl.getXmlVersion() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean org.apache.harmony.xml.dom.DocumentImpl.getStrictErrorChecking() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
DocumentType org.apache.harmony.xml.dom.DocumentImpl.getDoctype() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
NodeList org.apache.harmony.xml.dom.DocumentImpl.getElementsByTagNameNS(String,String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean org.apache.harmony.xml.dom.DocumentImpl.getXmlStandalone() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.DocumentImpl.getInputEncoding() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
NodeList org.apache.harmony.xml.dom.DocumentImpl.getElementsByTagName(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
DOMConfiguration org.apache.harmony.xml.dom.DocumentImpl.getDomConfig() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.DocumentImpl.getDocumentURI() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Element org.apache.harmony.xml.dom.DocumentImpl.getElementById(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.xml.dom.DocumentImpl.getXmlEncoding() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
DOMImplementation org.apache.harmony.xml.dom.DocumentImpl.getImplementation() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
short org.apache.harmony.xml.dom.DocumentImpl.getNodeType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.DocumentImpl.getNodeName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Element org.apache.harmony.xml.dom.DocumentImpl.getDocumentElement() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.DocumentImpl.getTextContent() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Map org.apache.harmony.xml.dom.DocumentImpl.getUserDataMap(NodeImpl) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
short org.apache.harmony.xml.dom.CDATASectionImpl.getNodeType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.CDATASectionImpl.getNodeName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.EntityReferenceImpl.getNodeName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
short org.apache.harmony.xml.dom.EntityReferenceImpl.getNodeType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean org.apache.harmony.xml.dom.AttrImpl.getSpecified() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.AttrImpl.getName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
short org.apache.harmony.xml.dom.AttrImpl.getNodeType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.AttrImpl.getNodeName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.AttrImpl.getLocalName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.AttrImpl.getValue() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.AttrImpl.getPrefix() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xml.dom.AttrImpl.setPrefix(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Element org.apache.harmony.xml.dom.AttrImpl.getOwnerElement() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.AttrImpl.getNodeValue() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.AttrImpl.getNamespaceURI() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
TypeInfo org.apache.harmony.xml.dom.AttrImpl.getSchemaTypeInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xml.dom.NodeListImpl.getLength() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Node org.apache.harmony.xml.dom.LeafNodeImpl.getParentNode() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Node org.apache.harmony.xml.dom.LeafNodeImpl.getPreviousSibling() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Node org.apache.harmony.xml.dom.LeafNodeImpl.getNextSibling() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.DocumentFragmentImpl.getNodeName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
short org.apache.harmony.xml.dom.DocumentFragmentImpl.getNodeType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.TextImpl.getWholeText() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
short org.apache.harmony.xml.dom.TextImpl.getNodeType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.TextImpl.getNodeName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object org.apache.harmony.xml.dom.DOMConfigurationImpl$5.get(DOMConfigurationImpl) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object org.apache.harmony.xml.dom.DOMConfigurationImpl$11.get(DOMConfigurationImpl) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object org.apache.harmony.xml.dom.DOMConfigurationImpl$7.get(DOMConfigurationImpl) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter.get(DOMConfigurationImpl) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xml.dom.DOMConfigurationImpl.setParameter(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.xml.dom.DOMConfigurationImpl$3.get(DOMConfigurationImpl) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object org.apache.harmony.xml.dom.DOMConfigurationImpl$2.get(DOMConfigurationImpl) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object org.apache.harmony.xml.dom.DOMConfigurationImpl$6.get(DOMConfigurationImpl) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
DOMStringList org.apache.harmony.xml.dom.DOMConfigurationImpl.getParameterNames() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object org.apache.harmony.xml.dom.DOMConfigurationImpl$8.get(DOMConfigurationImpl) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object org.apache.harmony.xml.dom.DOMConfigurationImpl$10.get(DOMConfigurationImpl) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object org.apache.harmony.xml.dom.DOMConfigurationImpl$12.get(DOMConfigurationImpl) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object org.apache.harmony.xml.dom.DOMConfigurationImpl.getParameter(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object org.apache.harmony.xml.dom.DOMConfigurationImpl$9.get(DOMConfigurationImpl) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object org.apache.harmony.xml.dom.DOMConfigurationImpl$4.get(DOMConfigurationImpl) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter.set(DOMConfigurationImpl,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.xml.dom.ProcessingInstructionImpl.getNodeValue() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.ProcessingInstructionImpl.getNodeName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
short org.apache.harmony.xml.dom.ProcessingInstructionImpl.getNodeType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.ProcessingInstructionImpl.getData() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.ProcessingInstructionImpl.getTarget() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xml.dom.CharacterDataImpl.getLength() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xml.dom.CharacterDataImpl.setData(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.xml.dom.CharacterDataImpl.getNodeValue() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.CharacterDataImpl.getData() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Node org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl.getNamedItem(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
NodeList org.apache.harmony.xml.dom.ElementImpl.getElementsByTagNameNS(String,String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xml.dom.ElementImpl.setIdAttribute(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xml.dom.ElementImpl.setAttribute(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.xml.dom.ElementImpl.getNamespaceURI() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl.getLength() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
TypeInfo org.apache.harmony.xml.dom.ElementImpl.getSchemaTypeInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Element org.apache.harmony.xml.dom.ElementImpl.getElementById(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.xml.dom.ElementImpl.getPrefix() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Node org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl.getNamedItemNS(String,String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.ElementImpl.getTagName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
AttrImpl org.apache.harmony.xml.dom.ElementImpl.getAttributeNode(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.ElementImpl.getNodeName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.ElementImpl.getAttribute(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xml.dom.ElementImpl.setIdAttributeNS(String,String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xml.dom.ElementImpl.setAttributeNS(String,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
NodeList org.apache.harmony.xml.dom.ElementImpl.getElementsByTagName(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
AttrImpl org.apache.harmony.xml.dom.ElementImpl.getAttributeNodeNS(String,String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.ElementImpl.getLocalName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
NamedNodeMap org.apache.harmony.xml.dom.ElementImpl.getAttributes() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
short org.apache.harmony.xml.dom.ElementImpl.getNodeType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xml.dom.ElementImpl.setPrefix(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.xml.dom.ElementImpl.getAttributeNS(String,String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
DOMLocator org.apache.harmony.xml.dom.DOMErrorImpl.getLocation() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
short org.apache.harmony.xml.dom.DOMErrorImpl.getSeverity() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object org.apache.harmony.xml.dom.DOMErrorImpl.getRelatedData() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Node org.apache.harmony.xml.dom.DOMErrorImpl$1.getRelatedNode() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object org.apache.harmony.xml.dom.DOMErrorImpl.getRelatedException() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.DOMErrorImpl$1.getUri() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.DOMErrorImpl.getType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.dom.DOMErrorImpl.getMessage() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object org.apache.harmony.xml.dom.DOMImplementationImpl.getFeature(String,String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
DOMImplementationImpl org.apache.harmony.xml.dom.DOMImplementationImpl.getInstance() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.ExpatAttributes.getLocalName(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xml.ExpatAttributes.getIndex(String,String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.ExpatAttributes.getType(String,String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.ExpatAttributes.getQName(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.ExpatAttributes.getType(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.ExpatAttributes.getValue(String,String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.ExpatAttributes.getValue(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.ExpatAttributes.getValue(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xml.ExpatAttributes.getIndex(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.ExpatAttributes.getURI(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.ExpatAttributes.getType(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Document org.apache.harmony.xml.parsers.DocumentBuilderImpl.parse(InputSource) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Document org.apache.harmony.xml.parsers.DocumentBuilderImpl.newDocument() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
DOMImplementation org.apache.harmony.xml.parsers.DocumentBuilderImpl.getDOMImplementation() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl.setAttribute(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl.getAttribute(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl.getFeature(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl.setFeature(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.xml.ExpatParser.startElement(String,String,String,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xml.ExpatParser$ClonedAttributes.getParserPointer() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xml.ExpatParser$CurrentAttributes.getPointer() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xml.ExpatParser$EntityParser.startElement(String,String,String,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xml.ExpatParser$ClonedAttributes.getLength() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xml.ExpatParser.startDtd(String,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xml.ExpatParser$ExpatLocator.getColumnNumber() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xml.ExpatParser$ClonedAttributes.getPointer() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xml.ExpatParser$CurrentAttributes.getParserPointer() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.harmony.xml.ExpatParser$ExpatLocator.getPublicId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.xml.ExpatParser$ExpatLocator.getSystemId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.harmony.xml.ExpatParser$CurrentAttributes.getLength() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.harmony.xml.ExpatParser$ExpatLocator.getLineNumber() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xml.ExpatParser.startNamespace(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ErrorHandler org.apache.harmony.xml.ExpatReader.getErrorHandler() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
EntityResolver org.apache.harmony.xml.ExpatReader.getEntityResolver() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object org.apache.harmony.xml.ExpatReader.getProperty(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ContentHandler org.apache.harmony.xml.ExpatReader.getContentHandler() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
LexicalHandler org.apache.harmony.xml.ExpatReader.getLexicalHandler() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
DTDHandler org.apache.harmony.xml.ExpatReader.getDTDHandler() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.harmony.xml.ExpatReader.setProperty(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.harmony.dalvik.ddmc.DdmServer.registerHandler(int,ChunkHandler) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.dalvik.ddmc.ChunkHandler.getString(ByteBuffer,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TimezoneGetter org.apache.harmony.luni.internal.util.TimezoneGetter.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ImplForVariable org.apache.harmony.luni.lang.reflect.GenericSignatureParser.parseTypeVariableSignature() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ListOfTypes org.apache.harmony.luni.lang.reflect.GenericSignatureParser.parseOptTypeArguments() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Type org.apache.harmony.luni.lang.reflect.GenericSignatureParser.parseFieldTypeSignature() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ImplForVariable org.apache.harmony.luni.lang.reflect.GenericSignatureParser.parseFormalTypeParameter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Type org.apache.harmony.luni.lang.reflect.GenericSignatureParser.parseTypeSignature() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Type org.apache.harmony.luni.lang.reflect.GenericSignatureParser.parseReturnType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Type org.apache.harmony.luni.lang.reflect.GenericSignatureParser.parseClassTypeSignature() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Type org.apache.harmony.luni.lang.reflect.GenericSignatureParser.parseTypeArgument() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Type org.apache.harmony.luni.lang.reflect.ImplForType.getResolvedType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Type org.apache.harmony.luni.lang.reflect.ImplForType.getOwnerType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Type[] org.apache.harmony.luni.lang.reflect.ImplForType.getActualTypeArguments() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class org.apache.harmony.luni.lang.reflect.ImplForType.getRawType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Type org.apache.harmony.luni.lang.reflect.ImplForArray.getGenericComponentType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TypeVariable[] org.apache.harmony.luni.lang.reflect.ListOfVariables.getArray() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.harmony.luni.lang.reflect.ImplForVariable.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Type[] org.apache.harmony.luni.lang.reflect.ImplForVariable.getBounds() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Type[] org.apache.harmony.luni.lang.reflect.Types.getClonedTypeArray(ListOfTypes) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Type[] org.apache.harmony.luni.lang.reflect.ListOfTypes.getResolvedTypes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Type[] org.apache.harmony.luni.lang.reflect.ImplForWildcard.getLowerBounds() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Type[] org.apache.harmony.luni.lang.reflect.ImplForWildcard.getUpperBounds() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DeleteOnExit org.apache.harmony.luni.util.DeleteOnExit.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Socket org.apache.http.conn.ssl.SSLSocketFactory.createSocket() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
X509HostnameVerifier org.apache.http.conn.ssl.SSLSocketFactory.getHostnameVerifier() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLSocketFactory org.apache.http.conn.ssl.SSLSocketFactory.getSocketFactory() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] org.apache.http.conn.ssl.AbstractVerifier.getDNSSubjectAlts(X509Certificate) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] org.apache.http.conn.ssl.AbstractVerifier.getCNs(X509Certificate) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
InputStream org.apache.http.conn.BasicManagedEntity.getContent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpHost org.apache.http.conn.routing.HttpRoute.getTargetHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpHost org.apache.http.conn.routing.HttpRoute.getProxyHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress org.apache.http.conn.routing.HttpRoute.getLocalAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.conn.routing.HttpRoute.getHopCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpHost org.apache.http.conn.routing.HttpRoute.getHopTarget(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpHost org.apache.http.conn.routing.RouteTracker.getTargetHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.conn.routing.RouteTracker.getHopCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress org.apache.http.conn.routing.RouteTracker.getLocalAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpHost org.apache.http.conn.routing.RouteTracker.getProxyHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpHost org.apache.http.conn.routing.RouteTracker.getHopTarget(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpHost org.apache.http.conn.HttpHostConnectException.getHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.conn.scheme.Scheme.getDefaultPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.conn.scheme.Scheme.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SocketFactory org.apache.http.conn.scheme.Scheme.getSocketFactory() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Socket org.apache.http.conn.scheme.PlainSocketFactory.connectSocket(Socket,String,int,InetAddress,int,HttpParams) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PlainSocketFactory org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List org.apache.http.conn.scheme.SchemeRegistry.getSchemeNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Scheme org.apache.http.conn.scheme.SchemeRegistry.getScheme(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Scheme org.apache.http.conn.scheme.SchemeRegistry.get(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Scheme org.apache.http.conn.scheme.SchemeRegistry.getScheme(HttpHost) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Scheme org.apache.http.conn.scheme.SchemeRegistry.register(Scheme) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List org.apache.http.auth.AuthSchemeRegistry.getSchemeNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Credentials org.apache.http.auth.AuthState.getCredentials() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AuthScheme org.apache.http.auth.AuthState.getAuthScheme() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AuthScope org.apache.http.auth.AuthState.getAuthScope() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.auth.AuthScope.getRealm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.auth.AuthScope.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.auth.AuthScope.getHost() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.http.auth.AuthScope.getScheme() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.HttpHost.getHostName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.http.HttpHost.getSchemeName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.HttpHost.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.cookie.CookieOrigin.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.cookie.CookieOrigin.getHost() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String org.apache.http.cookie.CookieOrigin.getPath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List org.apache.http.cookie.CookieSpecRegistry.getSpecNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.http.impl.conn.DefaultClientConnection.openCompleted(boolean,HttpParams) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
HttpHost org.apache.http.impl.conn.DefaultClientConnection.getTargetHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Socket org.apache.http.impl.conn.DefaultClientConnection.getSocket() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.http.impl.conn.DefaultClientConnection.update(Socket,HttpHost,boolean,HttpParams) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.http.impl.conn.AbstractPoolEntry.getState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ManagedClientConnection org.apache.http.impl.conn.SingleClientConnManager.getConnection(HttpRoute,Object) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ClientConnectionOperator org.apache.http.impl.conn.SingleClientConnManager.createConnectionOperator(SchemeRegistry) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SchemeRegistry org.apache.http.impl.conn.SingleClientConnManager.getSchemeRegistry() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpTransportMetrics org.apache.http.impl.conn.LoggingSessionInputBuffer.getMetrics() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpTransportMetrics org.apache.http.impl.conn.LoggingSessionOutputBuffer.getMetrics() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.http.impl.conn.LoggingSessionOutputBuffer.write(byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.http.impl.conn.LoggingSessionOutputBuffer.write(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.http.impl.conn.LoggingSessionOutputBuffer.write(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
HttpResponse org.apache.http.impl.conn.AbstractClientConnAdapter.receiveResponseHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
OperatedClientConnection org.apache.http.impl.conn.AbstractClientConnAdapter.getWrappedConnection() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void org.apache.http.impl.conn.AbstractClientConnAdapter.setSocketTimeout(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SSLSession org.apache.http.impl.conn.AbstractClientConnAdapter.getSSLSession() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.impl.conn.AbstractClientConnAdapter.getLocalPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.http.impl.conn.AbstractClientConnAdapter.setIdleDuration(long,TimeUnit) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ClientConnectionManager org.apache.http.impl.conn.AbstractClientConnAdapter.getManager() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress org.apache.http.impl.conn.AbstractClientConnAdapter.getRemoteAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.impl.conn.AbstractClientConnAdapter.getRemotePort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpConnectionMetrics org.apache.http.impl.conn.AbstractClientConnAdapter.getMetrics() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress org.apache.http.impl.conn.AbstractClientConnAdapter.getLocalAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.impl.conn.AbstractClientConnAdapter.getSocketTimeout() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.impl.conn.ProxySelectorRoutePlanner.getHost(InetSocketAddress) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ProxySelector org.apache.http.impl.conn.ProxySelectorRoutePlanner.getProxySelector() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.http.impl.conn.AbstractPooledConnAdapter.getState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpRoute org.apache.http.impl.conn.AbstractPooledConnAdapter.getRoute() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.impl.conn.tsccm.ConnPoolByRoute.getConnectionsInPool(HttpRoute) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
BasicPoolEntry org.apache.http.impl.conn.tsccm.ConnPoolByRoute.getFreeEntry(RouteSpecificPool,Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RouteSpecificPool org.apache.http.impl.conn.tsccm.ConnPoolByRoute.getRoutePool(HttpRoute,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BasicPoolEntry org.apache.http.impl.conn.tsccm.ConnPoolByRoute.getEntryBlocking(HttpRoute,Object,long,TimeUnit,WaitingThreadAborter) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Thread org.apache.http.impl.conn.tsccm.WaitingThread.getThread() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Condition org.apache.http.impl.conn.tsccm.WaitingThread.getCondition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RouteSpecificPool org.apache.http.impl.conn.tsccm.WaitingThread.getPool() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AbstractPoolEntry org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter.getPoolEntry() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ClientConnectionManager org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter.getManager() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.impl.conn.tsccm.RouteSpecificPool.getMaxEntries() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.impl.conn.tsccm.RouteSpecificPool.getEntryCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.impl.conn.tsccm.RouteSpecificPool.getCapacity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpRoute org.apache.http.impl.conn.tsccm.RouteSpecificPool.getRoute() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpRoute org.apache.http.impl.conn.tsccm.BasicPoolEntryRef.getRoute() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ManagedClientConnection org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager$1.getConnection(long,TimeUnit) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SchemeRegistry org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.getSchemeRegistry() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.getConnectionsInPool(HttpRoute) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ClientConnectionOperator org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.createConnectionOperator(SchemeRegistry) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.getConnectionsInPool() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
BasicPoolEntryRef org.apache.http.impl.conn.tsccm.BasicPoolEntry.getWeakRef() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
OperatedClientConnection org.apache.http.impl.conn.tsccm.BasicPoolEntry.getConnection() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
HttpRoute org.apache.http.impl.conn.tsccm.BasicPoolEntry.getPlannedRoute() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BasicPoolEntry org.apache.http.impl.conn.tsccm.AbstractConnPool.getEntry(HttpRoute,Object,long,TimeUnit) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.impl.auth.DigestScheme.createCnonce() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.impl.auth.DigestScheme.getSchemeName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.impl.auth.BasicScheme.getSchemeName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.impl.auth.RFC2617Scheme.getRealm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Map org.apache.http.impl.auth.RFC2617Scheme.getParameters() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.impl.EnglishReasonPhraseCatalog.getReason(int,Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long org.apache.http.impl.HttpConnectionMetricsImpl.getReceivedBytesCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long org.apache.http.impl.HttpConnectionMetricsImpl.getResponseCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long org.apache.http.impl.HttpConnectionMetricsImpl.getRequestCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long org.apache.http.impl.HttpConnectionMetricsImpl.getSentBytesCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SimpleDateFormat org.apache.http.impl.cookie.DateUtils$DateFormatHolder.formatFor(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.impl.cookie.BasicClientCookie.getCommentURL() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.http.impl.cookie.BasicClientCookie.setDomain(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.impl.cookie.BasicClientCookie.getVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.impl.cookie.BasicClientCookie.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Date org.apache.http.impl.cookie.BasicClientCookie.getExpiryDate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int[] org.apache.http.impl.cookie.BasicClientCookie.getPorts() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.impl.cookie.BasicClientCookie.getPath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.impl.cookie.BasicClientCookie.getComment() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.impl.cookie.BasicClientCookie.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.impl.cookie.BasicClientCookie.getDomain() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int[] org.apache.http.impl.cookie.BasicClientCookie2.getPorts() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.impl.cookie.BasicClientCookie2.getCommentURL() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.impl.cookie.RFC2965Spec.getVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Header org.apache.http.impl.cookie.RFC2965Spec.getVersionHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.impl.cookie.RFC2109Spec.getVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Header org.apache.http.impl.cookie.RFC2109Spec.getVersionHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Header org.apache.http.impl.cookie.BestMatchSpec.getVersionHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.impl.cookie.BestMatchSpec.getVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Collection org.apache.http.impl.cookie.AbstractCookieSpec.getAttribHandlers() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.impl.cookie.NetscapeDraftSpec.getVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Header org.apache.http.impl.cookie.NetscapeDraftSpec.getVersionHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.impl.cookie.BrowserCompatSpec.getVersion() - @DSSource({DSSourceKind.BROWSER_INFORMATION})
Header org.apache.http.impl.cookie.BrowserCompatSpec.getVersionHeader() - @DSSource({DSSourceKind.BROWSER_INFORMATION})
HttpRequest org.apache.http.impl.client.RequestWrapper.getOriginal() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.impl.client.RequestWrapper.getExecCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
URI org.apache.http.impl.client.RequestWrapper.getURI() - @DSSource({DSSourceKind.FILE_INFORMATION})
RequestLine org.apache.http.impl.client.RequestWrapper.getRequestLine() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ProtocolVersion org.apache.http.impl.client.RequestWrapper.getProtocolVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.impl.client.RequestWrapper.getMethod() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.impl.client.DefaultHttpRequestRetryHandler.getRetryCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpEntity org.apache.http.impl.client.EntityEnclosingRequestWrapper.getEntity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List org.apache.http.impl.client.AbstractAuthenticationHandler.getAuthPreferences() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List org.apache.http.impl.client.BasicCookieStore.getCookies() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RoutedRequest org.apache.http.impl.client.DefaultRequestDirector.handleResponse(RoutedRequest,HttpResponse,HttpContext) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
HttpRoute org.apache.http.impl.client.DefaultRequestDirector.determineRoute(HttpHost,HttpRequest,HttpContext) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpResponse org.apache.http.impl.client.DefaultRequestDirector.execute(HttpHost,HttpRequest,HttpContext) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy.getKeepAliveDuration(HttpResponse,HttpContext) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RequestWrapper org.apache.http.impl.client.RoutedRequest.getRequest() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpRoute org.apache.http.impl.client.RoutedRequest.getRoute() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpParams org.apache.http.impl.client.ClientParamsStack.getOverrideParams() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpParams org.apache.http.impl.client.ClientParamsStack.getClientParams() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.http.impl.client.ClientParamsStack.getParameter(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpParams org.apache.http.impl.client.ClientParamsStack.getApplicationParams() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpParams org.apache.http.impl.client.ClientParamsStack.getRequestParams() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpParams org.apache.http.impl.client.ClientParamsStack.setParameter(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
HttpResponse org.apache.http.impl.client.TunnelRefusedException.getResponse() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpRequestInterceptor org.apache.http.impl.client.AbstractHttpClient.getRequestInterceptor(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CookieStore org.apache.http.impl.client.AbstractHttpClient.getCookieStore() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpResponse org.apache.http.impl.client.AbstractHttpClient.execute(HttpUriRequest) - @DSSink({DSSinkKind.NETWORK})
RedirectHandler org.apache.http.impl.client.AbstractHttpClient.getRedirectHandler() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ConnectionReuseStrategy org.apache.http.impl.client.AbstractHttpClient.getConnectionReuseStrategy() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
AuthenticationHandler org.apache.http.impl.client.AbstractHttpClient.getProxyAuthenticationHandler() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpResponse org.apache.http.impl.client.AbstractHttpClient.execute(HttpUriRequest,HttpContext) - @DSSink({DSSinkKind.NETWORK})
HttpRoutePlanner org.apache.http.impl.client.AbstractHttpClient.getRoutePlanner() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AuthenticationHandler org.apache.http.impl.client.AbstractHttpClient.getTargetAuthenticationHandler() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CookieSpecRegistry org.apache.http.impl.client.AbstractHttpClient.getCookieSpecs() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpResponse org.apache.http.impl.client.AbstractHttpClient.execute(HttpHost,HttpRequest) - @DSSink({DSSinkKind.NETWORK})
HttpRequestRetryHandler org.apache.http.impl.client.AbstractHttpClient.getHttpRequestRetryHandler() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ConnectionKeepAliveStrategy org.apache.http.impl.client.AbstractHttpClient.getConnectionKeepAliveStrategy() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int org.apache.http.impl.client.AbstractHttpClient.getRequestInterceptorCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AuthSchemeRegistry org.apache.http.impl.client.AbstractHttpClient.getAuthSchemes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpResponse org.apache.http.impl.client.AbstractHttpClient.execute(HttpHost,HttpRequest,HttpContext) - @DSSink({DSSinkKind.NETWORK})
ClientConnectionManager org.apache.http.impl.client.AbstractHttpClient.getConnectionManager() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
HttpRequestExecutor org.apache.http.impl.client.AbstractHttpClient.getRequestExecutor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
UserTokenHandler org.apache.http.impl.client.AbstractHttpClient.getUserTokenHandler() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CredentialsProvider org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpResponseInterceptor org.apache.http.impl.client.AbstractHttpClient.getResponseInterceptor(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.impl.client.AbstractHttpClient.getResponseInterceptorCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BasicHttpProcessor org.apache.http.impl.client.AbstractHttpClient.getHttpProcessor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpParams org.apache.http.impl.client.AbstractHttpClient.getParams() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.http.impl.io.IdentityOutputStream.write(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.http.impl.io.IdentityOutputStream.write(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.http.impl.io.IdentityOutputStream.write(byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
HttpTransportMetrics org.apache.http.impl.io.AbstractSessionOutputBuffer.getMetrics() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long org.apache.http.impl.io.HttpTransportMetricsImpl.getBytesTransferred() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.http.impl.io.ChunkedOutputStream.write(byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.http.impl.io.ChunkedOutputStream.flushCacheWithAppend(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
HttpMessage org.apache.http.impl.io.AbstractMessageParser.parse() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.impl.io.AbstractSessionInputBuffer.readLine() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpTransportMetrics org.apache.http.impl.io.AbstractSessionInputBuffer.getMetrics() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Header[] org.apache.http.impl.io.ChunkedInputStream.getFooters() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.http.impl.io.ContentLengthOutputStream.write(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.http.impl.io.ContentLengthOutputStream.write(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void org.apache.http.impl.io.ContentLengthOutputStream.write(byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean org.apache.http.impl.AbstractHttpClientConnection.isResponseAvailable(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpResponse org.apache.http.impl.AbstractHttpClientConnection.receiveResponseHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
EntitySerializer org.apache.http.impl.AbstractHttpClientConnection.createEntitySerializer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpConnectionMetrics org.apache.http.impl.AbstractHttpClientConnection.getMetrics() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpResponseFactory org.apache.http.impl.AbstractHttpClientConnection.createHttpResponseFactory() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
EntityDeserializer org.apache.http.impl.AbstractHttpClientConnection.createEntityDeserializer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress org.apache.http.impl.SocketHttpClientConnection.getLocalAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.impl.SocketHttpClientConnection.getSocketTimeout() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Socket org.apache.http.impl.SocketHttpClientConnection.getSocket() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.impl.SocketHttpClientConnection.getLocalPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.http.impl.SocketHttpClientConnection.setSocketTimeout(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InetAddress org.apache.http.impl.SocketHttpClientConnection.getRemoteAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.impl.SocketHttpClientConnection.getRemotePort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.client.methods.HttpGet.getMethod() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.http.client.methods.HttpRequestBase.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RequestLine org.apache.http.client.methods.HttpRequestBase.getRequestLine() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ProtocolVersion org.apache.http.client.methods.HttpRequestBase.getProtocolVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
URI org.apache.http.client.methods.HttpRequestBase.getURI() - @DSSource({DSSourceKind.FILE_INFORMATION})
HttpEntity org.apache.http.client.methods.HttpEntityEnclosingRequestBase.getEntity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.http.client.methods.HttpEntityEnclosingRequestBase.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.client.methods.HttpPost.getMethod() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long org.apache.http.entity.BasicHttpEntity.getContentLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream org.apache.http.entity.BasicHttpEntity.getContent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream org.apache.http.entity.BufferedHttpEntity.getContent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long org.apache.http.entity.BufferedHttpEntity.getContentLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream org.apache.http.entity.InputStreamEntity.getContent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long org.apache.http.entity.InputStreamEntity.getContentLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream org.apache.http.entity.ByteArrayEntity.getContent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long org.apache.http.entity.ByteArrayEntity.getContentLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Header org.apache.http.entity.HttpEntityWrapper.getContentType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Header org.apache.http.entity.HttpEntityWrapper.getContentEncoding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.http.entity.HttpEntityWrapper.writeTo(OutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InputStream org.apache.http.entity.HttpEntityWrapper.getContent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long org.apache.http.entity.HttpEntityWrapper.getContentLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Header org.apache.http.entity.AbstractHttpEntity.getContentEncoding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Header org.apache.http.entity.AbstractHttpEntity.getContentType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long org.apache.http.entity.StringEntity.getContentLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream org.apache.http.entity.StringEntity.getContent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpResponseInterceptor org.apache.http.protocol.BasicHttpProcessor.getResponseInterceptor(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.protocol.BasicHttpProcessor.getResponseInterceptorCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.protocol.BasicHttpProcessor.getRequestInterceptorCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpRequestInterceptor org.apache.http.protocol.BasicHttpProcessor.getRequestInterceptor(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpContext org.apache.http.protocol.DefaultedHttpContext.getDefaults() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.message.BasicNameValuePair.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.message.BasicNameValuePair.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.message.BasicStatusLine.getStatusCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.message.BasicStatusLine.getReasonPhrase() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ProtocolVersion org.apache.http.message.BasicStatusLine.getProtocolVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HeaderElement[] org.apache.http.message.BufferedHeader.getElements() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.message.BufferedHeader.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.message.BufferedHeader.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharArrayBuffer org.apache.http.message.BufferedHeader.getBuffer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.message.BufferedHeader.getValuePos() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.message.BasicRequestLine.getUri() - @DSSource({DSSourceKind.FILE_INFORMATION})
ProtocolVersion org.apache.http.message.BasicRequestLine.getProtocolVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.message.BasicRequestLine.getMethod() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Locale org.apache.http.message.BasicHttpResponse.getLocale() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpEntity org.apache.http.message.BasicHttpResponse.getEntity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.http.message.BasicHttpResponse.setReasonPhrase(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.message.BasicHttpResponse.getReason(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ProtocolVersion org.apache.http.message.BasicHttpResponse.getProtocolVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.http.message.BasicHttpResponse.setStatusCode(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
StatusLine org.apache.http.message.BasicHttpResponse.getStatusLine() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HeaderElement[] org.apache.http.message.BasicHeader.getElements() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.message.BasicHeader.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.message.BasicHeader.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.message.BasicHeaderElement.getParameterCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NameValuePair[] org.apache.http.message.BasicHeaderElement.getParameters() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.message.BasicHeaderElement.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.message.BasicHeaderElement.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NameValuePair org.apache.http.message.BasicHeaderElement.getParameter(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ProtocolVersion org.apache.http.message.BasicHttpRequest.getProtocolVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RequestLine org.apache.http.message.BasicHttpRequest.getRequestLine() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Header org.apache.http.message.HeaderGroup.getFirstHeader(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Header[] org.apache.http.message.HeaderGroup.getAllHeaders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Header[] org.apache.http.message.HeaderGroup.getHeaders(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Header org.apache.http.message.HeaderGroup.getLastHeader(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Header org.apache.http.message.HeaderGroup.getCondensedHeader(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void org.apache.http.message.HeaderGroup.setHeaders(Header[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.message.ParserCursor.getPos() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.message.ParserCursor.getUpperBound() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.message.ParserCursor.getLowerBound() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpEntity org.apache.http.message.BasicHttpEntityEnclosingRequest.getEntity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HeaderIterator org.apache.http.message.AbstractHttpMessage.headerIterator() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Header[] org.apache.http.message.AbstractHttpMessage.getAllHeaders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpParams org.apache.http.message.AbstractHttpMessage.getParams() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.http.util.ByteArrayBuffer.toByteArray() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.http.util.ByteArrayBuffer.buffer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.util.VersionInfo.getRelease() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.util.VersionInfo.getPackage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.util.VersionInfo.getModule() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.util.VersionInfo.getTimestamp() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.util.VersionInfo.getClassloader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.ProtocolVersion.getMajor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int org.apache.http.ProtocolVersion.getMinor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String org.apache.http.ProtocolVersion.getProtocol() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Throwable org.apache.commons.logging.LogConfigurationException.getCause() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Logger org.apache.commons.logging.impl.Jdk14Logger.getLogger() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
LogFactory org.apache.commons.logging.LogFactory.getFactory() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Log org.apache.commons.logging.LogFactory.getLog(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Log org.apache.commons.logging.LogFactory.getLog(Class) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ClassLoader org.apache.commons.logging.LogFactory.getClassLoader(Class) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object org.apache.commons.logging.LogFactory$2.run() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ClassLoader org.apache.commons.logging.LogFactory.getContextClassLoader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.commons.codec.binary.Hex.decode(byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.commons.codec.binary.Hex.encode(byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.commons.codec.binary.Base64.discardNonBase64(byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.commons.codec.binary.Base64.decode(byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.commons.codec.binary.Base64.discardWhitespace(byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] org.apache.commons.codec.binary.Base64.encode(byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Callback javax.security.auth.callback.UnsupportedCallbackException.getCallback() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char[] javax.security.auth.callback.PasswordCallback.getPassword() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String javax.security.auth.callback.PasswordCallback.getPrompt() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] javax.security.auth.x500.X500Principal.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String javax.security.auth.x500.X500Principal.getName(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String javax.security.auth.x500.X500Principal.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String javax.security.auth.x500.X500Principal.getName(String,Map) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] javax.security.cert.X509Certificate$1.getSigAlgParams() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Date javax.security.cert.X509Certificate$1.getNotBefore() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
X509Certificate javax.security.cert.X509Certificate.getInstance(byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
X509Certificate javax.security.cert.X509Certificate.getInstance(InputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Date javax.security.cert.X509Certificate$1.getNotAfter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Principal javax.security.cert.X509Certificate$1.getSubjectDN() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String javax.security.cert.X509Certificate$1.getSigAlgName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger javax.security.cert.X509Certificate$1.getSerialNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String javax.security.cert.X509Certificate$1.getSigAlgOID() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Principal javax.security.cert.X509Certificate$1.getIssuerDN() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] javax.security.cert.X509Certificate$1.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PublicKey javax.security.cert.X509Certificate$1.getPublicKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void javax.crypto.CipherOutputStream.write(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object javax.crypto.MacSpi.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String javax.crypto.KeyGenerator.getAlgorithm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Provider javax.crypto.KeyGenerator.getProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Provider javax.crypto.SecretKeyFactory.getProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String javax.crypto.SecretKeyFactory.getAlgorithm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
KeySpec javax.crypto.SecretKeyFactory.getKeySpec(SecretKey,Class) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int javax.crypto.spec.PBEKeySpec.getKeyLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] javax.crypto.spec.PBEKeySpec.getSalt() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char[] javax.crypto.spec.PBEKeySpec.getPassword() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int javax.crypto.spec.PBEKeySpec.getIterationCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger javax.crypto.spec.DHPublicKeySpec.getG() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger javax.crypto.spec.DHPublicKeySpec.getY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger javax.crypto.spec.DHPublicKeySpec.getP() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int javax.crypto.spec.DHParameterSpec.getL() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger javax.crypto.spec.DHParameterSpec.getG() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BigInteger javax.crypto.spec.DHParameterSpec.getP() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] javax.crypto.spec.IvParameterSpec.getIV() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] javax.crypto.spec.SecretKeySpec.getEncoded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String javax.crypto.spec.SecretKeySpec.getAlgorithm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String javax.crypto.spec.SecretKeySpec.getFormat() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Key javax.crypto.CipherSpi.engineUnwrap(byte[],String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int javax.crypto.CipherSpi.engineUpdate(ByteBuffer,ByteBuffer) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] javax.crypto.CipherSpi.engineWrap(Key) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int javax.crypto.CipherSpi.engineDoFinal(ByteBuffer,ByteBuffer) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] javax.crypto.Mac.doFinal(byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] javax.crypto.Mac.doFinal() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int javax.crypto.Mac.getMacLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Provider javax.crypto.Mac.getProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String javax.crypto.Mac.getAlgorithm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ExemptionMechanism javax.crypto.Cipher.getExemptionMechanism() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AlgorithmParameterSpec javax.crypto.Cipher.getMaxAllowedParameterSpec(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] javax.crypto.Cipher.update(byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] javax.crypto.Cipher.getIV() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String javax.crypto.Cipher.getAlgorithm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AlgorithmParameters javax.crypto.Cipher.getParameters() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] javax.crypto.Cipher.doFinal(byte[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int javax.crypto.Cipher.getOutputSize(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] javax.crypto.Cipher.doFinal(byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] javax.crypto.Cipher.update(byte[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int javax.crypto.Cipher.getBlockSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] javax.crypto.Cipher.doFinal() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Provider javax.crypto.Cipher.getProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String javax.crypto.KeyAgreement.getAlgorithm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Provider javax.crypto.KeyAgreement.getProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] javax.crypto.KeyAgreement.generateSecret() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
EGL javax.microedition.khronos.egl.EGLContext.getEGL() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Schema javax.xml.parsers.DocumentBuilderFactory.getSchema() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void javax.xml.parsers.DocumentBuilderFactory.setSchema(Schema) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String javax.xml.parsers.FactoryConfigurationError.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Exception javax.xml.parsers.FactoryConfigurationError.getException() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Document javax.xml.parsers.DocumentBuilder.parse(InputStream,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Document javax.xml.parsers.DocumentBuilder.parse(InputStream) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Schema javax.xml.parsers.DocumentBuilder.getSchema() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Document javax.xml.parsers.DocumentBuilder.parse(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Document javax.xml.parsers.DocumentBuilder.parse(File) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int javax.net.ssl.SSLEngine.getPeerPort() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLEngineResult javax.net.ssl.SSLEngine.wrap(ByteBuffer,ByteBuffer) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void javax.net.ssl.SSLEngine.setSSLParameters(SSLParameters) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SSLEngineResult javax.net.ssl.SSLEngine.unwrap(ByteBuffer,ByteBuffer) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String javax.net.ssl.SSLEngine.getPeerHost() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLParameters javax.net.ssl.SSLEngine.getSSLParameters() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLEngineResult javax.net.ssl.SSLEngine.unwrap(ByteBuffer,ByteBuffer[]) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLEngineResult javax.net.ssl.SSLEngine.wrap(ByteBuffer[],ByteBuffer) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SocketFactory javax.net.ssl.SSLSocketFactory.getDefault() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Provider javax.net.ssl.SSLContext.getProvider() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLServerSocketFactory javax.net.ssl.SSLContext.getServerSocketFactory() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLSessionContext javax.net.ssl.SSLContext.getClientSessionContext() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLContext javax.net.ssl.SSLContext.getDefault() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLContext javax.net.ssl.SSLContext.getInstance(String,String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLParameters javax.net.ssl.SSLContext.getSupportedSSLParameters() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void javax.net.ssl.SSLContext.setDefault(SSLContext) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SSLSocketFactory javax.net.ssl.SSLContext.getSocketFactory() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String javax.net.ssl.SSLContext.getProtocol() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLContext javax.net.ssl.SSLContext.getInstance(String,Provider) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLSessionContext javax.net.ssl.SSLContext.getServerSessionContext() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLContext javax.net.ssl.SSLContext.getInstance(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLParameters javax.net.ssl.SSLContext.getDefaultSSLParameters() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean javax.net.ssl.SSLParameters.getNeedClientAuth() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] javax.net.ssl.SSLParameters.getCipherSuites() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] javax.net.ssl.SSLParameters.getProtocols() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void javax.net.ssl.SSLParameters.setCipherSuites(String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean javax.net.ssl.SSLParameters.getWantClientAuth() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void javax.net.ssl.SSLParameters.setProtocols(String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SSLParameters javax.net.ssl.SSLSocket.getSSLParameters() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void javax.net.ssl.SSLSocket.setSSLParameters(SSLParameters) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ServerSocketFactory javax.net.ssl.SSLServerSocketFactory.getDefault() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLParameters javax.net.ssl.SSLContextSpi.engineGetSupportedSSLParameters() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLParameters javax.net.ssl.SSLContextSpi.engineGetDefaultSSLParameters() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLSocket javax.net.ssl.HandshakeCompletedEvent.getSocket() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Principal javax.net.ssl.HandshakeCompletedEvent.getPeerPrincipal() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLSession javax.net.ssl.HandshakeCompletedEvent.getSession() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Certificate[] javax.net.ssl.HandshakeCompletedEvent.getPeerCertificates() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Certificate[] javax.net.ssl.HandshakeCompletedEvent.getLocalCertificates() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Principal javax.net.ssl.HandshakeCompletedEvent.getLocalPrincipal() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
X509Certificate[] javax.net.ssl.HandshakeCompletedEvent.getPeerCertificateChain() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String javax.net.ssl.HandshakeCompletedEvent.getCipherSuite() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
TrustManager[] javax.net.ssl.TrustManagerFactory.getTrustManagers() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Provider javax.net.ssl.TrustManagerFactory.getProvider() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String javax.net.ssl.TrustManagerFactory.getAlgorithm() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] javax.net.ssl.DefaultSSLServerSocketFactory.getDefaultCipherSuites() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] javax.net.ssl.DefaultSSLServerSocketFactory.getSupportedCipherSuites() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String javax.net.ssl.X509ExtendedKeyManager.chooseEngineServerAlias(String,Principal[],SSLEngine) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String javax.net.ssl.X509ExtendedKeyManager.chooseEngineClientAlias(String[],Principal[],SSLEngine) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Principal javax.net.ssl.HttpsURLConnection.getLocalPrincipal() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Principal javax.net.ssl.HttpsURLConnection.getPeerPrincipal() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
HostnameVerifier javax.net.ssl.HttpsURLConnection.getHostnameVerifier() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
HostnameVerifier javax.net.ssl.HttpsURLConnection.getDefaultHostnameVerifier() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLSocketFactory javax.net.ssl.HttpsURLConnection.getSSLSocketFactory() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLSocketFactory javax.net.ssl.HttpsURLConnection.getDefaultSSLSocketFactory() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] javax.net.ssl.DefaultSSLSocketFactory.getDefaultCipherSuites() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] javax.net.ssl.DefaultSSLSocketFactory.getSupportedCipherSuites() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String javax.net.ssl.KeyManagerFactory.getAlgorithm() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
KeyManager[] javax.net.ssl.KeyManagerFactory.getKeyManagers() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Provider javax.net.ssl.KeyManagerFactory.getProvider() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLSession javax.net.ssl.SSLSessionBindingEvent.getSession() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String javax.net.ssl.SSLSessionBindingEvent.getName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Socket javax.net.SocketFactory.createSocket() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SocketFactory javax.net.SocketFactory.getDefault() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ServerSocketFactory javax.net.ServerSocketFactory.getDefault() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ServerSocket javax.net.ServerSocketFactory.createServerSocket() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Request javax.sip.RequestEvent.getRequest() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Dialog javax.sip.RequestEvent.getDialog() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ServerTransaction javax.sip.RequestEvent.getServerTransaction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int javax.sip.IOExceptionEvent.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String javax.sip.IOExceptionEvent.getHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String javax.sip.IOExceptionEvent.getTransport() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DialogState javax.sip.DialogState.getObject(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int javax.sip.DialogState.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Timeout javax.sip.TimeoutEvent.getTimeout() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Dialog javax.sip.DialogTerminatedEvent.getDialog() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SipStack javax.sip.SipFactory.createSipStack(Properties) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SipFactory javax.sip.SipFactory.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Dialog javax.sip.ResponseEvent.getDialog() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ClientTransaction javax.sip.ResponseEvent.getClientTransaction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Response javax.sip.ResponseEvent.getResponse() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ClientTransaction javax.sip.TransactionTerminatedEvent.getClientTransaction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ServerTransaction javax.sip.TransactionTerminatedEvent.getServerTransaction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.internal.StringPool.get(char[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NativeBreakIterator libcore.icu.NativeBreakIterator.getLineInstance(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NativeBreakIterator libcore.icu.NativeBreakIterator.getWordInstance(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharacterIterator libcore.icu.NativeBreakIterator.getText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.icu.NativeBreakIterator.setText(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
NativeBreakIterator libcore.icu.NativeBreakIterator.getSentenceInstance(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NativeBreakIterator libcore.icu.NativeBreakIterator.getCharacterInstance(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.icu.NativeDecimalFormat.setParseIntegerOnly(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void libcore.icu.NativeDecimalFormat.setNegativeSuffix(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void libcore.icu.NativeDecimalFormat.setMinimumFractionDigits(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void libcore.icu.NativeDecimalFormat.setGroupingUsed(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String libcore.icu.NativeDecimalFormat.getNegativePrefix() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.icu.NativeDecimalFormat.setDecimalSeparatorAlwaysShown(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void libcore.icu.NativeDecimalFormat.setNegativePrefix(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int libcore.icu.NativeDecimalFormat.getMultiplier() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.icu.NativeDecimalFormat.getMinimumFractionDigits() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.icu.NativeDecimalFormat.setMaximumFractionDigits(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void libcore.icu.NativeDecimalFormat.setPositiveSuffix(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void libcore.icu.NativeDecimalFormat.setMultiplier(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int libcore.icu.NativeDecimalFormat.getGroupingSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.icu.NativeDecimalFormat.setMinimumIntegerDigits(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int libcore.icu.NativeDecimalFormat.getMinimumIntegerDigits() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.icu.NativeDecimalFormat.setGroupingSize(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String libcore.icu.NativeDecimalFormat.getPositiveSuffix() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.icu.NativeDecimalFormat.setCurrency(Currency) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void libcore.icu.NativeDecimalFormat.setPositivePrefix(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String libcore.icu.NativeDecimalFormat.getNegativeSuffix() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.icu.NativeDecimalFormat.getMaximumIntegerDigits() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.icu.NativeDecimalFormat.getPositivePrefix() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.icu.NativeDecimalFormat.getMaximumFractionDigits() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.icu.NativeDecimalFormat.setMaximumIntegerDigits(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void libcore.icu.NativeDecimalFormat.setRoundingMode(RoundingMode,double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CollationElementIteratorICU libcore.icu.CollationElementIteratorICU.getInstance(int,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.icu.CollationElementIteratorICU.setText(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int libcore.icu.CollationElementIteratorICU.getOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.icu.CollationElementIteratorICU.setOffset(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int libcore.icu.CollationElementIteratorICU.getMaxExpansion(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[][] libcore.icu.TimeZones.getZoneStrings(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.icu.TimeZones.getDisplayName(String[][],String,boolean,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] libcore.icu.ICU.getISOCountries() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Locale[] libcore.icu.ICU.getAvailableCalendarLocales() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] libcore.icu.ICU.getISOLanguages() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Locale[] libcore.icu.ICU.getAvailableDecimalFormatSymbolsLocales() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Locale[] libcore.icu.ICU.getAvailableCollatorLocales() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Locale[] libcore.icu.ICU.getAvailableNumberFormatLocales() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Locale[] libcore.icu.ICU.getAvailableDateFormatLocales() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Locale[] libcore.icu.ICU.getAvailableDateFormatSymbolsLocales() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Locale[] libcore.icu.ICU.getAvailableBreakIteratorLocales() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Locale[] libcore.icu.ICU.getAvailableLocales() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] libcore.icu.CollationKeyICU.toByteArray() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.icu.RuleBasedCollatorICU.setDecomposition(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CollationKey libcore.icu.RuleBasedCollatorICU.getCollationKey(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CollationElementIteratorICU libcore.icu.RuleBasedCollatorICU.getCollationElementIterator(CharacterIterator) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.icu.RuleBasedCollatorICU.getStrength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.icu.RuleBasedCollatorICU.setAttribute(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int libcore.icu.RuleBasedCollatorICU.getAttribute(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.icu.RuleBasedCollatorICU.getDecomposition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.icu.RuleBasedCollatorICU.setStrength(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String libcore.icu.RuleBasedCollatorICU.getRules() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CollationElementIteratorICU libcore.icu.RuleBasedCollatorICU.getCollationElementIterator(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.icu.LocaleData.getTimeFormat(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
LocaleData libcore.icu.LocaleData.get(Locale) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.icu.LocaleData.getDateFormat(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.io.GaiException.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.io.Streams.copy(InputStream,OutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] libcore.io.Streams.readFullyNoClose(InputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String libcore.io.Streams.readFully(Reader) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int libcore.io.Posix.sendto(FileDescriptor,byte[],int,int,int,InetAddress,int) - @DSSink({DSSinkKind.FILE})
int libcore.io.Posix.write(FileDescriptor,ByteBuffer) - @DSSink({DSSinkKind.FILE})
int libcore.io.Posix.write(FileDescriptor,byte[],int,int) - @DSSink({DSSinkKind.FILE})
int libcore.io.Posix.sendto(FileDescriptor,ByteBuffer,int,InetAddress,int) - @DSSink({DSSinkKind.FILE})
void libcore.io.IoUtils.setBlocking(FileDescriptor,boolean) - @DSSink({DSSinkKind.FILE})
String libcore.io.ErrnoException.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.io.IoBridge.bind(FileDescriptor,InetAddress,int) - @DSSink({DSSinkKind.FILE})
int libcore.io.IoBridge.sendto(FileDescriptor,byte[],int,int,int,InetAddress,int) - @DSSink({DSSinkKind.FILE})
InetAddress libcore.io.IoBridge.getSocketLocalAddress(FileDescriptor) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.io.IoBridge.getSocketLocalPort(FileDescriptor) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.io.IoBridge.sendto(FileDescriptor,ByteBuffer,int,InetAddress,int) - @DSSink({DSSinkKind.FILE})
Object libcore.io.IoBridge.getSocketOption(FileDescriptor,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.io.IoBridge.write(FileDescriptor,byte[],int,int) - @DSSink({DSSinkKind.FILE})
void libcore.io.IoBridge.setSocketOption(FileDescriptor,int,Object) - @DSSink({DSSinkKind.FILE})
void libcore.io.ForwardingOs.setsockoptTimeval(FileDescriptor,int,int,StructTimeval) - @DSSink({DSSinkKind.FILE})
int libcore.io.ForwardingOs.getppid() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.io.ForwardingOs.getuid() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.io.ForwardingOs.writev(FileDescriptor,Object[],int[],int[]) - @DSSink({DSSinkKind.FILE})
void libcore.io.ForwardingOs.setsockoptLinger(FileDescriptor,int,int,StructLinger) - @DSSink({DSSinkKind.FILE})
void libcore.io.ForwardingOs.setsockoptIfreq(FileDescriptor,int,int,String) - @DSSink({DSSinkKind.FILE})
void libcore.io.ForwardingOs.setuid(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void libcore.io.ForwardingOs.bind(FileDescriptor,InetAddress,int) - @DSSink({DSSinkKind.FILE})
void libcore.io.ForwardingOs.seteuid(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void libcore.io.ForwardingOs.setgid(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
StructTimeval libcore.io.ForwardingOs.getsockoptTimeval(FileDescriptor,int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.io.ForwardingOs.geteuid() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
StructLinger libcore.io.ForwardingOs.getsockoptLinger(FileDescriptor,int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.io.ForwardingOs.setsockoptInt(FileDescriptor,int,int,int) - @DSSink({DSSinkKind.FILE})
int libcore.io.ForwardingOs.write(FileDescriptor,ByteBuffer) - @DSSink({DSSinkKind.FILE})
FileDescriptor libcore.io.ForwardingOs.open(String,int,int) - @DSSink({DSSinkKind.FILE})
InetAddress libcore.io.ForwardingOs.getsockoptInAddr(FileDescriptor,int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.io.ForwardingOs.getsockoptByte(FileDescriptor,int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.io.ForwardingOs.setegid(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int libcore.io.ForwardingOs.getsockoptInt(FileDescriptor,int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.io.ForwardingOs.getpid() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.io.ForwardingOs.setsockoptByte(FileDescriptor,int,int,int) - @DSSink({DSSinkKind.FILE})
void libcore.io.ForwardingOs.setsockoptGroupReq(FileDescriptor,int,int,StructGroupReq) - @DSSink({DSSinkKind.FILE})
InetAddress libcore.io.ForwardingOs.ioctlInetAddress(FileDescriptor,int,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.io.ForwardingOs.sendto(FileDescriptor,byte[],int,int,int,InetAddress,int) - @DSSink({DSSinkKind.FILE})
int libcore.io.ForwardingOs.sendto(FileDescriptor,ByteBuffer,int,InetAddress,int) - @DSSink({DSSinkKind.FILE})
StructPasswd libcore.io.ForwardingOs.getpwuid(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InetAddress[] libcore.io.ForwardingOs.getaddrinfo(String,StructAddrinfo) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.io.ForwardingOs.write(FileDescriptor,byte[],int,int) - @DSSink({DSSinkKind.FILE})
void libcore.io.ForwardingOs.setsockoptIpMreqn(FileDescriptor,int,int,int) - @DSSink({DSSinkKind.FILE})
StructPasswd libcore.io.ForwardingOs.getpwnam(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long libcore.io.ForwardingOs.sendfile(FileDescriptor,FileDescriptor,MutableLong,long) - @DSSink({DSSinkKind.FILE})
int libcore.io.ForwardingOs.getegid() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SocketAddress libcore.io.ForwardingOs.getsockname(FileDescriptor) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.io.ForwardingOs.getenv(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.io.ForwardingOs.getnameinfo(InetAddress,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.io.ForwardingOs.getgid() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.io.BlockGuardOs.write(FileDescriptor,ByteBuffer) - @DSSink({DSSinkKind.FILE})
FileDescriptor libcore.io.BlockGuardOs.open(String,int,int) - @DSSink({DSSinkKind.FILE})
int libcore.io.BlockGuardOs.write(FileDescriptor,byte[],int,int) - @DSSink({DSSinkKind.FILE})
int libcore.io.BlockGuardOs.sendto(FileDescriptor,ByteBuffer,int,InetAddress,int) - @DSSink({DSSinkKind.FILE})
int libcore.io.BlockGuardOs.writev(FileDescriptor,Object[],int[],int[]) - @DSSink({DSSinkKind.FILE})
int libcore.io.BlockGuardOs.sendto(FileDescriptor,byte[],int,int,int,InetAddress,int) - @DSSink({DSSinkKind.FILE})
int libcore.util.ZoneInfo.getOffset(int,int,int,int,int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.util.ZoneInfo.getOffset(long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.util.ZoneInfo.getRawOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.util.ZoneInfoDB.getVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] libcore.util.ZoneInfoDB.getAvailableIDs(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TimeZone libcore.util.ZoneInfoDB.getSystemDefault() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] libcore.util.ZoneInfoDB.getAvailableIDs() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object libcore.util.BasicLruCache.get(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.UriCodec.validate(String,int,int,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
OutputStream libcore.net.http.HttpConnection.getOutputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.HttpConnection.setupSecureSocket(SSLSocketFactory,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Proxy libcore.net.http.HttpConnection$Address.getProxy() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Socket libcore.net.http.HttpConnection.getSocket() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SSLSocket libcore.net.http.HttpConnection.getSecureSocketIfConnected() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.HttpConnection.setSoTimeout(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InputStream libcore.net.http.HttpConnection.getInputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.HttpConnectionPool.recycle(HttpConnection) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int libcore.net.http.HttpHandler.getDefaultPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.RawHeaders.getFieldName(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.RawHeaders.get(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.net.http.RawHeaders.getHttpMinorVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.RawHeaders.setStatusLine(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int libcore.net.http.RawHeaders.getResponseCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RawHeaders libcore.net.http.RawHeaders.getAll(Set) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.RawHeaders.getStatusLine() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.RawHeaders.set(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.RawHeaders.getValue(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.RawHeaders.getResponseMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.HttpEngine.getOriginAddress(URL) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream libcore.net.http.HttpEngine.getResponseBody() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CacheResponse libcore.net.http.HttpEngine.getCacheResponse() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RawHeaders libcore.net.http.HttpEngine.getNetworkRequestHeaders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpConnection libcore.net.http.HttpEngine.getConnection() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.net.http.HttpEngine.getResponseCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Map libcore.net.http.HttpEngine$1.getHeaders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
OutputStream libcore.net.http.HttpEngine.getRequestBody() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream libcore.net.http.HttpEngine$1.getBody() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.HttpEngine.getDefaultUserAgent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpURLConnection libcore.net.http.HttpEngine.getHttpConnectionToCache() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RequestHeaders libcore.net.http.HttpEngine.getRequestHeaders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ResponseHeaders libcore.net.http.HttpEngine.getResponseHeaders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
OutputStream libcore.net.http.HttpURLConnectionImpl.getOutputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Permission libcore.net.http.HttpURLConnectionImpl.getPermission() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpEngine libcore.net.http.HttpURLConnectionImpl.getHttpEngine() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.net.http.HttpURLConnectionImpl.getChunkLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Map libcore.net.http.HttpURLConnectionImpl.getRequestProperties() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.net.http.HttpURLConnectionImpl.getFixedContentLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream libcore.net.http.HttpURLConnectionImpl.getInputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.HttpURLConnectionImpl.setRequestProperty(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.HttpURLConnectionImpl.getResponseMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.net.http.HttpURLConnectionImpl.getDefaultPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Map libcore.net.http.HttpURLConnectionImpl.getHeaderFields() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream libcore.net.http.HttpURLConnectionImpl.getErrorStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Proxy libcore.net.http.HttpURLConnectionImpl.getProxy() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.ChunkedOutputStream.write(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.AbstractHttpInputStream.cacheWrite(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int libcore.net.http.HttpsHandler.getDefaultPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.RequestHeaders.getUserAgent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.net.http.RequestHeaders.getMinFreshSeconds() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.net.http.RequestHeaders.getMaxAgeSeconds() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.net.http.RequestHeaders.getContentLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.RequestHeaders.getIfNoneMatch() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.RequestHeaders.getHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.RequestHeaders.getContentType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.RequestHeaders.getConnection() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String libcore.net.http.RequestHeaders.getAcceptEncoding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.net.http.RequestHeaders.getMaxStaleSeconds() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.RequestHeaders.getIfModifiedSince() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.RequestHeaders.getTransferEncoding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.RequestHeaders.setIfModifiedSince(Date) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
URI libcore.net.http.RequestHeaders.getUri() - @DSSource({DSSourceKind.FILE_INFORMATION})
RawHeaders libcore.net.http.RequestHeaders.getHeaders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.RequestHeaders.getProxyAuthorization() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.FixedLengthOutputStream.write(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Date libcore.net.http.ResponseHeaders.getExpires() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.ResponseHeaders.getContentEncoding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
URI libcore.net.http.ResponseHeaders.getUri() - @DSSource({DSSourceKind.FILE_INFORMATION})
Date libcore.net.http.ResponseHeaders.getLastModified() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Set libcore.net.http.ResponseHeaders.getVaryFields() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.net.http.ResponseHeaders.getMaxAgeSeconds() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RawHeaders libcore.net.http.ResponseHeaders.getHeaders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Date libcore.net.http.ResponseHeaders.getServedDate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.net.http.ResponseHeaders.getSMaxAgeSeconds() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.net.http.ResponseHeaders.getContentLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.ResponseHeaders.getEtag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.ResponseHeaders.getConnection() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Map libcore.net.http.HttpsURLConnectionImpl.getHeaderFields() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.HttpsURLConnectionImpl.setUseCaches(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.HttpsURLConnectionImpl.setDoInput(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
HttpURLConnection libcore.net.http.HttpsURLConnectionImpl$HttpsEngine.getHttpConnectionToCache() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.HttpsURLConnectionImpl.getCipherSuite() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.HttpsURLConnectionImpl.getContentType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long libcore.net.http.HttpsURLConnectionImpl.getDate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long libcore.net.http.HttpsURLConnectionImpl.getExpiration() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.HttpsURLConnectionImpl.setReadTimeout(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Map libcore.net.http.HttpsURLConnectionImpl.getRequestProperties() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.HttpsURLConnectionImpl.setInstanceFollowRedirects(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.HttpsURLConnectionImpl.setDefaultUseCaches(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long libcore.net.http.HttpsURLConnectionImpl.getLastModified() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream libcore.net.http.HttpsURLConnectionImpl.getErrorStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Certificate[] libcore.net.http.HttpsURLConnectionImpl.getLocalCertificates() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.HttpsURLConnectionImpl.getHeaderField(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.HttpsURLConnectionImpl.getRequestProperty(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.HttpsURLConnectionImpl.setFixedLengthStreamingMode(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int libcore.net.http.HttpsURLConnectionImpl.getContentLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.HttpsURLConnectionImpl.setDoOutput(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.HttpsURLConnectionImpl.getHeaderField(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Permission libcore.net.http.HttpsURLConnectionImpl.getPermission() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.HttpsURLConnectionImpl.getContentEncoding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.HttpsURLConnectionImpl.setChunkedStreamingMode(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
URL libcore.net.http.HttpsURLConnectionImpl.getURL() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object libcore.net.http.HttpsURLConnectionImpl.getContent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Certificate[] libcore.net.http.HttpsURLConnectionImpl.getServerCertificates() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.net.http.HttpsURLConnectionImpl.getConnectTimeout() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.HttpsURLConnectionImpl.setIfModifiedSince(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SecureCacheResponse libcore.net.http.HttpsURLConnectionImpl$HttpUrlConnectionDelegate.getCacheResponse() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long libcore.net.http.HttpsURLConnectionImpl.getHeaderFieldDate(String,long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.net.http.HttpsURLConnectionImpl.getResponseCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.net.http.HttpsURLConnectionImpl.getReadTimeout() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.HttpsURLConnectionImpl.setRequestProperty(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long libcore.net.http.HttpsURLConnectionImpl.getIfModifiedSince() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
OutputStream libcore.net.http.HttpsURLConnectionImpl.getOutputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RawHeaders libcore.net.http.HttpsURLConnectionImpl$ProxyConnectEngine.getNetworkRequestHeaders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HttpEngine libcore.net.http.HttpsURLConnectionImpl.getHttpEngine() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Principal libcore.net.http.HttpsURLConnectionImpl.getLocalPrincipal() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.HttpsURLConnectionImpl.getHeaderFieldKey(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Principal libcore.net.http.HttpsURLConnectionImpl.getPeerPrincipal() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.HttpsURLConnectionImpl.setConnectTimeout(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.HttpsURLConnectionImpl.setRequestMethod(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.HttpsURLConnectionImpl.getRequestMethod() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream libcore.net.http.HttpsURLConnectionImpl.getInputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SSLSocket libcore.net.http.HttpsURLConnectionImpl$HttpUrlConnectionDelegate.getSSLSocket() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.http.HttpsURLConnectionImpl.getResponseMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object libcore.net.http.HttpsURLConnectionImpl.getContent(Class[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.HttpsURLConnectionImpl.setAllowUserInteraction(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.RetryableOutputStream.write(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.http.RetryableOutputStream.writeToSocket(OutputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Permission libcore.net.url.JarURLConnectionImpl.getPermission() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.url.JarURLConnectionImpl.getContentType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object libcore.net.url.JarURLConnectionImpl.getContent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.net.url.JarURLConnectionImpl.getContentLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
JarFile libcore.net.url.JarURLConnectionImpl.openJarFile() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream libcore.net.url.JarURLConnectionImpl.getInputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.url.JarURLConnectionImpl.setDefaultUseCaches(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean libcore.net.url.JarURLConnectionImpl.getUseCaches() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean libcore.net.url.JarURLConnectionImpl.getDefaultUseCaches() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
JarFile libcore.net.url.JarURLConnectionImpl.getJarFile() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void libcore.net.url.JarURLConnectionImpl.setUseCaches(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
JarEntry libcore.net.url.JarURLConnectionImpl.getJarEntry() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.net.url.FtpHandler.getDefaultPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int libcore.net.url.FileURLConnection.getContentLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream libcore.net.url.FileURLConnection.getInputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Permission libcore.net.url.FileURLConnection.getPermission() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.url.FileURLConnection.getContentType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.url.UrlUtils.getSchemePrefix(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Permission libcore.net.url.FtpURLConnection.getPermission() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String libcore.net.url.FtpURLConnection.getContentType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
OutputStream libcore.net.url.FtpURLConnection.getOutputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream libcore.net.url.FtpURLConnection.getInputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CloseGuard dalvik.system.CloseGuard.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long dalvik.system.VMRuntime.getExternalBytesAllocated() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long dalvik.system.VMRuntime.setMinimumHeapSize(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long dalvik.system.VMRuntime.getMinimumHeapSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float dalvik.system.VMRuntime.setTargetHeapUtilization(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
VMRuntime dalvik.system.VMRuntime.getRuntime() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int dalvik.system.BlockGuard$BlockGuardPolicyException.getPolicyViolation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String dalvik.system.BlockGuard$BlockGuardPolicyException.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int dalvik.system.BlockGuard$BlockGuardPolicyException.getPolicy() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String dalvik.system.DexFile.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HprofData dalvik.system.profiler.SamplingProfiler.getHprofData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
StackTraceElement[] dalvik.system.profiler.PortableThreadSampler.getStackTrace(Thread) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Set dalvik.system.profiler.HprofData.getSamples() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long dalvik.system.profiler.HprofData.getStartMillis() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int dalvik.system.profiler.HprofData.getDepth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int dalvik.system.profiler.HprofData$StackTrace.getThreadId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
StackTraceElement[] dalvik.system.profiler.HprofData$StackTrace.getStackFrames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int dalvik.system.profiler.HprofData.getFlags() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List dalvik.system.profiler.HprofData.getThreadHistory() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SocketTagger dalvik.system.SocketTagger.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void dalvik.system.VMDebug.startMethodTracing(String,int,int) - @DSSink({DSSinkKind.FILE})
void dalvik.system.VMDebug.startMethodTracing(String,FileDescriptor,int,int) - @DSSink({DSSinkKind.FILE})
Package dalvik.system.BaseDexClassLoader.getPackage(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
PrintStream junit.textui.ResultPrinter.getWriter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void junit.textui.ResultPrinter.printFooter(TestResult) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Test junit.runner.BaseTestRunner.getTest(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String junit.runner.BaseTestRunner.getFilteredTrace(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String junit.runner.BaseTestRunner.processArguments(String[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Properties junit.runner.BaseTestRunner.getPreferences() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class junit.runner.BaseTestRunner.loadSuiteClass(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String junit.runner.BaseTestRunner.getPreference(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TestSuiteLoader junit.runner.BaseTestRunner.getLoader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String junit.runner.BaseTestRunner.getFilteredTrace(Throwable) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void junit.runner.BaseTestRunner.setPreference(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int junit.runner.BaseTestRunner.getPreference(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class junit.runner.StandardTestSuiteLoader.load(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TestResult junit.framework.TestCase.createResult() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String junit.framework.TestCase.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TestResult junit.framework.TestCase.run() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String junit.framework.TestCase.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String junit.framework.ComparisonFailure.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String junit.framework.TestSuite.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Constructor junit.framework.TestSuite.getTestConstructor(Class) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.telephony.gsm.GsmCellLocation.getPsc() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int android.telephony.gsm.GsmCellLocation.getCid() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int android.telephony.gsm.GsmCellLocation.getLac() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
CellLocation android.telephony.CellLocation.getEmpty() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
String android.telephony.TelephonyManager.getSimOperatorName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.telephony.TelephonyManager.getLine1Number() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String android.telephony.TelephonyManager.getMsisdn() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
int android.telephony.TelephonyManager.getSimState() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.telephony.TelephonyManager.getDeviceSoftwareVersion() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
int android.telephony.TelephonyManager.getDataActivity() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.telephony.TelephonyManager.getSubscriberId() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
int android.telephony.TelephonyManager.getVoiceMessageCount() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
CellLocation android.telephony.TelephonyManager.getCellLocation() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int android.telephony.TelephonyManager.getCdmaEriIconMode() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.telephony.TelephonyManager.getLine1AlphaTag() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
int android.telephony.TelephonyManager.getNetworkType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] android.telephony.TelephonyManager.getIsimImpu() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.telephony.TelephonyManager.getSimOperator() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
List android.telephony.TelephonyManager.getNeighboringCellInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.telephony.TelephonyManager.getSimCountryIso() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.TelephonyManager.getNetworkClass(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.telephony.TelephonyManager.getVoiceMailNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String android.telephony.TelephonyManager.getNetworkTypeName(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.TelephonyManager.getDataState() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.TelephonyManager.getPhoneType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.telephony.TelephonyManager.getVoiceMailAlphaTag() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String android.telephony.TelephonyManager.getNetworkOperator() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.telephony.TelephonyManager.getCompleteVoiceMailNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
int android.telephony.TelephonyManager.getLteOnCdmaMode() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.telephony.TelephonyManager.getIsimDomain() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String android.telephony.TelephonyManager.getDeviceId() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String android.telephony.TelephonyManager.getCdmaEriText() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
TelephonyManager android.telephony.TelephonyManager.getDefault() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.telephony.TelephonyManager.getNetworkOperatorName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.telephony.TelephonyManager.getNetworkCountryIso() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.telephony.TelephonyManager.getNetworkTypeName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.TelephonyManager.getCurrentPhoneType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.TelephonyManager.getCdmaEriIconIndex() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.telephony.TelephonyManager.getSimSerialNumber() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String android.telephony.TelephonyManager.getIsimImpi() - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
int android.telephony.TelephonyManager.getCallState() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.SignalStrength.getDbm() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.SignalStrength.getEvdoSnr() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.SignalStrength.getCdmaLevel() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.SignalStrength.getAsuLevel() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.SignalStrength.getCdmaAsuLevel() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.SignalStrength.getLteDbm() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.SignalStrength.getLteLevel() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.SignalStrength.getGsmDbm() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.SignalStrength.getEvdoDbm() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.SignalStrength.getGsmBitErrorRate() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.SignalStrength.getEvdoAsuLevel() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.SignalStrength.getLteAsuLevel() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.SignalStrength.getEvdoEcio() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.SignalStrength.getGsmSignalStrength() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.telephony.SignalStrength.toString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.SignalStrength.getCdmaEcio() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.SignalStrength.getCdmaDbm() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.SignalStrength.getGsmLevel() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.SignalStrength.getGsmAsuLevel() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.SignalStrength.getEvdoLevel() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.SignalStrength.getLevel() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.SmsMessage.getStatusOnSim() - @DSSource({DSSourceKind.SMS_MMS})
String android.telephony.SmsMessage.getOriginatingAddress() - @DSSource({DSSourceKind.SMS_MMS})
String android.telephony.SmsMessage$SubmitPdu.toString() - @DSSource({DSSourceKind.SMS_MMS})
SmsMessage android.telephony.SmsMessage.createFromPdu(byte[],String) - @DSSource({DSSourceKind.SMS_MMS})
int android.telephony.SmsMessage.getStatusOnIcc() - @DSSource({DSSourceKind.SMS_MMS})
long android.telephony.SmsMessage.getTimestampMillis() - @DSSource({DSSourceKind.SMS_MMS})
int android.telephony.SmsMessage.getIndexOnSim() - @DSSource({DSSourceKind.SMS_MMS})
String android.telephony.SmsMessage.getEmailBody() - @DSSource({DSSourceKind.SMS_MMS})
String android.telephony.SmsMessage.getDisplayOriginatingAddress() - @DSSource({DSSourceKind.SMS_MMS})
int android.telephony.SmsMessage.getIndexOnIcc() - @DSSource({DSSourceKind.SMS_MMS})
SmsMessage android.telephony.SmsMessage.createFromPdu(byte[]) - @DSSource({DSSourceKind.SMS_MMS})
String android.telephony.SmsMessage.getServiceCenterAddress() - @DSSource({DSSourceKind.SMS_MMS})
SmsMessage android.telephony.SmsMessage.createFromEfRecord(int,byte[]) - @DSSource({DSSourceKind.SMS_MMS})
String android.telephony.SmsMessage.getDisplayMessageBody() - @DSSource({DSSourceKind.SMS_MMS})
String android.telephony.SmsMessage.getMessageBody() - @DSSource({DSSourceKind.SMS_MMS})
String android.telephony.SmsMessage.getEmailFrom() - @DSSource({DSSourceKind.SMS_MMS})
byte[] android.telephony.SmsMessage.getPdu() - @DSSource({DSSourceKind.SMS_MMS})
int android.telephony.SmsMessage.getTPLayerLengthForPDU(String) - @DSSource({DSSourceKind.SMS_MMS})
int android.telephony.SmsMessage.getStatus() - @DSSource({DSSourceKind.SMS_MMS})
int android.telephony.SmsMessage.getProtocolIdentifier() - @DSSource({DSSourceKind.SMS_MMS})
String android.telephony.SmsMessage.getPseudoSubject() - @DSSource({DSSourceKind.SMS_MMS})
byte[] android.telephony.SmsMessage.getUserData() - @DSSource({DSSourceKind.SMS_MMS})
int android.telephony.cdma.CdmaCellLocation.getNetworkId() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int android.telephony.cdma.CdmaCellLocation.getBaseStationLatitude() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int android.telephony.cdma.CdmaCellLocation.getBaseStationLongitude() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int android.telephony.cdma.CdmaCellLocation.getSystemId() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int android.telephony.cdma.CdmaCellLocation.getBaseStationId() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int android.telephony.PhoneNumberUtils.getFormatTypeForLocale(Locale) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] android.telephony.PhoneNumberUtils.networkPortionToCalledPartyBCD(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] android.telephony.PhoneNumberUtils.numberToCalledPartyBCD(String) - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String android.telephony.PhoneNumberUtils.getNumberFromIntent(Intent,Context) - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
String android.telephony.PhoneNumberUtils.getUsernameFromUriNumber(String) - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
byte[] android.telephony.PhoneNumberUtils.networkPortionToCalledPartyBCDWithLength(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.telephony.PhoneNumberUtils.getStrippedReversed(String) - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER})
ArrayList android.telephony.SmsManager.divideMessage(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.telephony.SmsManager.sendTextMessage(String,String,String,PendingIntent,PendingIntent) - @DSSink({DSSinkKind.SMS_MMS})
boolean android.telephony.SmsManager.updateMessageOnIcc(int,int,byte[]) - @DSSink({DSSinkKind.SMS_MMS})
boolean android.telephony.SmsManager.disableCellBroadcast(int) - @DSSink({DSSinkKind.SMS_MMS})
SmsManager android.telephony.SmsManager.getDefault() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.telephony.SmsManager.enableCellBroadcast(int) - @DSSink({DSSinkKind.SMS_MMS})
boolean android.telephony.SmsManager.disableCellBroadcastRange(int,int) - @DSSink({DSSinkKind.SMS_MMS})
ArrayList android.telephony.SmsManager.getAllMessagesFromIcc() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.telephony.SmsManager.enableCellBroadcastRange(int,int) - @DSSink({DSSinkKind.SMS_MMS})
void android.telephony.SmsManager.sendDataMessage(String,String,short,byte[],PendingIntent,PendingIntent) - @DSSink({DSSinkKind.SMS_MMS})
boolean android.telephony.SmsManager.deleteMessageFromIcc(int) - @DSSink({DSSinkKind.SMS_MMS})
boolean android.telephony.SmsManager.copyMessageToIcc(byte[],byte[],int) - @DSSink({DSSinkKind.SMS_MMS})
int android.telephony.NeighboringCellInfo.getRssi() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.NeighboringCellInfo.getNetworkType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.NeighboringCellInfo.getPsc() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.telephony.NeighboringCellInfo.toString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.NeighboringCellInfo.getCid() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.NeighboringCellInfo.getLac() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.ServiceState.getSystemId() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.ServiceState.getRadioTechnology() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.ServiceState.getCdmaEriIconMode() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.ServiceState.getCssIndicator() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.ServiceState.getState() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.telephony.ServiceState.setCssIndicator(int) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
boolean android.telephony.ServiceState.getRoaming() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.telephony.ServiceState.setStateOutOfService() - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
int android.telephony.ServiceState.getCdmaEriIconIndex() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.telephony.ServiceState.toString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.telephony.ServiceState.getOperatorAlphaLong() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.telephony.ServiceState.getOperatorNumeric() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.ServiceState.getNetworkId() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.telephony.ServiceState.setStateOff() - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
int android.telephony.ServiceState.getCdmaDefaultRoamingIndicator() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.telephony.ServiceState.getOperatorAlphaShort() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.telephony.ServiceState.getCdmaRoamingIndicator() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.telephony.ServiceState.getIsManualSelection() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Rect android.appwidget.AppWidgetHostView.getDefaultPaddingForWidget(Context,ComponentName,Rect) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.appwidget.AppWidgetHostView.getAppWidgetId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AppWidgetProviderInfo android.appwidget.AppWidgetHostView.getAppWidgetInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.appwidget.AppWidgetHostView.getErrorView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.appwidget.AppWidgetHostView.getDefaultView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.appwidget.AppWidgetManager.bindAppWidgetId(int,ComponentName) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.appwidget.AppWidgetManager.updateAppWidget(ComponentName,RemoteViews) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.appwidget.AppWidgetManager.notifyAppWidgetViewDataChanged(int[],int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.appwidget.AppWidgetManager.updateAppWidget(int,RemoteViews) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.appwidget.AppWidgetManager.notifyAppWidgetViewDataChanged(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.appwidget.AppWidgetManager.updateAppWidget(int[],RemoteViews) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
AppWidgetManager android.appwidget.AppWidgetManager.getInstance(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int[] android.appwidget.AppWidgetManager.getAppWidgetIds(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.appwidget.AppWidgetManager.getInstalledProviders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AppWidgetProviderInfo android.appwidget.AppWidgetManager.getAppWidgetInfo(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.appwidget.AppWidgetProviderInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.security.IKeyChainAliasCallback$Stub$Proxy.alias(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.security.IKeyChainAliasCallback$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.security.IKeyChainAliasCallback$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.security.KeyChain.choosePrivateKeyAlias(Activity,KeyChainAliasCallback,String[],Principal[],String,int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IKeyChainService android.security.KeyChain$KeyChainConnection.getService() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PrivateKey android.security.KeyChain.getPrivateKey(Context,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
X509Certificate[] android.security.KeyChain.getCertificateChain(Context,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.security.IKeyChainService$Stub$Proxy.deleteCaCertificate(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.security.IKeyChainService$Stub$Proxy.setGrant(int,String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.security.IKeyChainService$Stub$Proxy.installCaCertificate(byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.security.IKeyChainService$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.security.IKeyChainService$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.security.IKeyChainService$Stub$Proxy.hasGrant(int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.security.IKeyChainService$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] android.security.IKeyChainService$Stub$Proxy.getCertificate(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.security.Credentials.install(Context,KeyPair) - @DSSink({DSSinkKind.LOG})
void android.security.Credentials.install(Context,String,byte[]) - @DSSink({DSSinkKind.LOG})
Credentials android.security.Credentials.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.text.method.AllCapsTransformationMethod.getTransformation(CharSequence,View) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.method.BaseMovementMethod.getMovementMetaState(Spannable,KeyEvent) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.method.MetaKeyKeyListener.getMetaState(long,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.method.MetaKeyKeyListener.getMetaState(long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.method.DateKeyListener.getInputType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char[] android.text.method.DateKeyListener.getAcceptedChars() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DateKeyListener android.text.method.DateKeyListener.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.text.method.CharacterPickerDialog$OptionsAdapter.getItem(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.method.CharacterPickerDialog$OptionsAdapter.getCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.text.method.CharacterPickerDialog$OptionsAdapter.getItemId(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.text.method.CharacterPickerDialog$OptionsAdapter.getView(int,View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.method.ReplacementTransformationMethod$SpannedReplacementCharSequence.getSpanEnd(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.method.ReplacementTransformationMethod$SpannedReplacementCharSequence.getSpanFlags(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.text.method.ReplacementTransformationMethod.getTransformation(CharSequence,View) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.method.ReplacementTransformationMethod$SpannedReplacementCharSequence.getSpanStart(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object[] android.text.method.ReplacementTransformationMethod$SpannedReplacementCharSequence.getSpans(int,int,Class) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.method.TextKeyListener$NullKeyListener.getInputType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.method.TextKeyListener.getInputType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.method.TextKeyListener.getPrefs(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TextKeyListener android.text.method.TextKeyListener.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MovementMethod android.text.method.LinkMovementMethod.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SingleLineTransformationMethod android.text.method.SingleLineTransformationMethod.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char[] android.text.method.SingleLineTransformationMethod.getReplacement() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char[] android.text.method.SingleLineTransformationMethod.getOriginal() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DialerKeyListener android.text.method.DialerKeyListener.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.method.DialerKeyListener.getInputType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char[] android.text.method.DialerKeyListener.getAcceptedChars() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.method.WordIterator.getBeginning(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.method.WordIterator.getEnd(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MovementMethod android.text.method.ArrowKeyMovementMethod.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.method.QwertyKeyListener.getInputType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
QwertyKeyListener android.text.method.QwertyKeyListener.getInstanceForFullKeyboard() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PasswordTransformationMethod android.text.method.PasswordTransformationMethod.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.text.method.PasswordTransformationMethod.getTransformation(CharSequence,View) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.method.Touch.getInitialScrollY(TextView,Spannable) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.method.Touch.getInitialScrollX(TextView,Spannable) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.method.MultiTapKeyListener.getInputType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.method.TimeKeyListener.getInputType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char[] android.text.method.TimeKeyListener.getAcceptedChars() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TimeKeyListener android.text.method.TimeKeyListener.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MovementMethod android.text.method.ScrollingMovementMethod.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.method.DateTimeKeyListener.getInputType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char[] android.text.method.DateTimeKeyListener.getAcceptedChars() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DateTimeKeyListener android.text.method.DateTimeKeyListener.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DigitsKeyListener android.text.method.DigitsKeyListener.getInstance(boolean,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.method.DigitsKeyListener.getInputType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char[] android.text.method.DigitsKeyListener.getAcceptedChars() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DigitsKeyListener android.text.method.DigitsKeyListener.getInstance(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DigitsKeyListener android.text.method.DigitsKeyListener.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.PackedIntVector.getValue(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.text.PackedIntVector.setValue(int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.text.PackedObjectVector.setValue(int,int,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.text.PackedObjectVector.getValue(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.text.TextUtils.dumpSpans(CharSequence,Printer,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.text.TextUtils.getReverse(CharSequence,int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.text.SpannableStringInternal.setSpan(Object,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.text.SpannableStringInternal.getSpanFlags(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.SpannableStringInternal.getSpanStart(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.SpannableStringInternal.getSpanEnd(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object[] android.text.SpannableStringInternal.getSpans(int,int,Class) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.SpellCheckSpan.getSpanTypeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.text.style.MetricAffectingSpan$Passthrough.updateMeasureState(TextPaint) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.text.style.MetricAffectingSpan$Passthrough.updateDrawState(TextPaint) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.SubscriptSpan.getSpanTypeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.UnderlineSpan.getSpanTypeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.text.style.ImageSpan.getSource() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.text.style.ImageSpan.getDrawable() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.TabStopSpan$Standard.getTabStop() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.text.style.CharacterStyle$Passthrough.updateDrawState(TextPaint) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharacterStyle android.text.style.CharacterStyle$Passthrough.getUnderlying() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharacterStyle android.text.style.CharacterStyle.getUnderlying() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.DynamicDrawableSpan.getVerticalAlignment() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.EasyEditSpan.getSpanTypeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.QuoteSpan.getColor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.QuoteSpan.getSpanTypeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.QuoteSpan.getLeadingMargin(boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.AlignmentSpan$Standard.getSpanTypeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.TextAppearanceSpan.getSpanTypeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.text.style.TextAppearanceSpan.getFamily() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.TextAppearanceSpan.getTextStyle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.TextAppearanceSpan.getTextSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.text.style.TextAppearanceSpan.updateDrawState(TextPaint) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ColorStateList android.text.style.TextAppearanceSpan.getLinkTextColor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ColorStateList android.text.style.TextAppearanceSpan.getTextColor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.text.style.TextAppearanceSpan.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.ForegroundColorSpan.getSpanTypeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.ForegroundColorSpan.getForegroundColor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.BackgroundColorSpan.getSpanTypeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.BackgroundColorSpan.getBackgroundColor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.AbsoluteSizeSpan.getSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.text.style.AbsoluteSizeSpan.getDip() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.AbsoluteSizeSpan.getSpanTypeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.text.style.TypefaceSpan.getFamily() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.TypefaceSpan.getSpanTypeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.RelativeSizeSpan.getSpanTypeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.text.style.RelativeSizeSpan.getSizeChange() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.StyleSpan.getSpanTypeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.StyleSpan.getStyle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.SuperscriptSpan.getSpanTypeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.URLSpan.getSpanTypeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.text.style.URLSpan.getURL() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.text.style.URLSpan.onClick(View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.BulletSpan.getLeadingMargin(boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.BulletSpan.getSpanTypeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.StrikethroughSpan.getSpanTypeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.SuggestionRangeSpan.getSpanTypeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.SuggestionSpan.getUnderlineColor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.text.style.SuggestionSpan.getLocale() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.SuggestionSpan.getSpanTypeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.text.style.SuggestionSpan.getNotificationTargetClassName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] android.text.style.SuggestionSpan.getSuggestions() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.SuggestionSpan.getFlags() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.text.style.ScaleXSpan.getScaleX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.ScaleXSpan.getSpanTypeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.LeadingMarginSpan$Standard.getLeadingMargin(boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.style.LeadingMarginSpan$Standard.getSpanTypeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.BoringLayout.getBottomPadding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.BoringLayout.getEllipsisCount(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.BoringLayout.getEllipsizedWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.BoringLayout.getTopPadding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.BoringLayout.getParagraphDirection(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.BoringLayout.getLineDescent(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.BoringLayout.getHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.BoringLayout.getLineCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.BoringLayout.getLineTop(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.BoringLayout.getLineStart(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.text.BoringLayout.getLineMax(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.BoringLayout.getEllipsisStart(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.text.Layout.getLineWidth(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TextDirectionHeuristic android.text.Layout.getTextDirectionHeuristic() - @DSSource({DSSourceKind.FILE_INFORMATION})
Object[] android.text.Layout.getParagraphSpans(Spanned,int,int,Class) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.Layout.getLineForVertical(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.Layout.getLineBounds(int,Rect) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.text.Layout.getCursorPath(int,Path,CharSequence) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.Layout.getLineAscent(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.Layout.getOffsetForHorizontal(int,float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.Layout$SpannedEllipsizer.getSpanFlags(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.text.Layout.getSelectionPath(int,int,Path) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.Layout.getOffsetToRightOf(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.Layout$SpannedEllipsizer.getSpanEnd(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.Layout.getLineBaseline(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.text.Layout.getSpacingMultiplier() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.Layout.getLineForOffset(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.Layout.getOffsetToLeftOf(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.text.Layout.getLineRight(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.Layout.getHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.text.Layout.getDesiredWidth(CharSequence,int,int,TextPaint) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.Layout.getParagraphRight(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TextPaint android.text.Layout.getPaint() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.text.Layout.getText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.Layout.getLineVisibleEnd(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.Layout$SpannedEllipsizer.getSpanStart(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.text.Layout.getSecondaryHorizontal(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.text.Layout.getSpacingAdd() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.Layout.getParagraphLeft(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.text.Layout.getLineLeft(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.text.Layout.getDesiredWidth(CharSequence,TextPaint) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.Layout.getWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object[] android.text.Layout$SpannedEllipsizer.getSpans(int,int,Class) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.text.Layout.getPrimaryHorizontal(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.Layout.getLineEnd(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.Layout.getLineBottom(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.Layout.getEllipsizedWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.text.Layout.getLineMax(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.DynamicLayout.getEllipsizedWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.DynamicLayout.getEllipsisStart(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.DynamicLayout.getEllipsisCount(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.DynamicLayout.getLineCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.DynamicLayout.getLineStart(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.DynamicLayout.getBottomPadding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.DynamicLayout.getLineDescent(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.DynamicLayout.getParagraphDirection(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.DynamicLayout.getLineTop(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.DynamicLayout.getTopPadding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.text.TextPaint.set(TextPaint) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.text.SpannableString.getSpanEnd(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.SpannableString.getSpanStart(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.text.SpannableString.setSpan(Object,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object[] android.text.SpannableString.getSpans(int,int,Class) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.SpannableString.getSpanFlags(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.TextLine.getOffsetToLeftRightOf(int,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.Annotation.getSpanTypeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.text.Annotation.getKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.text.Annotation.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.text.HtmlToSpannedConverter.processingInstruction(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.text.SpannedString.getSpanEnd(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.SpannedString.getSpanStart(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object[] android.text.SpannedString.getSpans(int,int,Class) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.SpannedString.getSpanFlags(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.text.format.DateUtils.getRelativeTimeSpanString(Context,long,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.text.format.DateUtils.getRelativeTimeSpanString(Context,long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.text.format.DateUtils.getRelativeTimeSpanString(long,long,long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.text.format.DateUtils.writeDateTime(Calendar,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.text.format.DateUtils.getRelativeDateTimeString(Context,long,long,long,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.text.format.DateUtils.getAMPMString(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.text.format.DateUtils.getMonthString(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.text.format.DateUtils.getRelativeTimeSpanString(long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.text.format.DateUtils.getRelativeTimeSpanString(long,long,long,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.text.format.DateUtils.getDayOfWeekString(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.text.format.DateUtils.getStandaloneMonthString(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DateFormat android.text.format.DateFormat.getMediumDateFormat(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char[] android.text.format.DateFormat.getDateFormatOrder(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DateFormat android.text.format.DateFormat.getTimeFormat(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DateFormat android.text.format.DateFormat.getDateFormat(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DateFormat android.text.format.DateFormat.getDateFormatForSetting(Context,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DateFormat android.text.format.DateFormat.getLongDateFormat(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.text.format.Time.setJulianDay(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.text.format.Time.getJulianDay(long,long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.text.format.Time.getCurrentTimezone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.format.Time.getJulianMondayFromWeeksSinceEpoch(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.text.format.Time.set(Time) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.text.format.Time.getActualMaximum(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.format.Time.getWeeksSinceEpochFromJulianDay(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.format.Time.getWeekNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object[] android.text.SpannableStringBuilder.getSpans(int,int,Class) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.text.SpannableStringBuilder.setSpan(Object,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InputFilter[] android.text.SpannableStringBuilder.getFilters() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.SpannableStringBuilder.getSpanStart(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.text.SpannableStringBuilder.getTextRunAdvances(int,int,int,int,int,float[],int,Paint,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.SpannableStringBuilder.getSpanFlags(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.SpannableStringBuilder.getTextWidths(int,int,float[],Paint) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.SpannableStringBuilder.getSpanEnd(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.SpannableStringBuilder.getTextRunCursor(int,int,int,int,int,Paint) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.text.SpannableStringBuilder.getTextRunAdvances(int,int,int,int,int,float[],int,Paint) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.StaticLayout.getEllipsizedWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.StaticLayout.getLineTop(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.StaticLayout.getLineForVertical(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.StaticLayout.getLineCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.StaticLayout.getLineDescent(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.StaticLayout.getEllipsisCount(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.StaticLayout.getLineStart(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.StaticLayout.getBottomPadding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.StaticLayout.getTopPadding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.StaticLayout.getParagraphDirection(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.text.StaticLayout.getEllipsisStart(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.AudioManager.setMicrophoneMute(boolean) - @DSSink({DSSinkKind.AUDIO})
int android.media.AudioManager.getStreamVolume(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.media.AudioManager.getRouting(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Handler android.media.AudioManager$FocusEventHandlerDelegate.getHandler() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.AudioManager.setSpeakerphoneOn(boolean) - @DSSink({DSSinkKind.AUDIO})
void android.media.AudioManager.setStreamSolo(int,boolean) - @DSSink({DSSinkKind.AUDIO})
void android.media.AudioManager.setMode(int) - @DSSink({DSSinkKind.AUDIO})
void android.media.AudioManager.setStreamVolume(int,int,int) - @DSSink({DSSinkKind.AUDIO})
int android.media.AudioManager.getLastAudibleStreamVolume(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.AudioManager.setRingerMode(int) - @DSSink({DSSinkKind.AUDIO})
void android.media.AudioManager.setVibrateSetting(int,int) - @DSSink({DSSinkKind.AUDIO})
boolean android.media.AudioManager.isMicrophoneMute() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.AudioManager.setBluetoothScoOn(boolean) - @DSSink({DSSinkKind.AUDIO})
void android.media.AudioManager.setBluetoothA2dpOn(boolean) - @DSSink({DSSinkKind.AUDIO})
int android.media.AudioManager.getStreamMaxVolume(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.media.AudioManager.getVibrateSetting(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.AudioManager.setParameters(String) - @DSSink({DSSinkKind.AUDIO})
void android.media.AudioManager.setParameter(String,String) - @DSSink({DSSinkKind.AUDIO})
boolean android.media.AudioManager.isMusicActive() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.AudioManager.setRouting(int,int,int) - @DSSink({DSSinkKind.AUDIO})
String android.media.AudioManager.getParameters(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.AudioManager.setStreamMute(int,boolean) - @DSSink({DSSinkKind.AUDIO})
int android.media.AudioManager.getDevicesForStream(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.AudioManager.setWiredHeadsetOn(boolean) - @DSSink({DSSinkKind.AUDIO})
int android.media.AudioManager.getMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.media.AudioManager.getRingerMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.media.IMediaScannerService$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
IBinder android.media.IMediaScannerService$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.media.IMediaScannerService$Stub$Proxy.requestScanFile(String,String,IMediaScannerListener) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.media.IMediaScannerService$Stub$Proxy.scanFile(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.media.IRemoteControlDisplay$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.IRemoteControlDisplay$Stub$Proxy.setCurrentClientId(int,PendingIntent,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.media.IRemoteControlDisplay$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.IRemoteControlDisplay$Stub$Proxy.setTransportControlFlags(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.media.IRemoteControlDisplay$Stub$Proxy.setMetadata(int,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.media.IRemoteControlDisplay$Stub$Proxy.setPlaybackState(int,int,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.media.IRemoteControlDisplay$Stub$Proxy.setAllMetadata(int,Bundle,Bitmap) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.media.IRemoteControlDisplay$Stub$Proxy.setArtwork(int,Bitmap) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.media.IAudioService$Stub$Proxy.setStreamVolume(int,int,int) - @DSSink({DSSinkKind.AUDIO})
String android.media.IAudioService$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.media.IAudioService$Stub$Proxy.setRingerMode(int) - @DSSink({DSSinkKind.AUDIO})
void android.media.IAudioService$Stub$Proxy.setVibrateSetting(int,int) - @DSSink({DSSinkKind.AUDIO})
void android.media.IAudioService$Stub$Proxy.stopBluetoothSco(IBinder) - @DSSink({DSSinkKind.AUDIO})
boolean android.media.IAudioService$Stub$Proxy.isStreamMute(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.media.IAudioService$Stub$Proxy.adjustSuggestedStreamVolume(int,int,int) - @DSSink({DSSinkKind.AUDIO})
int android.media.IAudioService$Stub$Proxy.getRingerMode() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.media.IAudioService$Stub$Proxy.adjustStreamVolume(int,int,int) - @DSSink({DSSinkKind.AUDIO})
boolean android.media.IAudioService$Stub$Proxy.shouldVibrate(int) - @DSSink({DSSinkKind.AUDIO})
void android.media.IAudioService$Stub$Proxy.playSoundEffect(int) - @DSSink({DSSinkKind.AUDIO})
void android.media.IAudioService$Stub$Proxy.playSoundEffectVolume(int,float) - @DSSink({DSSinkKind.AUDIO})
boolean android.media.IAudioService$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.AUDIO})
void android.media.IAudioService$Stub$Proxy.setStreamMute(int,boolean,IBinder) - @DSSink({DSSinkKind.AUDIO})
void android.media.IAudioService$Stub$Proxy.unregisterRemoteControlDisplay(IRemoteControlDisplay) - @DSSink({DSSinkKind.AUDIO})
int android.media.IAudioService$Stub$Proxy.getLastAudibleStreamVolume(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.media.IAudioService$Stub$Proxy.unregisterRemoteControlClient(PendingIntent,IRemoteControlClient) - @DSSink({DSSinkKind.AUDIO})
void android.media.IAudioService$Stub$Proxy.setSpeakerphoneOn(boolean) - @DSSink({DSSinkKind.AUDIO})
void android.media.IAudioService$Stub$Proxy.setStreamSolo(int,boolean,IBinder) - @DSSink({DSSinkKind.AUDIO})
void android.media.IAudioService$Stub$Proxy.adjustVolume(int,int) - @DSSink({DSSinkKind.AUDIO})
int android.media.IAudioService$Stub$Proxy.getMode() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.media.IAudioService$Stub$Proxy.requestAudioFocus(int,int,IBinder,IAudioFocusDispatcher,String,String) - @DSSink({DSSinkKind.AUDIO})
void android.media.IAudioService$Stub$Proxy.registerRemoteControlDisplay(IRemoteControlDisplay) - @DSSink({DSSinkKind.AUDIO})
int android.media.IAudioService$Stub$Proxy.getStreamMaxVolume(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.media.IAudioService$Stub$Proxy.startBluetoothSco(IBinder) - @DSSink({DSSinkKind.AUDIO})
int android.media.IAudioService$Stub$Proxy.abandonAudioFocus(IAudioFocusDispatcher,String) - @DSSink({DSSinkKind.AUDIO})
void android.media.IAudioService$Stub$Proxy.setBluetoothScoOn(boolean) - @DSSink({DSSinkKind.AUDIO})
void android.media.IAudioService$Stub$Proxy.remoteControlDisplayUsesBitmapSize(IRemoteControlDisplay,int,int) - @DSSink({DSSinkKind.AUDIO})
int android.media.IAudioService$Stub$Proxy.getStreamVolume(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
IBinder android.media.IAudioService$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.media.IAudioService$Stub$Proxy.getVibrateSetting(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.media.IAudioService$Stub$Proxy.setMode(int,IBinder) - @DSSink({DSSinkKind.AUDIO})
void android.media.IAudioService$Stub$Proxy.unregisterAudioFocusClient(String) - @DSSink({DSSinkKind.AUDIO})
int android.media.MediaPlayer.getIntParameter(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.MediaPlayer.setDataSource(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
MediaPlayer android.media.MediaPlayer.create(Context,Uri) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.MediaPlayer.setDataSource(String,Map) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Parcel android.media.MediaPlayer.getParcelParameter(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.MediaPlayer.setDataSource(FileDescriptor) - @DSSink({DSSinkKind.FILE})
void android.media.MediaPlayer.setWakeMode(Context,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.media.MediaPlayer.setParameter(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.media.MediaPlayer.setParameter(int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.media.MediaPlayer.setSurface(Surface) - @DSSink({DSSinkKind.LOG})
String android.media.MediaPlayer.getStringParameter(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] android.media.MiniThumbFile.getMiniThumbFromFile(long,byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.MiniThumbFile.saveMiniThumbToFile(byte[],long,long) - @DSSink({DSSinkKind.LOG})
long android.media.MiniThumbFile.getMagic(long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.media.DecoderCapabilities.getVideoDecoders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.media.DecoderCapabilities.getAudioDecoders() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.media.Ringtone.getTitle(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.media.Ringtone.getStreamType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Uri android.media.RingtoneManager.getValidRingtoneUri(Context) - @DSSource({DSSourceKind.FILE_INFORMATION})
int android.media.RingtoneManager.getRingtonePosition(Uri) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Uri android.media.RingtoneManager.getActualDefaultRingtoneUri(Context,int) - @DSSource({DSSourceKind.FILE_INFORMATION})
Cursor android.media.RingtoneManager.getCursor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.media.RingtoneManager.getDefaultType(Uri) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Uri android.media.RingtoneManager.getRingtoneUri(int) - @DSSource({DSSourceKind.FILE_INFORMATION})
Uri android.media.RingtoneManager.getDefaultUri(int) - @DSSource({DSSourceKind.FILE_INFORMATION})
boolean android.media.RingtoneManager.getStopPreviousRingtone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Ringtone android.media.RingtoneManager.getRingtone(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.media.RingtoneManager.getIncludeDrm() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.RingtoneManager.setActualDefaultRingtoneUri(Context,int,Uri) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.media.MediaFile.getMimeTypeForFormatCode(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.media.MediaFile.getFileTitle(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.media.MediaFile.getMimeTypeForFile(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.MediaFile.addFileType(String,int,String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.media.MediaFile.addFileType(String,int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IRemoteControlClient android.media.RemoteControlClient.getIRemoteControlClient() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PendingIntent android.media.RemoteControlClient.getRcMediaIntent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.RemoteControlClient.setPlaybackState(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.media.IMediaScannerListener$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.media.IMediaScannerListener$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.IMediaScannerListener$Stub$Proxy.scanCompleted(String,Uri) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.media.IRemoteControlClient$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.IRemoteControlClient$Stub$Proxy.plugRemoteControlDisplay(IRemoteControlDisplay) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.media.IRemoteControlClient$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.IRemoteControlClient$Stub$Proxy.onInformationRequested(int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.media.IRemoteControlClient$Stub$Proxy.setCurrentClientGenerationId(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.media.IRemoteControlClient$Stub$Proxy.unplugRemoteControlDisplay(IRemoteControlDisplay) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.media.AudioSystem.getNumStreamTypes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bitmap android.media.ThumbnailUtils.createVideoThumbnail(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bitmap android.media.MediaMetadataRetriever.getFrameAtTime(long,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.MediaMetadataRetriever.setDataSource(String,Map) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] android.media.MediaMetadataRetriever.getEmbeddedPicture() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bitmap android.media.MediaMetadataRetriever.getFrameAtTime(long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.MediaMetadataRetriever.setDataSource(String) - @DSSink({DSSinkKind.FILE})
void android.media.MediaMetadataRetriever.setDataSource(FileDescriptor) - @DSSink({DSSinkKind.FILE})
Bitmap android.media.MediaMetadataRetriever.getFrameAtTime() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.media.ExifInterface.convertRationalLatLonToFloat(String,String) - @DSSource(DSSourceKind.LOCATION_INFORMATION)
long android.media.ExifInterface.getGpsDateTime() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.media.ExifInterface.getAttribute(String) - @DSSource({DSSourceKind.IMAGE})
boolean android.media.ExifInterface.getLatLong(float[]) - @DSSource({DSSourceKind.IMAGE})
byte[] android.media.ExifInterface.getThumbnail() - @DSSource({DSSourceKind.IMAGE})
double android.media.ExifInterface.getAltitude(double) - @DSSource({DSSourceKind.IMAGE})
int android.media.ExifInterface.getAttributeInt(String,int) - @DSSource({DSSourceKind.IMAGE})
long android.media.ExifInterface.getDateTime() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
double android.media.ExifInterface.getAttributeDouble(String,double) - @DSSource({DSSourceKind.IMAGE})
void android.media.ExifInterface.setAttribute(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CamcorderProfile android.media.CamcorderProfile.get(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CamcorderProfile android.media.CamcorderProfile.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.MediaRecorder.setAuxiliaryOutputFile(FileDescriptor) - @DSSink({DSSinkKind.FILE})
void android.media.MediaRecorder.setVideoEncodingBitRate(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.media.MediaRecorder.setAudioSamplingRate(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.media.MediaRecorder.setOutputFile(FileDescriptor) - @DSSink({DSSinkKind.FILE})
void android.media.MediaRecorder.setAuxiliaryOutputFile(String) - @DSSink({DSSinkKind.LOG})
int android.media.MediaRecorder.getAudioSourceMax() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.media.MediaRecorder.setAudioChannels(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.media.MediaRecorder.setCaptureRate(double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.media.MediaRecorder.setOrientationHint(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.media.MediaRecorder.setAudioEncodingBitRate(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.media.MediaRecorder.setLocation(float,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.media.MediaRecorder.setProfile(CamcorderProfile) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.media.IAudioFocusDispatcher$Stub$Proxy.dispatchAudioFocusChange(int,String) - @DSSink({DSSinkKind.AUDIO})
String android.media.IAudioFocusDispatcher$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.media.IAudioFocusDispatcher$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.database.CursorWindow.getType(int,int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
CursorWindow android.database.CursorWindow.newFromParcel(Parcel) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
double android.database.CursorWindow.getDouble(int,int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
String android.database.CursorWindow.getName() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
long android.database.CursorWindow.getLong(int,int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.CursorWindow.getStartPosition() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
short android.database.CursorWindow.getShort(int,int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
byte[] android.database.CursorWindow.getBlob(int,int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
float android.database.CursorWindow.getFloat(int,int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.CursorWindow.getNumRows() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.CursorWindow.getInt(int,int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
boolean android.database.CursorWindow.setNumColumns(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.database.CursorWindow.getString(int,int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.CursorWrapper.getType(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
short android.database.CursorWrapper.getShort(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
String android.database.CursorWrapper.getString(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.CursorWrapper.getInt(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
long android.database.CursorWrapper.getLong(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
Cursor android.database.CursorWrapper.getWrappedCursor() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.CursorWrapper.getCount() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
byte[] android.database.CursorWrapper.getBlob(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
String[] android.database.CursorWrapper.getColumnNames() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.CursorWrapper.getColumnIndex(String) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
double android.database.CursorWrapper.getDouble(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
String android.database.CursorWrapper.getColumnName(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
float android.database.CursorWrapper.getFloat(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.CursorWrapper.getColumnIndexOrThrow(String) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
Bundle android.database.CursorWrapper.getExtras() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.CursorWrapper.getPosition() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.CursorWrapper.getColumnCount() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
boolean android.database.CursorWrapper.getWantsAllOnMoveCalls() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
byte[] android.database.AbstractCursor.getBlob(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
boolean android.database.AbstractCursor.getWantsAllOnMoveCalls() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.AbstractCursor.getColumnIndexOrThrow(String) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.AbstractCursor.getPosition() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
Uri android.database.AbstractCursor.getNotificationUri() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.AbstractCursor.getColumnIndex(String) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
String android.database.AbstractCursor.getColumnName(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
CursorWindow android.database.AbstractCursor.getWindow() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.AbstractCursor.getColumnCount() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.AbstractCursor.getType(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
Bundle android.database.AbstractCursor.getExtras() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
Object android.database.AbstractCursor.getUpdatedField(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
CursorWindow android.database.BulkCursorProxy.getWindow(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
Bundle android.database.BulkCursorProxy.respond(Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Bundle android.database.BulkCursorProxy.getExtras() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.BulkCursorProxy.requery(IContentObserver) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.database.BulkCursorProxy.onMove(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.database.BulkCursorNative.asBinder() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
boolean android.database.BulkCursorNative.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.database.MatrixCursor.getType(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
long android.database.MatrixCursor.getLong(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
byte[] android.database.MatrixCursor.getBlob(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
double android.database.MatrixCursor.getDouble(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
short android.database.MatrixCursor.getShort(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
float android.database.MatrixCursor.getFloat(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.MatrixCursor.getInt(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
String[] android.database.MatrixCursor.getColumnNames() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
String android.database.MatrixCursor.getString(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.MatrixCursor.getCount() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
void android.database.DatabaseUtils$InsertHelper.bind(int,double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.database.DatabaseUtils$InsertHelper.getColumnIndex(String) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
void android.database.DatabaseUtils.dumpCurrentRow(Cursor,PrintStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.database.DatabaseUtils$InsertHelper.bindNull(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.database.DatabaseUtils$InsertHelper.bind(int,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.database.DatabaseUtils.dumpCursor(Cursor,PrintStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.database.DatabaseUtils$InsertHelper.bind(int,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.database.DatabaseUtils.getCollationKey(String) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
void android.database.DatabaseUtils$InsertHelper.bind(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.database.DatabaseUtils$InsertHelper.bind(int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.database.DatabaseUtils$InsertHelper.bind(int,byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.database.DatabaseUtils.getHexCollationKey(String) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
void android.database.DatabaseUtils$InsertHelper.bind(int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.database.sqlite.SQLiteProgram.bindNull(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.database.sqlite.SQLiteProgram.bindString(int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.database.sqlite.SQLiteProgram.bindBlob(int,byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.database.sqlite.SQLiteProgram.bindLong(int,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.database.sqlite.SQLiteProgram.getUniqueId() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
void android.database.sqlite.SQLiteProgram.bindAllArgsAsStrings(String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.database.sqlite.SQLiteProgram.bindDouble(int,double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Cursor android.database.sqlite.SQLiteDatabase.query(String,String[],String,String[],String,String,String,String) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
Cursor android.database.sqlite.SQLiteDatabase.rawQuery(String,String[]) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
Map android.database.sqlite.SQLiteDatabase.getSyncedTables() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
void android.database.sqlite.SQLiteDatabase.setLockingEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.database.sqlite.SQLiteDatabase.getPath() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
long android.database.sqlite.SQLiteDatabase.getPageSize() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
long android.database.sqlite.SQLiteDatabase.setMaximumSize(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.database.sqlite.SQLiteDatabase.getAttachedDbs() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.sqlite.SQLiteDatabase.update(String,ContentValues,String,String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Cursor android.database.sqlite.SQLiteDatabase.query(String,String[],String,String[],String,String,String) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.sqlite.SQLiteDatabase.getVersion() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
void android.database.sqlite.SQLiteDatabase.setVersion(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Cursor android.database.sqlite.SQLiteDatabase.query(boolean,String,String[],String,String[],String,String,String,String) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
void android.database.sqlite.SQLiteDatabase.setPageSize(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long android.database.sqlite.SQLiteDatabase.getMaximumSize() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
ArrayList android.database.sqlite.SQLiteDatabase.getDbStats() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
void android.database.sqlite.SQLiteDirectCursorDriver.setBindArguments(String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.database.sqlite.SQLiteCursor.getCount() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.sqlite.SQLiteCursor.getColumnIndex(String) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
String[] android.database.sqlite.SQLiteCursor.getColumnNames() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
void android.database.sqlite.SQLiteCursor.setSelectionArguments(String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SQLiteDatabase android.database.sqlite.SQLiteCursor.getDatabase() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
void android.database.sqlite.SQLiteCursor.setWindow(CursorWindow) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Uri android.database.sqlite.SqliteWrapper.insert(Context,ContentResolver,Uri,ContentValues) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
Cursor android.database.sqlite.SqliteWrapper.query(Context,ContentResolver,Uri,String[],String,String[],String) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
SQLiteDatabase android.database.sqlite.SQLiteOpenHelper.getWritableDatabase() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
SQLiteDatabase android.database.sqlite.SQLiteOpenHelper.getReadableDatabase() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
String android.database.sqlite.SQLiteOpenHelper.getDatabaseName() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
String android.database.sqlite.SQLiteQueryBuilder.getTables() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
Cursor android.database.sqlite.SQLiteQueryBuilder.query(SQLiteDatabase,String[],String,String[],String,String,String) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
Cursor android.database.sqlite.SQLiteQueryBuilder.query(SQLiteDatabase,String[],String,String[],String,String,String,String) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
float android.database.AbstractWindowedCursor.getFloat(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.AbstractWindowedCursor.getInt(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
double android.database.AbstractWindowedCursor.getDouble(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
String android.database.AbstractWindowedCursor.getString(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
byte[] android.database.AbstractWindowedCursor.getBlob(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
CursorWindow android.database.AbstractWindowedCursor.getWindow() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
short android.database.AbstractWindowedCursor.getShort(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
long android.database.AbstractWindowedCursor.getLong(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.AbstractWindowedCursor.getType(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
Bundle android.database.CursorToBulkCursorAdaptor.getExtras() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
CursorWindow android.database.CursorToBulkCursorAdaptor.getWindow(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
CursorWindow android.database.CrossProcessCursorWrapper.getWindow() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
String android.database.IContentObserver$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
IBinder android.database.IContentObserver$Stub.asBinder() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.MergeCursor.getCount() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
short android.database.MergeCursor.getShort(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
String android.database.MergeCursor.getString(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
long android.database.MergeCursor.getLong(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.MergeCursor.getInt(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
double android.database.MergeCursor.getDouble(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.MergeCursor.getType(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
String[] android.database.MergeCursor.getColumnNames() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
float android.database.MergeCursor.getFloat(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
byte[] android.database.MergeCursor.getBlob(int) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
Bundle android.database.BulkCursorToCursorAdaptor.getExtras() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
int android.database.BulkCursorToCursorAdaptor.getCount() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
String[] android.database.BulkCursorToCursorAdaptor.getColumnNames() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
IContentObserver android.database.BulkCursorToCursorAdaptor.getObserver() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
void android.database.ContentObservable.notifyChange(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IContentObserver android.database.ContentObserver.getContentObserver() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
IContentObserver android.database.ContentObserver.releaseContentObserver() - @DSSource({DSSourceKind.DATABASE_INFORMATION})
void android.accounts.IAccountManagerResponse$Stub$Proxy.onError(int,String) - @DSSink({DSSinkKind.ACCOUNT_SETTINGS})
String android.accounts.IAccountManagerResponse$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.accounts.IAccountManagerResponse$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IAccountManagerResponse android.accounts.IAccountManagerResponse$Stub.asInterface(IBinder) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.accounts.IAccountManager$Stub$Proxy.getUserData(Account,String) - @DSSource({DSSourceKind.ACCOUNT_INFORMATION})
void android.accounts.IAccountManager$Stub$Proxy.invalidateAuthToken(String,String) - @DSSink({DSSinkKind.ACCOUNT_SETTINGS})
boolean android.accounts.IAccountManager$Stub$Proxy.addAccount(Account,String,Bundle) - @DSSink({DSSinkKind.ACCOUNT_SETTINGS})
String android.accounts.IAccountManager$Stub$Proxy.peekAuthToken(Account,String) - @DSSink({DSSinkKind.ACCOUNT_SETTINGS})
void android.accounts.IAccountManager$Stub$Proxy.addAcount(IAccountManagerResponse,String,String,String[],boolean,Bundle) - @DSSink({DSSinkKind.ACCOUNT_SETTINGS})
void android.accounts.IAccountManager$Stub$Proxy.setAuthToken(Account,String,String) - @DSSink({DSSinkKind.ACCOUNT_SETTINGS})
String android.accounts.IAccountManager$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.accounts.IAccountManager$Stub$Proxy.setUserData(Account,String,String) - @DSSink({DSSinkKind.ACCOUNT_SETTINGS})
Account[] android.accounts.IAccountManager$Stub$Proxy.getAccounts(String) - @DSSource({DSSourceKind.ACCOUNT_INFORMATION})
void android.accounts.IAccountManager$Stub$Proxy.getAccountsByFeatures(IAccountManagerResponse,String,String[]) - @DSSink({DSSinkKind.ACCOUNT_SETTINGS})
AuthenticatorDescription[] android.accounts.IAccountManager$Stub$Proxy.getAuthenticatorTypes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IAccountManager android.accounts.IAccountManager$Stub.asInterface(IBinder) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.accounts.IAccountManager$Stub$Proxy.updateCredentials(IAccountManagerResponse,Account,String,boolean,Bundle) - @DSSink({DSSinkKind.ACCOUNT_SETTINGS})
void android.accounts.IAccountManager$Stub$Proxy.hasFeatures(IAccountManagerResponse,Account,String[]) - @DSSink({DSSinkKind.ACCOUNT_SETTINGS})
void android.accounts.IAccountManager$Stub$Proxy.setPassword(Account,String) - @DSSink({DSSinkKind.ACCOUNT_SETTINGS})
IBinder android.accounts.IAccountManager$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.accounts.IAccountManager$Stub$Proxy.getPassword(Account) - @DSSource({DSSourceKind.ACCOUNT_INFORMATION})
void android.accounts.IAccountManager$Stub$Proxy.editProperties(IAccountManagerResponse,String,boolean) - @DSSink({DSSinkKind.ACCOUNT_SETTINGS})
void android.accounts.IAccountManager$Stub$Proxy.getAuthToken(IAccountManagerResponse,Account,String,boolean,boolean,Bundle) - @DSSink({DSSinkKind.ACCOUNT_SETTINGS})
void android.accounts.IAccountManager$Stub$Proxy.removeAccount(IAccountManagerResponse,Account) - @DSSink({DSSinkKind.ACCOUNT_SETTINGS})
boolean android.accounts.IAccountManager$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.ACCOUNT_SETTINGS})
String android.accounts.Account.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.accounts.AccountManager$AmsTask.set(Bundle) - @DSSink({DSSinkKind.ACCOUNT_SETTINGS})
AuthenticatorDescription[] android.accounts.AccountManager.getAuthenticatorTypes() - @DSSource({DSSourceKind.ACCOUNT_INFORMATION})
Object android.accounts.AccountManager$Future2Task.getResult(long,TimeUnit) - @DSSource({DSSourceKind.ACCOUNT_INFORMATION})
Bundle android.accounts.AccountManager$AmsTask.getResult() - @DSSource({DSSourceKind.ACCOUNT_INFORMATION})
Bundle android.accounts.AccountManager$AmsTask.getResult(long,TimeUnit) - @DSSource({DSSourceKind.ACCOUNT_INFORMATION})
boolean android.accounts.AccountManager.addAccountExplicitly(Account,String,Bundle) - @DSSink({DSSinkKind.ACCOUNT_SETTINGS})
void android.accounts.AccountManager$AmsTask$Response.onError(int,String) - @DSSink({DSSinkKind.ACCOUNT_SETTINGS})
void android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1.run(AccountManagerFuture) - @DSSink({DSSinkKind.ACCOUNT_SETTINGS})
String android.accounts.AccountManager.blockingGetAuthToken(Account,String,boolean) - @DSSource({DSSourceKind.ACCOUNT_INFORMATION})
void android.accounts.AccountManager$AmsTask$Response.onResult(Bundle) - @DSSink({DSSinkKind.ACCOUNT_SETTINGS})
AccountManager android.accounts.AccountManager.get(Context) - @DSSource({DSSourceKind.ACCOUNT_INFORMATION})
Intent android.accounts.AccountManager.newChooseAccountIntent(Account,ArrayList,String[],boolean,String,String,String[],Bundle) - @DSSink({DSSinkKind.ACCOUNT_SETTINGS})
Account[] android.accounts.AccountManager.getAccountsByType(String) - @DSSource({DSSourceKind.ACCOUNT_INFORMATION})
Account[] android.accounts.AccountManager.getAccounts() - @DSSource({DSSourceKind.ACCOUNT_INFORMATION})
Object android.accounts.AccountManager$Future2Task.getResult() - @DSSource({DSSourceKind.ACCOUNT_INFORMATION})
String android.accounts.AuthenticatorDescription.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
UsbInterface android.hardware.usb.UsbDevice.getInterface(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.usb.UsbDevice.getVendorId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.usb.UsbDevice.getDeviceProtocol() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.hardware.usb.UsbDevice.getDeviceName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.usb.UsbDevice.getDeviceClass() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.usb.UsbDevice.getInterfaceCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.usb.UsbDevice.getDeviceId(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.usb.UsbDevice.getDeviceId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.usb.UsbDevice.getDeviceSubclass() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.hardware.usb.UsbDevice.getDeviceName(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.usb.UsbDevice.getProductId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.usb.UsbEndpoint.getAttributes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.usb.UsbEndpoint.getEndpointNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.usb.UsbEndpoint.getMaxPacketSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.usb.UsbEndpoint.getAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.usb.UsbEndpoint.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.usb.UsbEndpoint.getInterval() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.usb.UsbEndpoint.getDirection() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.hardware.usb.IUsbManager$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.usb.IUsbManager$Stub$Proxy.requestAccessoryPermission(UsbAccessory,String,PendingIntent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.hardware.usb.IUsbManager$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.usb.IUsbManager$Stub$Proxy.requestDevicePermission(UsbDevice,String,PendingIntent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.hardware.usb.IUsbManager$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ParcelFileDescriptor android.hardware.usb.IUsbManager$Stub$Proxy.openAccessory(UsbAccessory) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.usb.IUsbManager$Stub$Proxy.setCurrentFunction(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.usb.IUsbManager$Stub$Proxy.setMassStorageBackingFile(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.usb.IUsbManager$Stub$Proxy.grantAccessoryPermission(UsbAccessory,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
UsbAccessory android.hardware.usb.IUsbManager$Stub$Proxy.getCurrentAccessory() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ParcelFileDescriptor android.hardware.usb.IUsbManager$Stub$Proxy.openDevice(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.usb.IUsbManager$Stub$Proxy.grantDevicePermission(UsbDevice,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.usb.UsbInterface.getEndpointCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.usb.UsbInterface.getInterfaceProtocol() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.usb.UsbInterface.getInterfaceSubclass() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.usb.UsbInterface.getInterfaceClass() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
UsbEndpoint android.hardware.usb.UsbInterface.getEndpoint(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.usb.UsbInterface.getId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.hardware.usb.UsbManager.getDefaultFunction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HashMap android.hardware.usb.UsbManager.getDeviceList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
UsbDeviceConnection android.hardware.usb.UsbManager.openDevice(UsbDevice) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.usb.UsbManager.setCurrentFunction(String,boolean) - @DSSink({DSSinkKind.LOG})
void android.hardware.usb.UsbManager.setMassStorageBackingFile(String) - @DSSink({DSSinkKind.LOG})
UsbAccessory[] android.hardware.usb.UsbManager.getAccessoryList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ParcelFileDescriptor android.hardware.usb.UsbManager.openAccessory(UsbAccessory) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.hardware.usb.UsbDeviceConnection.getSerial() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] android.hardware.usb.UsbDeviceConnection.getRawDescriptors() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.usb.UsbDeviceConnection.getFileDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
UsbEndpoint android.hardware.usb.UsbRequest.getEndpoint() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.hardware.usb.UsbRequest.getClientData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.hardware.usb.UsbAccessory.getVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.hardware.usb.UsbAccessory.getModel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.hardware.usb.UsbAccessory.getDescription() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.hardware.usb.UsbAccessory.getUri() - @DSSource({DSSourceKind.FILE_INFORMATION})
String android.hardware.usb.UsbAccessory.getManufacturer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.hardware.usb.UsbAccessory.getSerial() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.hardware.SensorManager.getSensorList(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.hardware.SensorManager.getInclination(float[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SensorEvent android.hardware.SensorManager$SensorEventPool.getFromPool() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.SensorManager.getAngleChange(float[],float[],float[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.SensorManager.getSensors() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.hardware.SensorManager.getAltitude(float,float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.SensorManager.getRotationMatrixFromVector(float[],float[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.hardware.SensorManager.getRotationMatrix(float[],float[],float[],float[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.SensorManager.getQuaternionFromVector(float[],float[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float[] android.hardware.SensorManager.getOrientation(float[],float[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Sensor android.hardware.SensorManager.getDefaultSensor(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.hardware.Camera$Parameters.getSceneMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.Camera$Parameters.getExposureCompensation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.hardware.Camera$Parameters.getVerticalViewAngle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.hardware.Camera$Parameters.getFlashMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setGpsLatitude(double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.Camera$Parameters.getInt(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.hardware.Camera$Parameters.getHorizontalViewAngle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setPictureFormat(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.hardware.Camera$Parameters.getVideoStabilization() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.hardware.Camera$Parameters.getColorEffect() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setPreviewFormat(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.hardware.Camera$Parameters.getSupportedFlashModes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.Camera$Parameters.getPreviewFrameRate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setAutoExposureLock(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.hardware.Camera$Parameters.getSupportedVideoSizes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.hardware.Camera$Parameters.getSupportedColorEffects() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.hardware.Camera$Parameters.getZoomRatios() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setJpegQuality(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.set(String,String) - @DSSink({DSSinkKind.LOG})
void android.hardware.Camera$Parameters.setAntibanding(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.hardware.Camera$Parameters.getSupportedPictureFormats() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.Camera$Parameters.getMaxExposureCompensation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.Camera$Parameters.getMaxNumDetectedFaces() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.hardware.Camera$Parameters.getSupportedFocusModes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.Camera$Parameters.getPictureFormat() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.hardware.Camera$Parameters.getAutoExposureLock() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.Camera$Parameters.getMaxNumFocusAreas() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.hardware.Camera$Parameters.getSupportedPreviewFpsRange() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.hardware.Camera$Parameters.getSupportedPreviewFrameRates() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setVideoStabilization(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setRotation(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.Camera$Parameters.getJpegQuality() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setZoom(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.hardware.Camera$Parameters.getFocusMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.hardware.Camera$Parameters.getAntibanding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setPreviewSize(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.hardware.Camera$Parameters.getSupportedPreviewSizes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setSceneMode(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.hardware.Camera$Parameters.getSupportedJpegThumbnailSizes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.hardware.Camera$Parameters.get(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.hardware.Camera$Parameters.getSupportedSceneModes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.hardware.Camera$Parameters.getSupportedPreviewFormats() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setRecordingHint(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.hardware.Camera$Parameters.getSupportedPictureSizes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.Camera$Parameters.getJpegThumbnailQuality() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.hardware.Camera$Parameters.getAutoWhiteBalanceLock() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setPictureSize(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setAutoWhiteBalanceLock(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setPreviewFpsRange(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.hardware.Camera$Parameters.getMeteringAreas() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setFlashMode(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setWhiteBalance(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setColorEffect(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setFocusMode(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.Camera$Parameters.getMaxNumMeteringAreas() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setGpsAltitude(double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.Camera$Parameters.getMinExposureCompensation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.hardware.Camera$Parameters.getFocalLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.set(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setGpsProcessingMethod(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setGpsTimestamp(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.Camera$Parameters.getPreviewFormat() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setPreviewFrameRate(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.Camera$Parameters.getZoom() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.hardware.Camera$Parameters.getFocusAreas() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.hardware.Camera$Parameters.getExposureCompensationStep() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setGpsLongitude(double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.hardware.Camera$Parameters.getSupportedAntibanding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setExposureCompensation(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setJpegThumbnailSize(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.Camera$Parameters.getMaxZoom() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.hardware.Camera$Parameters.getWhiteBalance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.hardware.Camera$Parameters.setJpegThumbnailQuality(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.hardware.Camera$Parameters.getSupportedWhiteBalance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.hardware.Sensor.getResolution() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.hardware.Sensor.getMaximumRange() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.hardware.Sensor.getVendor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.Sensor.getVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.Sensor.getMinDelay() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.hardware.Sensor.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.hardware.Sensor.getPower() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.Sensor.getHandle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.hardware.Sensor.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.Gravity.getAbsoluteGravity(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char android.view.KeyCharacterMap.getMatch(int,char[],int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
KeyEvent[] android.view.KeyCharacterMap.getEvents(char[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char android.view.KeyCharacterMap.getMatch(int,char[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char android.view.KeyCharacterMap.getNumber(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.KeyCharacterMap.getModifierBehavior() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char android.view.KeyCharacterMap.getDisplayLabel(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.KeyCharacterMap.get(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.KeyCharacterMap.getKeyboardType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.view.ContextThemeWrapper.getSystemService(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ContextThemeWrapper.getThemeResId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.WindowManager$LayoutParams.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.view.WindowManager$LayoutParams.getTitle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewGroup$MarginLayoutParams.getMarginEnd() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
LayoutTransition android.view.ViewGroup.getLayoutTransition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.ViewGroup.setMotionEventSplittingEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewGroup.getChildDrawingOrder(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.view.ViewGroup.focusSearch(View,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.ViewGroup.setAnimationCacheEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.ViewGroup.setClipChildren(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
View android.view.ViewGroup.getChildAt(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.ViewGroup.setChildrenDrawnWithCacheEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.ViewGroup.dispatchDraw(Canvas) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
View android.view.ViewGroup.findFrontmostDroppableChildAt(float,float,PointF) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.view.ViewGroup.findFocus() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.ViewGroup.setChildrenDrawingCacheEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.ViewGroup.dispatchTouchEvent(MotionEvent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.ViewGroup.setStaticTransformationsEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.ViewGroup.getChildStaticTransformation(View,Transformation) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.view.ViewGroup.findViewByAccessibilityIdTraversal(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewGroup.getChildMeasureSpec(int,int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewGroup.getPersistentDrawingCache() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.view.ViewGroup.getFocusedChild() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.ViewGroup$LayoutParams.setBaseAttributes(TypedArray,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.ViewGroup.setPersistentDrawingCache(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.ViewGroup.getChildVisibleRect(View,Rect,Point) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.ViewGroup.setChildrenDrawingOrderEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.ViewGroup.setClipToPadding(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.ViewGroup.setAlwaysDrawnWithCacheEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewGroup.getChildCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.ViewGroup.setAddStatesFromChildren(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewGroup.getDescendantFocusability() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
LayoutAnimationController android.view.ViewGroup.getLayoutAnimation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.ViewGroup.setDescendantFocusability(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewGroup$MarginLayoutParams.getMarginStart() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.view.ActionMode.getTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.view.InputChannel.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.IWindowManager$Stub$Proxy.getRotation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.prepareAppTransition(int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.statusBarVisibilityChanged(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.freezeRotation(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.IWindowManager$Stub$Proxy.getPreferredOptionsPanelGravity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.setAppStartingWindow(IBinder,String,int,CompatibilityInfo,CharSequence,int,int,int,IBinder,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.disableKeyguard(IBinder,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.setEventDispatching(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.removeWindowToken(IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.resumeKeyDispatching(IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.reenableKeyguard(IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.IWindowManager$Stub$Proxy.getPendingAppTransition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Configuration android.view.IWindowManager$Stub$Proxy.updateOrientationFromAppTokens(Configuration,IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.view.IWindowManager$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.IWindowManager$Stub$Proxy.inputMethodClientHasFocus(IInputMethodClient) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.setAppWillBeHidden(IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.IWindowManager$Stub$Proxy.watchRotation(IRotationWatcher) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.view.IWindowManager$Stub$Proxy.getAnimationScale(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.view.IWindowManager$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.setFocusedApp(IBinder,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.setAnimationScales(float[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.pauseKeyDispatching(IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.setStrictModeVisualIndicatorPreference(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.removeAppToken(IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.setAppVisibility(IBinder,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.closeSystemDialogs(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.stopAppFreezingScreen(IBinder,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.addWindowToken(IBinder,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.setInTouchMode(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.setAppGroupId(IBinder,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.moveAppToken(int,IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float[] android.view.IWindowManager$Stub$Proxy.getAnimationScales() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.setNewConfiguration(Configuration) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
IWindowSession android.view.IWindowManager$Stub$Proxy.openSession(IInputMethodClient,IInputContext) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.setAppOrientation(IApplicationToken,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.IWindowManager$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.setAnimationScale(int,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.IWindowManager$Stub$Proxy.getAppOrientation(IApplicationToken) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.IWindowManager$Stub$Proxy.startViewServer(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowManager$Stub$Proxy.startAppFreezingScreen(IBinder,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Display android.view.WindowManagerImpl.getDefaultDisplay() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.ViewDebug.getViewRootImplCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.ViewDebug.getViewInstanceCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.view.IApplicationToken$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.view.IApplicationToken$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.IApplicationToken$Stub$Proxy.getKeyDispatchingTimeout() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getToolMinor(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getHistoricalSize(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.MotionEvent.getAction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.MotionEvent.setEdgeFlags(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.MotionEvent.getActionMasked() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.MotionEvent.getEventTimeNano() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getHistoricalTouchMajor(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getTouchMinor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getHistoricalTouchMajor(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getRawX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getAxisValue(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getRawY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getYPrecision() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.MotionEvent.setLocation(float,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.MotionEvent.setSource(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.MotionEvent.setDownTime(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.MotionEvent.getPointerCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.MotionEvent.getDeviceId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.MotionEvent.setAction(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getHistoricalAxisValue(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.MotionEvent.getFlags() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getTouchMajor(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getToolMajor(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getHistoricalTouchMinor(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.MotionEvent.getEdgeFlags() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getXPrecision() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getHistoricalY(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.MotionEvent.getToolType(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getHistoricalX(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getHistoricalToolMajor(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getHistoricalY(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getY(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getHistoricalOrientation(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getX(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getHistoricalToolMajor(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getToolMinor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.MotionEvent.getSource() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getHistoricalPressure(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getHistoricalSize(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getHistoricalToolMinor(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getSize(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.MotionEvent.setTainted(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getOrientation(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.MotionEvent.getActionIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getTouchMinor(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getHistoricalAxisValue(int,int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getHistoricalOrientation(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.MotionEvent.getDownTime() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getAxisValue(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.MotionEvent.getButtonState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getToolMajor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.MotionEvent.getHistorySize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getHistoricalPressure(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.MotionEvent.getHistoricalEventTime(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getHistoricalToolMinor(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent$PointerCoords.getAxisValue(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getOrientation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.MotionEvent.getMetaState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.MotionEvent.getPointerIdBits() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getHistoricalX(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.MotionEvent.getPointerId(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getPressure() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getHistoricalTouchMinor(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.MotionEvent.getEventTime() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getTouchMajor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.MotionEvent.getPressure(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.AbsSavedState.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Parcelable android.view.AbsSavedState.getSuperState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.HardwareLayer.getHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.HardwareLayer.getWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.FocusFinder.getWeightedDistanceFor(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.view.FocusFinder.findNextFocusFromRect(ViewGroup,Rect,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FocusFinder android.view.FocusFinder.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.VelocityTracker.getYVelocity(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.VelocityTracker.getYVelocity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
VelocityTracker android.view.VelocityTracker.getNextPoolable() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.VelocityTracker.getXVelocity(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.VelocityTracker.getXVelocity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.view.DragEvent.getLocalState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ClipData android.view.DragEvent.getClipData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.DragEvent.getResult() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.DragEvent.getAction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ClipDescription android.view.DragEvent.getClipDescription() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.DragEvent.getX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.DragEvent.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.view.DragEvent.getY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.GLES20Layer.getLayer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.Display.getDisplayId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.Display.getOrientation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.Display.getMaximumSizeDimension() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.Display.getRotation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.Display.getPixelFormat() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.Display.getWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.Display.getHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.Display.getRefreshRate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.ScaleGestureDetector.getPreviousSpanX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.ScaleGestureDetector.getPreviousSpanY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.ScaleGestureDetector.getCurrentSpanY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.ScaleGestureDetector.getFocusX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.ScaleGestureDetector.getCurrentSpan() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.ScaleGestureDetector.getCurrentSpanX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.ScaleGestureDetector.getScaleFactor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.ScaleGestureDetector.getFocusY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.ScaleGestureDetector.getEventTime() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.ScaleGestureDetector.getTimeDelta() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.ScaleGestureDetector.getPreviousSpan() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HardwareCanvas android.view.GLES20RenderLayer.getCanvas() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.GLES20RenderLayer.setTransform(Matrix) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.view.InputDevice$MotionRange.getMin() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.InputDevice$MotionRange.getMax() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.view.InputDevice.getMotionRanges() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int[] android.view.InputDevice.getDeviceIds() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.InputDevice.getSources() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.InputDevice$MotionRange.getSource() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.view.InputDevice.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.InputDevice$MotionRange.getRange() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputDevice android.view.InputDevice.getDevice(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.InputDevice.getKeyboardType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.InputDevice$MotionRange.getAxis() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
KeyCharacterMap android.view.InputDevice.getKeyCharacterMap() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.InputDevice.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.view.InputDevice$MotionRange.getFlat() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.InputDevice$MotionRange.getFuzz() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.InputDevice.getId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.view.inputmethod.InputMethodSubtype.getLocale() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.inputmethod.InputMethodSubtype.getIconResId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.view.inputmethod.InputMethodSubtype.getDisplayName(Context,String,ApplicationInfo) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.view.inputmethod.InputMethodSubtype.getExtraValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.inputmethod.InputMethodSubtype.getNameResId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.view.inputmethod.InputMethodSubtype.getMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.view.inputmethod.InputMethodSubtype.getExtraValueOf(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.inputmethod.ExtractedText.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.inputmethod.InputBinding.getUid() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.view.inputmethod.InputBinding.getConnectionToken() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.inputmethod.InputBinding.getPid() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputConnection android.view.inputmethod.InputBinding.getConnection() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.inputmethod.InputMethodInfo.dump(Printer,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.inputmethod.InputMethodInfo.getSubtypeCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.view.inputmethod.InputMethodInfo.getServiceName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.inputmethod.InputMethodInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.view.inputmethod.InputMethodInfo.getSettingsActivity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.view.inputmethod.InputMethodInfo.getId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ServiceInfo android.view.inputmethod.InputMethodInfo.getServiceInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.inputmethod.InputMethodInfo.getIsDefaultResourceId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.view.inputmethod.InputMethodInfo.getPackageName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputMethodSubtype android.view.inputmethod.InputMethodInfo.getSubtypeAt(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ComponentName android.view.inputmethod.InputMethodInfo.getComponent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.view.inputmethod.CompletionInfo.getText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.inputmethod.CompletionInfo.getId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.inputmethod.CompletionInfo.getPosition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.view.inputmethod.CompletionInfo.getLabel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.inputmethod.CompletionInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.inputmethod.InputMethodManager.setImeWindowStatus(IBinder,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InputMethodManager android.view.inputmethod.InputMethodManager.getInstance(Looper) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.inputmethod.InputMethodManager.updateSelection(View,int,int,int,int) - @DSSink({DSSinkKind.LOG})
InputMethodSubtype android.view.inputmethod.InputMethodManager.getLastInputMethodSubtype() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.view.inputmethod.InputMethodManager.getEnabledInputMethodList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.inputmethod.InputMethodManager.sendAppPrivateCommand(View,String,Bundle) - @DSSink({DSSinkKind.LOG})
void android.view.inputmethod.InputMethodManager.doDump(FileDescriptor,PrintWriter,String[]) - @DSSink({DSSinkKind.FILE})
void android.view.inputmethod.InputMethodManager.notifySuggestionPicked(SuggestionSpan,String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.view.inputmethod.InputMethodManager.getEnabledInputMethodSubtypeList(InputMethodInfo,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputMethodManager android.view.inputmethod.InputMethodManager.getInstance(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.inputmethod.InputMethodManager.setInputMethod(IBinder,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.inputmethod.InputMethodManager.setCurrentInputMethodSubtype(InputMethodSubtype) - @DSSink({DSSinkKind.LOG})
void android.view.inputmethod.InputMethodManager.updateExtractedText(View,int,ExtractedText) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.inputmethod.InputMethodManager.onWindowFocus(View,View,int,boolean,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.inputmethod.InputMethodManager.setAdditionalInputMethodSubtypes(String,InputMethodSubtype[]) - @DSSink({DSSinkKind.LOG})
IInputContext android.view.inputmethod.InputMethodManager.getInputContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.inputmethod.InputMethodManager.updateCursor(View,int,int,int,int) - @DSSink({DSSinkKind.LOG})
Map android.view.inputmethod.InputMethodManager.getShortcutInputMethodsAndSubtypes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.view.inputmethod.InputMethodManager.getInputMethodList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IInputMethodClient android.view.inputmethod.InputMethodManager.getClient() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputMethodSubtype android.view.inputmethod.InputMethodManager.getCurrentInputMethodSubtype() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.inputmethod.InputMethodManager.setInputMethodAndSubtype(IBinder,String,InputMethodSubtype) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.inputmethod.EditorInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.inputmethod.EditorInfo.dump(Printer,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.view.inputmethod.InputConnectionWrapper.getTextBeforeCursor(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.inputmethod.InputConnectionWrapper.setComposingRegion(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.inputmethod.InputConnectionWrapper.getCursorCapsMode(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ExtractedText android.view.inputmethod.InputConnectionWrapper.getExtractedText(ExtractedTextRequest,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.inputmethod.InputConnectionWrapper.sendKeyEvent(KeyEvent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.inputmethod.InputConnectionWrapper.performPrivateCommand(String,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.inputmethod.InputConnectionWrapper.setSelection(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.inputmethod.InputConnectionWrapper.performEditorAction(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.view.inputmethod.InputConnectionWrapper.getSelectedText(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.view.inputmethod.InputConnectionWrapper.getTextAfterCursor(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.inputmethod.InputConnectionWrapper.performContextMenuAction(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.view.inputmethod.BaseInputConnection.getTextBeforeCursor(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.inputmethod.BaseInputConnection.setComposingRegion(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ExtractedText android.view.inputmethod.BaseInputConnection.getExtractedText(ExtractedTextRequest,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.inputmethod.BaseInputConnection.setSelection(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Editable android.view.inputmethod.BaseInputConnection.getEditable() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.view.inputmethod.BaseInputConnection.getSelectedText(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.view.inputmethod.BaseInputConnection.getTextAfterCursor(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.inputmethod.BaseInputConnection.getCursorCapsMode(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.view.inputmethod.CorrectionInfo.getOldText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.view.inputmethod.CorrectionInfo.getNewText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.inputmethod.CorrectionInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.inputmethod.CorrectionInfo.getOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.KeyEvent.getEventTimeNano() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.KeyEvent.getMetaState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.KeyEvent.getMaxKeyCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char android.view.KeyEvent.getDisplayLabel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.KeyEvent.getEventTime() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.KeyEvent.getModifiers() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.KeyEvent.getScanCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
KeyCharacterMap android.view.KeyEvent.getKeyCharacterMap() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.KeyEvent.getFlags() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.view.KeyEvent.getCharacters() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.KeyEvent.getKeyboardDevice() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.KeyEvent.getRepeatCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.KeyEvent.getUnicodeChar(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char android.view.KeyEvent.getMatch(char[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.KeyEvent.getModifierMetaStateMask() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.KeyEvent.getAction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char android.view.KeyEvent.getMatch(char[],int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.KeyEvent.setTainted(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.KeyEvent.getKeyCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.KeyEvent.getSource() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char android.view.KeyEvent.getNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.KeyEvent.getDownTime() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.KeyEvent.getUnicodeChar() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.KeyEvent.getDeviceId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.view.LayoutInflater.onCreateView(View,String,AttributeSet) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.view.LayoutInflater.onCreateView(String,AttributeSet) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.view.LayoutInflater.inflate(XmlPullParser,ViewGroup,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Context android.view.LayoutInflater.getContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.view.LayoutInflater.createViewFromTag(View,String,AttributeSet) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.view.LayoutInflater.createView(String,String,AttributeSet) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.Window.getFeatures() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.Window.setUiOptions(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.Window.getForcedWindowFlags() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Window android.view.Window.getContainer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.Window.setFlags(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
WindowManager android.view.Window.getWindowManager() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TypedArray android.view.Window.getWindowStyle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.Window.getLocalFeatures() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.Window.setUiOptions(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Context android.view.Window.getContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.Window.setBackgroundDrawableResource(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long android.view.ViewPropertyAnimator.getStartDelay() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.ViewPropertyAnimator.getDuration() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.Surface.setLayer(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.Surface.setAlpha(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.Surface.getGenerationId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.Surface.setPosition(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.Surface$CompatibleCanvas.setMatrix(Matrix) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.Surface$CompatibleCanvas.getHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.Surface.setMatrix(float,float,float,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.Surface.setFlags(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.Surface$CompatibleCanvas.getWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.Surface.setPosition(float,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.Surface.setTransparentRegionHint(Region) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.ViewRootImpl$W.dispatchSystemUiVisibilityChanged(int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.ViewRootImpl$W.dispatchWallpaperCommand(String,int,int,int,Bundle,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
AccessibilityInteractionController android.view.ViewRootImpl.getAccessibilityInteractionController() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Rect android.view.ViewRootImpl$2.getSurfaceFrame() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.ViewRootImpl$TakenSurfaceHolder.setKeepScreenOn(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
WindowLeaked android.view.ViewRootImpl.getLocation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.ViewRootImpl$TakenSurfaceHolder.setFormat(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ViewParent android.view.ViewRootImpl.getParent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.ViewRootImpl$W.dispatchAppVisibility(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Surface android.view.ViewRootImpl$2.getSurface() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.ViewRootImpl$TakenSurfaceHolder.setType(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.ViewRootImpl$TakenSurfaceHolder.setFixedSize(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
View android.view.ViewRootImpl.getView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.ViewRootImpl.performHapticFeedback(int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewRootImpl.getHostVisibility() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.View.getVerticalScrollFactor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View$MeasureSpec.getMode(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.sendAccessibilityEventInternal(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setCameraDistance(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getWindowVisibility() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getHorizontalFadingEdgeLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setSaveEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setHorizontalScrollBarEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Animation android.view.View.getAnimation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getScrollBarStyle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HardwareLayer android.view.View.getHardwareLayer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ViewParent android.view.View.getParent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setX(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getFadeHeight(boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getTop() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setVerticalFadingEdgeEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.View.performHapticFeedback(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getLayerType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View$5.setValue(View,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
View android.view.View$DragShadowBuilder.getView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.View.getTopFadingEdgeStrength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getOverScrollMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setIsRootNamespace(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.view.View.getPivotY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getSolidColor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View$3.setValue(View,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getBottomPaddingOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.view.View.getContentDescription() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setFitsSystemWindows(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Handler android.view.View.getHandler() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.View.getBottomFadingEdgeStrength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setScrollX(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setClickable(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getPaddingStart() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getRightPaddingOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.view.View.getBackground() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getBaseline() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View$9.setValue(View,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getDrawingCacheQuality() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.View.getScaleX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Matrix android.view.View.getInverseMatrix() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setWillNotDraw(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getNextFocusForwardId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setDrawingCacheEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getNextFocusDownId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.view.View.getWindowToken() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getVisibility() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setFocusable(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setTagInternal(int,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setSaveFromParentEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getNextFocusUpId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.View.getLeftFadingEdgeStrength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setHorizontalFadingEdgeEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getMeasuredWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getMeasuredHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ViewRootImpl android.view.View.getViewRootImpl() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setWillNotCacheDrawing(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.view.View.getPivotX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getPaddingEnd() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getHorizontalScrollbarHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setPressed(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getSuggestedMinimumWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.View.performHapticFeedback(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getBottom() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setScrollContainer(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.view.View.getScaleY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setFocusableInTouchMode(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.View$6.setValue(View,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getFadeTop(boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getLayoutDirection() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setScrollBarStyle(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.view.View.getTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getMeasuredState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bitmap android.view.View.getDrawingCache(boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.View.getRotation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.View.getHorizontalScrollFactor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setLongClickable(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setVisibility(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ArrayList android.view.View.getTouchables() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setHovered(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.view.View.getTag(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DisplayList android.view.View.getDisplayList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getVerticalScrollbarWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getPaddingLeft() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setFilterTouchesWhenObscured(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setTextDirection(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getVerticalScrollbarPosition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setVerticalScrollBarEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getNextFocusLeftId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getPaddingRight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int[] android.view.View.getDrawableState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getLeft() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getScrollX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setHapticFeedbackEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setSelected(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.View.getGlobalVisibleRect(Rect,Point) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Resources android.view.View.getResources() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.view.View.getRootView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getMeasuredHeightAndState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setKeepScreenOn(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getSuggestedMinimumHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.sendAccessibilityEvent(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.View$4.setValue(View,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getLeftPaddingOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setDuplicateParentStateEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View$MeasureSpec.getSize(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getDrawingCacheBackgroundColor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getRight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getWindowAttachCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getNextFocusRightId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View$7.setValue(View,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getMeasuredWidthAndState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setDrawingCacheQuality(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getScrollY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.View.getRightFadingEdgeStrength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setSoundEffectsEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long android.view.View.getDrawingTime() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Context android.view.View.getContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TouchDelegate android.view.View.getTouchDelegate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Matrix android.view.View.getMatrix() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.View.getRotationX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.View.getRotationY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.View.getX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getTextDirection() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setBackgroundColor(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getAccessibilityViewId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.View.getTranslationX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View$AccessibilityDelegate.sendAccessibilityEvent(View,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getTopPaddingOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IWindowSession android.view.View.getWindowSession() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View$8.setValue(View,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getPaddingBottom() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setScrollY(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.draw(Canvas) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getAccessibilityWindowId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ViewTreeObserver android.view.View.getViewTreeObserver() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getSystemUiVisibility() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AccessibilityNodeInfo android.view.View.createAccessibilityNodeInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getPaddingTop() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View$AccessibilityDelegate.sendAccessibilityEventUnchecked(View,AccessibilityEvent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.view.View.getApplicationWindowToken() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setActivated(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setLayoutDirection(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setY(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.View.getVerticalFadingEdgeLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.View.getY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.sendAccessibilityEventUnchecked(AccessibilityEvent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ArrayList android.view.View.getFocusables(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bitmap android.view.View.getDrawingCache() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.View.getTranslationY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.View.getAlpha() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.View.setBackgroundResource(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
GLES20RecordingCanvas android.view.GLES20RecordingCanvas.getNextPoolable() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.GLES20Canvas.getWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.GLES20Canvas.restoreToCount(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.GLES20Canvas.saveLayer(float,float,float,float,Paint,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.GLES20Canvas.getMaximumBitmapWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.GLES20Canvas.getHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DrawFilter android.view.GLES20Canvas.getDrawFilter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.GLES20Canvas.saveLayerAlpha(float,float,float,float,int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.GLES20Canvas.getSaveCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.GLES20Canvas.getDisplayList(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.GLES20Canvas.saveLayer(RectF,Paint,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.GLES20Canvas.setMatrix(Matrix) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.GLES20Canvas.getMaximumBitmapHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.GLES20Canvas.saveLayerAlpha(RectF,int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.view.IOnKeyguardExitResult$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.view.IOnKeyguardExitResult$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.HardwareCanvas.setBitmap(Bitmap) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.view.IWindow$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindow$Stub$Proxy.dispatchWallpaperCommand(String,int,int,int,Bundle,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindow$Stub$Proxy.dispatchSystemUiVisibilityChanged(int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindow$Stub$Proxy.dispatchWallpaperOffsets(float,float,float,float,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindow$Stub$Proxy.closeSystemDialogs(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindow$Stub$Proxy.executeCommand(String,String,ParcelFileDescriptor) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.view.IWindow$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputChannel android.view.InputQueue.getInputChannel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.textservice.TextServicesManager.setSpellCheckerSubtype(SpellCheckerSubtype) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SpellCheckerInfo android.view.textservice.TextServicesManager.getCurrentSpellChecker() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SpellCheckerInfo[] android.view.textservice.TextServicesManager.getEnabledSpellCheckers() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
TextServicesManager android.view.textservice.TextServicesManager.getInstance() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.view.textservice.TextServicesManager.setCurrentSpellChecker(SpellCheckerInfo) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.textservice.TextServicesManager.setSpellCheckerEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SpellCheckerSubtype android.view.textservice.TextServicesManager.getCurrentSpellCheckerSubtype(boolean) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.view.textservice.SpellCheckerInfo.getId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ComponentName android.view.textservice.SpellCheckerInfo.getComponent() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SpellCheckerSubtype android.view.textservice.SpellCheckerInfo.getSubtypeAt(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ServiceInfo android.view.textservice.SpellCheckerInfo.getServiceInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.view.textservice.SpellCheckerInfo.getSubtypeCount() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.view.textservice.SpellCheckerInfo.getPackageName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.view.textservice.SpellCheckerInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.view.textservice.SpellCheckerInfo.getSettingsActivity() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.view.textservice.TextInfo.getSequence() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.view.textservice.TextInfo.getText() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.view.textservice.TextInfo.getCookie() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.view.textservice.SuggestionsInfo.getSuggestionsCount() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.view.textservice.SuggestionsInfo.getCookie() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.view.textservice.SuggestionsInfo.getSuggestionsAttributes() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.view.textservice.SuggestionsInfo.getSequence() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.view.textservice.SuggestionsInfo.getSuggestionAt(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
CharSequence android.view.textservice.SpellCheckerSubtype.getDisplayName(Context,String,ApplicationInfo) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.view.textservice.SpellCheckerSubtype.getLocale() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.view.textservice.SpellCheckerSubtype.getExtraValue() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.view.textservice.SpellCheckerSubtype.getNameResId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ITextServicesSessionListener android.view.textservice.SpellCheckerSession.getTextServicesSessionListener() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SpellCheckerInfo android.view.textservice.SpellCheckerSession.getSpellChecker() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.view.textservice.SpellCheckerSession$SpellCheckerSessionListenerImpl.onGetSuggestions(SuggestionsInfo[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ISpellCheckerSessionListener android.view.textservice.SpellCheckerSession.getSpellCheckerSessionListener() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
IBinder android.view.IRotationWatcher$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.IRotationWatcher$Stub$Proxy.onRotationChanged(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.view.IRotationWatcher$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HardwareCanvas android.view.GLES20TextureLayer.getCanvas() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SurfaceTexture android.view.GLES20TextureLayer.getSurfaceTexture() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.GLES20TextureLayer.setTransform(Matrix) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InputDevice android.view.InputEvent.getDevice() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Surface android.view.SurfaceView$4.getSurface() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.SurfaceView.setZOrderOnTop(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.SurfaceView.setZOrderMediaOverlay(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SurfaceHolder android.view.SurfaceView.getHolder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.SurfaceView.setFrame(int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Rect android.view.SurfaceView$4.getSurfaceFrame() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.SurfaceView.setVisibility(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.view.accessibility.AccessibilityNodeInfo.getClassName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.view.accessibility.AccessibilityNodeInfo.getPackageName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityNodeInfo.setBoundsInScreen(Rect) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.accessibility.AccessibilityNodeInfo.getWindowId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AccessibilityNodeInfo android.view.accessibility.AccessibilityNodeInfo.getParent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityNodeInfo.setChecked(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.accessibility.AccessibilityNodeInfo.performAction(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityNodeInfo.setCheckable(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityNodeInfo.setParent(View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityNodeInfo.setSelected(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
AccessibilityNodeInfo android.view.accessibility.AccessibilityNodeInfo.getChild(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityNodeInfo.setFocused(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.accessibility.AccessibilityNodeInfo.getActions() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityNodeInfo.setFocusable(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityNodeInfo.setEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.view.accessibility.AccessibilityNodeInfo.getContentDescription() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityNodeInfo.setPassword(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityNodeInfo.setClickable(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityNodeInfo.setLongClickable(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityNodeInfo.setScrollable(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityNodeInfo.setBoundsInParent(Rect) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.view.accessibility.AccessibilityNodeInfo.getText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityNodeInfo.setSource(View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.accessibility.AccessibilityNodeInfo.getChildCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.view.accessibility.AccessibilityManager.getInstalledAccessibilityServiceList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IAccessibilityManagerClient android.view.accessibility.AccessibilityManager.getClient() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.view.accessibility.AccessibilityManager.getAccessibilityServiceList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.view.accessibility.AccessibilityManager.getEnabledAccessibilityServiceList(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AccessibilityManager android.view.accessibility.AccessibilityManager.getInstance(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityManager.sendAccessibilityEvent(AccessibilityEvent) - @DSSink({DSSinkKind.LOG})
AccessibilityRecord android.view.accessibility.AccessibilityEvent.getRecord(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.view.accessibility.AccessibilityEvent.getPackageName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.accessibility.AccessibilityEvent.getEventType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.accessibility.AccessibilityEvent.getEventTime() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityEvent.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.accessibility.AccessibilityEvent.getRecordCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityEvent.setSealed(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.accessibility.AccessibilityRecord.getItemCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.view.accessibility.AccessibilityRecord.getBeforeText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Parcelable android.view.accessibility.AccessibilityRecord.getParcelableData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityRecord.setPassword(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.accessibility.AccessibilityRecord.getMaxScrollX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.accessibility.AccessibilityRecord.getFromIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityRecord.setSource(View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.accessibility.AccessibilityRecord.getAddedCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.view.accessibility.AccessibilityRecord.getClassName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.accessibility.AccessibilityRecord.getMaxScrollY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.accessibility.AccessibilityRecord.getRemovedCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.view.accessibility.AccessibilityRecord.getText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityRecord.setEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.accessibility.AccessibilityRecord.getCurrentItemIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AccessibilityNodeInfo android.view.accessibility.AccessibilityRecord.getSource() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityRecord.setChecked(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.view.accessibility.AccessibilityRecord.getContentDescription() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.accessibility.AccessibilityRecord.getToIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityRecord.setScrollable(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.accessibility.AccessibilityRecord.getWindowId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityRecord.setFullScreen(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.accessibility.AccessibilityRecord.getScrollX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.accessibility.AccessibilityRecord.getScrollY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.view.accessibility.IAccessibilityManagerClient$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.IAccessibilityManagerClient$Stub$Proxy.setState(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.view.accessibility.IAccessibilityManagerClient$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.view.accessibility.IAccessibilityManager$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.IAccessibilityManager$Stub$Proxy.removeAccessibilityInteractionConnection(IWindow) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.view.accessibility.IAccessibilityManager$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.accessibility.IAccessibilityManager$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IAccessibilityServiceConnection android.view.accessibility.AccessibilityInteractionClient.getConnection(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AccessibilityInteractionClient android.view.accessibility.AccessibilityInteractionClient.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.AccessibilityInteractionClient.addConnection(int,IAccessibilityServiceConnection) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub$Proxy.setFindAccessibilityNodeInfosResult(List,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub$Proxy.setFindAccessibilityNodeInfoResult(AccessibilityNodeInfo,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub$Proxy.setPerformAccessibilityActionResult(boolean,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.view.accessibility.IAccessibilityInteractionConnection$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.view.accessibility.IAccessibilityInteractionConnection$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.accessibility.IAccessibilityInteractionConnection$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CompatibilityInfo android.view.CompatibilityInfoHolder.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CompatibilityInfo android.view.CompatibilityInfoHolder.getIfNeeded() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bundle android.view.IWindowSession$Stub$Proxy.sendWallpaperCommand(IBinder,String,int,int,int,Bundle,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.IWindowSession$Stub$Proxy.outOfMemory(IWindow) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.IWindowSession$Stub$Proxy.performHapticFeedback(IWindow,int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowSession$Stub$Proxy.finishDrawing(IWindow) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowSession$Stub$Proxy.setInTouchMode(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowSession$Stub$Proxy.wallpaperCommandComplete(IBinder,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowSession$Stub$Proxy.setTransparentRegion(IWindow,Region) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowSession$Stub$Proxy.dragRecipientExited(IWindow) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowSession$Stub$Proxy.getDisplayFrame(IWindow,Rect) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.IWindowSession$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.IWindowSession$Stub$Proxy.performDrag(IWindow,IBinder,float,float,float,float,ClipData) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowSession$Stub$Proxy.dragRecipientEntered(IWindow) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowSession$Stub$Proxy.remove(IWindow) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowSession$Stub$Proxy.wallpaperOffsetsComplete(IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowSession$Stub$Proxy.setWallpaperPosition(IBinder,float,float,float,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowSession$Stub$Proxy.performDeferredDestroy(IWindow) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.view.IWindowSession$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.view.IWindowSession$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowSession$Stub$Proxy.setInsets(IWindow,int,Rect,Rect,Region) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.IWindowSession$Stub$Proxy.reportDropResult(IWindow,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.view.IWindowSession$Stub$Proxy.prepareDrag(IWindow,int,int,int,Surface) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int[] android.view.HardwareRenderer$Gl20Renderer.getConfig(boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.HardwareRenderer.setupDiskCache(File) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.HardwareRenderer$Gl20Renderer.setup(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
HardwareRenderer android.view.HardwareRenderer.createGlRenderer(int,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.HardwareRenderer$GlRenderer.getHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.HardwareRenderer$GlRenderer.getWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HardwareCanvas android.view.HardwareRenderer$GlRenderer.getCanvas() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getScaledEdgeSlop() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getScrollDefaultDelay() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getMaximumFlingVelocity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getPressedStateDuration() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.ViewConfiguration.getSendRecurringAccessibilityEventsInterval() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getFadingEdgeLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getHoverTapSlop() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getKeyRepeatDelay() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getScaledMinimumFlingVelocity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getMaximumDrawingCacheSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getTapTimeout() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ViewConfiguration android.view.ViewConfiguration.get(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getScaledTouchSlop() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getScaledWindowTouchSlop() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getLongPressTimeout() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getScaledMaximumDrawingCacheSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getEdgeSlop() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getTouchSlop() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getScaledPagingTouchSlop() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getJumpTapTimeout() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getScaledOverflingDistance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getScaledFadingEdgeLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getHoverTapTimeout() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.ViewConfiguration.getGlobalActionKeyTimeout() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getDoubleTapTimeout() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getScaledScrollBarSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getDoubleTapSlop() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getKeyRepeatTimeout() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.ViewConfiguration.getScrollFriction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getMinimumFlingVelocity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getScrollBarSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getWindowTouchSlop() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getScaledOverscrollDistance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getScrollBarFadeDuration() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.ViewConfiguration.getZoomControlsTimeout() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getScaledDoubleTapSlop() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewConfiguration.getScaledMaximumFlingVelocity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewStub.getLayoutResource() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.ViewStub.setVisibility(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.view.ViewStub.getInflatedId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.animation.AnticipateInterpolator.getInterpolation(float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.animation.AccelerateInterpolator.getInterpolation(float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.animation.GridLayoutAnimationController.getRowDelay() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.animation.GridLayoutAnimationController.getDelayForView(View) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.animation.GridLayoutAnimationController.getColumnDelay() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.animation.GridLayoutAnimationController.getDirection() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.animation.GridLayoutAnimationController.getDirectionPriority() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Matrix android.view.animation.Transformation.getMatrix() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.animation.Transformation.set(Transformation) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.view.animation.Transformation.getAlpha() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.animation.Transformation.getTransformationType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.animation.CycleInterpolator.getInterpolation(float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.animation.BounceInterpolator.getInterpolation(float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.animation.LayoutAnimationController.getDelayForView(View) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.animation.LayoutAnimationController.getOrder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.animation.LayoutAnimationController.setAnimation(Context,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.view.animation.LayoutAnimationController.getDelay() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Animation android.view.animation.LayoutAnimationController.getAnimation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Interpolator android.view.animation.LayoutAnimationController.getInterpolator() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.animation.LayoutAnimationController.setInterpolator(Context,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Animation android.view.animation.LayoutAnimationController.getAnimationForView(View) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.animation.AnimationSet.getDuration() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.animation.AnimationSet.setStartTime(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.animation.AnimationSet.setFillAfter(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.view.animation.AnimationSet.getAnimations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.animation.AnimationSet.setRepeatMode(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.animation.AnimationSet.setStartOffset(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.animation.AnimationSet.setFillBefore(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long android.view.animation.AnimationSet.getStartTime() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.animation.AnimationSet.setDuration(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.view.animation.OvershootInterpolator.getInterpolation(float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.animation.AccelerateDecelerateInterpolator.getInterpolation(float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.animation.DecelerateInterpolator.getInterpolation(float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.animation.LinearInterpolator.getInterpolation(float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.animation.Animation.getDuration() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Animation android.view.animation.Animation.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.animation.Animation.getStartTime() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.animation.Animation.getBackgroundColor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.animation.Animation.getRepeatMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.animation.Animation.getStartOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.animation.Animation.getDetachWallpaper() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.view.animation.Animation.computeDurationHint() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.animation.Animation.getZAdjustment() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.animation.Animation.getRepeatCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.animation.Animation.resolveSize(int,float,int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.animation.Animation.getScaleFactor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.animation.Animation.getFillBefore() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.view.animation.Animation.setInterpolator(Context,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.view.animation.Animation.getInvalidateRegion(int,int,int,int,RectF,Transformation) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Interpolator android.view.animation.Animation.getInterpolator() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.animation.Animation.getFillAfter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.animation.Animation.getTransformation(long,Transformation) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.view.animation.Animation.getTransformation(long,Transformation,float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.view.animation.AnticipateOvershootInterpolator.getInterpolation(float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Interpolator android.view.animation.AnimationUtils.loadInterpolator(Context,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
LayoutAnimationController android.view.animation.AnimationUtils.loadLayoutAnimation(Context,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Animation android.view.animation.AnimationUtils.loadAnimation(Context,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.GLES20DisplayList.getSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.view.GLES20DisplayList.getNativeDisplayList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.accessibilityservice.AccessibilityServiceInfo.getDescription() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.accessibilityservice.AccessibilityServiceInfo.getCanRetrieveWindowContent() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.accessibilityservice.AccessibilityServiceInfo.getId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.accessibilityservice.AccessibilityServiceInfo.getSettingsActivityName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ResolveInfo android.accessibilityservice.AccessibilityServiceInfo.getResolveInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy.setServiceInfo(AccessibilityServiceInfo) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.accessibilityservice.IAccessibilityServiceConnection$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.accessibilityservice.IAccessibilityServiceConnection$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.drm.mobile1.DrmRawContent.getRightsAddress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream android.drm.mobile1.DrmRawContent.getContentInputStream(DrmRights) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.drm.mobile1.DrmRawContent.getContentLength(DrmRights) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.drm.mobile1.DrmRawContent.getRawType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.drm.mobile1.DrmRawContent.getContentType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DrmRightsManager android.drm.mobile1.DrmRightsManager.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.drm.mobile1.DrmRightsManager.getRightsList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DrmRights android.drm.mobile1.DrmRightsManager.installRights(InputStream,int,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DrmConstraintInfo android.drm.mobile1.DrmRights.getConstraint(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.drm.mobile1.DrmConstraintInfo.getInterval() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.drm.mobile1.DrmConstraintInfo.getCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Date android.drm.mobile1.DrmConstraintInfo.getEndDate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Date android.drm.mobile1.DrmConstraintInfo.getStartDate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.opengl.GLSurfaceView.setEGLConfigChooser(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.opengl.GLSurfaceView.setEGLConfigChooser(int,int,int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.opengl.GLSurfaceView.setRenderMode(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.opengl.GLSurfaceView.getPreserveEGLContextOnPause() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.opengl.GLSurfaceView.getRenderMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.opengl.GLSurfaceView.getDebugFlags() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.opengl.GLSurfaceView$GLThread.getRenderMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.opengl.GLLogWrapper$PointerInfo.getStride() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
EGLContext android.opengl.ManagedEGLContext.getContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.opengl.GLUtils.getEGLErrorString(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.opengl.GLUtils.getInternalFormat(Bitmap) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.opengl.GLUtils.getType(Bitmap) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.opengl.GLException.getError() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Parcelable android.support.v13.app.FragmentPagerAdapter.saveState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.support.v13.app.FragmentPagerAdapter.setPrimaryItem(ViewGroup,int,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.support.v13.app.FragmentPagerAdapter.instantiateItem(ViewGroup,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.support.v13.app.FragmentCompat$ICSFragmentCompatImpl.setMenuVisibility(Fragment,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v13.app.FragmentCompat$BaseFragmentCompatImpl.setUserVisibleHint(Fragment,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v13.app.FragmentCompat.setMenuVisibility(Fragment,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v13.app.FragmentCompat$ICSMR1FragmentCompatImpl.setUserVisibleHint(Fragment,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v13.app.FragmentCompat.setUserVisibleHint(Fragment,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v13.app.FragmentCompat$BaseFragmentCompatImpl.setMenuVisibility(Fragment,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v13.app.FragmentCompatICS.setMenuVisibility(Fragment,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v13.app.FragmentCompatICSMR1.setUserVisibleHint(Fragment,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Parcelable android.support.v4.view.PagerAdapter.saveState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.PagerAdapter.startUpdate(ViewGroup) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.support.v4.view.PagerAdapter.getItemPosition(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.PagerAdapter.setPrimaryItem(ViewGroup,int,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.support.v4.view.PagerAdapter.getPageTitle(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.PagerAdapter.setPrimaryItem(View,int,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.ViewCompat$ICSViewCompatImpl.setAccessibilityDelegate(View,AccessibilityDelegateCompat) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.ViewCompat.setAccessibilityDelegate(View,AccessibilityDelegateCompat) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.ViewCompat$BaseViewCompatImpl.setAccessibilityDelegate(View,AccessibilityDelegateCompat) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.support.v4.view.ViewConfigurationCompat.getScaledPagingTouchSlop(ViewConfiguration) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl.getXVelocity(VelocityTracker,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.support.v4.view.VelocityTrackerCompat.getYVelocity(VelocityTracker,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.support.v4.view.VelocityTrackerCompat.getXVelocity(VelocityTracker,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl.getYVelocity(VelocityTracker,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl.getYVelocity(VelocityTracker,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl.getXVelocity(VelocityTracker,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl.getY(MotionEvent,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.support.v4.view.MotionEventCompat.getActionIndex(MotionEvent) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.support.v4.view.MotionEventCompat.getY(MotionEvent,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl.getX(MotionEvent,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl.getX(MotionEvent,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl.getPointerId(MotionEvent,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.support.v4.view.MotionEventCompat.getX(MotionEvent,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.support.v4.view.MotionEventCompat.getPointerCount(MotionEvent) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl.getY(MotionEvent,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl.getPointerCount(MotionEvent) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.support.v4.view.MotionEventCompat.getPointerId(MotionEvent,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.ViewCompatICS.setAccessibilityDelegate(View,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.AccessibilityDelegateCompatIcs.sendAccessibilityEventUnchecked(Object,View,AccessibilityEvent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.AccessibilityDelegateCompatIcs.sendAccessibilityEvent(Object,View,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.AccessibilityDelegateCompatIcs$1.sendAccessibilityEvent(View,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityRecordCompat.setSource(View,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordStubImpl.setSource(Object,View,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setEnabled(Object,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setBoundsInScreen(Object,Rect) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setParent(Object,View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setClassName(Object,CharSequence) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setBoundsInParent(Object,Rect) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setPackageName(Object,CharSequence) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setContentDescription(Object,CharSequence) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.support.v4.view.accessibility.AccessibilityNodeProviderCompat.getProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setParent(View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl.setParent(Object,View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl.setContentDescription(Object,CharSequence) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl.setContentDescription(Object,CharSequence) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl.setBoundsInParent(Object,Rect) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl.setBoundsInScreen(Object,Rect) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl.setPackageName(Object,CharSequence) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl.setClassName(Object,CharSequence) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl.setBoundsInParent(Object,Rect) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl.setEnabled(Object,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setBoundsInScreen(Rect) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl.setParent(Object,View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl.setClassName(Object,CharSequence) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl.setPackageName(Object,CharSequence) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl.setBoundsInScreen(Object,Rect) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl.setEnabled(Object,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setBoundsInParent(Rect) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.support.v4.view.AccessibilityDelegateCompat.getBridge() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl.sendAccessibilityEventUnchecked(Object,View,AccessibilityEvent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl.sendAccessibilityEvent(Object,View,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.AccessibilityDelegateCompat.sendAccessibilityEvent(View,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl.sendAccessibilityEvent(Object,View,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl$1.sendAccessibilityEvent(View,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.AccessibilityDelegateCompat.sendAccessibilityEventUnchecked(View,AccessibilityEvent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.ViewPager.setCurrentItemInternal(int,boolean,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.ViewPager$SavedState.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.support.v4.view.ViewPager$2.getInterpolation(float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.ViewPager.setCurrentItemInternal(int,boolean,boolean,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.support.v4.view.ViewPager.getCurrentItem() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.ViewPager.draw(Canvas) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.ViewPager.setCurrentItem(int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.view.ViewPager.setCurrentItem(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
PagerAdapter android.support.v4.view.ViewPager.getAdapter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl.setSize(Object,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.widget.EdgeEffectCompat.setSize(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl.setSize(Object,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.widget.EdgeEffectCompatIcs.setSize(Object,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.support.v4.os.ParcelableCompat$CompatCreator.createFromParcel(Parcel) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.support.v4.os.ParcelableCompatCreatorHoneycombMR2.createFromParcel(Parcel,ClassLoader) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.support.v4.os.ParcelableCompatCreatorHoneycombMR2.createFromParcel(Parcel) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.support.v4.content.LocalBroadcastManager.sendBroadcast(Intent) - @DSSink({DSSinkKind.LOG})
LocalBroadcastManager android.support.v4.content.LocalBroadcastManager.getInstance(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.content.LocalBroadcastManager.registerReceiver(BroadcastReceiver,IntentFilter) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Notification android.support.v4.app.NotificationCompat$Builder.getNotification() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Notification android.support.v4.app.NotificationCompat$Style.build() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PendingIntent android.support.v4.app.TaskStackBuilder.getPendingIntent(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PendingIntent android.support.v4.app.TaskStackBuilderHoneycomb.getActivitiesPendingIntent(Context,int,Intent[],int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
NetworkInfo android.support.v4.net.ConnectivityManagerCompat.getNetworkInfoFromBroadcast(ConnectivityManager,Intent) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.support.v4.net.TrafficStatsCompat$BaseTrafficStatsCompatImpl.setThreadStatsTag(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.net.TrafficStatsCompat.setThreadStatsTag(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.net.TrafficStatsCompat$IcsTrafficStatsCompatImpl.setThreadStatsTag(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.support.v4.net.TrafficStatsCompatIcs.setThreadStatsTag(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InputMethod android.inputmethodservice.IInputMethodWrapper.getInternalInputMethod() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.inputmethodservice.IInputMethodWrapper.dump(FileDescriptor,PrintWriter,String[]) - @DSSink({DSSinkKind.FILE})
void android.inputmethodservice.IInputMethodWrapper.executeMessage(Message) - @DSSink({DSSinkKind.FILE})
int android.inputmethodservice.SoftInputWindow.getSize() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.inputmethodservice.SoftInputWindow.setGravity(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.inputmethodservice.SoftInputWindow.setSize(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.inputmethodservice.AbstractInputMethodService.dump(FileDescriptor,PrintWriter,String[]) - @DSSink({DSSinkKind.FILE})
List android.inputmethodservice.Keyboard.getModifierKeys() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.inputmethodservice.Keyboard.getKeyWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.inputmethodservice.Keyboard.getKeys() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.inputmethodservice.Keyboard.getMinWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.inputmethodservice.Keyboard.getShiftKeyIndex() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.inputmethodservice.Keyboard.getDimensionOrFraction(TypedArray,int,int,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int[] android.inputmethodservice.Keyboard$Key.getCurrentDrawableState() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.inputmethodservice.Keyboard.getKeyHeight() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.inputmethodservice.Keyboard.getHorizontalGap() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int[] android.inputmethodservice.Keyboard.getNearestKeys(int,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.inputmethodservice.Keyboard.getVerticalGap() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int[] android.inputmethodservice.Keyboard.getShiftKeyIndices() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.inputmethodservice.Keyboard.getHeight() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
InputMethodSession android.inputmethodservice.IInputMethodSessionWrapper.getInternalInputMethodSession() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.inputmethodservice.IInputMethodSessionWrapper.executeMessage(Message) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InputBinding android.inputmethodservice.InputMethodService.getCurrentInputBinding() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Dialog android.inputmethodservice.InputMethodService.getWindow() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.inputmethodservice.InputMethodService.setCandidatesView(View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.inputmethodservice.InputMethodService.getBackDisposition() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.inputmethodservice.InputMethodService.setExtractViewShown(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.inputmethodservice.InputMethodService.getMaxWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.inputmethodservice.InputMethodService.sendDefaultEditorAction(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
LayoutInflater android.inputmethodservice.InputMethodService.getLayoutInflater() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.inputmethodservice.InputMethodService.getCurrentInputStarted() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.inputmethodservice.InputMethodService.getCandidatesHiddenVisibility() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
EditorInfo android.inputmethodservice.InputMethodService.getCurrentInputEditorInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.inputmethodservice.InputMethodService.sendDownUpKeyEvents(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.inputmethodservice.InputMethodService.onExtractTextContextMenuItem(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InputConnection android.inputmethodservice.InputMethodService.getCurrentInputConnection() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.inputmethodservice.InputMethodService.dump(FileDescriptor,PrintWriter,String[]) - @DSSink({DSSinkKind.FILE})
void android.inputmethodservice.InputMethodService.sendKeyChar(char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.inputmethodservice.InputMethodService.setCandidatesViewShown(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.inputmethodservice.InputMethodService.getTextForImeAction(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.inputmethodservice.ExtractEditText.setSpan_internal(Object,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.inputmethodservice.ExtractEditText.setExtractedText(ExtractedText) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.inputmethodservice.ExtractEditText.setCursorPosition_internal(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.inputmethodservice.ExtractEditLayout$ExtractActionMode.setSubtitle(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Menu android.inputmethodservice.ExtractEditLayout$ExtractActionMode.getMenu() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
View android.inputmethodservice.ExtractEditLayout$ExtractActionMode.getCustomView() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.inputmethodservice.ExtractEditLayout$ExtractActionMode.setTitle(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.inputmethodservice.ExtractEditLayout$ExtractActionMode.setCustomView(View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.inputmethodservice.ExtractEditLayout$ExtractActionMode.getTitle() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
MenuInflater android.inputmethodservice.ExtractEditLayout$ExtractActionMode.getMenuInflater() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
CharSequence android.inputmethodservice.ExtractEditLayout$ExtractActionMode.getSubtitle() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
float android.inputmethodservice.KeyboardView$SwipeTracker.getXVelocity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.inputmethodservice.KeyboardView.setVerticalCorrection(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.inputmethodservice.KeyboardView.setShifted(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.inputmethodservice.KeyboardView$SwipeTracker.getYVelocity() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Keyboard android.inputmethodservice.KeyboardView.getKeyboard() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Instrumentation android.test.InstrumentationTestCase.getInstrumentation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.test.InstrumentationTestCase.sendRepeatedKeys(int[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.test.InstrumentationTestCase.sendKeys(int[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.test.InstrumentationTestCase.sendKeys(String) - @DSSink({DSSinkKind.LOG})
Object android.test.IsolatedContext$MockAccountManager$MockAccountManagerFuture.getResult(long,TimeUnit) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.test.IsolatedContext.getFilesDir() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.test.IsolatedContext.getAndClearBroadcastIntents() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.test.IsolatedContext.getSystemService(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.test.IsolatedContext.sendOrderedBroadcast(Intent,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.test.IsolatedContext.bindService(Intent,ServiceConnection,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.test.IsolatedContext$MockAccountManager$MockAccountManagerFuture.getResult() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Account[] android.test.IsolatedContext$MockAccountManager.getAccounts() - @DSSource({DSSourceKind.ACCOUNT_INFORMATION})
void android.test.IsolatedContext.sendBroadcast(Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ContentResolver android.test.IsolatedContext.getContentResolver() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IContentProvider android.test.mock.MockContentResolver.acquireExistingProvider(Context,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.test.mock.MockContentResolver.addProvider(String,ContentProvider) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] android.nfc.Tag.getTechList() - @DSSource({DSSourceKind.NFC})
INfcTag android.nfc.Tag.getTagService() - @DSSource({DSSourceKind.NFC})
byte[] android.nfc.Tag.readBytesWithNull(Parcel) - @DSSource({DSSourceKind.NFC})
void android.nfc.Tag.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.NFC})
int android.nfc.Tag.getServiceHandle() - @DSSource({DSSourceKind.NFC})
int android.nfc.Tag.getConnectedTechnology() - @DSSource({DSSourceKind.NFC})
Bundle android.nfc.Tag.getTechExtras(int) - @DSSource({DSSourceKind.NFC})
byte[] android.nfc.Tag.getId() - @DSSource({DSSourceKind.NFC})
NfcAdapter android.nfc.NfcAdapter.getDefaultAdapter(Context) - @DSSource({DSSourceKind.NFC})
NfcAdapter android.nfc.NfcAdapter.getNfcAdapter(Context) - @DSSource({DSSourceKind.NFC})
INfcTag android.nfc.NfcAdapter.getTagService() - @DSSource({DSSourceKind.NFC})
INfcAdapter android.nfc.NfcAdapter.getService() - @DSSource({DSSourceKind.NFC})
NfcAdapter android.nfc.NfcAdapter.getDefaultAdapter() - @DSSource({DSSourceKind.NFC})
INfcAdapterExtras android.nfc.NfcAdapter.getNfcAdapterExtrasInterface() - @DSSource({DSSourceKind.NFC})
Context android.nfc.NfcAdapter.getContext() - @DSSource({DSSourceKind.NFC})
void android.nfc.NfcAdapter.setNdefPushMessage(NdefMessage,Activity,Activity[]) - @DSSink({DSSinkKind.NFC})
void android.nfc.NfcAdapter.enableForegroundDispatch(Activity,PendingIntent,IntentFilter[],String[][]) - @DSSink({DSSinkKind.NFC})
int android.nfc.NfcAdapter.getAdapterState() - @DSSource({DSSourceKind.NFC})
byte[] android.nfc.NdefMessage.toByteArray() - @DSSource({DSSourceKind.NFC})
NdefRecord[] android.nfc.NdefMessage.getRecords() - @DSSource({DSSourceKind.NFC})
void android.nfc.NdefMessage.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.NFC})
NfcF android.nfc.tech.NfcF.get(Tag) - @DSSource({DSSourceKind.NFC})
byte[] android.nfc.tech.NfcF.transceive(byte[]) - @DSSource({DSSourceKind.NFC})
byte[] android.nfc.tech.NfcF.getManufacturer() - @DSSource({DSSourceKind.NFC})
void android.nfc.tech.NfcF.setTimeout(int) - @DSSink({DSSinkKind.NFC})
byte[] android.nfc.tech.NfcF.getSystemCode() - @DSSource({DSSourceKind.NFC})
int android.nfc.tech.NfcF.getMaxTransceiveLength() - @DSSource({DSSourceKind.NFC})
int android.nfc.tech.NfcF.getTimeout() - @DSSource({DSSourceKind.NFC})
byte android.nfc.tech.NfcV.getResponseFlags() - @DSSource({DSSourceKind.NFC})
byte android.nfc.tech.NfcV.getDsfId() - @DSSource({DSSourceKind.NFC})
byte[] android.nfc.tech.NfcV.transceive(byte[]) - @DSSource({DSSourceKind.NFC})
NfcV android.nfc.tech.NfcV.get(Tag) - @DSSource({DSSourceKind.NFC})
int android.nfc.tech.NfcV.getMaxTransceiveLength() - @DSSource({DSSourceKind.NFC})
int android.nfc.tech.Ndef.getMaxSize() - @DSSource({DSSourceKind.NFC})
NdefMessage android.nfc.tech.Ndef.getNdefMessage() - @DSSource({DSSourceKind.NFC})
NdefMessage android.nfc.tech.Ndef.getCachedNdefMessage() - @DSSource({DSSourceKind.NFC})
Ndef android.nfc.tech.Ndef.get(Tag) - @DSSource({DSSourceKind.NFC})
String android.nfc.tech.Ndef.getType() - @DSSource({DSSourceKind.NFC})
int android.nfc.tech.NfcB.getMaxTransceiveLength() - @DSSource({DSSourceKind.NFC})
byte[] android.nfc.tech.NfcB.getProtocolInfo() - @DSSource({DSSourceKind.NFC})
byte[] android.nfc.tech.NfcB.transceive(byte[]) - @DSSource({DSSourceKind.NFC})
byte[] android.nfc.tech.NfcB.getApplicationData() - @DSSource({DSSourceKind.NFC})
NfcB android.nfc.tech.NfcB.get(Tag) - @DSSource({DSSourceKind.NFC})
Tag android.nfc.tech.BasicTagTechnology.getTag() - @DSSource({DSSourceKind.NFC})
byte[] android.nfc.tech.BasicTagTechnology.transceive(byte[],boolean) - @DSSource({DSSourceKind.NFC})
int android.nfc.tech.BasicTagTechnology.getMaxTransceiveLengthInternal() - @DSSource({DSSourceKind.NFC})
void android.nfc.tech.IsoDep.setTimeout(int) - @DSSink({DSSinkKind.NFC})
byte[] android.nfc.tech.IsoDep.getHiLayerResponse() - @DSSource({DSSourceKind.NFC})
int android.nfc.tech.IsoDep.getTimeout() - @DSSource({DSSourceKind.NFC})
int android.nfc.tech.IsoDep.getMaxTransceiveLength() - @DSSource({DSSourceKind.NFC})
IsoDep android.nfc.tech.IsoDep.get(Tag) - @DSSource({DSSourceKind.NFC})
byte[] android.nfc.tech.IsoDep.transceive(byte[]) - @DSSource({DSSourceKind.NFC})
byte[] android.nfc.tech.IsoDep.getHistoricalBytes() - @DSSource({DSSourceKind.NFC})
NdefFormatable android.nfc.tech.NdefFormatable.get(Tag) - @DSSource({DSSourceKind.NFC})
int android.nfc.tech.NfcA.getTimeout() - @DSSource({DSSourceKind.NFC})
short android.nfc.tech.NfcA.getSak() - @DSSource({DSSourceKind.NFC})
int android.nfc.tech.NfcA.getMaxTransceiveLength() - @DSSource({DSSourceKind.NFC})
byte[] android.nfc.tech.NfcA.transceive(byte[]) - @DSSource({DSSourceKind.NFC})
byte[] android.nfc.tech.NfcA.getAtqa() - @DSSource({DSSourceKind.NFC})
NfcA android.nfc.tech.NfcA.get(Tag) - @DSSource({DSSourceKind.NFC})
void android.nfc.tech.NfcA.setTimeout(int) - @DSSink({DSSinkKind.NFC})
int android.nfc.tech.MifareClassic.getType() - @DSSource({DSSourceKind.NFC})
int android.nfc.tech.MifareClassic.getBlockCount() - @DSSource({DSSourceKind.NFC})
void android.nfc.tech.MifareClassic.decrement(int,int) - @DSSink({DSSinkKind.NFC})
MifareClassic android.nfc.tech.MifareClassic.get(Tag) - @DSSource({DSSourceKind.NFC})
int android.nfc.tech.MifareClassic.getMaxTransceiveLength() - @DSSource({DSSourceKind.NFC})
int android.nfc.tech.MifareClassic.getBlockCountInSector(int) - @DSSource({DSSourceKind.NFC})
int android.nfc.tech.MifareClassic.getSize() - @DSSource({DSSourceKind.NFC})
int android.nfc.tech.MifareClassic.getTimeout() - @DSSource({DSSourceKind.NFC})
void android.nfc.tech.MifareClassic.setTimeout(int) - @DSSink({DSSinkKind.NFC})
int android.nfc.tech.MifareClassic.getSectorCount() - @DSSource({DSSourceKind.NFC})
byte[] android.nfc.tech.MifareClassic.readBlock(int) - @DSSource({DSSourceKind.NFC})
void android.nfc.tech.MifareClassic.increment(int,int) - @DSSink({DSSinkKind.NFC})
byte[] android.nfc.tech.MifareClassic.transceive(byte[]) - @DSSource({DSSourceKind.NFC})
void android.nfc.tech.MifareUltralight.setTimeout(int) - @DSSink({DSSinkKind.NFC})
int android.nfc.tech.MifareUltralight.getTimeout() - @DSSource({DSSourceKind.NFC})
byte[] android.nfc.tech.MifareUltralight.readPages(int) - @DSSource({DSSourceKind.NFC})
int android.nfc.tech.MifareUltralight.getType() - @DSSource({DSSourceKind.NFC})
byte[] android.nfc.tech.MifareUltralight.transceive(byte[]) - @DSSource({DSSourceKind.NFC})
int android.nfc.tech.MifareUltralight.getMaxTransceiveLength() - @DSSource({DSSourceKind.NFC})
MifareUltralight android.nfc.tech.MifareUltralight.get(Tag) - @DSSource({DSSourceKind.NFC})
String[][] android.nfc.TechListParcel.getTechLists() - @DSSource({DSSourceKind.NFC})
short android.nfc.NdefRecord.getTnf() - @DSSource({DSSourceKind.NFC})
byte[] android.nfc.NdefRecord.toByteArray() - @DSSource({DSSourceKind.NFC})
byte[] android.nfc.NdefRecord.getPayload() - @DSSource({DSSourceKind.NFC})
byte[] android.nfc.NdefRecord.getType() - @DSSource({DSSourceKind.NFC})
byte[] android.nfc.NdefRecord.getId() - @DSSource({DSSourceKind.NFC})
NdefRecord android.nfc.NdefRecord.createUri(String) - @DSSource({DSSourceKind.NFC})
int android.nfc.INfcAdapterExtras$Stub$Proxy.getCardEmulationRoute(String) - @DSSource({DSSourceKind.NFC})
String android.nfc.INfcAdapterExtras$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NFC})
Bundle android.nfc.INfcAdapterExtras$Stub$Proxy.transceive(String,byte[]) - @DSSource({DSSourceKind.NFC})
Bundle android.nfc.INfcAdapterExtras$Stub$Proxy.close(String,IBinder) - @DSSource({DSSourceKind.NFC})
Bundle android.nfc.INfcAdapterExtras$Stub$Proxy.open(String,IBinder) - @DSSink({DSSinkKind.NFC})
void android.nfc.INfcAdapterExtras$Stub$Proxy.authenticate(String,byte[]) - @DSSink({DSSinkKind.NFC})
void android.nfc.INfcAdapterExtras$Stub$Proxy.setCardEmulationRoute(String,int) - @DSSink({DSSinkKind.NFC})
boolean android.nfc.INfcAdapterExtras$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.NFC})
IBinder android.nfc.INfcAdapterExtras$Stub.asBinder() - @DSSource({DSSourceKind.NFC})
byte[] android.nfc.TransceiveResult.getResponseOrThrow() - @DSSource({DSSourceKind.NFC})
void android.nfc.INfcAdapter$Stub$Proxy.setForegroundDispatch(PendingIntent,IntentFilter[],TechListParcel) - @DSSink({DSSinkKind.NFC})
int android.nfc.INfcAdapter$Stub$Proxy.getState() - @DSSource({DSSourceKind.NFC})
boolean android.nfc.INfcAdapter$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.NFC})
String android.nfc.INfcAdapter$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NFC})
INfcTag android.nfc.INfcAdapter$Stub$Proxy.getNfcTagInterface() - @DSSource({DSSourceKind.NFC})
INfcAdapterExtras android.nfc.INfcAdapter$Stub$Proxy.getNfcAdapterExtrasInterface(String) - @DSSource({DSSourceKind.NFC})
IBinder android.nfc.INfcAdapter$Stub.asBinder() - @DSSource({DSSourceKind.NFC})
boolean android.nfc.INdefPushCallback$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.NFC})
NdefMessage android.nfc.INdefPushCallback$Stub$Proxy.createMessage() - @DSSource({DSSourceKind.NFC})
IBinder android.nfc.INdefPushCallback$Stub.asBinder() - @DSSource({DSSourceKind.NFC})
String android.nfc.INdefPushCallback$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NFC})
boolean android.nfc.INfcTag$Stub$Proxy.isNdef(int) - @DSSource({DSSourceKind.NFC})
NdefMessage android.nfc.INfcTag$Stub$Proxy.ndefRead(int) - @DSSource({DSSourceKind.NFC})
int[] android.nfc.INfcTag$Stub$Proxy.getTechList(int) - @DSSource({DSSourceKind.NFC})
int android.nfc.INfcTag$Stub$Proxy.ndefWrite(int,NdefMessage) - @DSSink({DSSinkKind.NFC})
int android.nfc.INfcTag$Stub$Proxy.reconnect(int) - @DSSink({DSSinkKind.NFC})
int android.nfc.INfcTag$Stub$Proxy.setTimeout(int,int) - @DSSink({DSSinkKind.NFC})
String android.nfc.INfcTag$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NFC})
int android.nfc.INfcTag$Stub$Proxy.connect(int,int) - @DSSink({DSSinkKind.NFC})
int android.nfc.INfcTag$Stub$Proxy.formatNdef(int,byte[]) - @DSSink({DSSinkKind.NFC})
int android.nfc.INfcTag$Stub$Proxy.ndefMakeReadOnly(int) - @DSSink({DSSinkKind.NFC})
int android.nfc.INfcTag$Stub$Proxy.close(int) - @DSSink({DSSinkKind.NFC})
int android.nfc.INfcTag$Stub$Proxy.getTimeout(int) - @DSSource({DSSourceKind.NFC})
IBinder android.nfc.INfcTag$Stub.asBinder() - @DSSource({DSSourceKind.NFC})
Tag android.nfc.INfcTag$Stub$Proxy.rediscover(int) - @DSSource({DSSourceKind.NFC})
boolean android.nfc.INfcTag$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.NFC})
TransceiveResult android.nfc.INfcTag$Stub$Proxy.transceive(int,byte[],boolean) - @DSSource({DSSourceKind.NFC})
boolean android.nfc.INfcTag$Stub$Proxy.isPresent(int) - @DSSource({DSSourceKind.NFC})
int android.nfc.INfcTag$Stub$Proxy.getMaxTransceiveLength(int) - @DSSource({DSSourceKind.NFC})
boolean android.nfc.INfcTag$Stub$Proxy.ndefIsWritable(int) - @DSSink({DSSinkKind.NFC})
boolean android.nfc.INfcTag$Stub$Proxy.canMakeReadOnly(int) - @DSSink({DSSinkKind.NFC})
NdefMessage android.nfc.NfcActivityManager.createMessage() - @DSSource({DSSourceKind.NFC})
void android.nfc.NfcActivityManager.setNdefPushMessage(Activity,NdefMessage) - @DSSink({DSSinkKind.NFC})
NfcAdapter android.nfc.NfcManager.getDefaultAdapter() - @DSSource({DSSourceKind.NFC})
String android.speech.IRecognitionListener$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.speech.IRecognitionListener$Stub$Proxy.onEvent(int,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.speech.IRecognitionListener$Stub$Proxy.onBufferReceived(byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.speech.IRecognitionListener$Stub$Proxy.onRmsChanged(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.speech.IRecognitionListener$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.speech.IRecognitionListener$Stub$Proxy.onError(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.speech.tts.ITextToSpeechCallback$Stub$Proxy.onError(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.speech.tts.ITextToSpeechCallback$Stub$Proxy.onStart(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.speech.tts.ITextToSpeechCallback$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.speech.tts.ITextToSpeechCallback$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.speech.tts.ITextToSpeechCallback$Stub$Proxy.onDone(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.speech.tts.TextToSpeech.addEarcon(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.speech.tts.TextToSpeech.addSpeech(String,String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.speech.tts.TextToSpeech.getDefaultEngine() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.speech.tts.TextToSpeech.getEngines() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.speech.tts.TextToSpeech.addEarcon(String,String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.speech.tts.TextToSpeech.setPitch(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.speech.tts.TextToSpeech.setSpeechRate(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.speech.tts.TextToSpeech.getCurrentEngine() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.speech.tts.TextToSpeech.addSpeech(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Locale android.speech.tts.TextToSpeech.getLanguage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.speech.tts.ITextToSpeechService$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.speech.tts.ITextToSpeechService$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.speech.tts.ITextToSpeechService$Stub$Proxy.isLanguageAvailable(String,String,String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.speech.tts.ITextToSpeechService$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] android.speech.tts.ITextToSpeechService$Stub$Proxy.getFeaturesForLanguage(String,String,String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] android.speech.tts.ITextToSpeechService$Stub$Proxy.getLanguage() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.speech.tts.ITextToSpeechService$Stub$Proxy.loadLanguage(String,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.speech.tts.TtsEngines.getLocalePrefForEngine(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.speech.tts.TtsEngines.updateLocalePrefForEngine(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent android.speech.tts.TtsEngines.getSettingsIntent(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.speech.tts.TtsEngines.getEngines() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.speech.tts.TtsEngines.getDefaultEngine() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.speech.tts.TtsEngines.getHighestRankedEngineName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.speech.SpeechRecognizer.setRecognitionListener(RecognitionListener) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.speech.IRecognitionService$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.speech.IRecognitionService$Stub$Proxy.stopListening(IRecognitionListener) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.speech.IRecognitionService$Stub$Proxy.startListening(Intent,IRecognitionListener) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.speech.IRecognitionService$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.speech.IRecognitionService$Stub$Proxy.cancel(IRecognitionListener) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.speech.IRecognitionService$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.location.Address.getSubThoroughfare() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
String android.location.Address.getAddressLine(int) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
double android.location.Address.getLongitude() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
Bundle android.location.Address.getExtras() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
void android.location.Address.setExtras(Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.location.Address.getAdminArea() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
Address android.location.Address$1.createFromParcel(Parcel) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.location.Address.getPremises() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
String android.location.Address.getThoroughfare() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
double android.location.Address.getLatitude() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
String android.location.Address.getCountryCode() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
String android.location.Address.getSubAdminArea() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int android.location.Address.getMaxAddressLineIndex() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
String android.location.Address.getPhone() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
String android.location.Address.getUrl() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
String android.location.Address.getPostalCode() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
String android.location.Address.getSubLocality() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
String android.location.Address.getFeatureName() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
String android.location.Address.getLocality() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
Locale android.location.Address.getLocale() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
String android.location.Address.getCountryName() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
void android.location.Address.setAddressLine(int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.location.Country.getSource() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
String android.location.Country.getCountryIso() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
void android.location.LocationManager$ListenerTransport.onStatusChanged(String,int,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.location.LocationManager.getAllProviders() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
boolean android.location.LocationManager.isProviderEnabled(String) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
boolean android.location.LocationManager.sendExtraCommand(String,String,Bundle) - @DSSink({DSSinkKind.LOCATION_INFORMATION})
void android.location.LocationManager.setTestProviderLocation(String,Location) - @DSSink({DSSinkKind.LOCATION_INFORMATION})
LocationProvider android.location.LocationManager.getProvider(String) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
void android.location.LocationManager.setTestProviderEnabled(String,boolean) - @DSSink({DSSinkKind.LOCATION_INFORMATION})
void android.location.LocationManager.setTestProviderStatus(String,int,Bundle,long) - @DSSink({DSSinkKind.LOCATION_INFORMATION})
Location android.location.LocationManager.getLastKnownLocation(String) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
String android.location.LocationManager.getBestProvider(Criteria,boolean) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
List android.location.LocationManager.getProviders(Criteria,boolean) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
GpsStatus android.location.LocationManager.getGpsStatus(GpsStatus) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
boolean android.location.LocationManager.sendNiResponse(int,int) - @DSSink({DSSinkKind.LOCATION_INFORMATION})
List android.location.LocationManager.getProviders(boolean) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
IBinder android.location.ICountryListener$Stub.asBinder() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
String android.location.ICountryListener$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
void android.location.IGpsStatusListener$Stub$Proxy.onFirstFix(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.location.IGpsStatusListener$Stub.asBinder() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
void android.location.IGpsStatusListener$Stub$Proxy.onSvStatusChanged(int,int[],float[],float[],float[],int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.location.IGpsStatusListener$Stub$Proxy.onNmeaReceived(long,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.location.IGpsStatusListener$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
void android.location.ILocationListener$Stub$Proxy.onProviderEnabled(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.location.ILocationListener$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
IBinder android.location.ILocationListener$Stub.asBinder() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
void android.location.ILocationListener$Stub$Proxy.onStatusChanged(String,int,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.location.ILocationListener$Stub$Proxy.onProviderDisabled(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.location.ILocationManager$Stub$Proxy.getFromLocationName(String,double,double,double,double,int,GeocoderParams,List) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
void android.location.ILocationManager$Stub$Proxy.setTestProviderEnabled(String,boolean) - @DSSink({DSSinkKind.LOCATION_INFORMATION})
List android.location.ILocationManager$Stub$Proxy.getProviders(Criteria,boolean) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
String android.location.ILocationManager$Stub$Proxy.getFromLocation(double,double,int,GeocoderParams,List) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
boolean android.location.ILocationManager$Stub$Proxy.providerMeetsCriteria(String,Criteria) - @DSSink({DSSinkKind.LOCATION_INFORMATION})
List android.location.ILocationManager$Stub$Proxy.getAllProviders() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
void android.location.ILocationManager$Stub$Proxy.removeGpsStatusListener(IGpsStatusListener) - @DSSink({DSSinkKind.LOCATION_INFORMATION})
boolean android.location.ILocationManager$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.LOCATION_INFORMATION})
void android.location.ILocationManager$Stub$Proxy.clearTestProviderStatus(String) - @DSSink({DSSinkKind.LOCATION_INFORMATION})
boolean android.location.ILocationManager$Stub$Proxy.sendNiResponse(int,int) - @DSSink({DSSinkKind.LOCATION_INFORMATION})
void android.location.ILocationManager$Stub$Proxy.setTestProviderLocation(String,Location) - @DSSink({DSSinkKind.LOCATION_INFORMATION})
boolean android.location.ILocationManager$Stub$Proxy.sendExtraCommand(String,String,Bundle) - @DSSink({DSSinkKind.LOCATION_INFORMATION})
String android.location.ILocationManager$Stub$Proxy.getBestProvider(Criteria,boolean) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
boolean android.location.ILocationManager$Stub$Proxy.isProviderEnabled(String) - @DSSink({DSSinkKind.LOCATION_INFORMATION})
IBinder android.location.ILocationManager$Stub.asBinder() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
void android.location.ILocationManager$Stub$Proxy.setTestProviderStatus(String,int,Bundle,long) - @DSSink({DSSinkKind.LOCATION_INFORMATION})
void android.location.ILocationManager$Stub$Proxy.locationCallbackFinished(ILocationListener) - @DSSink({DSSinkKind.LOCATION_INFORMATION})
void android.location.ILocationManager$Stub$Proxy.clearTestProviderEnabled(String) - @DSSink({DSSinkKind.LOCATION_INFORMATION})
void android.location.ILocationManager$Stub$Proxy.clearTestProviderLocation(String) - @DSSink({DSSinkKind.LOCATION_INFORMATION})
void android.location.ILocationManager$Stub$Proxy.removeTestProvider(String) - @DSSink({DSSinkKind.LOCATION_INFORMATION})
String android.location.ILocationManager$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
boolean android.location.ILocationManager$Stub$Proxy.addGpsStatusListener(IGpsStatusListener) - @DSSink({DSSinkKind.LOCATION_INFORMATION})
String android.location.GeocoderParams.getClientPackage() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
Locale android.location.GeocoderParams.getLocale() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
String android.location.LocationProvider.getName() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int android.location.LocationProvider.getAccuracy() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int android.location.LocationProvider.getPowerRequirement() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
float android.location.Location.getSpeed() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
Bundle android.location.Location.getExtras() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
void android.location.Location.dump(Printer,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.location.Location.getBearing() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
float android.location.Location.getAccuracy() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
double android.location.Location.getAltitude() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
double android.location.Location.getLongitude() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
String android.location.Location.getProvider() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
long android.location.Location.getTime() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
void android.location.Location.set(Location) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.location.Location.setExtras(Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
double android.location.Location.getLatitude() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
float android.location.GpsSatellite.getElevation() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
float android.location.GpsSatellite.getAzimuth() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int android.location.GpsSatellite.getPrn() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
float android.location.GpsSatellite.getSnr() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
List android.location.Geocoder.getFromLocationName(String,int) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
List android.location.Geocoder.getFromLocationName(String,int,double,double,double,double) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
List android.location.Geocoder.getFromLocation(double,double,int) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int android.location.Criteria.getHorizontalAccuracy() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
void android.location.Criteria.setAccuracy(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.location.Criteria.getBearingAccuracy() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int android.location.Criteria.getSpeedAccuracy() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int android.location.Criteria.getVerticalAccuracy() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int android.location.Criteria.getPowerRequirement() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int android.location.Criteria.getAccuracy() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
String android.location.ICountryDetector$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
void android.location.ICountryDetector$Stub$Proxy.addCountryListener(ICountryListener) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.location.ICountryDetector$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Country android.location.ICountryDetector$Stub$Proxy.detectCountry() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
IBinder android.location.ICountryDetector$Stub.asBinder() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
void android.location.ICountryDetector$Stub$Proxy.removeCountryListener(ICountryListener) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.location.GpsStatus.setStatus(GpsStatus) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Iterable android.location.GpsStatus.getSatellites() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int android.location.GpsStatus.getMaxSatellites() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int android.location.GpsStatus.getTimeToFirstFix() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
ProgramFragmentFixedFunction android.renderscript.ProgramFragmentFixedFunction$Builder.create() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.renderscript.Program$BaseProgramBuilder.getCurrentConstantIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.renderscript.Program$BaseProgramBuilder.getCurrentTextureIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.renderscript.Sampler.getAnisotropy() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.renderscript.BaseObj.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RenderScript android.renderscript.RenderScript.create(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Context android.renderscript.RenderScript.getApplicationContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.renderscript.Type.getZ() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.renderscript.Type.getCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.renderscript.Type.getX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.renderscript.Type.getY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Element android.renderscript.Type.getElement() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.renderscript.Mesh.getPrimitiveCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.renderscript.Mesh$Builder.getCurrentIndexSetIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Allocation android.renderscript.Mesh.getIndexSetAllocation(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.renderscript.Mesh$Builder.getCurrentVertexTypeIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.renderscript.Mesh$AllocationBuilder.getCurrentIndexSetIndex() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int android.renderscript.Mesh.getVertexAllocationCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Allocation android.renderscript.Mesh.getVertexAllocation(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.renderscript.Mesh$AllocationBuilder.getCurrentVertexTypeIndex() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
Type android.renderscript.Mesh$Builder.newType(Element,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Mesh android.renderscript.Mesh$TriangleMeshBuilder.create(boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Allocation android.renderscript.Allocation.createFromBitmapResource(RenderScript,Resources,int) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
Allocation android.renderscript.Allocation.createFromBitmap(RenderScript,Bitmap) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
Allocation android.renderscript.Allocation.createFromString(RenderScript,String,int) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
Type android.renderscript.Allocation.getType() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
Allocation android.renderscript.Allocation.createCubemapFromBitmap(RenderScript,Bitmap) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
Allocation android.renderscript.Allocation.createCubemapFromCubeFaces(RenderScript,Bitmap,Bitmap,Bitmap,Bitmap,Bitmap,Bitmap) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
void android.renderscript.Allocation.setFromFieldPacker(int,int,FieldPacker) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Allocation android.renderscript.Allocation.createSized(RenderScript,Element,int,int) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
void android.renderscript.Allocation.setFromFieldPacker(int,FieldPacker) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Allocation android.renderscript.Allocation.createTyped(RenderScript,Type) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
Allocation android.renderscript.Allocation.createSized(RenderScript,Element,int) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
Allocation android.renderscript.Allocation.createTyped(RenderScript,Type,int) - @DSSource({DSSourceKind.LOCATION_INFORMATION})
int android.renderscript.Element.getSubElementCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.renderscript.Element.getSubElementOffsetBytes(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Element android.renderscript.Element.getSubElement(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.renderscript.Element.getSubElementName(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.renderscript.Element.getSubElementArraySize(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.ResourceCursorAdapter.newView(Context,Cursor,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.ResourceCursorAdapter.newDropDownView(Context,Cursor,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.widget.ExpandableListPosition.getPackedPosition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ArrayAdapter.getCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ArrayAdapter.getPosition(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.widget.ArrayAdapter.getItemId(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Context android.widget.ArrayAdapter.getContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.widget.ArrayAdapter.getItem(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.ArrayAdapter.getDropDownView(int,View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Filter android.widget.ArrayAdapter.getFilter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.ArrayAdapter.getView(int,View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ShareActionProvider.setShareIntent(Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Typeface android.widget.TextView.getTypeface() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getSelectionStart() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.sendAccessibilityEvent(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getInputType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getTotalPaddingTop() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.widget.TextView.getTransformedText(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.widget.TextView.getPrivateImeOptions() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ColorStateList android.widget.TextView.getTextColors() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getImeOptions() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.widget.TextView.getLeftFadingEdgeStrength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setText(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getCompoundPaddingTop() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setCompoundDrawablesRelativeWithIntrinsicBounds(Drawable,Drawable,Drawable,Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.widget.TextView.getError() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView$SavedState.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setAllCaps(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
MovementMethod android.widget.TextView.getMovementMethod() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputFilter[] android.widget.TextView.getFilters() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getExtendedPaddingBottom() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getPaintFlags() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setPaintFlags(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getLeftPaddingOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getRightPaddingOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getCompoundDrawablePadding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.widget.TextView.getHorizontallyScrolling() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getTotalPaddingLeft() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Locale android.widget.TextView.getTextServicesLocale() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setInputType(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getCompoundPaddingStart() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setTypeface(Typeface,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getCompoundPaddingBottom() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.widget.TextView.getTextForAccessibility() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getAutoLinkMask() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getCompoundPaddingLeft() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getLineAtCoordinate(float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getTotalPaddingRight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getBottomPaddingOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setTextSize(int,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setTextScaleX(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.widget.TextView$Marquee.getGhostOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TransformationMethod android.widget.TextView.getTransformationMethod() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getTopPaddingOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getImeActionId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getCurrentHintTextColor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
URLSpan[] android.widget.TextView.getUrls() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.widget.TextView$CharWrapper.getTextRunAdvances(int,int,int,int,int,float[],int,Paint) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.widget.TextView.getDefaultEditable() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getCurrentTextColor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getFadeTop(boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Layout android.widget.TextView.getLayout() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setCompoundDrawablesRelativeWithIntrinsicBounds(int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setTextAppearance(Context,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Drawable[] android.widget.TextView.getCompoundDrawablesRelative() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getFadeHeight(boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setInputExtras(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setExtractedText(ExtractedText) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setHintTextColor(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setLinkTextColor(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.widget.TextView$CharWrapper.getTextRunAdvances(int,int,int,int,int,float[],int,Paint,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setSelected(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getCompoundPaddingEnd() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.widget.TextView.getHint() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.widget.TextView.getTextSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getBaseline() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getLineCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getVerticalOffset(boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getExtendedPaddingTop() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getTotalPaddingBottom() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setCursorPosition_internal(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.widget.TextView.getRightFadingEdgeStrength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setCompoundDrawablesWithIntrinsicBounds(Drawable,Drawable,Drawable,Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setText(char[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setPadding(int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
KeyListener android.widget.TextView.getKeyListener() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getTotalPaddingEnd() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setTextSize(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setCompoundDrawablesWithIntrinsicBounds(int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.widget.TextView.setFrame(int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Bundle android.widget.TextView.getInputExtras(boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ColorStateList android.widget.TextView.getTextColors(Context,TypedArray) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TextPaint android.widget.TextView.getPaint() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getCompoundPaddingRight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getTotalPaddingStart() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.widget.TextView.getText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setTextColor(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Drawable[] android.widget.TextView.getCompoundDrawables() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getSelectionEnd() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setHint(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
WordIterator android.widget.TextView.getWordIterator() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MovementMethod android.widget.TextView.getDefaultMovementMethod() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setSingleLine(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getGravity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.widget.TextView.getTextScaleX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ColorStateList android.widget.TextView.getLinkTextColors() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getLineHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ColorStateList android.widget.TextView.getHintTextColors() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setSpan_internal(Object,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TextView.setTypeface(Typeface) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TextView.getLineBounds(int,Rect) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.widget.TextView.getFreezesText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Editable android.widget.TextView.getEditableText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.widget.TextView.getImeActionLabel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ViewAnimator.setOutAnimation(Context,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
View android.widget.ViewAnimator.getCurrentView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ViewAnimator.setInAnimation(Context,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ViewAnimator.getBaseline() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Animation android.widget.ViewAnimator.getInAnimation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ViewAnimator.getDisplayedChild() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Animation android.widget.ViewAnimator.getOutAnimation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ZoomButtonsController.setZoomOutEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ZoomButtonsController.setZoomInEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
View android.widget.ZoomButtonsController.getZoomControls() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ZoomButtonsController.setZoomSpeed(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ZoomButtonsController.setFocusable(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ViewGroup android.widget.ZoomButtonsController.getContainer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.SearchView.setImeOptions(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CursorAdapter android.widget.SearchView.getSuggestionsAdapter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.SearchView.setIconified(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.widget.SearchView.getQuery() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.SearchView.setInputType(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.SearchView.setIconifiedByDefault(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.QuickContactBadge.setMode(int) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
int android.widget.GridView.getStretchMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.GridView.setSelectionInt(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.GridView.getNumColumns() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.GridView.setRemoteViewsAdapter(Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
View android.widget.AbsSpinner$RecycleBin.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AbsSpinner.setSelection(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
View android.widget.AbsSpinner.getSelectedView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsSpinner.getChildWidth(View) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AbsSpinner$SavedState.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsSpinner.getChildHeight(View) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AbsSpinner.setSelection(int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsSpinner.getCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AbsSpinner$RecycleBin.put(int,View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AbsSpinner.setSelectionInt(int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Parcelable android.widget.AbsSpinner.onSaveInstanceState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ActivityChooserModel.getActivityCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ActivityChooserModel.getHistorySize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ActivityChooserModel.setDefaultActivity(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ActivityChooserModel android.widget.ActivityChooserModel.get(Context,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ActivityChooserModel.getActivityIndex(ResolveInfo) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.widget.ActivityChooserModel.getIntent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ActivityChooserModel.getHistoryMaxSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.widget.ActivityChooserModel.chooseActivity(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ResolveInfo android.widget.ActivityChooserModel.getActivity(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ResolveInfo android.widget.ActivityChooserModel.getDefaultActivity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ToggleButton.setChecked(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.widget.ToggleButton.getTextOn() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.widget.ToggleButton.getTextOff() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ToggleButton.setBackgroundDrawable(Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.widget.ScrollBarDrawable.getAlwaysDrawVerticalTrack() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ScrollBarDrawable.setAlpha(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ScrollBarDrawable.getOpacity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ScrollBarDrawable.setColorFilter(ColorFilter) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ScrollBarDrawable.getSize(boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.widget.ScrollBarDrawable.getAlwaysDrawHorizontalTrack() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.Gallery.getLimitedMotionScrollAmount(boolean,int) - @DSSource({DSSourceKind.IMAGE})
void android.widget.Gallery.setSelectedPositionInt(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.Gallery.getChildHeight(View) - @DSSource({DSSourceKind.IMAGE})
int android.widget.Gallery.getChildDrawingOrder(int,int) - @DSSource({DSSourceKind.IMAGE})
char[] android.widget.NumberPicker$InputTextFilter.getAcceptedChars() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.NumberPicker.setValue(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.NumberPicker.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] android.widget.NumberPicker.getDisplayedValues() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.widget.NumberPicker.getWrapSelectorWheel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.NumberPicker.getMinValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.NumberPicker.getMaxValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.widget.NumberPicker.getBottomFadingEdgeStrength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.NumberPicker.setEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.NumberPicker.getSolidColor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.widget.NumberPicker.getTopFadingEdgeStrength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.NumberPicker$InputTextFilter.getInputType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TableLayout$LayoutParams.setBaseAttributes(TypedArray,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TableLayout.setColumnCollapsed(int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TableLayout.setColumnStretchable(int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TableLayout.setColumnShrinkable(int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Menu android.widget.PopupMenu.getMenu() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MenuInflater android.widget.PopupMenu.getMenuInflater() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsSeekBar.getKeyProgressIncrement() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AbsSeekBar.setMax(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsSeekBar.getThumbOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TabWidget.sendAccessibilityEventUnchecked(AccessibilityEvent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TabWidget.setEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TabWidget.getChildDrawingOrder(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TabWidget.setLeftStripDrawable(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TabWidget.getTabCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TabWidget.setRightStripDrawable(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
View android.widget.TabWidget.getChildTabViewAt(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TabWidget.setDividerDrawable(Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TabWidget.setDividerDrawable(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.RadioGroup.getCheckedRadioButtonId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RadioGroup$LayoutParams.setBaseAttributes(TypedArray,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.Switch.setSwitchTypeface(Typeface,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.Switch.setSwitchTypeface(Typeface) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.Switch.setSwitchTextAppearance(Context,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.widget.Switch.getTextOff() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.Switch.setChecked(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.Switch.getCompoundPaddingRight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.widget.Switch.getTextOn() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Parcelable android.widget.CompoundButton.onSaveInstanceState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.CompoundButton$SavedState.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int[] android.widget.CompoundButton.onCreateDrawableState(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ZoomControls.setIsZoomOutEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ZoomControls.setIsZoomInEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ZoomControls.setZoomSpeed(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TimePicker.setCurrentMinute(Integer) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TimePicker$SavedState.getHour() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Integer android.widget.TimePicker.getCurrentHour() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TimePicker.getBaseline() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TimePicker$SavedState.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TimePicker$SavedState.getMinute() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TimePicker.setIs24HourView(Boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Integer android.widget.TimePicker.getCurrentMinute() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TimePicker.setCurrentHour(Integer) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ProgressBar.setVisibility(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Drawable android.widget.ProgressBar.getIndeterminateDrawable() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.widget.ProgressBar.getCurrentDrawable() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Shape android.widget.ProgressBar.getDrawableShape() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ProgressBar.getSecondaryProgress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ProgressBar.getProgress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ProgressBar.getMax() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ProgressBar.setInterpolator(Context,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Drawable android.widget.ProgressBar.getProgressDrawable() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Interpolator android.widget.ProgressBar.getInterpolator() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ProgressBar.setProgress(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ProgressBar$SavedState.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long android.widget.CalendarView.getMaxDate() - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
int android.widget.CalendarView$WeeksAdapter.getCount() - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
Calendar android.widget.CalendarView$WeeksAdapter.getSelectedDay() - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
void android.widget.CalendarView$WeeksAdapter.setSelectedDay(Calendar) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.CalendarView.setMaxDate(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.CalendarView.setDate(long,boolean,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.CalendarView$WeekView.getMonthOfLastWeekDay() - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
void android.widget.CalendarView.setMinDate(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Calendar android.widget.CalendarView$WeekView.getFirstDay() - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
long android.widget.CalendarView.getMinDate() - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
long android.widget.CalendarView$WeeksAdapter.getItemId(int) - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
Object android.widget.CalendarView$WeeksAdapter.getItem(int) - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
void android.widget.CalendarView.setEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.CalendarView.setDate(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.CalendarView$WeekView.getMonthOfFirstWeekDay() - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
int android.widget.CalendarView.getFirstDayOfWeek() - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
View android.widget.CalendarView$WeeksAdapter.getView(int,View,ViewGroup) - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
boolean android.widget.CalendarView.getShowWeekNumber() - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
long android.widget.CalendarView.getDate() - @DSSource({DSSourceKind.CALENDAR_INFORMATION})
int android.widget.OverScroller.getDuration() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.OverScroller.getFinalY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.OverScroller.setFriction(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.widget.OverScroller.getCurrVelocity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.OverScroller.notifyHorizontalEdgeReached(int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.OverScroller.getFinalX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.OverScroller.startScroll(int,int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.OverScroller.notifyVerticalEdgeReached(int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.OverScroller.setFinalY(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.OverScroller$SplineOverScroller.notifyEdgeReached(int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.OverScroller.getCurrX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.OverScroller.getStartX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.OverScroller.setFinalX(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.OverScroller.getCurrY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.OverScroller.getStartY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.OverScroller.startScroll(int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.widget.SimpleAdapter.getItem(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.SimpleAdapter.setViewImage(ImageView,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
View android.widget.SimpleAdapter.getDropDownView(int,View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.widget.SimpleAdapter.getItemId(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Filter android.widget.SimpleAdapter.getFilter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.SimpleAdapter.setViewImage(ImageView,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.SimpleAdapter.getCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.SimpleAdapter.getView(int,View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.SimpleAdapter.setViewText(TextView,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.Toast.getXOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Toast android.widget.Toast.makeText(Context,int,int) - @DSSink({DSSinkKind.SCREEN})
int android.widget.Toast.getGravity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Toast android.widget.Toast.makeText(Context,CharSequence,int) - @DSSink({DSSinkKind.SCREEN})
View android.widget.Toast.getView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.Toast.getDuration() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.widget.Toast.getHorizontalMargin() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.Toast.setText(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.Toast.getYOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.widget.Toast.getVerticalMargin() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CalendarView android.widget.DatePicker.getCalendarView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.DatePicker.setCalendarViewShown(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.DatePicker.getYear() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.DatePicker.getDayOfMonth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.DatePicker.setMaxDate(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.widget.DatePicker.getCalendarViewShown() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.DatePicker.setSpinnersShown(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.widget.DatePicker.getSpinnersShown() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.DatePicker.setMinDate(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.DatePicker.getMonth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.widget.DatePicker.getMaxDate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.DatePicker$SavedState.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long android.widget.DatePicker.getMinDate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ZoomButton.setEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
TextView android.widget.TwoLineListItem.getText2() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TextView android.widget.TwoLineListItem.getText1() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.EditText.setSelection(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
MovementMethod android.widget.EditText.getDefaultMovementMethod() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Editable android.widget.EditText.getText() - @DSSource({DSSourceKind.GUI})
void android.widget.EditText.setSelection(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.widget.EditText.getDefaultEditable() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RelativeLayout$DependencyGraph.add(View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RelativeLayout.setHorizontalGravity(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.RelativeLayout.getBaseline() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RelativeLayout.setVerticalGravity(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int[] android.widget.RelativeLayout$LayoutParams.getRules() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.widget.CursorAdapter.getItem(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Filter android.widget.CursorAdapter.getFilter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.widget.CursorAdapter.getItemId(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Cursor android.widget.CursorAdapter.runQueryOnBackgroundThread(CharSequence) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Cursor android.widget.CursorAdapter.getCursor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.CursorAdapter.getView(int,View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.CursorAdapter.getDropDownView(int,View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FilterQueryProvider android.widget.CursorAdapter.getFilterQueryProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.CursorAdapter.getCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.CursorAdapter.newDropDownView(Context,Cursor,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Cursor android.widget.CursorAdapter.swapCursor(Cursor) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.widget.BaseExpandableListAdapter.getCombinedGroupId(long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.BaseExpandableListAdapter.getGroupTypeCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.widget.BaseExpandableListAdapter.getCombinedChildId(long,long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.BaseExpandableListAdapter.getGroupType(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.BaseExpandableListAdapter.getChildTypeCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.BaseExpandableListAdapter.getChildType(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.widget.ExpandableListView.getSelectedId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.widget.ExpandableListView.getPackedPositionForGroup(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.widget.ExpandableListView.getSelectedPosition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.widget.ExpandableListView.setSelectedChild(int,int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ExpandableListView.dispatchDraw(Canvas) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ExpandableListView.setSelectedGroup(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.widget.ExpandableListView.performItemClick(View,int,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ExpandableListView$SavedState.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ExpandableListView.getFlatListPosition(long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.widget.ExpandableListView.getExpandableListPosition(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ExpandableListAdapter android.widget.ExpandableListView.getExpandableListAdapter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.widget.ExpandableListView.getPackedPositionForChild(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.widget.TabHost$TabSpec.getTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.TabHost.getCurrentTabView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.widget.TabHost.getCurrentTabTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FrameLayout android.widget.TabHost.getTabContentView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.TabHost$ViewIdContentStrategy.getContentView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.TabHost.getCurrentView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TabWidget android.widget.TabHost.getTabWidget() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TabHost.setCurrentTabByTag(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
View android.widget.TabHost$IntentContentStrategy.getContentView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TabHost.getCurrentTab() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.TabHost$FactoryContentStrategy.getContentView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TabHost.sendAccessibilityEvent(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews$ViewGroupAction.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setRelativeScrollPosition(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setContentDescription(int,CharSequence) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setCharSequence(int,String,CharSequence) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setByte(int,String,byte) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setString(int,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setLong(int,String,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.RemoteViews.getLayoutId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setBundle(int,String,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.widget.RemoteViews.getPackage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews$SetRemoteViewsAdapterIntent.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setShort(int,String,short) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setDisplayedChild(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setTextViewText(int,CharSequence) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setFloat(int,String,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setRemoteAdapter(int,int,Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setPendingIntentTemplate(int,PendingIntent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews$SetOnClickFillInIntent.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setIntent(int,String,Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setDouble(int,String,double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setBoolean(int,String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setInt(int,String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setChronometer(int,long,String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setViewVisibility(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setOnClickFillInIntent(int,Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setScrollPosition(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setProgressBar(int,int,int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setImageViewUri(int,Uri) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setImageViewResource(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setImageViewBitmap(int,Bitmap) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setOnClickPendingIntent(int,PendingIntent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setBitmap(int,String,Bitmap) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews$SetOnClickPendingIntent.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews$ReflectionAction.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setRemoteAdapter(int,Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setTextColor(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setUri(int,String,Uri) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setEmptyView(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews$SetPendingIntentTemplate.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViews.setChar(int,String,char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AbsListView$SavedState.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Drawable android.widget.AbsListView.getSelector() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Parcelable android.widget.AbsListView.onSaveInstanceState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsListView.getHeaderViewsCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AbsListView.setFriction(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsListView.getFooterViewsCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.AbsListView.getSelectedView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsListView.getCheckedItemPosition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.widget.AbsListView.getTextFilter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AbsListView.setRemoteViewsAdapter(Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AbsListView.setOverScrollMode(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
View android.widget.AbsListView$RecycleBin.getScrapView(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsListView.getChoiceMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsListView.getTopPaddingOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AbsListView.dispatchDraw(Canvas) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AbsListView.setFilterText(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long[] android.widget.AbsListView.getCheckedItemIds() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AbsListView$RecycleBin.setCacheColorHint(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsListView.getListPaddingTop() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.widget.AbsListView.onTouchEvent(MotionEvent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AbsListView.setSelector(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsListView.getCheckedItemCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AbsListView.sendAccessibilityEvent(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.widget.AbsListView.setFrame(int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsListView.getListPaddingLeft() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsListView.findClosestMotionRow(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsListView.getLeftPaddingOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AbsListView.setItemChecked(int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsListView.getListPaddingBottom() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AbsListView.setVerticalScrollbarPosition(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsListView.getTranscriptMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.widget.AbsListView.getBottomFadingEdgeStrength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsListView.getDistance(Rect,Rect,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsListView.getRightPaddingOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AbsListView$RecycleBin.addScrapView(View,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.widget.AbsListView.getTopFadingEdgeStrength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsListView.getCacheColorHint() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.AbsListView$RecycleBin.getActiveView(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsListView.getListPaddingRight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AbsListView.setFastScrollAlwaysVisible(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsListView.getBottomPaddingOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.AbsListView.obtainView(int,boolean[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SparseBooleanArray android.widget.AbsListView.getCheckedItemPositions() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsListView.getVerticalScrollbarWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.widget.AbsListView.performItemClick(View,int,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AbsListView$PositionScroller.startWithOffset(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AbsListView$PositionScroller.start(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AbsListView.getSolidColor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.VideoView.setVideoPath(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.VideoView.getDuration() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.VideoView.getCurrentPosition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.VideoView.getBufferPercentage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.MediaController.setEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection.bind(Context,int,Intent) - @DSSink({DSSinkKind.LOG})
Intent android.widget.RemoteViewsAdapter.getRemoteViewsServiceIntent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.RemoteViewsAdapter$RemoteViewsMetaData.getMappedViewType(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RemoteViews android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache.getRemoteViewsAt(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.widget.RemoteViewsAdapter.getItemId(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.RemoteViewsAdapter.getViewTypeCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.RemoteViewsAdapter.getItemViewType(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int[] android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache.getNextIndexToLoad() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.widget.RemoteViewsAdapter.getItem(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.RemoteViewsAdapter.getView(int,View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.RemoteViewsAdapter.getCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IRemoteViewsFactory android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection.getRemoteViewsFactory() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
View android.widget.BaseAdapter.getDropDownView(int,View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.BaseAdapter.getViewTypeCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.BaseAdapter.getItemViewType(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AutoCompleteTextView.setListSelection(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AutoCompleteTextView.getDropDownWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AutoCompleteTextView.onCommitCompletion(CompletionInfo) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AutoCompleteTextView.setDropDownBackgroundResource(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AutoCompleteTextView.getThreshold() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AutoCompleteTextView.setDropDownAnimationStyle(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AutoCompleteTextView.getDropDownAnchor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AutoCompleteTextView.setDropDownHorizontalOffset(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AutoCompleteTextView.getListSelection() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AutoCompleteTextView.setDropDownAlwaysVisible(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ListAdapter android.widget.AutoCompleteTextView.getAdapter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AutoCompleteTextView.setForceIgnoreOutsideTouch(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Filter android.widget.AutoCompleteTextView.getFilter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.widget.AutoCompleteTextView.getDropDownBackground() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AutoCompleteTextView.getDropDownVerticalOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AutoCompleteTextView.getDropDownAnimationStyle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AutoCompleteTextView.setDropDownHeight(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AutoCompleteTextView.setDropDownVerticalOffset(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AutoCompleteTextView.setDropDownBackgroundDrawable(Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AutoCompleteTextView.getDropDownHorizontalOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AutoCompleteTextView.setDropDownWidth(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AutoCompleteTextView.getDropDownHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.HorizontalScrollView.getMaxScrollAmount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.widget.HorizontalScrollView.getLeftFadingEdgeStrength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.HorizontalScrollView.setOverScrollMode(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.HorizontalScrollView.draw(Canvas) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.widget.HorizontalScrollView.getRightFadingEdgeStrength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ScrollView.draw(Canvas) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.widget.ScrollView.getTopFadingEdgeStrength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ScrollView.setOverScrollMode(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ScrollView.getMaxScrollAmount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.widget.ScrollView.getBottomFadingEdgeStrength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.LinearLayout.getDividerWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.LinearLayout.getBaseline() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.LinearLayout.getNextLocationOffset(View) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.widget.LinearLayout.getWeightSum() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.LinearLayout.getVirtualChildCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.LinearLayout.getShowDividers() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.LinearLayout.getLocationOffset(View) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.LinearLayout.getBaselineAlignedChildIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.LinearLayout.setVerticalGravity(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.LinearLayout.getChildrenSkipCount(View,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.LinearLayout.getDividerPadding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.LinearLayout.getOrientation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.LinearLayout.setWeightSum(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
View android.widget.LinearLayout.getVirtualChildAt(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.LinearLayout.setHorizontalGravity(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.HeaderViewListAdapter.getItemViewType(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.HeaderViewListAdapter.getViewTypeCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Filter android.widget.HeaderViewListAdapter.getFilter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.HeaderViewListAdapter.getFootersCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.widget.HeaderViewListAdapter.getItemId(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ListAdapter android.widget.HeaderViewListAdapter.getWrappedAdapter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.HeaderViewListAdapter.getHeadersCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.HeaderViewListAdapter.getCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.widget.HeaderViewListAdapter.getItem(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.HeaderViewListAdapter.getView(int,View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TableRow.getNextLocationOffset(View) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.TableRow.getVirtualChildAt(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TableRow.getLocationOffset(View) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int[] android.widget.TableRow.getColumnsWidths(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.TableRow$LayoutParams.setBaseAttributes(TypedArray,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TableRow.getVirtualChildCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.TableRow.getChildrenSkipCount(View,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ExpandableListConnector.getCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.widget.ExpandableListConnector.getItemId(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ExpandableListConnector.getViewTypeCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.widget.ExpandableListConnector.getItem(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.ExpandableListConnector.getView(int,View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ExpandableListConnector.getItemViewType(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Filter android.widget.ExpandableListConnector.getFilter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ArrayList android.widget.ExpandableListConnector.getExpandedGroupMetadataList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ExpandableListAdapter android.widget.ExpandableListConnector.getAdapter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.PopupWindow.setTouchModal(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.PopupWindow.getInputMethodMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.PopupWindow.update(View,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Drawable android.widget.PopupWindow.getBackground() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.PopupWindow.getMaxAvailableHeight(View) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.PopupWindow.getHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.PopupWindow.update(int,int,int,int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.PopupWindow.getMaxAvailableHeight(View,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.PopupWindow.getSoftInputMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.PopupWindow.getMaxAvailableHeight(View,int,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.PopupWindow$PopupViewContainer.sendAccessibilityEvent(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.PopupWindow.update(int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.PopupWindow.getWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.PopupWindow.update(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.PopupWindow.setSplitTouchEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.widget.PopupWindow$PopupViewContainer.dispatchKeyEvent(KeyEvent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.PopupWindow.getWindowLayoutType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.PopupWindow.update(View,int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.PopupWindow.getAnimationStyle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.PopupWindow.getContentView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.Spinner$DropDownAdapter.getView(int,View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.Spinner$DropDownAdapter.getItemViewType(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.Spinner$DropDownAdapter.getViewTypeCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.widget.Spinner$DropDownAdapter.getItemId(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.Spinner$DropDownAdapter.getCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.Spinner.setEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.widget.Spinner$DialogPopup.getHintText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.Spinner.setPromptId(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.widget.Spinner$DropdownPopup.getHintText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.Spinner$DropDownAdapter.getDropDownView(int,View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.Spinner.getBaseline() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.widget.Spinner$DropDownAdapter.getItem(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.widget.Spinner.getPrompt() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ListPopupWindow.getAnimationStyle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ListPopupWindow.setSelection(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ListPopupWindow.setModal(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ListPopupWindow.getSelectedItemPosition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.widget.ListPopupWindow.getBackground() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ListPopupWindow.getSoftInputMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ListPopupWindow.setSoftInputMode(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.widget.ListPopupWindow.getSelectedItem() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.widget.ListPopupWindow.getSelectedItemId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ListPopupWindow.getVerticalOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.ListPopupWindow.getSelectedView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ListPopupWindow.setAnimationStyle(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
View android.widget.ListPopupWindow.getAnchorView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ListPopupWindow.getHorizontalOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ListPopupWindow.setInputMethodMode(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ListPopupWindow.getPromptPosition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ListPopupWindow.setContentWidth(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ListView android.widget.ListPopupWindow.getListView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ListPopupWindow.getInputMethodMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ListPopupWindow.setBackgroundDrawable(Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ListPopupWindow.getHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ListPopupWindow.getWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.Scroller.getCurrX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.Scroller.getFinalY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.widget.Scroller.getCurrVelocity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.Scroller.getFinalX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.Scroller.getDuration() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.Scroller.getCurrY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.Scroller.getStartX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.Scroller.getStartY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.Scroller.startScroll(int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.FastScroller.getState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.FastScroller.getWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.FastScroller$ScrollFade.getAlpha() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SectionIndexer android.widget.FastScroller.getSectionIndexer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object[] android.widget.FastScroller.getSections() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AdapterView.getCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AdapterView.getPositionForView(View) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AdapterView.getSelectedItemPosition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.widget.AdapterView.getSelectedItem() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.widget.AdapterView.getItemAtPosition(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.AdapterView.getEmptyView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.widget.AdapterView.getSelectedItemId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AdapterView.getFirstVisiblePosition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.widget.AdapterView.getItemIdAtPosition(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AdapterView.getLastVisiblePosition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.widget.FrameLayout.getMeasureAllChildren() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.widget.FrameLayout.getForeground() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.widget.FrameLayout.getConsiderGoneChildrenWhenMeasuring() - @DSSource({DSSourceKind.FILE_INFORMATION})
Object android.widget.ActivityChooserView$ActivityChooserViewAdapter.getItem(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ActivityChooserView$ActivityChooserViewAdapter.getCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ResolveInfo android.widget.ActivityChooserView$ActivityChooserViewAdapter.getDefaultActivity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ActivityChooserModel android.widget.ActivityChooserView.getDataModel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ActivityChooserView$ActivityChooserViewAdapter.getMaxActivityCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ActivityChooserView$ActivityChooserViewAdapter.getItemViewType(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.widget.ActivityChooserView$ActivityChooserViewAdapter.getItemId(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ActivityChooserView.setExpandActivityOverflowButtonDrawable(Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ActivityChooserView.setExpandActivityOverflowButtonContentDescription(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ActivityChooserModel android.widget.ActivityChooserView$ActivityChooserViewAdapter.getDataModel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ActivityChooserView.setActivityChooserModel(ActivityChooserModel) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
View android.widget.ActivityChooserView$ActivityChooserViewAdapter.getView(int,View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ActivityChooserView$ActivityChooserViewAdapter.getHistorySize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ActivityChooserView$ActivityChooserViewAdapter.getActivityCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ActivityChooserView$ActivityChooserViewAdapter.getViewTypeCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ImageView.setImageDrawable(Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ImageView.setSelected(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ImageView.getBaseline() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ImageView.setImageBitmap(Bitmap) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.widget.ImageView.getBaselineAlignBottom() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.widget.ImageView.getDrawable() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.widget.ImageView.setFrame(int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ImageView.setColorFilter(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ImageView.setVisibility(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ImageView.setImageMatrix(Matrix) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Matrix android.widget.ImageView.getImageMatrix() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ImageView.setAlpha(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.SimpleCursorAdapter.setViewText(TextView,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.SimpleCursorAdapter.getStringConversionColumn() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.SimpleCursorAdapter.setViewImage(ImageView,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ListView.setSelectionInt(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ListView.getDividerHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.widget.ListView.getDivider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ListView$ArrowScrollFocusResult.getAmountToScroll() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ListView.setCacheColorHint(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ListView.getHeaderViewsCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ListView.getMaxScrollAmount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ListView.setRemoteViewsAdapter(Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Drawable android.widget.ListView.getOverscrollFooter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.widget.ListView.getItemsCanFocus() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.widget.ListView.getOverscrollHeader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ListView.getFooterViewsCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.ListView.setSelection(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.ListView$ArrowScrollFocusResult.getSelectedPosition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long[] android.widget.ListView.getCheckItemIds() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.SuggestionsAdapter.getView(int,View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.SuggestionsAdapter.getQueryRefinement() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AdapterViewAnimator.getDisplayedChild() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ObjectAnimator android.widget.AdapterViewAnimator.getInAnimation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AdapterViewAnimator.getNumActiveViews() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.AdapterViewAnimator.getSelectedView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AdapterViewAnimator$SavedState.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
FrameLayout android.widget.AdapterViewAnimator.getFrameForChild() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.widget.AdapterViewAnimator.getCurrentView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AdapterViewAnimator.setOutAnimation(Context,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ObjectAnimator android.widget.AdapterViewAnimator.getOutAnimation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ObjectAnimator android.widget.AdapterViewAnimator.getDefaultInAnimation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AdapterViewAnimator.setInAnimation(Context,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AdapterViewAnimator.setDisplayedChild(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AdapterViewAnimator.setSelection(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
View android.widget.AdapterViewAnimator.getViewAtRelativeIndex(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Adapter android.widget.AdapterViewAnimator.getAdapter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.widget.AdapterViewAnimator.setRemoteViewsAdapter(Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AdapterViewAnimator.getWindowSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ObjectAnimator android.widget.AdapterViewAnimator.getDefaultOutAnimation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.widget.AdapterViewAnimator.getBaseline() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Parcelable android.widget.AdapterViewAnimator.onSaveInstanceState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.ddm.DdmHandleAppName.getAppName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Parcelable android.preference.TwoStatePreference.onSaveInstanceState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.preference.TwoStatePreference.getDisableDependentsState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.preference.TwoStatePreference.getSummaryOn() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.preference.TwoStatePreference.getSummaryOff() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.preference.TwoStatePreference.setSummaryOff(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.preference.TwoStatePreference$SavedState.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.preference.TwoStatePreference.setSummaryOn(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.preference.EditTextPreference.getText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.preference.EditTextPreference$SavedState.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
EditText android.preference.EditTextPreference.getEditText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.preference.PreferenceGroupAdapter.getCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.preference.PreferenceGroupAdapter.getItemId(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.preference.PreferenceGroupAdapter.getViewTypeCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Preference android.preference.PreferenceGroupAdapter.getItem(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.preference.PreferenceGroupAdapter.getView(int,View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.preference.PreferenceGroupAdapter.getItemViewType(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.preference.ListPreference.getSummary() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.preference.ListPreference.setEntryValues(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.preference.ListPreference.setValueIndex(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.preference.ListPreference.getEntry() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence[] android.preference.ListPreference.getEntries() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence[] android.preference.ListPreference.getEntryValues() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.preference.ListPreference.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.preference.ListPreference.setEntries(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.preference.ListPreference$SavedState.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.preference.GenericInflater.getDefaultPackage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Context android.preference.GenericInflater.getContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.preference.GenericInflater.createItem(String,String,AttributeSet) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.preference.GenericInflater.onCreateItem(String,AttributeSet) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.preference.PreferenceActivity$Header.getBreadCrumbShortTitle(Resources) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.preference.PreferenceActivity$Header.getSummary(Resources) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.preference.PreferenceActivity.startWithFragment(String,Bundle,Fragment,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Button android.preference.PreferenceActivity.getNextButton() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.preference.PreferenceActivity$Header.getBreadCrumbTitle(Resources) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.preference.PreferenceActivity$HeaderAdapter.getView(int,View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.preference.PreferenceActivity.startPreferencePanel(String,Bundle,int,CharSequence,Fragment,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.preference.PreferenceActivity.startWithFragment(String,Bundle,Fragment,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
PreferenceManager android.preference.PreferenceActivity.getPreferenceManager() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.preference.PreferenceActivity.setPreferenceScreen(PreferenceScreen) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.preference.PreferenceActivity$Header.getTitle(Resources) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PreferenceScreen android.preference.PreferenceActivity.getPreferenceScreen() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.preference.PreferenceActivity.onPreferenceStartFragment(PreferenceFragment,Preference) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent android.preference.PreferenceActivity.onBuildStartFragmentIntent(String,Bundle,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.preference.PreferenceActivity$Header.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.preference.PreferenceActivity.setListFooter(View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Dialog android.preference.DialogPreference.getDialog() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.preference.DialogPreference.getDialogTitle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.preference.DialogPreference$SavedState.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.preference.DialogPreference.getDialogLayoutResource() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.preference.DialogPreference.getDialogIcon() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.preference.DialogPreference.onCreateDialogView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.preference.DialogPreference.setDialogMessage(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.preference.DialogPreference.getDialogMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Parcelable android.preference.DialogPreference.onSaveInstanceState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.preference.DialogPreference.setPositiveButtonText(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.preference.DialogPreference.getPositiveButtonText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.preference.DialogPreference.setDialogTitle(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.preference.DialogPreference.getNegativeButtonText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.preference.DialogPreference.setNegativeButtonText(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.preference.DialogPreference.setDialogIcon(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.preference.PreferenceGroup.setEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Preference android.preference.PreferenceGroup.getPreference(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.preference.PreferenceGroup.getPreferenceCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.preference.PreferenceScreen$SavedState.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ListAdapter android.preference.PreferenceScreen.getRootAdapter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Dialog android.preference.PreferenceScreen.getDialog() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.preference.PreferenceManager.setDefaultValues(Context,String,int,int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Context android.preference.PreferenceManager.getContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PreferenceScreen android.preference.PreferenceManager.inflateFromResource(Context,int,PreferenceScreen) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.preference.PreferenceManager.getSharedPreferencesMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.preference.PreferenceManager.setDefaultValues(Context,int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
PreferenceScreen android.preference.PreferenceManager.getPreferenceScreen() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PreferenceScreen android.preference.PreferenceManager.createPreferenceScreen(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.preference.PreferenceManager.getNextId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.preference.PreferenceManager.getSharedPreferencesName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.preference.PreferenceManager.getNextRequestCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SharedPreferences android.preference.PreferenceManager.getSharedPreferences() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PreferenceScreen android.preference.PreferenceManager.inflateFromIntent(Intent,PreferenceScreen) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Activity android.preference.PreferenceManager.getActivity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PreferenceFragment android.preference.PreferenceManager.getFragment() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SharedPreferences android.preference.PreferenceManager.getDefaultSharedPreferences(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.preference.PreferenceFragment.setPreferenceScreen(PreferenceScreen) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ListView android.preference.PreferenceFragment.getListView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PreferenceManager android.preference.PreferenceFragment.getPreferenceManager() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PreferenceScreen android.preference.PreferenceFragment.getPreferenceScreen() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.preference.Preference.getFragment() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.preference.Preference.getPersistedFloat(float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.preference.Preference.getIcon() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.preference.Preference.getIntent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SharedPreferences android.preference.Preference.getSharedPreferences() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.preference.Preference.getPersistedInt(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.preference.Preference.getPersistedString(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.preference.Preference.persistBoolean(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Set android.preference.Preference.getPersistedStringSet(Set) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.preference.Preference.getDependency() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PreferenceManager android.preference.Preference.getPreferenceManager() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.preference.Preference.getSummary() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.preference.Preference.getTitle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.preference.Preference.getShouldDisableView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Context android.preference.Preference.getContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.preference.Preference.getPersistedBoolean(boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
StringBuilder android.preference.Preference.getFilterableStringBuilder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.preference.Preference.persistLong(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.preference.Preference.getWidgetLayoutResource() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bundle android.preference.Preference.getExtras() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.preference.Preference.persistInt(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.preference.Preference.setSummary(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
View android.preference.Preference.getView(View,ViewGroup) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.preference.Preference.setTitle(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.preference.Preference.persistString(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.preference.Preference.getKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.preference.Preference.notifyDependencyChange(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.preference.Preference.getTitleRes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.preference.Preference.getPersistedLong(long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.preference.Preference.getId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.preference.Preference.getLayoutResource() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.preference.Preference.getOrder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.preference.Preference.persistFloat(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.preference.RingtonePreference.getShowDefault() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.preference.RingtonePreference.getRingtoneType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.preference.RingtonePreference.getShowSilent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.bluetooth.IBluetoothA2dp$Stub$Proxy.getPriority(BluetoothDevice) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
List android.bluetooth.IBluetoothA2dp$Stub$Proxy.getConnectedDevices() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.IBluetoothA2dp$Stub$Proxy.getConnectionState(BluetoothDevice) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
boolean android.bluetooth.IBluetoothA2dp$Stub$Proxy.setPriority(BluetoothDevice,int) - @DSSink({DSSinkKind.BLUETOOTH})
List android.bluetooth.IBluetoothA2dp$Stub$Proxy.getDevicesMatchingConnectionStates(int[]) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
IBinder android.bluetooth.IBluetoothA2dp$Stub.asBinder() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
String android.bluetooth.IBluetoothA2dp$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
boolean android.bluetooth.IBluetoothA2dp$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.BLUETOOTH})
IBinder android.bluetooth.IBluetoothHeadset$Stub.asBinder() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
boolean android.bluetooth.IBluetoothHeadset$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.BLUETOOTH})
boolean android.bluetooth.IBluetoothHeadset$Stub$Proxy.setPriority(BluetoothDevice,int) - @DSSink({DSSinkKind.BLUETOOTH})
List android.bluetooth.IBluetoothHeadset$Stub$Proxy.getConnectedDevices() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.IBluetoothHeadset$Stub$Proxy.getBatteryUsageHint(BluetoothDevice) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.IBluetoothHeadset$Stub$Proxy.getConnectionState(BluetoothDevice) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
String android.bluetooth.IBluetoothHeadset$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.IBluetoothHeadset$Stub$Proxy.getPriority(BluetoothDevice) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
List android.bluetooth.IBluetoothHeadset$Stub$Proxy.getDevicesMatchingConnectionStates(int[]) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.IBluetoothHeadset$Stub$Proxy.getAudioState(BluetoothDevice) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.BluetoothServerSocket.getChannel() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
BluetoothSocket android.bluetooth.BluetoothSocket.accept(int) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
InputStream android.bluetooth.BluetoothSocket.getInputStream() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
BluetoothDevice android.bluetooth.BluetoothSocket.getRemoteDevice() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
OutputStream android.bluetooth.BluetoothSocket.getOutputStream() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
List android.bluetooth.BluetoothHealth.getDevicesMatchingConnectionStates(int[]) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.BluetoothHealth.getConnectionState(BluetoothDevice) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
List android.bluetooth.BluetoothHealth.getConnectedDevices() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
ParcelFileDescriptor android.bluetooth.BluetoothHealth.getMainChannelFd(BluetoothDevice,BluetoothHealthAppConfiguration) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.BluetoothDevice.getBondState() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
boolean android.bluetooth.BluetoothDevice.setPin(byte[]) - @DSSink({DSSinkKind.BLUETOOTH})
boolean android.bluetooth.BluetoothDevice.setDeviceOutOfBandData(byte[],byte[]) - @DSSink({DSSinkKind.BLUETOOTH})
IBluetooth android.bluetooth.BluetoothDevice.getService() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
boolean android.bluetooth.BluetoothDevice.setTrust(boolean) - @DSSink({DSSinkKind.BLUETOOTH})
boolean android.bluetooth.BluetoothDevice.setPasskey(int) - @DSSink({DSSinkKind.BLUETOOTH})
String android.bluetooth.BluetoothDevice.getAlias() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
boolean android.bluetooth.BluetoothDevice.setPairingConfirmation(boolean) - @DSSink({DSSinkKind.BLUETOOTH})
String android.bluetooth.BluetoothDevice.getAliasName() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
BluetoothClass android.bluetooth.BluetoothDevice.getBluetoothClass() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
String android.bluetooth.BluetoothDevice.getName() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
boolean android.bluetooth.BluetoothDevice.setAlias(String) - @DSSink({DSSinkKind.BLUETOOTH})
int android.bluetooth.BluetoothDevice.getServiceChannel(ParcelUuid) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
ParcelUuid[] android.bluetooth.BluetoothDevice.getUuids() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
boolean android.bluetooth.BluetoothDevice.getTrustState() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
String android.bluetooth.BluetoothDevice.getAddress() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.BluetoothInputDevice.getPriority(BluetoothDevice) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
boolean android.bluetooth.BluetoothInputDevice.setPriority(BluetoothDevice,int) - @DSSink({DSSinkKind.BLUETOOTH})
List android.bluetooth.BluetoothInputDevice.getDevicesMatchingConnectionStates(int[]) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.BluetoothInputDevice.getConnectionState(BluetoothDevice) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
List android.bluetooth.BluetoothInputDevice.getConnectedDevices() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
String android.bluetooth.IBluetoothHealthCallback$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
IBinder android.bluetooth.IBluetoothHealthCallback$Stub.asBinder() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
void android.bluetooth.IBluetoothHealthCallback$Stub$Proxy.onHealthAppConfigurationStatusChange(BluetoothHealthAppConfiguration,int) - @DSSink({DSSinkKind.BLUETOOTH})
void android.bluetooth.IBluetoothHealthCallback$Stub$Proxy.onHealthChannelStateChange(BluetoothHealthAppConfiguration,BluetoothDevice,int,int,ParcelFileDescriptor,int) - @DSSink({DSSinkKind.BLUETOOTH})
int android.bluetooth.BluetoothHealthAppConfiguration.getChannelType() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.BluetoothHealthAppConfiguration.getDataType() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
String android.bluetooth.BluetoothHealthAppConfiguration.getName() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.BluetoothHealthAppConfiguration.getRole() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
List android.bluetooth.BluetoothA2dp.getDevicesMatchingConnectionStates(int[]) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.BluetoothA2dp.getConnectionState(BluetoothDevice) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
List android.bluetooth.BluetoothA2dp.getConnectedDevices() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
boolean android.bluetooth.BluetoothA2dp.setPriority(BluetoothDevice,int) - @DSSink({DSSinkKind.BLUETOOTH})
int android.bluetooth.BluetoothA2dp.getPriority(BluetoothDevice) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
String android.bluetooth.IBluetoothCallback$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
IBinder android.bluetooth.IBluetoothCallback$Stub.asBinder() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.BluetoothClass.getDeviceClass() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.BluetoothClass.getMajorDeviceClass() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
void android.bluetooth.BluetoothOutputStream.write(byte[],int,int) - @DSSink({DSSinkKind.BLUETOOTH})
IBinder android.bluetooth.IBluetoothStateChangeCallback$Stub.asBinder() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
String android.bluetooth.IBluetoothStateChangeCallback$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.BluetoothHeadset.getAudioState(BluetoothDevice) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
List android.bluetooth.BluetoothHeadset.getConnectedDevices() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
boolean android.bluetooth.BluetoothHeadset.startVoiceRecognition(BluetoothDevice) - @DSSink({DSSinkKind.BLUETOOTH})
int android.bluetooth.BluetoothHeadset.getPriority(BluetoothDevice) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
boolean android.bluetooth.BluetoothHeadset.setPriority(BluetoothDevice,int) - @DSSink({DSSinkKind.BLUETOOTH})
boolean android.bluetooth.BluetoothHeadset.startScoUsingVirtualVoiceCall(BluetoothDevice) - @DSSink({DSSinkKind.BLUETOOTH})
int android.bluetooth.BluetoothHeadset.getBatteryUsageHint(BluetoothDevice) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
List android.bluetooth.BluetoothHeadset.getDevicesMatchingConnectionStates(int[]) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.BluetoothHeadset.getConnectionState(BluetoothDevice) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.BluetoothPan.getConnectionState(BluetoothDevice) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
boolean android.bluetooth.BluetoothPan.isTetheringOn() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
List android.bluetooth.BluetoothPan.getDevicesMatchingConnectionStates(int[]) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
List android.bluetooth.BluetoothPan.getConnectedDevices() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
void android.bluetooth.BluetoothPan.setBluetoothTethering(boolean) - @DSSink({DSSinkKind.BLUETOOTH})
BluetoothServerSocket android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(String,UUID) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
boolean android.bluetooth.BluetoothAdapter.setScanMode(int,int) - @DSSink({DSSinkKind.BLUETOOTH})
String android.bluetooth.BluetoothAdapter.getAddress() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
BluetoothDevice android.bluetooth.BluetoothAdapter.getRemoteDevice(String) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.BluetoothAdapter.getState() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
Set android.bluetooth.BluetoothAdapter.getBondedDevices() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.BluetoothAdapter.getScanMode() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
BluetoothServerSocket android.bluetooth.BluetoothAdapter.listenUsingEncryptedRfcommWithServiceRecord(String,UUID) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.BluetoothAdapter.getProfileConnectionState(int) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
BluetoothAdapter android.bluetooth.BluetoothAdapter.getDefaultAdapter() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.BluetoothAdapter.getDiscoverableTimeout() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
ParcelUuid[] android.bluetooth.BluetoothAdapter.getUuids() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
boolean android.bluetooth.BluetoothAdapter.setScanMode(int) - @DSSink({DSSinkKind.BLUETOOTH})
String android.bluetooth.BluetoothAdapter.getName() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
void android.bluetooth.BluetoothAdapter.setDiscoverableTimeout(int) - @DSSink({DSSinkKind.BLUETOOTH})
BluetoothServerSocket android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(String,UUID) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.BluetoothAdapter.getConnectionState() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.BluetoothUuid.getServiceIdentifierFromParcelUuid(ParcelUuid) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
String android.bluetooth.IBluetooth$Stub$Proxy.getAddress() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.IBluetooth$Stub$Proxy.getAdapterConnectionState() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
boolean android.bluetooth.IBluetooth$Stub$Proxy.setScanMode(int,int) - @DSSink({DSSinkKind.BLUETOOTH})
int android.bluetooth.IBluetooth$Stub$Proxy.getDiscoverableTimeout() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
boolean android.bluetooth.IBluetooth$Stub$Proxy.setName(String) - @DSSink({DSSinkKind.BLUETOOTH})
void android.bluetooth.IBluetooth$Stub$Proxy.sendConnectionStateChange(BluetoothDevice,int,int,int) - @DSSink({DSSinkKind.BLUETOOTH})
int android.bluetooth.IBluetooth$Stub$Proxy.getScanMode() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
ParcelUuid[] android.bluetooth.IBluetooth$Stub$Proxy.getUuids() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
int android.bluetooth.IBluetooth$Stub$Proxy.getProfileConnectionState(int) - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
String android.bluetooth.IBluetooth$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
boolean android.bluetooth.IBluetooth$Stub$Proxy.setDiscoverableTimeout(int) - @DSSink({DSSinkKind.BLUETOOTH})
boolean android.bluetooth.IBluetooth$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.BLUETOOTH})
IBinder android.bluetooth.IBluetooth$Stub.asBinder() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
String android.bluetooth.IBluetooth$Stub$Proxy.getName() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
String android.webkit.Plugin.getDescription() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.Plugin.getFileName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.Plugin.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.Plugin.getPath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.OverScrollGlow.drawEdgeGlows(Canvas) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.JWebCoreJavaBridge.storeFilePathForContentUri(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
WebViewDatabase android.webkit.WebViewDatabase.getInstance(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SslClientCertLookupTable android.webkit.SslClientCertLookupTable.getInstance() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.webkit.WebResourceResponse.getMimeType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream android.webkit.WebResourceResponse.getData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.WebResourceResponse.getEncoding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.L10nUtils.getLocalisedString(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] android.webkit.CertTool.getKeyStrengthList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.CertTool.getCertType(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.CertTool.getSignedPublicKey(Context,int,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
GeolocationPermissions android.webkit.GeolocationPermissions.getInstance() - @DSSource({DSSourceKind.LOCATION_INFORMATION})
String android.webkit.WebView.getTitle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
WebBackForwardList android.webkit.WebView.saveState(Bundle) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebView.setBackgroundColor(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.WebView.getVisibleTitleHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.WebView$HitTestResult.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebView.setOverScrollMode(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SslCertificate android.webkit.WebView.getCertificate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
WebBackForwardList android.webkit.WebView.restoreState(Bundle) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.WebView.getContentHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebView.saveWebArchive(String,boolean,ValueCallback) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebView.setNetworkAvailable(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.webkit.WebView.getScale() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PluginList android.webkit.WebView.getPluginList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebView.setHttpAuthUsernamePassword(String,String,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
WebSettings android.webkit.WebView.getSettings() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebView.setWebViewClient(WebViewClient) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebView.setMapTrackballToArrowKeys(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebView.setScrollBarStyle(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.WebView.getProgress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.WebView.setFrame(int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebView.setInitialScale(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.WebView$HitTestResult.getExtra() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebView.setVerticalScrollbarOverlay(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.WebView.getOriginalUrl() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebView.setWebChromeClient(WebChromeClient) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebView.setCertificate(SslCertificate) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebView.savePassword(String,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.WebView.getTouchIconUrl() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebView.setHorizontalScrollbarOverlay(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.WebView.getUrl() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.WebView.restorePicture(Bundle,File) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.WebView.getContentWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
WebView android.webkit.WebView$WebViewTransport.getWebView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bitmap android.webkit.WebView.getFavicon() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.webkit.WebView.getZoomControls() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] android.webkit.WebView.getHttpAuthUsernamePassword(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebView.saveWebArchive(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Bitmap android.webkit.WebChromeClient.getDefaultVideoPoster() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.webkit.WebChromeClient.getVideoLoadingProgressView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebChromeClient.setupAutoFill(Message) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.HTML5VideoViewProxy.onPrepared(MediaPlayer) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Context android.webkit.HTML5VideoViewProxy.getContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.HTML5VideoViewProxy.setBaseLayer(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.HTML5VideoViewProxy$PosterDownloader.data(byte[],int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.HTML5VideoView.setOnErrorListener(HTML5VideoViewProxy) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.HTML5VideoView.getCurrentPosition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.HTML5VideoView.getPauseDuringPreparing() - @DSSource({DSSourceKind.FILE_INFORMATION})
int android.webkit.HTML5VideoView.getTextureName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.HTML5VideoView.getPlayerBuffering() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.HTML5VideoView.setOnInfoListener(HTML5VideoViewProxy) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.HTML5VideoView.setVideoURI(String,HTML5VideoViewProxy) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.HTML5VideoView.getVideoLayerId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.HTML5VideoView.getDuration() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.HTML5VideoView.getReadyToUseSurfTex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.HTML5VideoView.getCurrentState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.HTML5VideoView.setOnCompletionListener(HTML5VideoViewProxy) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.webkit.ZoomManager.getReadingLevelScale() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.ZoomManager.setZoomScale(float,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.webkit.ZoomManager.getZoomOverviewScale() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.ZoomManager.setInitialScaleInPercent(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.webkit.ZoomManager.getInvScale() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.webkit.ZoomManager.getMaxZoomScale() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.webkit.ZoomManager.getExternalZoomPicker() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.webkit.ZoomManager.getMinZoomScale() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.webkit.ZoomManager.getScale() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.webkit.ZoomManager.getDefaultMinZoomScale() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.ZoomManager.setHardwareAccelerated() - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.ZoomManager.restoreZoomState(Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.webkit.ZoomManager.getTextWrapScale() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.ZoomManager.getDocumentAnchorY() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.webkit.ZoomManager.getDefaultMaxZoomScale() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.webkit.ZoomManager.getInvDefaultScale() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.ZoomManager.getDocumentAnchorX() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.webkit.ZoomManager.getDefaultScale() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
WebHistoryItem android.webkit.WebBackForwardList.getCurrentItem() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
WebBackForwardList android.webkit.WebBackForwardList.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.WebBackForwardList.getSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
WebHistoryItem android.webkit.WebBackForwardList.getItemAtIndex(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.WebBackForwardList.getCurrentIndex() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] android.webkit.URLUtil.decode(byte[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.SslCertLookupTable.setIsAllowed(SslError) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SslCertLookupTable android.webkit.SslCertLookupTable.getInstance() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.webkit.ByteArrayBuilder.getByteSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
WebIconDatabase android.webkit.WebIconDatabase.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.DeviceMotionAndOrientationManager.setMockOrientation(boolean,double,boolean,double,boolean,double) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
List android.webkit.PluginList.getList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.FindActionModeCallback.getActionModeGlobalBottom() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.FindActionModeCallback.setText(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CookieSyncManager android.webkit.CookieSyncManager.createInstance(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CookieSyncManager android.webkit.CookieSyncManager.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.HTML5VideoInline.getTextureName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SurfaceTexture android.webkit.HTML5VideoInline.getSurfaceTexture(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.WebSettings.getDatabaseEnabled() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
int android.webkit.WebSettings.getDefaultFontSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.WebSettings.getLightTouchEnabled() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
boolean android.webkit.WebSettings.getUseWebViewBackgroundForOverscrollBackground() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setMinimumLogicalFontSize(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.WebSettings.getLoadWithOverviewMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.WebSettings.getSansSerifFontFamily() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.WebSettings.getAllowContentAccess() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setFantasyFontFamily(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.WebSettings.getDatabasePath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.WebSettings.getMinimumFontSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.WebSettings.getSaveFormData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setEnableSmoothTransition(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setSupportMultipleWindows(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.WebSettings.getJavaScriptCanOpenWindowsAutomatically() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setAppCacheMaxSize(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.WebSettings.getLoadsImagesAutomatically() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setLoadsImagesAutomatically(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setLoadWithOverviewMode(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.WebSettings.getFantasyFontFamily() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.WebSettings.getSavePassword() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
String android.webkit.WebSettings.getCursiveFontFamily() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.WebSettings.getTextZoom() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.WebSettings.getStandardFontFamily() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.WebSettings.getAllowFileAccess() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setDisplayZoomControls(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.WebSettings.getUseDoubleTree() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.WebSettings.getPluginsEnabled() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
boolean android.webkit.WebSettings.getBlockNetworkImage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setAppCacheEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setDomStorageEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setSansSerifFontFamily(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setUseWebViewBackgroundForOverscrollBackground(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.WebSettings.getUserAgent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.WebSettings.getCacheMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.WebSettings.getNavDump() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setDatabaseEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setUserAgent(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setSaveFormData(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setAllowFileAccess(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.WebSettings.getDefaultTextEncodingName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setBuiltInZoomControls(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.WebSettings.getDisplayZoomControls() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setJavaScriptEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setGeolocationDatabasePath(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setPluginsPath(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setBlockNetworkLoads(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setDefaultFontSize(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setDefaultFixedFontSize(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.WebSettings.getBuiltInZoomControls() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setAppCachePath(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setSupportZoom(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.WebSettings.getBlockNetworkLoads() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.WebSettings.getUserAgentString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setNavDump(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setDatabasePath(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setPluginsEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.WebSettings.getUseWideViewPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setCursiveFontFamily(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setUseDoubleTree(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.WebSettings.getDomStorageEnabled() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void android.webkit.WebSettings.setUserAgentString(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setAllowContentAccess(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.WebSettings.getDefaultFixedFontSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setDefaultTextEncodingName(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setUseWideViewPort(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setStandardFontFamily(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setGeolocationEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.WebSettings.getJavaScriptEnabled() - @DSSource({DSSourceKind.SYSTEM_SETTINGS})
void android.webkit.WebSettings.setMinimumFontSize(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setSerifFontFamily(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.WebSettings.getFixedFontFamily() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.WebSettings.getSerifFontFamily() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setBlockNetworkImage(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setCacheMode(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setSavePassword(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setLightTouchEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.WebSettings.getPluginsPath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setJavaScriptCanOpenWindowsAutomatically(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.WebSettings.getMinimumLogicalFontSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setNeedInitialFocus(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setTextZoom(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebSettings.setFixedFontFamily(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] android.webkit.PluginManager.getPluginDirectories() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.PluginManager.getPluginSharedDataDirectory() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class android.webkit.PluginManager.getPluginClass(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.PluginManager.getPluginsAPKName(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PluginManager android.webkit.PluginManager.getInstance(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebViewCore.setMockDeviceOrientation(boolean,double,boolean,double,boolean,double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
DeviceOrientationService android.webkit.WebViewCore.getDeviceOrientationService() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.WebViewCore$AutoFillData.getQueryId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.WebViewCore$AutoFillData.getPreviewString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
BrowserFrame android.webkit.WebViewCore.getBrowserFrame() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DeviceMotionService android.webkit.WebViewCore.getDeviceMotionService() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Context android.webkit.WebViewCore.getContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.WebHistoryItem.getUrl() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.WebHistoryItem.getId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.WebHistoryItem.getTitle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
WebHistoryItem android.webkit.WebHistoryItem.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.WebHistoryItem.getOriginalUrl() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bitmap android.webkit.WebHistoryItem.getFavicon() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.JsResult.getResult() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Context android.webkit.JniUtil.getContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.MimeTypeMap.getExtensionFromMimeType(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MimeTypeMap android.webkit.MimeTypeMap.getSingleton() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.MimeTypeMap.getFileExtensionFromUrl(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.MimeTypeMap.getMimeTypeFromExtension(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CallbackProxy android.webkit.BrowserFrame.getCallbackProxy() - @DSSource({DSSourceKind.BROWSER_INFORMATION})
String android.webkit.BrowserFrame.getRawResFilename(int,Context) - @DSSource({DSSourceKind.BROWSER_INFORMATION})
String android.webkit.BrowserFrame.getUserAgentString() - @DSSource({DSSourceKind.BROWSER_INFORMATION})
boolean android.webkit.BrowserFrame.getShouldStartScrolledRight() - @DSSource({DSSourceKind.BROWSER_INFORMATION})
void android.webkit.CallbackProxy.onPageStarted(String,Bitmap) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.CallbackProxy.onReceivedSslError(SslErrorHandler,SslError) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
WebChromeClient android.webkit.CallbackProxy.getWebChromeClient() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.CallbackProxy.onJsPrompt(String,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
WebBackForwardListClient android.webkit.CallbackProxy.getWebBackForwardListClient() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.CallbackProxy.onScaleChanged(float,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.CallbackProxy.shouldOverrideUrlLoading(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
WebViewClient android.webkit.CallbackProxy.getWebViewClient() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.CallbackProxy$UploadFileMessageData.getAcceptType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.CallbackProxy.getProgress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.CallbackProxy.onJsAlert(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.CallbackProxy.onReceivedError(int,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.CallbackProxy.onReceivedHttpAuthRequest(HttpAuthHandler,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.CallbackProxy.onSavePassword(String,String,String,Message) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.CallbackProxy.uiOverrideUrlLoading(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.CallbackProxy.onJsConfirm(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.CallbackProxy.onReceivedHttpAuthCredentials(String,String,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.webkit.CallbackProxy$ResultTransport.getResult() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Uri android.webkit.CallbackProxy$UploadFile.getResult() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.CallbackProxy.onFormResubmission(Message,Message) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.CallbackProxy.addMessageToConsole(String,int,String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.CallbackProxy.onReceivedLoginRequest(String,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.webkit.CallbackProxy.onJsBeforeUnload(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.CallbackProxy.onReceivedClientCertRequest(ClientCertRequestHandler,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.JsPromptResult.getStringResult() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.CookieManager.getCookie(String,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.CookieManager.setCookie(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.CookieManager.getCookie(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.webkit.CookieManager.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.CookieManager.getCookie(WebAddress) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.CookieManager.setAcceptFileSchemeCookies(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.CookieManager.setAcceptCookie(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CookieManager android.webkit.CookieManager.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.HTML5VideoFullScreen.getBufferPercentage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.webkit.WebSyncManager.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
WebStorage android.webkit.WebStorage.getInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.webkit.WebStorage$Origin.getQuota() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.WebStorage$Origin.getOrigin() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.webkit.WebStorage$Origin.getUsage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.webkit.WebStorage.setQuotaForOrigin(String,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long android.webkit.CacheManager$CacheResult.getContentLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.CacheManager$CacheResult.getContentDisposition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.CacheManager$CacheResult.getEncoding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.CacheManager$CacheResult.getLocalPath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.CacheManager$CacheResult.getETag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.CacheManager$CacheResult.getMimeType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.webkit.CacheManager$CacheResult.getExpires() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.webkit.CacheManager.getCacheFileBaseDir() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.CacheManager$CacheResult.getExpiresString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
OutputStream android.webkit.CacheManager$CacheResult.getOutputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.CacheManager$CacheResult.getLastModified() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.webkit.CacheManager$CacheResult.getLocation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream android.webkit.CacheManager$CacheResult.getInputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.webkit.CacheManager$CacheResult.getHttpStatusCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.util.FloatProperty.set(Object,Float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.util.Log.d(String,String) - @DSSink({DSSinkKind.LOG})
int android.util.Log.w(String,String) - @DSSink({DSSinkKind.LOG})
int android.util.Log.w(String,String,Throwable) - @DSSink({DSSinkKind.LOG})
int android.util.Log.i(String,String) - @DSSink({DSSinkKind.LOG})
int android.util.Log.i(String,String,Throwable) - @DSSink({DSSinkKind.LOG})
int android.util.Log.wtf(String,String,Throwable) - @DSSink({DSSinkKind.LOG})
int android.util.Log.println(int,String,String) - @DSSink({DSSinkKind.LOG})
int android.util.Log.d(String,String,Throwable) - @DSSink({DSSinkKind.LOG})
int android.util.Log.e(String,String) - @DSSink({DSSinkKind.LOG})
int android.util.Log.w(String,Throwable) - @DSSink({DSSinkKind.LOG})
int android.util.Log.v(String,String) - @DSSink({DSSinkKind.LOG})
int android.util.Log.v(String,String,Throwable) - @DSSink({DSSinkKind.LOG})
String android.util.Log.getStackTraceString(Throwable) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.util.Log.e(String,String,Throwable) - @DSSink({DSSinkKind.LOG})
int android.util.Slog.e(String,String) - @DSSink({DSSinkKind.LOG})
int android.util.Slog.w(String,String) - @DSSink({DSSinkKind.LOG})
int android.util.Slog.println(int,String,String) - @DSSink({DSSinkKind.LOG})
int android.util.Slog.i(String,String) - @DSSink({DSSinkKind.LOG})
int android.util.Slog.w(String,String,Throwable) - @DSSink({DSSinkKind.LOG})
int android.util.Slog.d(String,String) - @DSSink({DSSinkKind.LOG})
int android.util.Slog.v(String,String) - @DSSink({DSSinkKind.LOG})
int android.util.Slog.w(String,Throwable) - @DSSink({DSSinkKind.LOG})
int android.util.Slog.e(String,String,Throwable) - @DSSink({DSSinkKind.LOG})
int android.util.Slog.i(String,String,Throwable) - @DSSink({DSSinkKind.LOG})
int android.util.Slog.v(String,String,Throwable) - @DSSink({DSSinkKind.LOG})
int android.util.Slog.d(String,String,Throwable) - @DSSink({DSSinkKind.LOG})
void android.util.SparseArray.append(int,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.util.SparseArray.get(int,Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.util.SparseArray.setValueAt(int,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.util.SparseArray.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.util.XmlPullAttributes.getStyleAttribute() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.util.XmlPullAttributes.getPositionDescription() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.util.XmlPullAttributes.getAttributeName(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.util.XmlPullAttributes.getAttributeNameResource(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.util.XmlPullAttributes.getAttributeFloatValue(int,float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.util.XmlPullAttributes.getAttributeValue(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.util.XmlPullAttributes.getIdAttribute() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.util.XmlPullAttributes.getAttributeCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.util.XmlPullAttributes.getClassAttribute() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.util.XmlPullAttributes.getAttributeFloatValue(String,String,float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.util.XmlPullAttributes.getAttributeValue(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.util.Singleton.get() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.util.LruCache.get(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.util.TypedValue.getFloat() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.util.TypedValue.setTo(TypedValue) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.util.TypedValue.getDimension(DisplayMetrics) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.util.TypedValue.complexToDimensionNoisy(int,DisplayMetrics) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.util.TypedValue.getFraction(float,float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.util.EventLog$Event.getData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.util.EventLog.getTagName(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.util.EventLog$Event.getProcessId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.util.EventLog$Event.getThreadId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.util.EventLog$Event.getTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.util.EventLog$Event.getTimeNanos() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.util.Patterns.concatGroups(Matcher) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.util.PrefixPrinter.println(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.util.SparseBooleanArray.append(int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.util.PrintWriterPrinter.println(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.util.DisplayMetrics.setTo(DisplayMetrics) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.util.SparseIntArray.append(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.util.SparseIntArray.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.util.SparseIntArray.get(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.util.IntProperty.set(Object,Integer) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.util.LongSparseArray.get(long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.util.LongSparseArray.append(long,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.util.LongSparseArray.get(long,Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.util.LongSparseArray.setValueAt(int,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.util.Base64$Encoder.process(byte[],int,int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.util.Base64$Decoder.process(byte[],int,int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.util.ReflectiveProperty.get(Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.util.ReflectiveProperty.set(Object,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.util.Property.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class android.util.Property.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.util.Property.set(Object,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.util.TimeUtils.getTimeZoneDatabaseVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TimeZone android.util.TimeUtils.getTimeZone(int,boolean,long,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bitmap android.emoji.EmojiFactory.getBitmapFromVendorSpecificPua(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.emoji.EmojiFactory.getVendorSpecificPuaFromAndroidPua(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.emoji.EmojiFactory.getAndroidPuaFromVendorSpecificSjis(char) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.emoji.EmojiFactory.getVendorSpecificPuaFromAndroidPua(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.emoji.EmojiFactory.getMinimumAndroidPua() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.emoji.EmojiFactory.getVendorSpecificSjisFromAndroidPua(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bitmap android.emoji.EmojiFactory.getBitmapFromAndroidPua(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.emoji.EmojiFactory.getAndroidPuaFromVendorSpecificPua(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bitmap android.emoji.EmojiFactory.getBitmapFromVendorSpecificSjis(char) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.emoji.EmojiFactory.getMaximumAndroidPua() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.emoji.EmojiFactory.getAndroidPuaFromVendorSpecificPua(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.IMessenger$Stub$Proxy.send(Message) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.os.IMessenger$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.os.IMessenger$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.SystemProperties.getInt(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.os.SystemProperties.getLong(String,long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.os.SystemProperties.get(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.os.SystemProperties.get(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.SystemProperties.set(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.os.IRemoteCallback$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.os.IRemoteCallback$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.IRemoteCallback$Stub$Proxy.sendResult(Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.os.DropBoxManager$Entry.getTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.os.DropBoxManager.isTagEnabled(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.DropBoxManager$Entry.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long android.os.DropBoxManager$Entry.getTimeMillis() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.DropBoxManager$Entry.getFlags() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.os.DropBoxManager$Entry.getText(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream android.os.DropBoxManager$Entry.getInputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.DropBoxManager.addFile(String,File,int) - @DSSink({DSSinkKind.FILE})
int android.os.FileObserver$ObserverThread.startWatching(String,int,FileObserver) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.os.FileUtils.copyToFile(InputStream,File) - @DSSink({DSSinkKind.FILE})
void android.os.FileUtils.stringToFile(String,String) - @DSSink({DSSinkKind.FILE})
String android.os.FileUtils.readTextFile(File,int,String) - @DSSink({DSSinkKind.FILE})
IBinder android.os.IVibratorService$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.IVibratorService$Stub$Proxy.cancelVibrate(IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.IVibratorService$Stub$Proxy.vibratePattern(long[],int,IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.os.IVibratorService$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.IVibratorService$Stub$Proxy.vibrate(long,IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.PowerManager$WakeLock.setWorkSource(WorkSource) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.PowerManager.setBacklightBrightness(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.os.ParcelFileDescriptor.getFd() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ParcelFileDescriptor android.os.ParcelFileDescriptor.open(File,int) - @DSSink({DSSinkKind.FILE})
ParcelFileDescriptor android.os.ParcelFileDescriptor.fromData(byte[],String) - @DSSink({DSSinkKind.FILE})
FileDescriptor android.os.ParcelFileDescriptor.getFileDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.os.IPermissionController$Stub$Proxy.checkPermission(String,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.os.IPermissionController$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.os.IPermissionController$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.os.Build.getRadioVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MessageQueue android.os.Looper.getQueue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Looper android.os.Looper.getMainLooper() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Thread android.os.Looper.getThread() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Registrant.notifyResult(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Registrant.notifyRegistrant(AsyncResult) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Handler android.os.Registrant.getHandler() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Registrant.notifyException(Throwable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.os.HandlerThread.getThreadId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Looper android.os.HandlerThread.getLooper() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.RemoteCallback.sendResult(Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.RemoteCallback$LocalCallback.sendResult(Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.os.StatFs.getAvailableBlocks() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.StatFs.getFreeBlocks() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.StatFs.getBlockSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.StatFs.getBlockCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.os.RegistrantList.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.RegistrantList.notifyException(Throwable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.RegistrantList.notifyRegistrants(AsyncResult) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.RegistrantList.notifyResult(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] android.os.Parcel.marshall() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Parcel.setDataPosition(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Parcel.writeSparseBooleanArray(SparseBooleanArray) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Parcel.writeDoubleArray(double[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Parcel.writeSparseArray(SparseArray) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Parcel.writeException(Exception) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Parcel.writeCharArray(char[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Parcel.writeStringArray(String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Parcel.writeValue(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Parcel.setDataSize(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Parcel.writeCharSequenceArray(CharSequence[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Parcel.setDataCapacity(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] android.os.Parcel.createByteArray() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Parcel.writeFloatArray(float[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Parcel.writeArray(Object[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Serializable android.os.Parcel.readSerializable() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Parcel.writeIntArray(int[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Parcel.writeBinderArray(IBinder[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Parcel.writeByte(byte) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Parcel.writeByteArray(byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Parcel.writeLongArray(long[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.os.Parcel.readCharSequence() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.os.Parcel.readValue(ClassLoader) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bundle android.os.Message.getData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Handler android.os.Message.getTarget() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Message.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long android.os.Message.getWhen() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Runnable android.os.Message.getCallback() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.os.ServiceManager.getService(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.storage.StorageVolume.setStorageId(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.os.storage.StorageVolume.getPath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.storage.StorageVolume.getStorageId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.storage.StorageVolume.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.FILE})
int android.os.storage.StorageVolume.getMtpReserveSpace() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.os.storage.StorageVolume.getMaxFileSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
StorageVolume[] android.os.storage.StorageManager.getVolumeList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.storage.StorageManager$ListenerDelegate.sendShareAvailabilityChanged(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.os.storage.StorageManager.getVolumeState(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.storage.StorageManager$MountServiceBinderListener.onUsbMassStorageConnectionChanged(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.os.storage.StorageManager.getMountedObbPath(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.storage.StorageManager$ListenerDelegate.sendStorageStateChanged(String,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.os.storage.StorageManager.isObbMounted(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
StorageEventListener android.os.storage.StorageManager$ListenerDelegate.getListener() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.storage.StorageManager$ObbActionListener.addListener(OnObbStateChangeListener) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.storage.StorageManager$ObbListenerDelegate.sendObbStateChanged(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Message android.os.storage.StorageManager$StorageEvent.getMessage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.storage.StorageManager$MountServiceBinderListener.onStorageStateChanged(String,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] android.os.storage.StorageManager.getVolumePaths() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
OnObbStateChangeListener android.os.storage.StorageManager$ObbListenerDelegate.getListener() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.os.storage.IMountServiceListener$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.storage.IMountServiceListener$Stub$Proxy.onStorageStateChanged(String,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.os.storage.IMountServiceListener$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.os.storage.IObbActionListener$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.os.storage.IObbActionListener$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.storage.IObbActionListener$Stub$Proxy.onObbResult(String,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.os.storage.IMountService$Stub$Proxy.isObbMounted(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.os.storage.IMountService$Stub$Proxy.getSecureContainerFilesystemPath(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int[] android.os.storage.IMountService$Stub$Proxy.getStorageUsers(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.storage.IMountService$Stub$Proxy.verifyEncryptionPassword(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.storage.IMountService$Stub$Proxy.unmountVolume(String,boolean,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.os.storage.IMountService$Stub$Proxy.destroySecureContainer(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.os.storage.IMountService$Stub$Proxy.renameSecureContainer(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.os.storage.IMountService$Stub$Proxy.changeEncryptionPassword(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.os.storage.IMountService$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] android.os.storage.IMountService$Stub$Proxy.getSecureContainerList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.storage.IMountService$Stub$Proxy.finalizeSecureContainer(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.storage.IMountService$Stub$Proxy.unmountObb(String,boolean,IObbActionListener,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.os.storage.IMountService$Stub$Proxy.getEncryptionState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.storage.IMountService$Stub$Proxy.unregisterListener(IMountServiceListener) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.os.storage.IMountService$Stub$Proxy.isSecureContainerMounted(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.storage.IMountService$Stub$Proxy.setUsbMassStorageEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.os.storage.IMountService$Stub$Proxy.formatVolume(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.os.storage.IMountService$Stub$Proxy.mountVolume(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.os.storage.IMountService$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.storage.IMountService$Stub$Proxy.encryptStorage(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.os.storage.IMountService$Stub$Proxy.getVolumeState(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.storage.IMountService$Stub$Proxy.shutdown(IMountShutdownObserver) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.os.storage.IMountService$Stub$Proxy.unmountSecureContainer(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.storage.IMountService$Stub$Proxy.registerListener(IMountServiceListener) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.os.storage.IMountService$Stub$Proxy.getMountedObbPath(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.os.storage.IMountService$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.storage.IMountService$Stub$Proxy.mountSecureContainer(String,String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.os.storage.IMountService$Stub$Proxy.decryptStorage(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.os.storage.IMountService$Stub$Proxy.getSecureContainerPath(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.storage.IMountShutdownObserver$Stub$Proxy.onShutDownComplete(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.os.storage.IMountShutdownObserver$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.os.storage.IMountShutdownObserver$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.ServiceManagerProxy.setPermissionController(IPermissionController) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.os.ServiceManagerProxy.getService(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
IBinder android.os.ServiceManagerProxy.checkService(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.os.ServiceManagerNative.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.os.ServiceManagerNative.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.os.PatternMatcher.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.os.PatternMatcher.getPath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.IPowerManager$Stub$Proxy.updateWakeLockWorkSource(IBinder,WorkSource) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.os.IPowerManager$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.IPowerManager$Stub$Proxy.setStayOnSetting(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.IPowerManager$Stub$Proxy.crash(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.os.IPowerManager$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.IPowerManager$Stub$Proxy.setAttentionLight(boolean,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.IPowerManager$Stub$Proxy.releaseWakeLock(IBinder,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.os.IPowerManager$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.os.Bundle.getCharSequence(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.Bundle.getInt(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putFloat(String,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long android.os.Bundle.getLong(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putChar(String,char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putCharSequenceArrayList(String,ArrayList) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putParcelable(String,Parcelable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Byte android.os.Bundle.getByte(String,byte) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
double android.os.Bundle.getDouble(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putIntegerArrayList(String,ArrayList) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
short android.os.Bundle.getShort(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Serializable android.os.Bundle.getSerializable(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.os.Bundle.getString(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.os.Bundle.getCharSequence(String,CharSequence) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
double android.os.Bundle.getDouble(String,double) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] android.os.Bundle.getStringArray(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float[] android.os.Bundle.getFloatArray(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ArrayList android.os.Bundle.getCharSequenceArrayList(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean[] android.os.Bundle.getBooleanArray(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putByteArray(String,byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
char android.os.Bundle.getChar(String,char) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putShortArray(String,short[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putString(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.os.Bundle.getFloat(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putCharSequenceArray(String,CharSequence[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence[] android.os.Bundle.getCharSequenceArray(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putInt(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.os.Bundle.getInt(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putLongArray(String,long[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ClassLoader android.os.Bundle.getClassLoader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putParcelableArrayList(String,ArrayList) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putBoolean(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putIntArray(String,int[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.os.Bundle.getString(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putFloatArray(String,float[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putSerializable(String,Serializable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putByte(String,byte) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Bundle android.os.Bundle.getBundle(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ArrayList android.os.Bundle.getIntegerArrayList(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.os.Bundle.getFloat(String,float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char[] android.os.Bundle.getCharArray(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SparseArray android.os.Bundle.getSparseParcelableArray(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putIBinder(String,IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] android.os.Bundle.getByteArray(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.os.Bundle.getLong(String,long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putShort(String,short) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putSparseParcelableArray(String,SparseArray) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Parcelable[] android.os.Bundle.getParcelableArray(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int[] android.os.Bundle.getIntArray(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
short android.os.Bundle.getShort(String,short) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte android.os.Bundle.getByte(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
short[] android.os.Bundle.getShortArray(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putCharArray(String,char[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.os.Bundle.get(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
char android.os.Bundle.getChar(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bundle android.os.Bundle.forPair(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long[] android.os.Bundle.getLongArray(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putStringArray(String,String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
double[] android.os.Bundle.getDoubleArray(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putCharSequence(String,CharSequence) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putLong(String,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putStringArrayList(String,ArrayList) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putBundle(String,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putDouble(String,double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ArrayList android.os.Bundle.getStringArrayList(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putParcelableArray(String,Parcelable[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putDoubleArray(String,double[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.os.Bundle.getBoolean(String,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putAll(Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.os.Bundle.getIBinder(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Bundle.putBooleanArray(String,boolean[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.os.Bundle.getPairValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ArrayList android.os.Bundle.getParcelableArrayList(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.PerformanceCollector.addMeasurement(String,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.PerformanceCollector.startTiming(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.PerformanceCollector.addMeasurement(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.PerformanceCollector.beginSnapshot(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Bundle android.os.PerformanceCollector.stopTiming(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Bundle android.os.PerformanceCollector.addIteration(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.PerformanceCollector.addMeasurement(String,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Binder.dump(FileDescriptor,PrintWriter,String[]) - @DSSink({DSSinkKind.FILE})
String android.os.Binder.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Binder.dump(FileDescriptor,String[]) - @DSSink({DSSinkKind.FILE})
boolean android.os.WorkSource.add(WorkSource) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
WorkSource android.os.WorkSource.addReturningNewbs(WorkSource) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
WorkSource[] android.os.WorkSource.setReturningDiffs(WorkSource) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.WorkSource.set(WorkSource) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.WorkSource.set(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.os.WorkSource.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.os.Handler.sendMessageDelayed(Message,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Looper android.os.Handler.getLooper() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.os.Handler.sendEmptyMessage(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Handler.dump(Printer,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IMessenger android.os.Handler.getIMessenger() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.os.Handler.sendEmptyMessageAtTime(int,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Handler$MessengerImpl.send(Message) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.os.Handler.sendMessage(Message) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.os.Handler.getMessageName(Message) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.os.Handler.sendEmptyMessageDelayed(int,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.ResultReceiver$MyResultReceiver.send(int,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.ResultReceiver.send(int,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.os.StrictMode.getThreadPolicyMask() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.StrictMode$AndroidBlockGuardPolicy.getPolicyMask() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.StrictMode.incrementExpectedActivityCount(Class) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.StrictMode$ViolationInfo.dump(Printer,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.StrictMode.onVmPolicyViolation(String,Throwable) - @DSSink({DSSinkKind.LOG})
void android.os.StrictMode$ViolationInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
OutputStream android.os.MemoryFile.getOutputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream android.os.MemoryFile.getInputStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FileDescriptor android.os.MemoryFile.getFileDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.MemoryFile.getSize(FileDescriptor) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.MemoryFile$MemoryOutputStream.write(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CountDownTimer android.os.CountDownTimer.start() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Messenger.send(Message) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.os.Messenger.getBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Messenger.writeMessengerOrNullToParcel(Messenger,Parcel) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.os.Debug$MemoryInfo.getTotalPrivateDirty() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Debug.startMethodTracing(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.os.Debug.getThreadExternalAllocSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.Debug.getGlobalExternalFreedCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.Debug.getThreadGcInvocationCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.Debug.getThreadExternalAllocCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Debug.startMethodTracing(String,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.os.Debug$MemoryInfo.getTotalSharedDirty() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Debug.dumpHprofData(String,FileDescriptor) - @DSSink({DSSinkKind.FILE})
int android.os.Debug.getGlobalFreedCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.Debug.getGlobalAllocSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.Debug.getThreadAllocCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.Debug.getGlobalClassInitTime() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.Debug$MemoryInfo.getOtherPss(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.Debug.getGlobalExternalAllocSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.Debug$MemoryInfo.getTotalPss() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.Debug.getGlobalFreedSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Debug.startMethodTracing(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.os.Debug.startMethodTracing(String,FileDescriptor,int,int) - @DSSink({DSSinkKind.FILE})
int android.os.Debug.getGlobalExternalFreedSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.Debug.getThreadAllocSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.Debug.getGlobalExternalAllocCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.Debug.getGlobalClassInitCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.os.Debug$MemoryInfo.getOtherLabel(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] android.os.Debug.getVmFeatureList() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.Debug$MemoryInfo.getOtherSharedDirty(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.Debug$MemoryInfo.getOtherPrivateDirty(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.Debug.getLoadedClassCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.Debug.getGlobalAllocCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.os.Debug.getGlobalGcInvocationCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.os.Debug.setFieldsOn(Class) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.os.Debug.dumpService(String,FileDescriptor,String[]) - @DSSink({DSSinkKind.FILE})
File android.os.Environment.getExternalStorageDirectory() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.os.Environment.getSystemSecureDirectory() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.os.Environment.getDirectory(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.os.Environment.getExternalStorageState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.os.Environment.getDownloadCacheDirectory() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.os.Environment.getExternalStoragePublicDirectory(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.os.Environment.getExternalStorageAppCacheDirectory(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.os.Environment.getExternalStorageAppObbDirectory(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.os.Environment.getExternalStorageAndroidDataDir() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.os.Environment.getExternalStorageAppMediaDirectory(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.os.Environment.getSecureDataDirectory() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.os.Environment.getExternalStorageAppDataDirectory(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.os.Environment.getExternalStorageAppFilesDirectory(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.os.Environment.getRootDirectory() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.os.Environment.getDataDirectory() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.os.RemoteCallbackList.getBroadcastCookie(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
UUID android.os.ParcelUuid.getUuid() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.provider.DrmStore.addDrmFile(ContentResolver,FileInputStream,String) - @DSSink({DSSinkKind.LOG})
void android.provider.ContactsContract$SyncState.set(ContentProviderClient,Account,byte[]) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
CharSequence android.provider.ContactsContract$CommonDataKinds$Phone.getDisplayLabel(Context,int,CharSequence,CharSequence[]) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
Entity android.provider.ContactsContract$RawContacts$EntityIteratorImpl.getEntityAndIncrementCursor(Cursor) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
Uri android.provider.ContactsContract$Contacts.getLookupUri(long,String) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
Pair android.provider.ContactsContract$SyncState.getWithUri(ContentProviderClient,Account) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
Uri android.provider.ContactsContract$Contacts.lookupContact(ContentResolver,Uri) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
Uri android.provider.ContactsContract$RawContacts.getContactLookupUri(ContentResolver,Uri) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
void android.provider.ContactsContract$ProfileSyncState.set(ContentProviderClient,Account,byte[]) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
Entity android.provider.ContactsContract$Groups$EntityIteratorImpl.getEntityAndIncrementCursor(Cursor) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
Pair android.provider.ContactsContract$ProfileSyncState.getWithUri(ContentProviderClient,Account) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
Uri android.provider.ContactsContract$Data.getContactLookupUri(ContentResolver,Uri) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
InputStream android.provider.ContactsContract$Contacts.openContactPhotoInputStream(ContentResolver,Uri,boolean) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
CharSequence android.provider.ContactsContract$CommonDataKinds$Phone.getDisplayLabel(Context,int,CharSequence) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
Uri android.provider.ContactsContract$Contacts.getLookupUri(ContentResolver,Uri) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
byte[] android.provider.ContactsContract$SyncState.get(ContentProviderClient,Account) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
byte[] android.provider.ContactsContract$ProfileSyncState.get(ContentProviderClient,Account) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
long android.provider.Settings$Secure.getLong(ContentResolver,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.provider.Settings$Secure.getInt(ContentResolver,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.provider.Settings$System.getLong(ContentResolver,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.provider.Settings$Secure.getFloat(ContentResolver,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.provider.Settings$System.getFloat(ContentResolver,String,float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Uri android.provider.Settings$System.getUriFor(String) - @DSSource({DSSourceKind.FILE_INFORMATION})
long android.provider.Settings$System.getLong(ContentResolver,String,long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Uri android.provider.Settings$Secure.getUriFor(String) - @DSSource({DSSourceKind.FILE_INFORMATION})
String android.provider.Settings$Secure.getString(ContentResolver,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.provider.Settings$Secure.getLong(ContentResolver,String,long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Uri android.provider.Settings$NameValueTable.getUriFor(Uri,String) - @DSSource({DSSourceKind.FILE_INFORMATION})
String android.provider.Settings.getGTalkDeviceId(long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.provider.Settings$System.getFloat(ContentResolver,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.provider.Settings$System.getInt(ContentResolver,String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.provider.Settings$Secure.getFloat(ContentResolver,String,float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.provider.Settings$Bookmarks.getLabelForFolder(Resources,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.provider.Settings$Bookmarks.getIntentForShortcut(ContentResolver,char) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.provider.Settings$System.getString(ContentResolver,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.provider.Settings$Bookmarks.getTitle(Context,Cursor) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.provider.Settings$Secure.getInt(ContentResolver,String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.provider.Settings$System.getInt(ContentResolver,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Pair android.provider.SyncStateContract$Helpers.getWithUri(ContentProviderClient,Uri,Account) - @DSSource({DSSourceKind.FILE_INFORMATION})
byte[] android.provider.SyncStateContract$Helpers.get(ContentProviderClient,Uri,Account) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.provider.SyncStateContract$Helpers.update(ContentProviderClient,Uri,byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.provider.SyncStateContract$Helpers.set(ContentProviderClient,Uri,Account,byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.provider.CallLog$Calls.getLastOutgoingCall(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Uri android.provider.CallLog$Calls.addCall(CallerInfo,Context,String,int,int,long,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Uri android.provider.MediaStore$Audio$Media.getContentUri(String) - @DSSource({DSSourceKind.FILE_INFORMATION})
Cursor android.provider.MediaStore$Images$Thumbnails.queryMiniThumbnails(ContentResolver,Uri,int,String[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Uri android.provider.MediaStore$Video$Thumbnails.getContentUri(String) - @DSSource({DSSourceKind.FILE_INFORMATION})
Uri android.provider.MediaStore$Audio$Playlists$Members.getContentUri(String,long) - @DSSource({DSSourceKind.FILE_INFORMATION})
Uri android.provider.MediaStore$Files.getContentUri(String) - @DSSource({DSSourceKind.FILE_INFORMATION})
Uri android.provider.MediaStore$Files.getMtpObjectsUri(String) - @DSSource({DSSourceKind.FILE_INFORMATION})
Uri android.provider.MediaStore$Audio$Playlists.getContentUri(String) - @DSSource({DSSourceKind.FILE_INFORMATION})
Uri android.provider.MediaStore$Images$Thumbnails.getContentUri(String) - @DSSource({DSSourceKind.FILE_INFORMATION})
Uri android.provider.MediaStore$Video$Media.getContentUri(String) - @DSSource({DSSourceKind.FILE_INFORMATION})
Cursor android.provider.MediaStore$Images$Media.query(ContentResolver,Uri,String[],String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Uri android.provider.MediaStore$Audio$Media.getContentUriForPath(String) - @DSSource({DSSourceKind.FILE_INFORMATION})
Uri android.provider.MediaStore$Files.getContentUri(String,long) - @DSSource({DSSourceKind.FILE_INFORMATION})
String android.provider.MediaStore.getVersion(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Uri android.provider.MediaStore$Files.getMtpReferencesUri(String,long) - @DSSource({DSSourceKind.FILE_INFORMATION})
Uri android.provider.MediaStore.getMediaScannerUri() - @DSSource({DSSourceKind.FILE_INFORMATION})
Uri android.provider.MediaStore$Files.getMtpObjectsUri(String,long) - @DSSource({DSSourceKind.FILE_INFORMATION})
Uri android.provider.MediaStore$Audio$Genres.getContentUriForAudioId(String,int) - @DSSource({DSSourceKind.FILE_INFORMATION})
Uri android.provider.MediaStore$Audio$Artists$Albums.getContentUri(String,long) - @DSSource({DSSourceKind.FILE_INFORMATION})
Cursor android.provider.MediaStore$Images$Thumbnails.query(ContentResolver,Uri,String[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Cursor android.provider.MediaStore$Images$Media.query(ContentResolver,Uri,String[],String,String[],String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Uri android.provider.MediaStore$Images$Media.getContentUri(String) - @DSSource({DSSourceKind.FILE_INFORMATION})
Uri android.provider.MediaStore$Audio$Albums.getContentUri(String) - @DSSource({DSSourceKind.FILE_INFORMATION})
Cursor android.provider.MediaStore$Images$Media.query(ContentResolver,Uri,String[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Cursor android.provider.MediaStore$Video.query(ContentResolver,Uri,String[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Cursor android.provider.MediaStore$Images$Thumbnails.queryMiniThumbnail(ContentResolver,long,int,String[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Uri android.provider.MediaStore$Audio$Artists.getContentUri(String) - @DSSource({DSSourceKind.FILE_INFORMATION})
Uri android.provider.MediaStore$Audio$Genres$Members.getContentUri(String,long) - @DSSource({DSSourceKind.FILE_INFORMATION})
Bitmap android.provider.MediaStore$Images$Media.getBitmap(ContentResolver,Uri) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Uri android.provider.MediaStore$Audio$Genres.getContentUri(String) - @DSSource({DSSourceKind.FILE_INFORMATION})
long android.provider.Contacts$People.tryGetMyContactsGroupId(ContentResolver) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
Uri android.provider.Contacts$People.addToGroup(ContentResolver,long,String) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
void android.provider.Contacts$Settings.setSetting(ContentResolver,String,String,String) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
Cursor android.provider.Contacts$People.queryGroups(ContentResolver,long) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
void android.provider.Contacts$People.setPhotoData(ContentResolver,Uri,byte[]) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
String android.provider.Contacts$Settings.getSetting(ContentResolver,String,String) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
CharSequence android.provider.Contacts$Organizations.getDisplayLabel(Context,int,CharSequence) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
CharSequence android.provider.Contacts$Phones.getDisplayLabel(Context,int,CharSequence) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
CharSequence android.provider.Contacts$ContactMethods.getDisplayLabel(Context,int,int,CharSequence) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
void android.provider.Contacts$ContactMethods.addPostalLocation(Context,long,double,double) - @DSSink({DSSinkKind.CONTACT_INFORMATION})
CharSequence android.provider.Contacts$Phones.getDisplayLabel(Context,int,CharSequence,CharSequence[]) - @DSSource({DSSourceKind.CONTACT_INFORMATION})
void android.provider.Browser.sendString(Context,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.provider.Browser.sendString(Context,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.provider.Browser.updateVisitedHistory(ContentResolver,String,boolean) - @DSSink({DSSinkKind.LOG})
Cursor android.provider.Browser.getAllVisitedUrls(ContentResolver) - @DSSource({DSSourceKind.BROWSER_INFORMATION})
String[] android.provider.Browser.getVisitedHistory(ContentResolver) - @DSSource({DSSourceKind.BROWSER_INFORMATION})
void android.provider.Browser.saveBookmark(Context,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte[] android.provider.BrowserContract$SyncState.get(ContentProviderClient,Account) - @DSSource({DSSourceKind.BROWSER_INFORMATION})
Pair android.provider.BrowserContract$SyncState.getWithUri(ContentProviderClient,Account) - @DSSource({DSSourceKind.BROWSER_INFORMATION})
void android.provider.BrowserContract$SyncState.set(ContentProviderClient,Account,byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long android.provider.Telephony$Threads.getOrCreateThreadId(Context,Set) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Cursor android.provider.Telephony$Mms.query(ContentResolver,String[],String,String) - @DSSource({DSSourceKind.SMS_MMS})
boolean android.provider.Telephony$Sms.moveMessageToFolder(Context,Uri,int,int) - @DSSink({DSSinkKind.SMS_MMS})
SmsMessage[] android.provider.Telephony$Sms$Intents.getMessagesFromIntent(Intent) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Cursor android.provider.Telephony$Sms.query(ContentResolver,String[],String,String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Cursor android.provider.Telephony$Mms.query(ContentResolver,String[]) - @DSSource({DSSourceKind.SMS_MMS})
Cursor android.provider.Telephony$Sms.query(ContentResolver,String[]) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.provider.Telephony$Threads.getOrCreateThreadId(Context,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.provider.Telephony$Mms.getMessageBoxName(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.NinePatch.getHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.NinePatch.getWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.NinePatch.getDensity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Region android.graphics.NinePatch.getTransparentRegion(Rect) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.graphics.Region.set(Region) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Path android.graphics.Region.getBoundaryPath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Rect android.graphics.Region.getBounds() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.graphics.Region.setPath(Path,Region) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.graphics.Region.set(int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.graphics.Region.set(Rect) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Typeface.getStyle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Typeface android.graphics.Typeface.create(Typeface,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.graphics.Paint.getTextRunAdvances(CharSequence,int,int,int,int,int,float[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Paint.getTextWidths(String,float[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Typeface android.graphics.Paint.getTypeface() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Shader android.graphics.Paint.getShader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
MaskFilter android.graphics.Paint.getMaskFilter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Paint.getTextRunCursor(char[],int,int,int,int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.graphics.Paint.getTextRunAdvances(char[],int,int,int,int,int,float[],int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.graphics.Paint.getTextRunAdvances(String,int,int,int,int,int,float[],int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ColorFilter android.graphics.Paint.getColorFilter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.graphics.Paint.getTextRunAdvances(CharSequence,int,int,int,int,int,float[],int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PathEffect android.graphics.Paint.getPathEffect() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.graphics.Paint.getTextRunAdvances(char[],int,int,int,int,int,float[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Paint.getTextRunCursor(CharSequence,int,int,int,int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Paint.getTextGlyphs(String,int,int,int,int,int,char[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.graphics.Paint.getTextRunAdvances(String,int,int,int,int,int,float[],int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Paint.getTextRunCursor(String,int,int,int,int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Paint.getTextWidths(String,int,int,float[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Paint.getBidiFlags() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Paint.getTextWidths(char[],int,int,float[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Xfermode android.graphics.Paint.getXfermode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Paint.getTextWidths(CharSequence,int,int,float[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.graphics.Paint.getFontSpacing() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Rasterizer android.graphics.Paint.getRasterizer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Paint.set(Paint) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Paint.setARGB(int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Paint.setBidiFlags(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Path.setLastPoint(float,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Path.set(Path) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.ColorMatrix.setSaturation(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float[] android.graphics.ColorMatrix.getArray() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.ColorMatrix.set(ColorMatrix) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.ColorMatrix.setConcat(ColorMatrix,ColorMatrix) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.ColorMatrix.setScale(float,float,float,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.ColorMatrix.setRotate(int,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.ColorMatrix.set(float[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Interpolator.setKeyFrame(int,int,float[],float[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Interpolator.getKeyFrameCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Interpolator.setKeyFrame(int,int,float[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Interpolator.setRepeatMirror(float,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Interpolator.getValueCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.graphics.drawable.StateListDrawable.getStateDrawable(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int[] android.graphics.drawable.StateListDrawable.getStateSet(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.StateListDrawable.getStateDrawableIndex(int[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.StateListDrawable.getStateCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.NinePatchDrawable.setTargetDensity(Canvas) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Paint android.graphics.drawable.NinePatchDrawable.getPaint() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.NinePatchDrawable.setAlpha(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.NinePatchDrawable.setFilterBitmap(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Region android.graphics.drawable.NinePatchDrawable.getTransparentRegion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.NinePatchDrawable.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.NinePatchDrawable.setTargetDensity(DisplayMetrics) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.NinePatchDrawable.getMinimumHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.NinePatchDrawable$NinePatchState.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.NinePatchDrawable.getIntrinsicHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.NinePatchDrawable.setColorFilter(ColorFilter) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.NinePatchDrawable.getMinimumWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.NinePatchDrawable.getIntrinsicWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.NinePatchDrawable.setDither(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.NinePatchDrawable.getOpacity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.Drawable.setFilterBitmap(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.Drawable.getIntrinsicWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.graphics.drawable.Drawable.mutate() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.Drawable.getLevel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Rect android.graphics.drawable.Drawable.copyBounds() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Rect android.graphics.drawable.Drawable.getBounds() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.Drawable.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.graphics.drawable.Drawable.createFromStream(InputStream,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.Drawable.setBounds(int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.Drawable.setBounds(Rect) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Drawable android.graphics.drawable.Drawable.getCurrent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.graphics.drawable.Drawable.createFromXml(Resources,XmlPullParser) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.graphics.drawable.Drawable.getPadding(Rect) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Region android.graphics.drawable.Drawable.getTransparentRegion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.graphics.drawable.Drawable.createFromResourceStream(Resources,TypedValue,InputStream,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.Drawable.setDither(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int[] android.graphics.drawable.Drawable.getState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.Drawable.getIntrinsicHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.Drawable.getMinimumHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.Drawable.getMinimumWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.ColorDrawable$ColorState.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.ColorDrawable.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.ColorDrawable.setColorFilter(ColorFilter) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.ColorDrawable.setAlpha(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.ColorDrawable.getOpacity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.ColorDrawable.getAlpha() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.ColorDrawable.getColor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.ShapeDrawable.setPadding(int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.ShapeDrawable.setDither(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.ShapeDrawable.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.ShapeDrawable.getIntrinsicWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.ShapeDrawable.setColorFilter(ColorFilter) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Paint android.graphics.drawable.ShapeDrawable.getPaint() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.ShapeDrawable.getIntrinsicHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.ShapeDrawable.getOpacity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.ShapeDrawable$ShapeState.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.ShapeDrawable.setPadding(Rect) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Shape android.graphics.drawable.ShapeDrawable.getShape() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.ShapeDrawable.draw(Canvas) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.TransitionDrawable$TransitionState.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.graphics.drawable.RotateDrawable.getDrawable() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.RotateDrawable.getIntrinsicHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.RotateDrawable.draw(Canvas) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.RotateDrawable.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.graphics.drawable.RotateDrawable.setVisible(boolean,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.RotateDrawable.getOpacity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.RotateDrawable.setAlpha(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.RotateDrawable$RotateState.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.RotateDrawable.getIntrinsicWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.RotateDrawable.setColorFilter(ColorFilter) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.InsetDrawable.setColorFilter(ColorFilter) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.InsetDrawable.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.graphics.drawable.InsetDrawable.setVisible(boolean,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.InsetDrawable$InsetState.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.InsetDrawable.setAlpha(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.InsetDrawable.getOpacity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.InsetDrawable.getIntrinsicHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.InsetDrawable.getIntrinsicWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.PaintDrawable.setCornerRadius(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.PaintDrawable.setCornerRadii(float[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.graphics.drawable.ScaleDrawable.setVisible(boolean,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.ScaleDrawable$ScaleState.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.ScaleDrawable.getOpacity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.ScaleDrawable.getIntrinsicHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.ScaleDrawable.getIntrinsicWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.ScaleDrawable.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.ScaleDrawable.setAlpha(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Drawable android.graphics.drawable.ScaleDrawable.getDrawable() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.ScaleDrawable.setColorFilter(ColorFilter) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.BitmapDrawable$BitmapState.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.BitmapDrawable.getIntrinsicWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Paint android.graphics.drawable.BitmapDrawable.getPaint() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.BitmapDrawable.setFilterBitmap(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.BitmapDrawable.getIntrinsicHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.BitmapDrawable.setAntiAlias(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Bitmap android.graphics.drawable.BitmapDrawable.getBitmap() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.BitmapDrawable.setTargetDensity(Canvas) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.BitmapDrawable.setDither(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.BitmapDrawable.setColorFilter(ColorFilter) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.BitmapDrawable.setTargetDensity(DisplayMetrics) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.BitmapDrawable.getOpacity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.BitmapDrawable.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.BitmapDrawable.getGravity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.BitmapDrawable.setAlpha(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Drawable android.graphics.drawable.AnimationDrawable.getFrame(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.AnimationDrawable.getDuration(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.AnimationDrawable.getNumberOfFrames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.AnimationDrawable.setOneShot(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.graphics.drawable.AnimationDrawable.setVisible(boolean,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.ClipDrawable.getIntrinsicHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.ClipDrawable.setAlpha(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.ClipDrawable$ClipState.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.ClipDrawable.getOpacity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.graphics.drawable.ClipDrawable.setVisible(boolean,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.ClipDrawable.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.ClipDrawable.getIntrinsicWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.ClipDrawable.setColorFilter(ColorFilter) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.GradientDrawable.getIntrinsicWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.GradientDrawable.setStroke(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.GradientDrawable.setGradientType(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.GradientDrawable.setSize(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.GradientDrawable.getIntrinsicHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.GradientDrawable$GradientState.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.GradientDrawable.getOpacity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.GradientDrawable.setUseLevel(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.GradientDrawable.setCornerRadius(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.GradientDrawable.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.GradientDrawable.setGradientCenter(float,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.GradientDrawable.setShape(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.GradientDrawable.setCornerRadii(float[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.GradientDrawable.setColor(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.GradientDrawable.setStroke(int,int,float,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.GradientDrawable.setGradientRadius(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.AnimatedRotateDrawable.draw(Canvas) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.AnimatedRotateDrawable.getIntrinsicHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.graphics.drawable.AnimatedRotateDrawable.getDrawable() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.AnimatedRotateDrawable.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.AnimatedRotateDrawable.getOpacity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.graphics.drawable.AnimatedRotateDrawable.setVisible(boolean,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.AnimatedRotateDrawable.setColorFilter(ColorFilter) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.AnimatedRotateDrawable.getIntrinsicWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.AnimatedRotateDrawable$AnimatedRotateState.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.AnimatedRotateDrawable.setAlpha(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.graphics.drawable.LayerDrawable.setVisible(boolean,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.LayerDrawable.setColorFilter(ColorFilter) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Drawable android.graphics.drawable.LayerDrawable.getDrawable(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.LayerDrawable.getIntrinsicHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.LayerDrawable.setDither(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.drawable.LayerDrawable.setAlpha(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.LayerDrawable$LayerState.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.LayerDrawable.getOpacity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.LayerDrawable.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.LayerDrawable.getNumberOfLayers() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.LayerDrawable.getId(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.LayerDrawable.getIntrinsicWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.graphics.drawable.shapes.Shape.getHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.graphics.drawable.shapes.Shape.getWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Shape android.graphics.drawable.shapes.Shape.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.DrawableContainer.getIntrinsicWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable[] android.graphics.drawable.DrawableContainer$DrawableContainerState.getChildren() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.DrawableContainer.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.DrawableContainer$DrawableContainerState.getConstantHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.DrawableContainer$DrawableContainerState.getOpacity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.graphics.drawable.DrawableContainer.setVisible(boolean,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.DrawableContainer.getMinimumHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.DrawableContainer$DrawableContainerState.getConstantMinimumWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Rect android.graphics.drawable.DrawableContainer$DrawableContainerState.getConstantPadding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.DrawableContainer$DrawableContainerState.getConstantMinimumHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.DrawableContainer$DrawableContainerState.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.DrawableContainer$DrawableContainerState.getChildCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.DrawableContainer$DrawableContainerState.getConstantWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.DrawableContainer$DrawableContainerState.getEnterFadeDuration() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.DrawableContainer.getIntrinsicHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.DrawableContainer.getMinimumWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.DrawableContainer$DrawableContainerState.getExitFadeDuration() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.drawable.DrawableContainer.getOpacity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.graphics.drawable.DrawableContainer.getCurrent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Canvas.getMaximumBitmapHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Matrix android.graphics.Canvas.getMatrix() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
GL android.graphics.Canvas.getGL() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DrawFilter android.graphics.Canvas.getDrawFilter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Canvas.setMatrix(Matrix) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Canvas.getMaximumBitmapWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Canvas.getDensity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Rect android.graphics.Canvas.getClipBounds() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Canvas.setViewport(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Matrix.setRotate(float,float,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Matrix.setScale(float,float,float,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Matrix.setTranslate(float,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Matrix.setSinCos(float,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.graphics.Matrix.setConcat(Matrix,Matrix) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Matrix.setScale(float,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Matrix.setRotate(float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Matrix.setSkew(float,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Matrix.setValues(float[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.graphics.Matrix.setPolyToPoly(float[],int,float[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Matrix.setSinCos(float,float,float,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Matrix.setSkew(float,float,float,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Matrix.set(Matrix) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Bitmap.getScaledHeight(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Bitmap.getScaledHeight(DisplayMetrics) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Bitmap.getScaledWidth(DisplayMetrics) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bitmap android.graphics.Bitmap.createBitmap(Bitmap,int,int,int,int,Matrix,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Bitmap.getScaledHeight(Canvas) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Bitmap.setPixels(int[],int,int,int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Bitmap.setPixel(int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Bitmap.getByteCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Bitmap.getDefaultDensity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Bitmap.getWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Bitmap.getScaledWidth(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Bitmap.getRowBytes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Bitmap.getScaledWidth(Canvas) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Bitmap.getGenerationId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Bitmap.setHasAlpha(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Bitmap android.graphics.Bitmap.createBitmap(Bitmap,int,int,int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Bitmap.getHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] android.graphics.Bitmap.getNinePatchChunk() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Bitmap.getDensity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.graphics.Bitmap.getPixel(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.graphics.SurfaceTexture.getTimestamp() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.SurfaceTexture.setDefaultBufferSize(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Rect.set(Rect) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.graphics.Rect.setIntersect(Rect,Rect) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.PointF.set(PointF) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.graphics.RectF.setIntersect(RectF,RectF) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.RectF.set(RectF) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.RectF.set(Rect) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.graphics.Picture$RecordingCanvas.setBitmap(Bitmap) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.SyncInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.content.IClipboard$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ClipData android.content.IClipboard$Stub$Proxy.getPrimaryClip(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.IClipboard$Stub$Proxy.removePrimaryClipChangedListener(IOnPrimaryClipChangedListener) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.IClipboard$Stub$Proxy.setPrimaryClip(ClipData) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.content.IClipboard$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.IClipboard$Stub$Proxy.addPrimaryClipChangedListener(IOnPrimaryClipChangedListener) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ClipDescription android.content.IClipboard$Stub$Proxy.getPrimaryClipDescription() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.IClipboard$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AssetFileDescriptor android.content.ContentProvider.openTypedAssetFile(Uri,String,Bundle) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Context android.content.ContentProvider.getContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ContentProvider android.content.ContentProvider$Transport.getContentProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.ContentProvider$Transport.getType(Uri) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ParcelFileDescriptor android.content.ContentProvider.openFileHelper(Uri,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.ContentProvider$Transport.getProviderName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IContentProvider android.content.ContentProvider.getIContentProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PathPermission[] android.content.ContentProvider.getPathPermissions() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.ContentProvider.getReadPermission() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] android.content.ContentProvider.getStreamTypes(Uri,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] android.content.ContentProvider$Transport.getStreamTypes(Uri,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.ContentProvider.bulkInsert(Uri,ContentValues[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.ContentProvider.getWritePermission() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.PeriodicSync.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
PeriodicSync android.content.PeriodicSync$1.createFromParcel(Parcel) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.IContentService$Stub$Proxy.removePeriodicSync(Account,String,Bundle) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
SyncAdapterType[] android.content.IContentService$Stub$Proxy.getSyncAdapterTypes() - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
List android.content.IContentService$Stub$Proxy.getPeriodicSyncs(Account,String) - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
IBinder android.content.IContentService$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.content.IContentService$Stub$Proxy.setSyncAutomatically(Account,String,boolean) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
boolean android.content.IContentService$Stub$Proxy.getSyncAutomatically(Account,String) - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
void android.content.IContentService$Stub$Proxy.requestSync(Account,String,Bundle) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
void android.content.IContentService$Stub$Proxy.addStatusChangeListener(int,ISyncStatusObserver) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.IContentService$Stub$Proxy.removeStatusChangeListener(ISyncStatusObserver) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.IContentService$Stub$Proxy.setIsSyncable(Account,String,int) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
boolean android.content.IContentService$Stub$Proxy.isSyncActive(Account,String) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
void android.content.IContentService$Stub$Proxy.unregisterContentObserver(IContentObserver) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.IContentService$Stub$Proxy.setMasterSyncAutomatically(boolean) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
SyncStatusInfo android.content.IContentService$Stub$Proxy.getSyncStatus(Account,String) - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
boolean android.content.IContentService$Stub$Proxy.isSyncPending(Account,String) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
void android.content.IContentService$Stub$Proxy.cancelSync(Account,String) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
void android.content.IContentService$Stub$Proxy.addPeriodicSync(Account,String,Bundle,long) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
int android.content.IContentService$Stub$Proxy.getIsSyncable(Account,String) - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
List android.content.IContentService$Stub$Proxy.getCurrentSyncs() - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
boolean android.content.IContentService$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.content.IContentService$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.content.Context.getString(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.Context.getString(int,Object[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.content.Context.getText(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.Context.getThemeResId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Uri android.content.ContentResolver.insert(Uri,ContentValues) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IContentProvider android.content.ContentResolver.acquireExistingProvider(Context,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.ContentResolver.getIsSyncable(Account,String) - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
IContentProvider android.content.ContentResolver.acquireProvider(Uri) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.content.ContentResolver.getCurrentSyncs() - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
String[] android.content.ContentResolver.getStreamTypes(Uri,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IContentService android.content.ContentResolver.getContentService() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bundle android.content.ContentResolver.call(Uri,String,String,Bundle) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SyncAdapterType[] android.content.ContentResolver.getSyncAdapterTypes() - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
List android.content.ContentResolver.getPeriodicSyncs(Account,String) - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
void android.content.ContentResolver.notifyChange(Uri,ContentObserver) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SyncInfo android.content.ContentResolver.getCurrentSync() - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
String android.content.ContentResolver.getType(Uri) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream android.content.ContentResolver.openInputStream(Uri) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContentResolver.setIsSyncable(Account,String,int) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
void android.content.ContentResolver.setSyncAutomatically(Account,String,boolean) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
void android.content.ContentResolver.notifyChange(Uri,ContentObserver,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.content.ContentResolver.getSyncAutomatically(Account,String) - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
OutputStream android.content.ContentResolver.openOutputStream(Uri,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SyncStatusInfo android.content.ContentResolver.getSyncStatus(Account,String) - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
Cursor android.content.ContentResolver.query(Uri,String[],String,String[],String) - @DSSource({DSSourceKind.DATABASE_INFORMATION})
void android.content.IntentSender.writeIntentSenderOrNullToParcel(IntentSender,Parcel) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IIntentSender android.content.IntentSender.getTarget() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.IntentSender.getTargetPackage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.IIntentSender$Stub$Proxy.send(int,Intent,String,IIntentReceiver,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.content.IIntentSender$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.content.IIntentSender$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.content.IIntentSender$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.content.OperationApplicationException.getNumSuccessfulYieldPoints() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.AsyncTaskLoader.dump(String,FileDescriptor,PrintWriter,String[]) - @DSSink({DSSinkKind.FILE})
void android.content.SyncManager$ActiveSyncContext.toString(StringBuilder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.SyncManager$ActiveSyncContext.onServiceConnected(ComponentName,IBinder) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
String android.content.SyncManager.formatTime(long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.SyncManager.dumpSyncState(PrintWriter) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
SyncStorageEngine android.content.SyncManager.getSyncStorageEngine() - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
void android.content.SyncManager$ActiveSyncContext.sendHeartbeat() - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.SyncManager.dump(FileDescriptor,PrintWriter) - @DSSink({DSSinkKind.FILE})
void android.content.SyncManager.dumpSyncHistory(PrintWriter) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
String android.content.IntentFilter$AuthorityEntry.getHost() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.IntentFilter.getDataScheme(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PatternMatcher android.content.IntentFilter.getDataPath(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.IntentFilter.getDataType(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.IntentFilter.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.content.IntentFilter.getAction(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.IntentFilter.getCategory(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.IntentFilter$AuthorityEntry.getPort() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.IntentFilter.getPriority() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.IIntentReceiver$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.content.IIntentReceiver$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.content.IIntentReceiver$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bundle android.content.ContentProviderProxy.call(String,String,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.content.ContentProviderNative.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.content.ContentProviderProxy.bulkInsert(Uri,ContentValues[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.content.ContentProviderNative.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.ContentProviderProxy.update(Uri,ContentValues,String,String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
AssetFileDescriptor android.content.ContentProviderProxy.openAssetFile(Uri,String) - @DSSink({DSSinkKind.FILE})
Uri android.content.ContentProviderProxy.insert(Uri,ContentValues) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ParcelFileDescriptor android.content.ContentProviderProxy.openFile(Uri,String) - @DSSink({DSSinkKind.FILE})
String android.content.ContentProviderProxy.getType(Uri) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ContentProviderResult[] android.content.ContentProviderProxy.applyBatch(ArrayList) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] android.content.ContentProviderProxy.getStreamTypes(Uri,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AssetFileDescriptor android.content.ContentProviderProxy.openTypedAssetFile(Uri,String,Bundle) - @DSSink({DSSinkKind.FILE})
int android.content.ContentProviderProxy.delete(Uri,String,String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContentProviderResult.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ArrayList android.content.ContentValues.getStringArrayList(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContentValues.put(String,Long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.content.ContentValues.get(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContentValues.put(String,Short) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContentValues.put(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContentValues.putNull(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Float android.content.ContentValues.getAsFloat(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContentValues.put(String,Boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContentValues.put(String,byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContentValues.put(String,Double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Boolean android.content.ContentValues.getAsBoolean(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContentValues.putAll(ContentValues) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContentValues.put(String,Integer) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.content.ContentValues.getAsString(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Byte android.content.ContentValues.getAsByte(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContentValues.put(String,Byte) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContentValues.put(String,Float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContentValues.putStringArrayList(String,ArrayList) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Double android.content.ContentValues.getAsDouble(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Long android.content.ContentValues.getAsLong(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] android.content.ContentValues.getAsByteArray(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Integer android.content.ContentValues.getAsInteger(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Short android.content.ContentValues.getAsShort(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.content.IOnPrimaryClipChangedListener$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.IOnPrimaryClipChangedListener$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Handler android.content.AsyncQueryHandler.createHandler(Looper) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] android.content.ContentProviderClient.getStreamTypes(Uri,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Uri android.content.ContentProviderClient.insert(Uri,ContentValues) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ContentProvider android.content.ContentProviderClient.getLocalContentProvider() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.ContentProviderClient.getType(Uri) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Cursor android.content.ContentProviderClient.query(Uri,String[],String,String[],String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.ClipboardManager.setPrimaryClip(ClipData) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ClipDescription android.content.ClipboardManager.getPrimaryClipDescription() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.ClipboardManager.setText(CharSequence) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ClipData android.content.ClipboardManager.getPrimaryClip() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.content.ClipboardManager.getText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.SyncStatusInfo.getLastFailureMesgAsInt(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.content.SyncStatusInfo.getPeriodicSyncTime(int) - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
void android.content.SyncStatusInfo.setPeriodicSyncTime(int,long) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
IBinder android.content.ISyncAdapter$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.ISyncAdapter$Stub$Proxy.startSync(ISyncContext,String,Account,Bundle) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
boolean android.content.ISyncAdapter$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.content.ISyncAdapter$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.ISyncAdapter$Stub$Proxy.cancelSync(ISyncContext) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
void android.content.ISyncAdapter$Stub$Proxy.initialize(Account,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.content.ClipDescription.getMimeTypeCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.ClipDescription.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.content.ClipDescription.getMimeType(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.content.ClipDescription.getLabel() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.UriMatcher.addURI(String,String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Uri android.content.ContentProviderOperation.getUri() - @DSSource({DSSourceKind.FILE_INFORMATION})
ContentProviderResult android.content.ContentProviderOperation.apply(ContentProvider,ContentProviderResult[],int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.ContentProviderOperation.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContentProviderOperation.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.ClipData.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.content.ClipData.getItemCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Uri android.content.ClipData$Item.getUri() - @DSSource({DSSourceKind.FILE_INFORMATION})
Bitmap android.content.ClipData.getIcon() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.ClipData$Item.getIntent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.content.ClipData$Item.getText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ClipDescription android.content.ClipData.getDescription() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.ISyncStatusObserver$Stub$Proxy.onStatusChanged(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.content.ISyncStatusObserver$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.ISyncStatusObserver$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContextWrapper.sendBroadcast(Intent,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Context android.content.ContextWrapper.getBaseContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.ContextWrapper.getPackageCodePath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.ContextWrapper.getPackageName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.content.ContextWrapper.getFilesDir() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ComponentName android.content.ContextWrapper.startService(Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
PackageManager android.content.ContextWrapper.getPackageManager() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.ContextWrapper.getWallpaperDesiredMinimumHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContextWrapper.setTheme(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContextWrapper.startIntentSender(IntentSender,Intent,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
File android.content.ContextWrapper.getSharedPrefsFile(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.content.ContextWrapper.getWallpaper() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContextWrapper.sendOrderedBroadcast(Intent,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
File android.content.ContextWrapper.getFileStreamPath(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.content.ContextWrapper.getCacheDir() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ContentResolver android.content.ContextWrapper.getContentResolver() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ClassLoader android.content.ContextWrapper.getClassLoader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.content.ContextWrapper.startInstrumentation(ComponentName,String,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.content.ContextWrapper.getWallpaperDesiredMinimumWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.content.ContextWrapper.getDatabasePath(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.content.ContextWrapper.getObbDir() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AssetManager android.content.ContextWrapper.getAssets() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.content.ContextWrapper.getDir(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContextWrapper.startActivity(Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
FileInputStream android.content.ContextWrapper.openFileInput(String) - @DSSource({DSSourceKind.FILE_INFORMATION})
String android.content.ContextWrapper.getPackageResourcePath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Context android.content.ContextWrapper.createPackageContext(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContextWrapper.sendBroadcast(Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContextWrapper.sendOrderedBroadcast(Intent,String,BroadcastReceiver,Handler,int,String,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.content.ContextWrapper.getThemeResId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ApplicationInfo android.content.ContextWrapper.getApplicationInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FileOutputStream android.content.ContextWrapper.openFileOutput(String,int) - @DSSink({DSSinkKind.FILE})
SharedPreferences android.content.ContextWrapper.getSharedPreferences(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Looper android.content.ContextWrapper.getMainLooper() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.content.ContextWrapper.getExternalCacheDir() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContextWrapper.setWallpaper(Bitmap) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Resources android.content.ContextWrapper.getResources() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContextWrapper.sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContextWrapper.setWallpaper(InputStream) - @DSSink({DSSinkKind.ACCOUNT_SETTINGS})
void android.content.ContextWrapper.startActivities(Intent[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.ContextWrapper.sendStickyBroadcast(Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
File android.content.ContextWrapper.getExternalFilesDir(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.content.ContextWrapper.bindService(Intent,ServiceConnection,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Context android.content.ContextWrapper.getApplicationContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.Loader.dump(String,FileDescriptor,PrintWriter,String[]) - @DSSink({DSSinkKind.FILE})
Context android.content.Loader.getContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.Loader.getId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.Loader.toString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.SyncResult.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Entity android.content.CursorEntityIterator.next() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ArrayList android.content.Entity.getSubValues() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ContentValues android.content.Entity.getEntityValues() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.SyncAdapterType.getSettingsActivity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.SyncStorageEngine.getPendingOperationCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ArrayList android.content.SyncStorageEngine.getSyncHistory() - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
long android.content.SyncStorageEngine.getLongColumn(Cursor,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ArrayList android.content.SyncStorageEngine.getPendingOperations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ArrayList android.content.SyncStorageEngine.getSyncStatus() - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA})
int android.content.SyncStorageEngine.getIntColumn(Cursor,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SyncStorageEngine android.content.SyncStorageEngine.getSingleton() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ArrayList android.content.SyncStorageEngine.getAuthorities() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] android.content.pm.Signature.toByteArray() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PublicKey android.content.pm.Signature.getPublicKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.pm.PathPermission.getWritePermission() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.PathPermission.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.content.pm.PathPermission.getReadPermission() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.IPackageMoveObserver$Stub$Proxy.packageMoved(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.content.pm.IPackageMoveObserver$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.content.pm.IPackageMoveObserver$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.pm.ConfigurationInfo.getGlEsVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.pm.IPackageManager$Stub$Proxy.checkPermission(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] android.content.pm.IPackageManager$Stub$Proxy.getPackagesForUid(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.IPackageManager$Stub$Proxy.installPackage(Uri,IPackageInstallObserver,int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.IPackageManager$Stub$Proxy.deletePackage(String,IPackageDeleteObserver,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.content.pm.IPackageManager$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.IPackageManager$Stub$Proxy.deleteApplicationCacheFiles(String,IPackageDataObserver) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.IPackageManager$Stub$Proxy.setInstallerPackageName(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.content.pm.IPackageManager$Stub$Proxy.hasSystemFeature(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.content.pm.IPackageManager$Stub$Proxy.getPersistentApplications(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.content.pm.IPackageManager$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.content.pm.IPackageManager$Stub$Proxy.checkSignatures(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.content.pm.IPackageManager$Stub$Proxy.getInstallerPackageName(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.IPackageManager$Stub$Proxy.clearPackagePreferredActivities(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.content.pm.IPackageManager$Stub$Proxy.getPreferredPackages(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FeatureInfo[] android.content.pm.IPackageManager$Stub$Proxy.getSystemAvailableFeatures() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.IPackageManager$Stub$Proxy.finishPackageInstall(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.IPackageManager$Stub$Proxy.freeStorage(long,IntentSender) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.IPackageManager$Stub$Proxy.addPackageToPreferred(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.IPackageManager$Stub$Proxy.replacePreferredActivity(IntentFilter,int,ComponentName[],ComponentName) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] android.content.pm.IPackageManager$Stub$Proxy.currentToCanonicalPackageNames(String[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
VerifierDeviceIdentity android.content.pm.IPackageManager$Stub$Proxy.getVerifierDeviceIdentity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] android.content.pm.IPackageManager$Stub$Proxy.getSystemSharedLibraryNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.content.pm.IPackageManager$Stub$Proxy.getAllPermissionGroups(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.content.pm.IPackageManager$Stub$Proxy.queryPermissionsByGroup(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.pm.IPackageManager$Stub$Proxy.getInstallLocation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.content.pm.IPackageManager$Stub$Proxy.isProtectedBroadcast(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.IPackageManager$Stub$Proxy.removePackageFromPreferred(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.IPackageManager$Stub$Proxy.movePackage(String,IPackageMoveObserver,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
PermissionGroupInfo android.content.pm.IPackageManager$Stub$Proxy.getPermissionGroupInfo(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.IPackageManager$Stub$Proxy.verifyPendingInstall(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.IPackageManager$Stub$Proxy.freeStorageAndNotify(long,IPackageDataObserver) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
PermissionInfo android.content.pm.IPackageManager$Stub$Proxy.getPermissionInfo(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.content.pm.IPackageManager$Stub$Proxy.performDexOpt(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InstrumentationInfo android.content.pm.IPackageManager$Stub$Proxy.getInstrumentationInfo(ComponentName,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.pm.IPackageManager$Stub$Proxy.checkUidSignatures(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.content.pm.IPackageManager$Stub$Proxy.setInstallLocation(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.content.pm.IPackageManager$Stub$Proxy.checkUidPermission(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.IPackageManager$Stub$Proxy.removePermission(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.content.pm.IPackageManager$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.content.pm.IPackageManager$Stub$Proxy.queryContentProviders(String,int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int[] android.content.pm.IPackageManager$Stub$Proxy.getPackageGids(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.content.pm.IPackageManager$Stub$Proxy.queryInstrumentation(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] android.content.pm.IPackageManager$Stub$Proxy.canonicalToCurrentPackageNames(String[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.pm.IPackageManager$Stub$Proxy.getUidForSharedUser(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.pm.IPackageManager$Stub$Proxy.getNameForUid(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.InstrumentationInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.ProviderInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ApplicationInfo android.content.pm.ComponentInfo.getApplicationInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.ComponentInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.content.pm.ComponentInfo.getIconResource() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.ComponentInfo.dumpFront(Printer,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.ComponentInfo.dumpBack(Printer,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ApplicationInfo android.content.pm.PackageItemInfo.getApplicationInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.PackageItemInfo.dumpFront(Printer,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.PackageItemInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.PermissionInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
RegisteredServicesCacheListener android.content.pm.RegisteredServicesCache.getListener() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.content.pm.FeatureInfo.getGlEsVersion() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.content.pm.IPackageStatsObserver$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.pm.IPackageStatsObserver$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.PackageInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.IPackageInstallObserver$Stub$Proxy.packageInstalled(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.content.pm.IPackageInstallObserver$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.pm.IPackageInstallObserver$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ComponentName android.content.pm.PackageParser$Component.getComponentName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.pm.PackageParser.getParseError() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.PackageParser$Service.setPackageName(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.PackageParser$Component.setPackageName(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.content.pm.PackageParser$Component.getComponentShortName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.PermissionGroupInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.content.pm.IPackageDeleteObserver$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.IPackageDeleteObserver$Stub$Proxy.packageDeleted(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.content.pm.IPackageDeleteObserver$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.ResolveInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.content.pm.ResolveInfo.getIconResource() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.ResolveInfo.dump(Printer,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.ServiceInfo.dump(Printer,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.ServiceInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.content.pm.IPackageDataObserver$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.IPackageDataObserver$Stub$Proxy.onRemoveCompleted(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.content.pm.IPackageDataObserver$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.PackageManager.getPackageSizeInfo(String,IPackageStatsObserver) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PackageInfo android.content.pm.PackageManager.getPackageArchiveInfo(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.ApplicationInfo.dump(Printer,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.ApplicationInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ApplicationInfo android.content.pm.ApplicationInfo.getApplicationInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.ActivityInfo.dump(Printer,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.content.pm.ActivityInfo.getThemeResource() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.pm.ActivityInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.content.pm.ActivityInfo.getRealConfigChanged() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.content.BroadcastReceiver.peekService(Context,Intent) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.BroadcastReceiver$PendingResult.setExtrasClassLoader(ClassLoader) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.content.BroadcastReceiver.getAbortBroadcast() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.BroadcastReceiver.getResultData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bundle android.content.BroadcastReceiver$PendingResult.getResultExtras(boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bundle android.content.BroadcastReceiver.getResultExtras(boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.content.BroadcastReceiver.getDebugUnregister() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.BroadcastReceiver.getResultCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.BroadcastReceiver$PendingResult.getResultData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.BroadcastReceiver$PendingResult.getResultCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.content.BroadcastReceiver$PendingResult.getAbortBroadcast() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.TypedArray.getColor(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.TypedArray.getInteger(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.content.res.TypedArray.getDimension(int,float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence[] android.content.res.TypedArray.getTextArray(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.TypedArray.getLayoutDimension(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.TypedArray.getString(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.TypedArray.getInt(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.TypedArray.getIndexCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.content.res.TypedArray.getFloat(int,float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.TypedArray.getNonConfigurationString(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.TypedArray.getIndex(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.TypedArray.getResourceId(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.TypedArray.getNonResourceString(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.content.res.TypedArray.getText(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ColorStateList android.content.res.TypedArray.getColorStateList(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.TypedArray.getLayoutDimension(int,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.TypedArray.getDimensionPixelOffset(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Resources android.content.res.TypedArray.getResources() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.TypedArray.getDimensionPixelSize(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.content.res.TypedArray.getFraction(int,int,int,float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.content.res.TypedArray.getDrawable(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.TypedArray.getPositionDescription() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.ColorStateList.getDefaultColor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.ColorStateList.getColorForState(int[],int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ColorStateList android.content.res.ColorStateList.valueOf(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ColorStateList android.content.res.ColorStateList.createFromXml(Resources,XmlPullParser) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.XmlBlock$Parser.getClassAttribute() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.res.XmlBlock$Parser.setInput(InputStream,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.XmlBlock$Parser.getAttributeResourceValue(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.res.XmlBlock$Parser.setFeature(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.XmlBlock$Parser.getEventType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.XmlBlock$Parser.getAttributeCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.XmlBlock$Parser.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.XmlBlock$Parser.getAttributeName(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.content.res.XmlBlock$Parser.getProperty(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.XmlBlock$Parser.getInputEncoding() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.XmlBlock$Parser.getNamespaceCount(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.XmlBlock$Parser.getAttributeNamespace(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.XmlBlock$Parser.getNamespace() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.content.res.XmlBlock$Parser.getAttributeFloatValue(int,float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.XmlBlock$Parser.getAttributeValue(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.XmlBlock$Parser.getAttributeUnsignedIntValue(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.XmlBlock$Parser.getIdAttribute() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.XmlBlock$Parser.getPositionDescription() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.XmlBlock$Parser.getDepth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.XmlBlock$Parser.getPrefix() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.XmlBlock$Parser.getColumnNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.res.XmlBlock$Parser.setProperty(String,Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.XmlBlock$Parser.getText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.XmlBlock$Parser.getLineNumber() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.XmlBlock$Parser.getAttributeType(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.XmlBlock$Parser.getAttributeValue(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.XmlBlock$Parser.getAttributeNameResource(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.XmlBlock$Parser.getAttributePrefix(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.XmlBlock$Parser.getNamespacePrefix(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.content.res.XmlBlock$Parser.getPooledString(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.XmlBlock$Parser.getAttributeIntValue(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.content.res.XmlBlock$Parser.getAttributeFloatValue(String,String,float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.XmlBlock$Parser.getNamespace(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.XmlBlock$Parser.getStyleAttribute() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char[] android.content.res.XmlBlock$Parser.getTextCharacters(int[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.res.XmlBlock$Parser.setInput(Reader) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.XmlBlock$Parser.getNamespaceUri(int) - @DSSource({DSSourceKind.FILE_INFORMATION})
boolean android.content.res.AssetManager.getThemeValue(int,int,TypedValue,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.AssetManager$AssetInputStream.getAssetInt() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream android.content.res.AssetManager.open(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InputStream android.content.res.AssetManager.openNonAsset(int,String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InputStream android.content.res.AssetManager.open(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
AssetFileDescriptor android.content.res.AssetManager.openNonAssetFd(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.content.res.AssetManager.getResourceValue(int,int,TypedValue,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream android.content.res.AssetManager.openNonAsset(int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
AssetFileDescriptor android.content.res.AssetManager.openNonAssetFd(int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.content.res.AssetManager.getPooledString(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.content.res.AssetManager.getResourceText(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.content.res.AssetManager.getResourceBagText(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AssetFileDescriptor android.content.res.AssetManager.openFd(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.AssetManager.createTheme() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AssetManager android.content.res.AssetManager.getSystem() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream android.content.res.AssetManager.openNonAsset(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
InputStream android.content.res.AssetManager.openNonAsset(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
XmlResourceParser android.content.res.AssetManager.openXmlResourceParser(int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
XmlResourceParser android.content.res.AssetManager.openXmlResourceParser(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
FileDescriptor android.content.res.AssetFileDescriptor.getFileDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ParcelFileDescriptor android.content.res.AssetFileDescriptor.getParcelFileDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.res.AssetFileDescriptor$AutoCloseOutputStream.write(byte[],int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.res.AssetFileDescriptor$AutoCloseOutputStream.write(byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long android.content.res.AssetFileDescriptor.getDeclaredLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.content.res.AssetFileDescriptor.getStartOffset() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.res.AssetFileDescriptor.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long android.content.res.AssetFileDescriptor.getLength() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.res.AssetFileDescriptor$AutoCloseOutputStream.write(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.content.res.StringBlock.get(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.res.Configuration.setTo(Configuration) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] android.content.res.Resources.getStringArray(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
XmlResourceParser android.content.res.Resources.loadXmlResourceParser(String,int,int,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.Resources.getResourceTypeName(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.Resources.getDimensionPixelSize(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ColorStateList android.content.res.Resources.getColorStateList(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.Resources.getDimensionPixelOffset(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AssetManager android.content.res.Resources.getAssets() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
XmlResourceParser android.content.res.Resources.loadXmlResourceParser(int,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.Resources.getResourcePackageName(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.Resources.getColor(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.content.res.Resources.getText(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.res.Resources$Theme.dump(int,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.Resources.getResourceName(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.Resources.getResourceEntryName(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.content.res.Resources.getDrawable(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence[] android.content.res.Resources.getTextArray(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int[] android.content.res.Resources.getIntArray(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CompatibilityInfo android.content.res.Resources.getCompatibilityInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
XmlResourceParser android.content.res.Resources.getXml(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.content.res.Resources.getDimension(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Resources android.content.res.Resources.getSystem() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Configuration android.content.res.Resources.getConfiguration() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
XmlResourceParser android.content.res.Resources.getAnimation(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.Resources.getInteger(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.content.res.Resources.getQuantityText(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.content.res.Resources.getDrawableForDensity(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.content.res.Resources.loadDrawable(TypedValue,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.Resources.getString(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.Resources.getQuantityString(int,int,Object[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.res.Resources.updateConfiguration(Configuration,DisplayMetrics) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String android.content.res.Resources.getString(int,Object[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.content.res.Resources.getText(int,CharSequence) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.content.res.Resources.getIdentifier(String,String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.content.res.Resources.getFraction(int,int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TypedArray android.content.res.Resources.obtainTypedArray(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.res.Resources.getQuantityString(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DisplayMetrics android.content.res.Resources.getDisplayMetrics() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Movie android.content.res.Resources.getMovie(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ColorStateList android.content.res.Resources.loadColorStateList(TypedValue,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
XmlResourceParser android.content.res.Resources.getLayout(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Region android.content.res.CompatibilityInfo$Translator.getTranslatedTouchableArea(Region) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Rect android.content.res.CompatibilityInfo$Translator.getTranslatedContentInsets(Rect) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Rect android.content.res.CompatibilityInfo$Translator.getTranslatedVisibleInsets(Rect) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.ComponentName.getPackageName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.ComponentName.getClassName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.ComponentName.getShortClassName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.ComponentName.writeToParcel(ComponentName,Parcel) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.content.ISyncContext$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.ISyncContext$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,double[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ArrayList android.content.Intent.getParcelableArrayListExtra(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,CharSequence) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.Intent.setSourceBounds(Rect) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.content.Intent.getDataString() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,Parcelable[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.createChooser(Intent,CharSequence) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,int[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.getIntent(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ComponentName android.content.Intent.getComponent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.getIntentOld(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,byte[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,CharSequence[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long android.content.Intent.getLongExtra(String,long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent$FilterComparison.getIntent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int[] android.content.Intent.getIntArrayExtra(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,double) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.setClassName(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
byte android.content.Intent.getByteExtra(String,byte) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ArrayList android.content.Intent.getCharSequenceArrayListExtra(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,boolean[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,char[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.content.Intent.getStringExtra(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
double android.content.Intent.getDoubleExtra(String,double) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
double[] android.content.Intent.getDoubleArrayExtra(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.parseUri(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Uri android.content.Intent.getData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.content.Intent.getFloatExtra(String,float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.content.Intent.getIBinderExtra(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean[] android.content.Intent.getBooleanArrayExtra(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.content.Intent.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.getSelector() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.Intent.setAllowFds(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,float[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,long[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Parcelable[] android.content.Intent.getParcelableArrayExtra(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.setAction(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.content.Intent.getScheme() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putIntegerArrayListExtra(String,ArrayList) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,Serializable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ArrayList android.content.Intent.getStringArrayListExtra(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Serializable android.content.Intent.getSerializableExtra(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,Parcelable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,short) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.setClass(Context,Class) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
byte[] android.content.Intent.getByteArrayExtra(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
char[] android.content.Intent.getCharArrayExtra(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.Intent.getPackage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.content.Intent.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.setClassName(Context,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
short[] android.content.Intent.getShortArrayExtra(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bundle android.content.Intent.getExtras() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.content.Intent.getFlags() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.Intent.getAction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,char) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
short android.content.Intent.getShortExtra(String,short) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] android.content.Intent.getStringArrayExtra(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float[] android.content.Intent.getFloatArrayExtra(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Set android.content.Intent.getCategories() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long[] android.content.Intent.getLongArrayExtra(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.content.Intent.getExtra(String,Object) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.content.Intent.getExtra(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.content.Intent.getCharSequenceExtra(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.content.Intent.resolveTypeIfNeeded(ContentResolver) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ArrayList android.content.Intent.getIntegerArrayListExtra(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtras(Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,short[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence[] android.content.Intent.getCharSequenceArrayExtra(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtras(Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
char android.content.Intent.getCharExtra(String,char) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,byte) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putStringArrayListExtra(String,ArrayList) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.content.Intent.getIntExtra(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Rect android.content.Intent.getSourceBounds() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putCharSequenceArrayListExtra(String,ArrayList) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.content.Intent.setExtrasClassLoader(ClassLoader) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putParcelableArrayListExtra(String,ArrayList) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Bundle android.content.Intent.getBundleExtra(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.content.Intent.putExtra(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.IAlarmManager$Stub$Proxy.setTimeZone(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.app.IAlarmManager$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.IAlarmManager$Stub$Proxy.setRepeating(int,long,long,PendingIntent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.app.IAlarmManager$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.IAlarmManager$Stub$Proxy.set(int,long,PendingIntent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.IAlarmManager$Stub$Proxy.setTime(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.IAlarmManager$Stub$Proxy.setInexactRepeating(int,long,long,PendingIntent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Bitmap android.app.IThumbnailRetriever$Stub$Proxy.getThumbnail(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.IThumbnailRetriever$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.IThumbnailRetriever$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.app.IThumbnailRetriever$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.DatePickerDialog.updateDate(int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
DatePicker android.app.DatePickerDialog.getDatePicker() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.grantUriPermissionFromOwner(IBinder,int,String,Uri,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.setProcessLimit(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long[] android.app.ActivityManagerProxy.getProcessPss(int[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Configuration android.app.ActivityManagerProxy.getConfiguration() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PendingIntent android.app.ActivityManagerProxy.getRunningServiceControlPanel(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ActivityManagerProxy.switchUser(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.startRunning(String,String,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.ActivityManagerProxy.getFrontActivityScreenCompatMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.unregisterProcessObserver(IProcessObserver) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.setProcessForeground(IBinder,int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.overridePendingTransition(IBinder,String,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.activitySlept(IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ActivityManagerNative.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.app.ActivityManagerNative.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.activityPaused(IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IActivityManager android.app.ActivityManagerNative.getDefault() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.publishService(IBinder,Intent,IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.setDebugApp(String,boolean,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.serviceDoneExecuting(IBinder,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.finishInstrumentation(IApplicationThread,int,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ParcelFileDescriptor android.app.ActivityManagerProxy.openContentUri(Uri) - @DSSource({DSSourceKind.FILE_INFORMATION})
ComponentName android.app.ActivityManagerProxy.getCallingActivity(IBinder) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.setPackageAskScreenCompat(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.app.ActivityManagerProxy.newUriPermissionOwner(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.setImmersive(IBinder,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ConfigurationInfo android.app.ActivityManagerProxy.getDeviceConfigurationInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.activityIdle(IBinder,Configuration,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.killApplicationProcess(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.grantUriPermission(IApplicationThread,String,Uri,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.ActivityManagerProxy.checkUriPermission(Uri,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ActivityManagerProxy.shutdown(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.signalPersistentProcesses(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ActivityManagerProxy.isIntentSenderTargetedToPackage(IIntentSender) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ActivityManagerProxy.removeTask(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ActivityManagerProxy.moveActivityTaskToBack(IBinder,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.setFrontActivityScreenCompatMode(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.ActivityManagerProxy.checkGrantUriPermission(int,String,Uri,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.publishContentProviders(IApplicationThread,List) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.attachApplication(IApplicationThread) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.unregisterReceiver(IIntentReceiver) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.moveTaskToBack(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.app.ActivityManagerProxy.getTasks(int,int,IThumbnailReceiver) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.showWaitingForDebugger(IApplicationThread,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.cancelIntentSender(IIntentSender) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.app.ActivityManagerProxy.getPackageForIntentSender(IIntentSender) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.setAlwaysFinish(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.ActivityManagerProxy.getProcessLimit() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.ActivityManagerProxy.checkPermission(String,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.finishReceiver(IBinder,int,String,Bundle,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.app.ActivityManagerProxy.peekService(Intent,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ActivityManagerProxy.finishActivity(IBinder,int,Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ActivityManagerProxy.killPids(int[],String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.app.ActivityManagerProxy.getProcessesInErrorState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.setActivityController(IActivityController) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.activityStopped(IBinder,Bundle,Bitmap,CharSequence) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.finishSubActivity(IBinder,String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ActivityManagerProxy.bindBackupAgent(ApplicationInfo,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ActivityManagerProxy.stopServiceToken(ComponentName,IBinder,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ActivityManagerProxy.willActivityBeVisible(IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.ActivityManagerProxy.getTaskForActivity(IBinder,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.backupAgentCreated(String,IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ActivityManagerProxy.isImmersive(IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.app.ActivityManagerProxy.getCallingPackage(IBinder) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ActivityManagerProxy.unbindService(IServiceConnection) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.app.ActivityManagerProxy.getPackageForToken(IBinder) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.ActivityManagerProxy.getPackageScreenCompatMode(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.setRequestedOrientation(IBinder,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ActivityManagerProxy.removeSubTask(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ActivityManagerProxy.getPackageAskScreenCompat(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.ActivityManagerProxy.getRequestedOrientation(IBinder) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.reportThumbnail(IBinder,Bitmap,CharSequence) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.app.ActivityManagerProxy.getRunningExternalApplications() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.unbindFinished(IBinder,Intent,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.closeSystemDialogs(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.activityDestroyed(IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ComponentName android.app.ActivityManagerProxy.getActivityClassForToken(IBinder) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.setPackageScreenCompatMode(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.crashApplication(int,int,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.app.ActivityManagerProxy.getRunningAppProcesses() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.moveTaskBackwards(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.registerProcessObserver(IProcessObserver) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.noteWakeupAlarm(IIntentSender) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.app.ActivityManagerProxy.getServices(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManagerProxy.setServiceForeground(ComponentName,IBinder,int,Notification,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.UiModeManager.enableCarMode(int) - @DSSink({DSSinkKind.LOG})
int android.app.UiModeManager.getCurrentModeType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.UiModeManager.setNightMode(int) - @DSSink({DSSinkKind.LOG})
int android.app.UiModeManager.getNightMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.app.IProcessObserver$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.IProcessObserver$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.IProcessObserver$Stub$Proxy.onProcessDied(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.IProcessObserver$Stub$Proxy.onForegroundActivitiesChanged(int,int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Activity android.app.ActivityGroup.getCurrentActivity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
LocalActivityManager android.app.ActivityGroup.getLocalActivityManager() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bundle android.app.Fragment.getArguments() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.Fragment.getString(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Fragment android.app.Fragment.instantiate(Context,String,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.Fragment.startActivityForResult(Intent,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
LayoutInflater android.app.Fragment.getLayoutInflater(Bundle) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.Fragment.getTargetRequestCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Fragment android.app.Fragment.getTargetFragment() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.app.Fragment.getText(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.Fragment.getTag() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.app.Fragment.getView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.Fragment.getString(int,Object[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Fragment.dump(String,FileDescriptor,PrintWriter,String[]) - @DSSink({DSSinkKind.FILE})
boolean android.app.Fragment.getUserVisibleHint() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Resources android.app.Fragment.getResources() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
LoaderManager android.app.Fragment.getLoaderManager() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Activity android.app.Fragment.getActivity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.Fragment.getRetainInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FragmentManager android.app.Fragment.getFragmentManager() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.Fragment.getId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Fragment.startActivity(Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.BackStackRecord.getId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.BackStackState.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.BackStackRecord.getTransition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.BackStackRecord.getTransitionStyle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.app.BackStackRecord.getBreadCrumbShortTitle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.BackStackRecord.getBreadCrumbShortTitleRes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.BackStackRecord.getName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.BackStackRecord.getBreadCrumbTitleRes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.app.BackStackRecord.getBreadCrumbTitle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.BackStackRecord.dump(String,FileDescriptor,PrintWriter,String[]) - @DSSink({DSSinkKind.FILE})
FragmentTransaction android.app.BackStackRecord.setCustomAnimations(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.Dialog.setContentView(View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.Dialog.setCanceledOnTouchOutside(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.Dialog.setVolumeControlStream(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.Dialog.getVolumeControlStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Context android.app.Dialog.getContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
LayoutInflater android.app.Dialog.getLayoutInflater() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Dialog.setFeatureDrawable(int,Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ActionBar android.app.Dialog.getActionBar() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Dialog.setFeatureDrawableResource(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Activity android.app.Dialog.getOwnerActivity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.app.Dialog.getCurrentFocus() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Dialog.setContentView(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.Dialog.setFeatureDrawableAlpha(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.Dialog.setTitle(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Window android.app.Dialog.getWindow() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Dialog.onRestoreInstanceState(Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Notification android.app.Notification$Builder.getNotification() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Notification.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.SearchableInfo.getVoiceLanguageModeId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.SearchableInfo$ActionKeyInfo.getQueryActionMsg() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.SearchableInfo.getVoiceSearchEnabled() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.SearchableInfo.getVoiceSearchLaunchWebSearch() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.SearchableInfo.getSuggestPackage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.SearchableInfo.getInputType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.SearchableInfo.getVoicePromptTextId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.SearchableInfo.getVoiceSearchLaunchRecognizer() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.SearchableInfo.getSuggestAuthority() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.SearchableInfo.getHintId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.SearchableInfo.getVoiceLanguageId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.SearchableInfo$ActionKeyInfo.getSuggestActionMsg() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.SearchableInfo.getSuggestIntentAction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.SearchableInfo.getIconId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.SearchableInfo.getVoiceMaxResults() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Context android.app.SearchableInfo.getActivityContext(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Context android.app.SearchableInfo.getProviderContext(Context,Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ComponentName android.app.SearchableInfo.getSearchActivity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.SearchableInfo.getSuggestThreshold() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.SearchableInfo.getSearchButtonText() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.SearchableInfo.getLabelId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.SearchableInfo$ActionKeyInfo.getKeyCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.SearchableInfo.getSettingsDescriptionId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.SearchableInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.app.SearchableInfo.getSuggestPath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.SearchableInfo.getSuggestSelection() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.SearchableInfo.getImeOptions() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.SearchableInfo$ActionKeyInfo.getSuggestActionMsgColumn() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.SearchableInfo.getSuggestIntentData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.SearchDialog.setWorking(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.SearchDialog.setListSelection(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.IWallpaperManager$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ParcelFileDescriptor android.app.IWallpaperManager$Stub$Proxy.getWallpaper(IWallpaperManagerCallback,Bundle) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.IWallpaperManager$Stub$Proxy.setDimensionHints(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.IWallpaperManager$Stub$Proxy.getWidthHint() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
WallpaperInfo android.app.IWallpaperManager$Stub$Proxy.getWallpaperInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.IWallpaperManager$Stub$Proxy.getHeightHint() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.app.IWallpaperManager$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ParcelFileDescriptor android.app.IWallpaperManager$Stub$Proxy.setWallpaper(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.app.IWallpaperManager$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.IWallpaperManager$Stub$Proxy.setWallpaperComponent(ComponentName) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.IUiModeManager$Stub$Proxy.setNightMode(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.app.IUiModeManager$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.app.IUiModeManager$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.IUiModeManager$Stub$Proxy.disableCarMode(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.IUiModeManager$Stub$Proxy.getNightMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.IUiModeManager$Stub$Proxy.getCurrentModeType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.IUiModeManager$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.IUiModeManager$Stub$Proxy.enableCarMode(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.AlertDialog.setIcon(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ListView android.app.AlertDialog.getListView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Button android.app.AlertDialog.getButton(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Context android.app.AlertDialog$Builder.getContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.AlertDialog.setIconAttribute(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.AlertDialog.setView(View,int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.AlertDialog.setCustomTitle(View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.AlertDialog.setInverseBackgroundForced(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.AlertDialog.setButton(int,CharSequence,Message) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.AlertDialog.setView(View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
AlertDialog android.app.AlertDialog$Builder.show() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.AlertDialog.setIcon(Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ActivityInfo android.app.ApplicationPackageManager.getReceiverInfo(ComponentName,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.ApplicationPackageManager.getNameForUid(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationPackageManager.setComponentEnabledSetting(ComponentName,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.app.ApplicationPackageManager.queryIntentActivities(Intent,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ApplicationInfo android.app.ApplicationPackageManager.getApplicationInfo(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ApplicationPackageManager.addPermissionAsync(PermissionInfo) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
ProviderInfo android.app.ApplicationPackageManager.resolveContentProvider(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.ApplicationPackageManager.getApplicationEnabledSetting(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.app.ApplicationPackageManager.getApplicationIcon(ApplicationInfo) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationPackageManager.setApplicationEnabledSetting(String,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ProviderInfo android.app.ApplicationPackageManager.getProviderInfo(ComponentName,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.app.ApplicationPackageManager.getActivityIcon(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.ApplicationPackageManager.getInstallerPackageName(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ServiceInfo android.app.ApplicationPackageManager.getServiceInfo(ComponentName,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.app.ApplicationPackageManager.getActivityLogo(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PermissionInfo android.app.ApplicationPackageManager.getPermissionInfo(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationPackageManager.addPackageToPreferred(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ResolveInfo android.app.ApplicationPackageManager.resolveService(Intent,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Resources android.app.ApplicationPackageManager.getResourcesForActivity(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Resources android.app.ApplicationPackageManager.getResourcesForApplication(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PackageInfo android.app.ApplicationPackageManager.getPackageInfo(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.app.ApplicationPackageManager.getActivityIcon(Intent) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ApplicationPackageManager.addPermission(PermissionInfo) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationPackageManager.setInstallerPackageName(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.app.ApplicationPackageManager.getApplicationLabel(ApplicationInfo) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.app.ApplicationPackageManager.getInstalledPackages(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.app.ApplicationPackageManager.getDrawable(String,int,ApplicationInfo) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.app.ApplicationPackageManager.getInstalledApplications(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.app.ApplicationPackageManager.queryContentProviders(String,int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Resources android.app.ApplicationPackageManager.getResourcesForApplication(ApplicationInfo) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.ApplicationPackageManager.getComponentEnabledSetting(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.app.ApplicationPackageManager.queryBroadcastReceivers(Intent,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] android.app.ApplicationPackageManager.getPackagesForUid(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] android.app.ApplicationPackageManager.currentToCanonicalPackageNames(String[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.app.ApplicationPackageManager.getAllPermissionGroups(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String[] android.app.ApplicationPackageManager.getSystemSharedLibraryNames() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PermissionGroupInfo android.app.ApplicationPackageManager.getPermissionGroupInfo(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FeatureInfo[] android.app.ApplicationPackageManager.getSystemAvailableFeatures() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.app.ApplicationPackageManager.queryPermissionsByGroup(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.app.ApplicationPackageManager.getDefaultActivityIcon() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InstrumentationInfo android.app.ApplicationPackageManager.getInstrumentationInfo(ComponentName,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.app.ApplicationPackageManager.getPreferredPackages(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.app.ApplicationPackageManager.getApplicationLogo(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.app.ApplicationPackageManager.queryInstrumentation(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.app.ApplicationPackageManager.getLaunchIntentForPackage(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ApplicationPackageManager.hasSystemFeature(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] android.app.ApplicationPackageManager.canonicalToCurrentPackageNames(String[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ActivityInfo android.app.ApplicationPackageManager.getActivityInfo(ComponentName,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.app.ApplicationPackageManager.getApplicationLogo(ApplicationInfo) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.app.ApplicationPackageManager.queryIntentActivityOptions(ComponentName,Intent[],Intent,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
VerifierDeviceIdentity android.app.ApplicationPackageManager.getVerifierDeviceIdentity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.ApplicationPackageManager.getUidForSharedUser(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
XmlResourceParser android.app.ApplicationPackageManager.getXml(String,int,ApplicationInfo) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.app.ApplicationPackageManager.getApplicationIcon(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int[] android.app.ApplicationPackageManager.getPackageGids(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.app.ApplicationPackageManager.getActivityLogo(Intent) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.app.ApplicationPackageManager.queryIntentServices(Intent,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.app.ApplicationPackageManager.getText(String,int,ApplicationInfo) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Loader android.app.LoaderManagerImpl.getLoader(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.LoaderManagerImpl.dump(String,FileDescriptor,PrintWriter,String[]) - @DSSink({DSSinkKind.FILE})
void android.app.LoaderManagerImpl$LoaderInfo.dump(String,FileDescriptor,PrintWriter,String[]) - @DSSink({DSSinkKind.FILE})
HashMap android.app.LocalActivityManager.dispatchRetainNonConfigurationInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.LocalActivityManager.dispatchPause(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Activity android.app.LocalActivityManager.getActivity(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.LocalActivityManager.dispatchCreate(Bundle) - @DSSink({DSSinkKind.LOG})
Window android.app.LocalActivityManager.destroyActivity(String,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Activity android.app.LocalActivityManager.getCurrentActivity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bundle android.app.LocalActivityManager.saveInstanceState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Window android.app.LocalActivityManager.startActivity(String,Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.LocalActivityManager.dispatchDestroy(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.app.LocalActivityManager.getCurrentId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.FragmentManagerImpl.dispatchOptionsItemSelected(MenuItem) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.FragmentManagerImpl.dispatchConfigurationChanged(Configuration) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
Bundle android.app.FragmentManagerImpl.saveFragmentBasicState(Fragment) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.FragmentManagerImpl.dispatchOptionsMenuClosed(Menu) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.FragmentManagerState.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.FragmentManagerImpl.putFragment(Bundle,String,Fragment) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.FragmentManagerImpl.dispatchCreateOptionsMenu(Menu,MenuInflater) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Fragment android.app.FragmentManagerImpl.getFragment(Bundle,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.FragmentManagerImpl.dispatchTrimMemory(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.FragmentManagerImpl.setBackStackIndex(int,BackStackRecord) - @DSSink({DSSinkKind.LOG})
FragmentTransaction android.app.FragmentManager.openTransaction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.FragmentManagerImpl.dispatchPrepareOptionsMenu(Menu) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ArrayList android.app.FragmentManagerImpl.retainNonConfig() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.FragmentManagerImpl.dispatchContextItemSelected(MenuItem) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.FragmentManagerImpl.dump(String,FileDescriptor,PrintWriter,String[]) - @DSSink({DSSinkKind.FILE})
int android.app.FragmentManagerImpl.getBackStackEntryCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Dialog android.app.DialogFragment.getDialog() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.DialogFragment.dump(String,FileDescriptor,PrintWriter,String[]) - @DSSink({DSSinkKind.FILE})
boolean android.app.DialogFragment.getShowsDialog() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.DialogFragment.getTheme() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
LayoutInflater android.app.DialogFragment.getLayoutInflater(Bundle) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.app.DownloadManager.addCompletedDownload(String,String,boolean,String,String,long,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Cursor android.app.DownloadManager$Query.runQuery(ContentResolver,String[],Uri) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ParcelFileDescriptor android.app.DownloadManager.openDownloadedFile(long) - @DSSink({DSSinkKind.FILE})
long android.app.DownloadManager$CursorTranslator.getLong(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.DownloadManager$CursorTranslator.getString(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Uri android.app.DownloadManager.getDownloadUri(long) - @DSSource({DSSourceKind.FILE_INFORMATION})
void android.app.DownloadManager.setAccessAllDownloads(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.DownloadManager.markRowDeleted(long[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Long android.app.DownloadManager.getMaxBytesOverMobile(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.DownloadManager.getWhereClauseForIds(long[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.DownloadManager.restartDownload(long[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] android.app.DownloadManager.getWhereArgsForIds(long[]) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ContentValues android.app.DownloadManager$Request.toContentValues(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Uri android.app.DownloadManager.getUriForDownloadedFile(long) - @DSSource({DSSourceKind.FILE_INFORMATION})
String android.app.DownloadManager.getMimeTypeForDownloadedFile(long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Long android.app.DownloadManager.getRecommendedMaxBytesOverMobile(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.StatusBarManager.setIcon(String,int,int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.StatusBarManager.setIconVisibility(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.IThumbnailReceiver$Stub$Proxy.newThumbnail(int,Bitmap,CharSequence) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.app.IThumbnailReceiver$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.IThumbnailReceiver$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.AlarmManager.setTime(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.AlarmManager.setTimeZone(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.AlarmManager.setRepeating(int,long,long,PendingIntent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.AlarmManager.set(int,long,PendingIntent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.AlarmManager.setInexactRepeating(int,long,long,PendingIntent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.IBackupAgent$Stub$Proxy.doBackup(ParcelFileDescriptor,ParcelFileDescriptor,ParcelFileDescriptor,int,IBackupManager) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.IBackupAgent$Stub$Proxy.doRestoreFile(ParcelFileDescriptor,long,int,String,String,long,long,int,IBackupManager) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.IBackupAgent$Stub$Proxy.doFullBackup(ParcelFileDescriptor,int,IBackupManager) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.IBackupAgent$Stub$Proxy.doRestore(ParcelFileDescriptor,int,ParcelFileDescriptor,int,IBackupManager) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.app.IBackupAgent$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.app.IBackupAgent$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.WallpaperInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.app.WallpaperInfo.getServiceName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.WallpaperInfo.getPackageName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.WallpaperInfo.getSettingsActivity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ComponentName android.app.WallpaperInfo.getComponent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.WallpaperInfo.dump(Printer,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ServiceInfo android.app.WallpaperInfo.getServiceInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IIntentSender android.app.PendingIntent.getTarget() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PendingIntent android.app.PendingIntent.getBroadcast(Context,int,Intent,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.PendingIntent.send(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IntentSender android.app.PendingIntent.getIntentSender() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PendingIntent android.app.PendingIntent.getActivities(Context,int,Intent[],int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PendingIntent android.app.PendingIntent.getService(Context,int,Intent,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.PendingIntent.send(Context,int,Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.PendingIntent.writePendingIntentOrNullToParcel(PendingIntent,Parcel) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
PendingIntent android.app.PendingIntent.getActivity(Context,int,Intent,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.PendingIntent.getTargetPackage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.ProgressDialog.getProgress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.ProgressDialog.getSecondaryProgress() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.ProgressDialog.getMax() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManager$RunningServiceInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.app.ActivityManager.getRecentTasks(int,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.app.ActivityManager.getRunningServices(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.app.ActivityManager.getRunningTasks(int,int,IThumbnailReceiver) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.ActivityManager.getMemoryClass() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ActivityManager.getPackageAskScreenCompat(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bitmap android.app.ActivityManager$TaskThumbnails.getSubThumbnail(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManager.setPackageAskScreenCompat(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Map android.app.ActivityManager.getAllPackageLaunchCounts() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ConfigurationInfo android.app.ActivityManager.getDeviceConfigurationInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManager.setPackageScreenCompatMode(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManager$RecentTaskInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManager$RunningTaskInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManager$TaskThumbnails.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.app.ActivityManager.getProcessesInErrorState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.ActivityManager.getPackageScreenCompatMode(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.app.ActivityManager.getRunningAppProcesses() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PendingIntent android.app.ActivityManager.getRunningServiceControlPanel(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.ActivityManager.getLauncherLargeIconDensity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PkgUsageStats[] android.app.ActivityManager.getAllPackageUsageStats() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManager$RunningAppProcessInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.ActivityManager.getFrontActivityScreenCompatMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.app.ActivityManager.getRunningTasks(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityManager.setFrontActivityScreenCompatMode(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.app.ActivityManager.getRunningExternalApplications() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.ActivityManager.getLargeMemoryClass() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.ActivityManager.getLauncherLargeIconSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.IActivityController$Stub$Proxy.activityResuming(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.app.IActivityController$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.IActivityController$Stub$Proxy.appCrashed(String,int,String,String,long,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.IActivityController$Stub$Proxy.appEarlyNotResponding(String,int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.IActivityController$Stub$Proxy.activityStarting(Intent,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.app.IActivityController$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.IActivityController$Stub$Proxy.appNotResponding(String,int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.app.INotificationManager$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.INotificationManager$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.INotificationManager$Stub$Proxy.cancelToast(String,ITransientNotification) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.INotificationManager$Stub$Proxy.enqueueToast(String,ITransientNotification,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.INotificationManager$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.dumpService(FileDescriptor,IBinder,String[]) - @DSSink({DSSinkKind.FILE})
void android.app.ApplicationThreadProxy.setCoreSettings(Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.dumpHeap(boolean,String,ParcelFileDescriptor) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.profilerControl(boolean,String,ParcelFileDescriptor,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.updatePackageCompatibilityInfo(String,CompatibilityInfo) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.setSchedulingGroup(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.scheduleWindowVisibility(IBinder,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.dispatchPackageBroadcast(int,String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.scheduleSleeping(IBinder,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.scheduleCrash(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.scheduleSendResult(IBinder,List) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ApplicationThreadNative.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.FILE})
void android.app.ApplicationThreadProxy.scheduleStopActivity(IBinder,boolean,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.scheduleServiceArgs(IBinder,boolean,int,int,Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.app.ApplicationThreadNative.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.scheduleUnbindService(IBinder,Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.scheduleCreateBackupAgent(ApplicationInfo,CompatibilityInfo,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.scheduleDestroyActivity(IBinder,boolean,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.scheduleNewIntent(List,IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.scheduleTrimMemory(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.requestThumbnail(IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.scheduleCreateService(IBinder,ServiceInfo,CompatibilityInfo) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.dumpActivity(FileDescriptor,IBinder,String,String[]) - @DSSink({DSSinkKind.FILE})
void android.app.ApplicationThreadProxy.scheduleResumeActivity(IBinder,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.scheduleBindService(IBinder,Intent,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.schedulePauseActivity(IBinder,boolean,boolean,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.scheduleActivityConfigurationChanged(IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.setHttpProxy(String,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationThreadProxy.dumpGfxInfo(FileDescriptor,String[]) - @DSSink({DSSinkKind.FILE})
void android.app.ApplicationThreadProxy.scheduleStopService(IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long android.app.ExpandableListActivity.getSelectedPosition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ExpandableListView android.app.ExpandableListActivity.getExpandableListView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ExpandableListAdapter android.app.ExpandableListActivity.getExpandableListAdapter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ExpandableListActivity.setSelectedChild(int,int,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long android.app.ExpandableListActivity.getSelectedId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ExpandableListActivity.setSelectedGroup(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActionBar.setStackedBackgroundDrawable(Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActionBar.setSplitBackgroundDrawable(Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Context android.app.ActionBar.getThemedContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActionBar.setHomeButtonEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.app.IInstrumentationWatcher$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.IInstrumentationWatcher$Stub$Proxy.instrumentationFinished(ComponentName,int,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.app.IInstrumentationWatcher$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.IInstrumentationWatcher$Stub$Proxy.instrumentationStatus(ComponentName,int,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ListFragment.setSelection(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ListAdapter android.app.ListFragment.getListAdapter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ListFragment.setListShownNoAnimation(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long android.app.ListFragment.getSelectedItemId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ListView android.app.ListFragment.getListView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.ListFragment.getSelectedItemPosition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ListFragment.setListShown(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Activity android.app.ActivityThread.getActivity(IBinder) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityThread$ApplicationThread.scheduleConfigurationChanged(Configuration) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
Instrumentation android.app.ActivityThread.getInstrumentation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityThread$ApplicationThread.dumpService(FileDescriptor,IBinder,String[]) - @DSSink({DSSinkKind.FILE})
IPackageManager android.app.ActivityThread.getPackageManager() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
LoadedApk android.app.ActivityThread.getPackageInfo(ApplicationInfo,CompatibilityInfo,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Application android.app.ActivityThread.getApplication() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ContextImpl android.app.ActivityThread.getSystemContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityThread$ApplicationThread.dumpActivity(FileDescriptor,IBinder,String,String[]) - @DSSink({DSSinkKind.FILE})
void android.app.ActivityThread$ApplicationThread.setCoreSettings(Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.app.ActivityThread.getProfileFilePath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityThread$ApplicationThread.dispatchPackageBroadcast(int,String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
LoadedApk android.app.ActivityThread.getPackageInfoNoCheck(ApplicationInfo,CompatibilityInfo) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Handler android.app.ActivityThread.getHandler() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.ActivityThread.getProcessName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.app.ActivityThread.getIntentBeingBroadcast() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityThread.registerOnActivityPausedListener(Activity,OnActivityPausedListener) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Configuration android.app.ActivityThread.getConfiguration() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityThread$ApplicationThread.dumpGfxInfo(FileDescriptor,String[]) - @DSSink({DSSinkKind.FILE})
void android.app.ActivityThread$ApplicationThread.setSchedulingGroup(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
LoadedApk android.app.ActivityThread.getPackageInfo(String,CompatibilityInfo,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityThread$H.handleMessage(Message) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Looper android.app.ActivityThread.getLooper() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ActivityThread$ApplicationThread.setHttpProxy(String,String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.ActivityThread.getIntCoreSetting(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ListAdapter android.app.ListActivity.getListAdapter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.ListActivity.getSelectedItemPosition() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ListView android.app.ListActivity.getListView() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ListActivity.setSelection(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long android.app.ListActivity.getSelectedItemId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.ITransientNotification$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.app.ITransientNotification$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.app.Activity.onCreateView(View,String,Context,AttributeSet) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.setFeatureDrawableResource(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.openContextMenu(View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.Activity.getChangingConfigurations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.Activity.getLocalClassName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.setTitle(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Cursor android.app.Activity.managedQuery(Uri,String[],String,String[],String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
View android.app.Activity.getCurrentFocus() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.startActivity(Intent) - @DSSink({DSSinkKind.START_ACTIVITY})
boolean android.app.Activity.showDialog(int,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Application android.app.Activity.getApplication() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.setImmersive(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
WindowManager android.app.Activity.getWindowManager() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.setFeatureDrawableAlpha(int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.Activity.onKeyDown(int,KeyEvent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.setRequestedOrientation(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.setProgressBarIndeterminateVisibility(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
LoaderManager android.app.Activity.getLoaderManager() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FragmentManager android.app.Activity.getFragmentManager() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.setProgressBarIndeterminate(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.setVolumeControlStream(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.Activity.startActivityIfNeeded(Intent,int) - @DSSink({DSSinkKind.START_ACTIVITY})
void android.app.Activity.onRestoreInstanceState(Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.setFeatureDrawable(int,Drawable) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.startIntentSenderForResult(IntentSender,int,Intent,int,int,int) - @DSSink({DSSinkKind.START_ACTIVITY})
void android.app.Activity.startIntentSender(IntentSender,Intent,int,int,int) - @DSSink({DSSinkKind.START_ACTIVITY})
void android.app.Activity.setPersistent(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.setFinishOnTouchOutside(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent android.app.Activity.getIntent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.setProgress(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Cursor android.app.Activity.managedQuery(Uri,String[],String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.setSecondaryProgress(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.startSearch(String,boolean,Bundle,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.app.Activity.getSystemService(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.dump(String,FileDescriptor,PrintWriter,String[]) - @DSSink({DSSinkKind.FILE})
ComponentName android.app.Activity.getCallingActivity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ComponentName android.app.Activity.getComponentName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Activity android.app.Activity.getParent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.Activity.getRequestedOrientation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.startActivityFromChild(Activity,Intent,int) - @DSSink({DSSinkKind.START_ACTIVITY})
IBinder android.app.Activity.getActivityToken() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
CharSequence android.app.Activity.getTitle() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.Activity.getTitleColor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
LayoutInflater android.app.Activity.getLayoutInflater() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
HashMap android.app.Activity.getLastNonConfigurationChildInstances() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.startIntentSenderFromChild(Activity,IntentSender,int,Intent,int,int,int) - @DSSink({DSSinkKind.START_ACTIVITY})
void android.app.Activity.onCreate(Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.setContentView(View) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Window android.app.Activity.getWindow() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.app.Activity.getLastNonConfigurationInstance() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.setProgressBarVisibility(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.app.Activity.getCallingPackage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.startActivities(Intent[]) - @DSSink({DSSinkKind.START_ACTIVITY})
int android.app.Activity.getVolumeControlStream() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.Activity.startNextMatchingActivity(Intent) - @DSSink({DSSinkKind.START_ACTIVITY})
ActionBar android.app.Activity.getActionBar() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.Activity.getTaskId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.startActivityFromFragment(Fragment,Intent,int) - @DSSink({DSSinkKind.START_ACTIVITY})
SharedPreferences android.app.Activity.getPreferences(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.setContentView(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
MenuInflater android.app.Activity.getMenuInflater() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Activity.startActivityForResult(Intent,int) - @DSSink({DSSinkKind.START_ACTIVITY})
IBinder android.app.IWallpaperManagerCallback$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.IWallpaperManagerCallback$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Application android.app.AppGlobals.getInitialApplication() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.AppGlobals.getInitialPackage() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IPackageManager android.app.AppGlobals.getPackageManager() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Application android.app.Service.getApplication() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.app.Service.setForeground(boolean) - @DSSink({DSSinkKind.LOG})
String android.app.Service.getClassName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.app.Service.dump(FileDescriptor,PrintWriter,String[]) - @DSSink({DSSinkKind.FILE})
Activity android.app.Instrumentation$ActivityMonitor.getLastActivity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Context android.app.Instrumentation.getTargetContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bundle android.app.Instrumentation.getAllocCounts() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Activity android.app.Instrumentation.startActivitySync(Intent) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
int android.app.Instrumentation$ActivityMonitor.getHits() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Instrumentation.callActivityOnRestoreInstanceState(Activity,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ComponentName android.app.Instrumentation.getComponentName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.Instrumentation$ActivityResult.getResultCode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Instrumentation.sendCharacterSync(int) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
void android.app.Instrumentation.sendStringSync(String) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
void android.app.Instrumentation.setInTouchMode(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IntentFilter android.app.Instrumentation$ActivityMonitor.getFilter() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Instrumentation.sendKeyDownUpSync(int) - @DSSink({DSSinkKind.SYNCHRONIZATION_DATA})
Intent android.app.Instrumentation$ActivityResult.getResultData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Context android.app.Instrumentation.getContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bundle android.app.Instrumentation.getBinderCounts() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.Instrumentation.callActivityOnCreate(Activity,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.Instrumentation.callActivityOnSaveInstanceState(Activity,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.IBackupManager$Stub$Proxy.acknowledgeFullBackupOrRestore(int,boolean,String,String,IFullBackupRestoreObserver) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.IBackupManager$Stub$Proxy.setBackupProvisioned(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.IBackupManager$Stub$Proxy.setAutoRestore(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.backup.IBackupManager$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.app.backup.IBackupManager$Stub$Proxy.selectBackupTransport(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.app.backup.IBackupManager$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.backup.IBackupManager$Stub$Proxy.getCurrentTransport() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.IBackupManager$Stub$Proxy.opComplete(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String[] android.app.backup.IBackupManager$Stub$Proxy.listAllTransports() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.backup.IBackupManager$Stub$Proxy.getDestinationString(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.IBackupManager$Stub$Proxy.restoreAtInstall(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Intent android.app.backup.IBackupManager$Stub$Proxy.getConfigurationIntent(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.IBackupManager$Stub$Proxy.fullBackup(ParcelFileDescriptor,boolean,boolean,boolean,boolean,String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IRestoreSession android.app.backup.IBackupManager$Stub$Proxy.beginRestoreSession(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.IBackupManager$Stub$Proxy.setBackupEnabled(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.IBackupManager$Stub$Proxy.clearBackupData(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.IBackupManager$Stub$Proxy.agentDisconnected(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.IBackupManager$Stub$Proxy.dataChanged(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.backup.IBackupManager$Stub$Proxy.setBackupPassword(String,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.app.backup.IBackupManager$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.IBackupManager$Stub$Proxy.agentConnected(String,IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.backup.BackupDataInput.getDataSize() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.backup.BackupDataInput.getKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.BackupAgentHelper.onRestore(BackupDataInput,int,ParcelFileDescriptor) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.BackupAgentHelper.onBackup(ParcelFileDescriptor,BackupDataOutput,ParcelFileDescriptor) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
BackupHelperDispatcher android.app.backup.BackupAgentHelper.getDispatcher() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.BackupAgent.onRestoreFile(ParcelFileDescriptor,long,File,int,long,long) - @DSSink({DSSinkKind.FILE})
IBinder android.app.backup.BackupAgent.onBind() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.BackupHelperDispatcher.performRestore(BackupDataInput,int,ParcelFileDescriptor) - @DSSink({DSSinkKind.LOG})
void android.app.backup.BackupHelperDispatcher.addHelper(String,BackupHelper) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.FullBackup.restoreFile(ParcelFileDescriptor,long,int,long,long,File) - @DSSink({DSSinkKind.FILE})
int android.app.backup.IRestoreSession$Stub$Proxy.getAvailableRestoreSets(IRestoreObserver) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.app.backup.IRestoreSession$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.backup.IRestoreSession$Stub$Proxy.restoreAll(long,IRestoreObserver) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.backup.IRestoreSession$Stub$Proxy.restorePackage(String,IRestoreObserver) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.app.backup.IRestoreSession$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.backup.IRestoreSession$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.backup.IRestoreSession$Stub$Proxy.restoreSome(long,IRestoreObserver,String[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.backup.BackupDataOutput.writeEntityData(byte[],int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.backup.BackupDataOutput.writeEntityHeader(String,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.BackupDataOutput.setKeyPrefix(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.RestoreSession$RestoreObserverWrapper.restoreFinished(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.RestoreSession$RestoreObserverWrapper.restoreStarting(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.backup.RestoreSession.restoreAll(long,RestoreObserver) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.backup.RestoreSession.restoreSome(long,RestoreObserver,String[]) - @DSSink({DSSinkKind.LOG})
int android.app.backup.RestoreSession.getAvailableRestoreSets(RestoreObserver) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.RestoreSession$RestoreObserverWrapper.restoreSetsAvailable(RestoreSet[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.backup.RestoreSession.restorePackage(String,RestoreObserver) - @DSSink({DSSinkKind.LOG})
String android.app.backup.IFullBackupRestoreObserver$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.IFullBackupRestoreObserver$Stub$Proxy.onRestorePackage(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.app.backup.IFullBackupRestoreObserver$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.IFullBackupRestoreObserver$Stub$Proxy.onBackupPackage(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.backup.BackupManager.requestRestore(RestoreObserver) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RestoreSession android.app.backup.BackupManager.beginRestoreSession() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.backup.BackupDataInputStream.getKey() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.backup.IRestoreObserver$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.IRestoreObserver$Stub$Proxy.onUpdate(int,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.IRestoreObserver$Stub$Proxy.restoreStarting(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.app.backup.IRestoreObserver$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.IRestoreObserver$Stub$Proxy.restoreFinished(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.backup.IRestoreObserver$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.backup.IRestoreObserver$Stub$Proxy.restoreSetsAvailable(RestoreSet[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
BackupDataOutput android.app.backup.FullBackupDataOutput.getData() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.app.WallpaperManager.peekDrawable() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.WallpaperManager$FastBitmapDrawable.getMinimumHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.WallpaperManager.setResource(int) - @DSSink({DSSinkKind.LOG})
void android.app.WallpaperManager.setStream(InputStream) - @DSSink({DSSinkKind.LOG})
Drawable android.app.WallpaperManager.getFastDrawable() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.WallpaperManager$FastBitmapDrawable.getOpacity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.WallpaperManager.setBitmap(Bitmap) - @DSSink({DSSinkKind.LOG})
void android.app.WallpaperManager.sendWallpaperCommand(IBinder,String,int,int,int,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Drawable android.app.WallpaperManager.peekFastDrawable() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.WallpaperManager$FastBitmapDrawable.setColorFilter(ColorFilter) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
WallpaperManager android.app.WallpaperManager.getInstance(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.WallpaperManager$FastBitmapDrawable.setFilterBitmap(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Bitmap android.app.WallpaperManager.getBitmap() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.app.WallpaperManager.getDrawable() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.WallpaperManager$FastBitmapDrawable.setDither(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.WallpaperManager.getDesiredMinimumHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IWallpaperManager android.app.WallpaperManager.getIWallpaperManager() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.WallpaperManager$FastBitmapDrawable.setAlpha(int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.WallpaperManager.setWallpaperOffsets(IBinder,float,float) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.WallpaperManager$FastBitmapDrawable.getMinimumWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.WallpaperManager$FastBitmapDrawable.getIntrinsicWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.WallpaperManager$FastBitmapDrawable.getIntrinsicHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.WallpaperManager$FastBitmapDrawable.setBounds(int,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.WallpaperManager.getDesiredMinimumWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
WallpaperInfo android.app.WallpaperManager.getWallpaperInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ComponentName android.app.ApplicationErrorReport.getErrorReportReceiver(PackageManager,String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationErrorReport.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationErrorReport.dump(Printer,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationErrorReport$CrashInfo.dump(Printer,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationErrorReport$RunningServiceInfo.dump(Printer,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ComponentName android.app.ApplicationErrorReport.getErrorReportReceiver(Context,String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationErrorReport$BatteryInfo.dump(Printer,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ApplicationErrorReport$AnrInfo.dump(Printer,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ComponentName android.app.admin.DeviceAdminReceiver.getWho(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DevicePolicyManager android.app.admin.DeviceAdminReceiver.getManager(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.admin.IDevicePolicyManager$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SYSTEM_SETTINGS})
String android.app.admin.IDevicePolicyManager$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.app.admin.IDevicePolicyManager$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.admin.DevicePolicyManager.getPasswordMinimumSymbols(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.admin.DevicePolicyManager.isAdminActive(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.admin.DevicePolicyManager.getRemoveWarning(ComponentName,RemoteCallback) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.admin.DevicePolicyManager.getStorageEncryption(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.admin.DevicePolicyManager.setMaximumFailedPasswordsForWipe(ComponentName,int) - @DSSink({DSSinkKind.LOG})
int android.app.admin.DevicePolicyManager.getPasswordMinimumUpperCase(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.admin.DevicePolicyManager.getPasswordMinimumLowerCase(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.admin.DevicePolicyManager.setCameraDisabled(ComponentName,boolean) - @DSSink({DSSinkKind.LOG})
boolean android.app.admin.DevicePolicyManager.getCameraDisabled(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
DeviceAdminInfo android.app.admin.DevicePolicyManager.getAdminInfo(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.app.admin.DevicePolicyManager.getPasswordExpirationTimeout(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ComponentName android.app.admin.DevicePolicyManager.setGlobalProxy(ComponentName,Proxy,List) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.admin.DevicePolicyManager.getPasswordQuality(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.admin.DevicePolicyManager.getPasswordMinimumLength(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.admin.DevicePolicyManager.setPasswordHistoryLength(ComponentName,int) - @DSSink({DSSinkKind.LOG})
int android.app.admin.DevicePolicyManager.getCurrentFailedPasswordAttempts() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.admin.DevicePolicyManager.setPasswordMinimumLowerCase(ComponentName,int) - @DSSink({DSSinkKind.LOG})
int android.app.admin.DevicePolicyManager.getPasswordMinimumNonLetter(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.admin.DevicePolicyManager.getPasswordMinimumLetters(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.admin.DevicePolicyManager.getPasswordHistoryLength(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.app.admin.DevicePolicyManager.getMaximumTimeToLock(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.admin.DevicePolicyManager.setActiveAdmin(ComponentName,boolean) - @DSSink({DSSinkKind.LOG})
void android.app.admin.DevicePolicyManager.setPasswordMinimumLetters(ComponentName,int) - @DSSink({DSSinkKind.LOG})
void android.app.admin.DevicePolicyManager.setPasswordMinimumSymbols(ComponentName,int) - @DSSink({DSSinkKind.LOG})
void android.app.admin.DevicePolicyManager.setPasswordMinimumNonLetter(ComponentName,int) - @DSSink({DSSinkKind.LOG})
void android.app.admin.DevicePolicyManager.setPasswordMinimumLength(ComponentName,int) - @DSSink({DSSinkKind.LOG})
ComponentName android.app.admin.DevicePolicyManager.getGlobalProxyAdmin() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.admin.DevicePolicyManager.setStorageEncryption(ComponentName,boolean) - @DSSink({DSSinkKind.LOG})
void android.app.admin.DevicePolicyManager.setPasswordMinimumUpperCase(ComponentName,int) - @DSSink({DSSinkKind.LOG})
void android.app.admin.DevicePolicyManager.setMaximumTimeToLock(ComponentName,long) - @DSSink({DSSinkKind.LOG})
List android.app.admin.DevicePolicyManager.getActiveAdmins() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.admin.DevicePolicyManager.getStorageEncryptionStatus() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.admin.DevicePolicyManager.setPasswordQuality(ComponentName,int) - @DSSink({DSSinkKind.LOG})
int android.app.admin.DevicePolicyManager.getMaximumFailedPasswordsForWipe(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.admin.DevicePolicyManager.setPasswordExpirationTimeout(ComponentName,long) - @DSSink({DSSinkKind.LOG})
void android.app.admin.DevicePolicyManager.setPasswordMinimumNumeric(ComponentName,int) - @DSSink({DSSinkKind.LOG})
int android.app.admin.DevicePolicyManager.getPasswordMaximumLength(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.admin.DevicePolicyManager.getPasswordMinimumNumeric(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.app.admin.DevicePolicyManager.getPasswordExpiration(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.admin.DeviceAdminInfo.getPackageName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.admin.DeviceAdminInfo.getReceiverName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ArrayList android.app.admin.DeviceAdminInfo.getUsedPolicies() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ActivityInfo android.app.admin.DeviceAdminInfo.getActivityInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.admin.DeviceAdminInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.app.admin.DeviceAdminInfo.getTagForPolicy(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.admin.DeviceAdminInfo.dump(Printer,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ComponentName android.app.admin.DeviceAdminInfo.getComponent() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.SharedPreferencesImpl.getString(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.app.SharedPreferencesImpl.getInt(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.app.SharedPreferencesImpl.getLong(String,long) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.app.SharedPreferencesImpl.getFloat(String,float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Set android.app.SharedPreferencesImpl.getStringSet(String,Set) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Map android.app.SharedPreferencesImpl.getAll() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SearchableInfo android.app.ISearchManager$Stub$Proxy.getSearchableInfo(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ComponentName android.app.ISearchManager$Stub$Proxy.getWebSearchActivity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.app.ISearchManager$Stub$Proxy.getGlobalSearchActivities() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ISearchManager$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.app.ISearchManager$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.app.ISearchManager$Stub.asBinder() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ComponentName android.app.ISearchManager$Stub$Proxy.getGlobalSearchActivity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.app.ISearchManager$Stub$Proxy.getSearchablesInGlobalSearch() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.IActivityManager$WaitResult.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.IActivityManager$ContentProviderHolder.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.NotificationManager.notify(int,Notification) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
INotificationManager android.app.NotificationManager.getService() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.NotificationManager.notify(String,int,Notification) - @DSSink({DSSinkKind.LOG})
IServiceConnection android.app.LoadedApk$ServiceDispatcher.getIServiceConnection() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ApplicationInfo android.app.LoadedApk.getApplicationInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IIntentReceiver android.app.LoadedApk.forgetReceiverDispatcher(Context,BroadcastReceiver) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Application android.app.LoadedApk.getApplication() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.LoadedApk$WarningContextClassLoader.setDefaultAssertionStatus(boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.LoadedApk$ServiceDispatcher.getFlags() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.app.LoadedApk.getPackageName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.LoadedApk.getResDir() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IServiceConnection android.app.LoadedApk.getServiceDispatcher(ServiceConnection,Context,Handler,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
RuntimeException android.app.LoadedApk$ServiceDispatcher.getUnbindLocation() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Enumeration android.app.LoadedApk$WarningContextClassLoader.getResources(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
RuntimeException android.app.LoadedApk$ReceiverDispatcher.getUnregisterLocation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IServiceConnection android.app.LoadedApk.forgetServiceDispatcher(Context,ServiceConnection) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.LoadedApk$WarningContextClassLoader.setClassAssertionStatus(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
URL android.app.LoadedApk$WarningContextClassLoader.getResource(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ServiceConnection android.app.LoadedApk$ServiceDispatcher.getServiceConnection() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
IntentReceiverLeaked android.app.LoadedApk$ReceiverDispatcher.getLocation() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class android.app.LoadedApk$WarningContextClassLoader.loadClass(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ServiceConnectionLeaked android.app.LoadedApk$ServiceDispatcher.getLocation() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.app.LoadedApk.getDataDir() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
InputStream android.app.LoadedApk$WarningContextClassLoader.getResourceAsStream(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Resources android.app.LoadedApk.getResources(ActivityThread) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AssetManager android.app.LoadedApk.getAssets(ActivityThread) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.app.LoadedApk.getDataDirFile() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.LoadedApk$WarningContextClassLoader.setPackageAssertionStatus(String,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.app.LoadedApk.getAppDir() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IIntentReceiver android.app.LoadedApk.getReceiverDispatcher(BroadcastReceiver,Context,Handler,Instrumentation,boolean) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.LoadedApk$ServiceDispatcher.doConnected(ComponentName,IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
BroadcastReceiver android.app.LoadedApk$ReceiverDispatcher.getIntentReceiver() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IIntentReceiver android.app.LoadedApk$ReceiverDispatcher.getIIntentReceiver() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ClassLoader android.app.LoadedApk.getClassLoader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ClassLoader android.app.ContextImpl.getClassLoader() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.app.ReceiverRestrictedContext.registerReceiver(BroadcastReceiver,IntentFilter,String,Handler) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ComponentName android.app.ContextImpl.startService(Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ContextImpl.startActivity(Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ContextImpl.startIntentSender(IntentSender,Intent,int,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.app.ContextImpl.getPackageCodePath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.app.ContextImpl.getExternalCacheDir() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Looper android.app.ContextImpl.getMainLooper() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ContextImpl.sendOrderedBroadcast(Intent,String,BroadcastReceiver,Handler,int,String,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.ContextImpl.getWallpaperDesiredMinimumHeight() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ContextImpl.setFilePermissionsFromMode(String,int,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.ContextImpl.getThemeResId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.ContextImpl.getPackageResourcePath() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ContentResolver android.app.ContextImpl.getContentResolver() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ContextImpl.sendBroadcast(Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
int android.app.ContextImpl.getWallpaperDesiredMinimumWidth() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
AssetManager android.app.ContextImpl.getAssets() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ContextImpl.startActivities(Intent[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ContextImpl android.app.ContextImpl.getImpl(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.app.ContextImpl.getPackageName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ContextImpl.startInstrumentation(ComponentName,String,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
File android.app.ContextImpl.getFilesDir() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ContextImpl.sendStickyBroadcast(Intent) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
SharedPreferences android.app.ContextImpl.getSharedPreferences(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.app.ContextImpl.getFileStreamPath(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FileInputStream android.app.ContextImpl.openFileInput(String) - @DSSink({DSSinkKind.FILE})
void android.app.ContextImpl.sendBroadcast(Intent,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
File android.app.ContextImpl.getExternalFilesDir(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Drawable android.app.ContextImpl.getWallpaper() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.app.ContextImpl.getDatabasePath(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Context android.app.ContextImpl.getApplicationContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.app.ContextImpl.getCacheDir() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.app.ContextImpl.getObbDir() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.app.ContextImpl.getDir(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Intent android.app.ReceiverRestrictedContext.registerReceiver(BroadcastReceiver,IntentFilter) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
PackageManager android.app.ContextImpl.getPackageManager() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ReceiverRestrictedContext.bindService(Intent,ServiceConnection,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Context android.app.ContextImpl.getReceiverRestrictedContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
File android.app.ContextImpl.getSharedPrefsFile(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Context android.app.ContextImpl.getOuterContext() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Context android.app.ContextImpl.createPackageContext(String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
FileOutputStream android.app.ContextImpl.openFileOutput(String,int) - @DSSink({DSSinkKind.FILE})
void android.app.ContextImpl.sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ApplicationInfo android.app.ContextImpl.getApplicationInfo() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ContextImpl.setWallpaper(InputStream) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Resources android.app.ContextImpl.getResources() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ContextImpl.sendOrderedBroadcast(Intent,String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
boolean android.app.ContextImpl.bindService(Intent,ServiceConnection,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
IBinder android.app.ContextImpl.getActivityToken() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.ContextImpl.setWallpaper(Bitmap) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.app.IServiceConnection$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
IBinder android.app.IServiceConnection$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.app.IServiceConnection$Stub$Proxy.connected(ComponentName,IBinder) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.ResultInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ComponentName android.app.SearchManager.getWebSearchActivity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ComponentName android.app.SearchManager.getGlobalSearchActivity() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Cursor android.app.SearchManager.getSuggestions(SearchableInfo,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Cursor android.app.SearchManager.getSuggestions(SearchableInfo,String,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.app.SearchManager.getSearchablesInGlobalSearch() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.SearchManager.triggerSearch(String,ComponentName,Bundle) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.SearchManager.startSearch(String,boolean,ComponentName,Bundle,boolean,Rect) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
List android.app.SearchManager.getGlobalSearchActivities() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SearchableInfo android.app.SearchManager.getSearchableInfo(ComponentName) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.app.SearchManager.startSearch(String,boolean,ComponentName,Bundle,boolean) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.app.SearchManager.startGlobalSearch(String,boolean,Bundle,Rect) - @DSSink({DSSinkKind.LOG})
ClassLoader android.app.ApplicationLoaders.getClassLoader(String,String,ClassLoader) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ApplicationLoaders android.app.ApplicationLoaders.getDefault() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.net.NetworkStatsHistory.getIndexBefore(long) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.NetworkStatsHistory$DataStreamUtils.writeVarLongArray(DataOutputStream,long[],int) - @DSSink({DSSinkKind.NETWORK})
void android.net.NetworkStatsHistory.writeToStream(DataOutputStream) - @DSSink({DSSinkKind.NETWORK})
void android.net.NetworkStatsHistory$ParcelUtils.writeLongArray(Parcel,long[],int) - @DSSink({DSSinkKind.NETWORK})
void android.net.NetworkStatsHistory.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.NETWORK})
long android.net.NetworkStatsHistory.getStart() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.NetworkStatsHistory.getIndexAfter(long) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.NetworkStatsHistory.getEnd() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.NetworkStatsHistory.getBucketDuration() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.NetworkStatsHistory$DataStreamUtils.writeVarLong(DataOutputStream,long) - @DSSink({DSSinkKind.NETWORK})
FileDescriptor[] android.net.LocalSocketImpl.getAncillaryFileDescriptors() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
FileDescriptor android.net.LocalSocketImpl.getFileDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Credentials android.net.LocalSocketImpl.getPeerCredentials() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.LocalSocketImpl.bind(LocalSocketAddress) - @DSSink({DSSinkKind.FILE})
InputStream android.net.LocalSocketImpl.getInputStream() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
OutputStream android.net.LocalSocketImpl.getOutputStream() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.LocalSocketImpl.setOption(int,Object) - @DSSink({DSSinkKind.FILE})
void android.net.LocalSocketImpl$SocketOutputStream.write(byte[]) - @DSSink({DSSinkKind.NETWORK})
LocalSocketAddress android.net.LocalSocketImpl.getSockAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Object android.net.LocalSocketImpl.getOption(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.LocalSocketImpl.setFileDescriptorsForSend(FileDescriptor[]) - @DSSink({DSSinkKind.FILE})
void android.net.wifi.p2p.WifiP2pGroup.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.NETWORK})
String android.net.wifi.p2p.WifiP2pGroup.getInterface() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
WifiP2pDevice android.net.wifi.p2p.WifiP2pGroup.getOwner() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.wifi.p2p.WifiP2pGroup.getPassphrase() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Collection android.net.wifi.p2p.WifiP2pGroup.getClientList() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.wifi.p2p.WifiP2pGroup.getNetworkName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
IBinder android.net.wifi.p2p.IWifiP2pManager$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.wifi.p2p.IWifiP2pManager$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.NETWORK})
String android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Messenger android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy.getMessenger() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.wifi.p2p.WifiP2pDevice.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.NETWORK})
Messenger android.net.wifi.p2p.WifiP2pManager.getMessenger() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.wifi.p2p.WifiP2pDeviceList.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.NETWORK})
Collection android.net.wifi.p2p.WifiP2pDeviceList.getDeviceList() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.wifi.p2p.WifiP2pDeviceList.update(WifiP2pDevice) - @DSSink({DSSinkKind.NETWORK})
String android.net.wifi.IWifiManager$Stub$Proxy.getConfigFile() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
DhcpInfo android.net.wifi.IWifiManager$Stub$Proxy.getDhcpInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.wifi.IWifiManager$Stub$Proxy.setWifiApEnabled(WifiConfiguration,boolean) - @DSSink({DSSinkKind.NETWORK})
int android.net.wifi.IWifiManager$Stub$Proxy.getFrequencyBand() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.wifi.IWifiManager$Stub$Proxy.setWifiApConfiguration(WifiConfiguration) - @DSSink({DSSinkKind.NETWORK})
IBinder android.net.wifi.IWifiManager$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.wifi.IWifiManager$Stub$Proxy.getWifiEnabledState() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.wifi.IWifiManager$Stub$Proxy.updateWifiLockWorkSource(IBinder,WorkSource) - @DSSink({DSSinkKind.NETWORK})
void android.net.wifi.IWifiManager$Stub$Proxy.setCountryCode(String,boolean) - @DSSink({DSSinkKind.NETWORK})
int android.net.wifi.IWifiManager$Stub$Proxy.getWifiApEnabledState() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.wifi.IWifiManager$Stub$Proxy.setFrequencyBand(int,boolean) - @DSSink({DSSinkKind.NETWORK})
WifiInfo android.net.wifi.IWifiManager$Stub$Proxy.getConnectionInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
WifiConfiguration android.net.wifi.IWifiManager$Stub$Proxy.getWifiApConfiguration() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.wifi.IWifiManager$Stub$Proxy.removeNetwork(int) - @DSSink({DSSinkKind.NETWORK})
List android.net.wifi.IWifiManager$Stub$Proxy.getScanResults() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.wifi.IWifiManager$Stub$Proxy.addToBlacklist(String) - @DSSink({DSSinkKind.NETWORK})
List android.net.wifi.IWifiManager$Stub$Proxy.getConfiguredNetworks() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.wifi.IWifiManager$Stub$Proxy.enableNetwork(int,boolean) - @DSSink({DSSinkKind.NETWORK})
boolean android.net.wifi.IWifiManager$Stub$Proxy.releaseWifiLock(IBinder) - @DSSink({DSSinkKind.NETWORK})
boolean android.net.wifi.IWifiManager$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.NETWORK})
boolean android.net.wifi.IWifiManager$Stub$Proxy.acquireWifiLock(IBinder,int,String,WorkSource) - @DSSink({DSSinkKind.NETWORK})
boolean android.net.wifi.IWifiManager$Stub$Proxy.setWifiEnabled(boolean) - @DSSink({DSSinkKind.NETWORK})
String android.net.wifi.IWifiManager$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.wifi.IWifiManager$Stub$Proxy.acquireMulticastLock(IBinder,String) - @DSSink({DSSinkKind.NETWORK})
boolean android.net.wifi.IWifiManager$Stub$Proxy.disableNetwork(int) - @DSSink({DSSinkKind.NETWORK})
int android.net.wifi.WifiConfiguration.getAuthType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.wifi.WifiConfiguration.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.NETWORK})
SupplicantState android.net.wifi.WifiInfo.getSupplicantState() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.wifi.WifiInfo.getHiddenSSID() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.wifi.WifiInfo.getSSID() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.wifi.WifiInfo.getNetworkId() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.wifi.WifiInfo.getMacAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.wifi.WifiInfo.setSupplicantState(String) - @DSSink({DSSinkKind.NETWORK})
int android.net.wifi.WifiInfo.getLinkSpeed() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.wifi.WifiInfo.getBSSID() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.wifi.WifiInfo.getRssi() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.wifi.WifiInfo.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.NETWORK})
int android.net.wifi.WifiInfo.getIpAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
WifiInfo android.net.wifi.WifiManager.getConnectionInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
List android.net.wifi.WifiManager.getConfiguredNetworks() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.wifi.WifiManager.setWifiApConfiguration(WifiConfiguration) - @DSSink({DSSinkKind.NETWORK})
DhcpInfo android.net.wifi.WifiManager.getDhcpInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.wifi.WifiManager.getWifiApState() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.wifi.WifiManager.setFrequencyBand(int,boolean) - @DSSink({DSSinkKind.NETWORK})
boolean android.net.wifi.WifiManager.setWifiEnabled(boolean) - @DSSink({DSSinkKind.NETWORK})
WifiConfiguration android.net.wifi.WifiManager.getWifiApConfiguration() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.wifi.WifiManager.getWifiState() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.wifi.WifiManager.setCountryCode(String,boolean) - @DSSink({DSSinkKind.NETWORK})
String android.net.wifi.WifiManager.getConfigFile() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
List android.net.wifi.WifiManager.getScanResults() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.wifi.WifiManager.enableNetwork(int,boolean) - @DSSink({DSSinkKind.NETWORK})
boolean android.net.wifi.WifiManager.setWifiApEnabled(WifiConfiguration,boolean) - @DSSink({DSSinkKind.NETWORK})
void android.net.wifi.WifiManager$WifiLock.setWorkSource(WorkSource) - @DSSink({DSSinkKind.NETWORK})
int android.net.wifi.WifiManager.getFrequencyBand() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.wifi.ScanResult.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.NETWORK})
ScanResult android.net.wifi.ScanResult$1.createFromParcel(Parcel) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.WebAddress.getAuthInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.WebAddress.getScheme() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.WebAddress.getPort() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.WebAddress.getHost() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.WebAddress.getPath() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.INetworkPolicyListener$Stub$Proxy.onUidRulesChanged(int,int) - @DSSink({DSSinkKind.NETWORK})
IBinder android.net.INetworkPolicyListener$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.INetworkPolicyListener$Stub$Proxy.onMeteredIfacesChanged(String[]) - @DSSink({DSSinkKind.NETWORK})
String android.net.INetworkPolicyListener$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
InetAddress android.net.RouteInfo.getGateway() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
LinkAddress android.net.RouteInfo.getDestination() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
FileDescriptor android.net.LocalServerSocket.getFileDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
LocalSocketAddress android.net.LocalServerSocket.getLocalSocketAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Collection android.net.DhcpInfoInternal.getRoutes() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$AbstractPart.getDecoded() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$HierarchicalUri.getEncodedFragment() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$OpaqueUri.getEncodedUserInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$StringUri.getSchemeSpecificPart() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$StringUri.getScheme() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri.toSafeString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$StringUri.getEncodedFragment() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$OpaqueUri.getEncodedQuery() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$HierarchicalUri.getEncodedQuery() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$OpaqueUri.getEncodedFragment() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$PathPart.getEncoded() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$OpaqueUri.getEncodedPath() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$AbstractHierarchicalUri.getHost() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.Uri$OpaqueUri.getPort() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
List android.net.Uri$OpaqueUri.getPathSegments() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$StringUri.getEncodedQuery() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$OpaqueUri.getLastPathSegment() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$StringUri.getEncodedSchemeSpecificPart() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$OpaqueUri.getPath() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
List android.net.Uri$StringUri.getPathSegments() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$StringUri.getPath() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$HierarchicalUri.getEncodedAuthority() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$AbstractHierarchicalUri.getUserInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$OpaqueUri.getSchemeSpecificPart() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$StringUri.getQuery() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$AbstractHierarchicalUri.getLastPathSegment() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$OpaqueUri.getFragment() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$StringUri.getAuthority() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$HierarchicalUri.getScheme() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.Uri.getBooleanQueryParameter(String,boolean) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri.getQueryParameter(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$HierarchicalUri.getAuthority() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$AbstractHierarchicalUri.getEncodedUserInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
List android.net.Uri.getQueryParameters(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$OpaqueUri.getUserInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$HierarchicalUri.getFragment() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.Uri$OpaqueUri.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.NETWORK})
String android.net.Uri$OpaqueUri.getEncodedAuthority() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$OpaqueUri.getScheme() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.Uri$HierarchicalUri.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.NETWORK})
String android.net.Uri$OpaqueUri.getEncodedSchemeSpecificPart() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$StringUri.getEncodedAuthority() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$HierarchicalUri.getEncodedSchemeSpecificPart() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.Uri$AbstractHierarchicalUri.getPort() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
List android.net.Uri$HierarchicalUri.getPathSegments() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$HierarchicalUri.getEncodedPath() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$HierarchicalUri.getSchemeSpecificPart() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$OpaqueUri.getHost() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$OpaqueUri.getAuthority() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Set android.net.Uri.getQueryParameterNames() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$HierarchicalUri.getQuery() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$Part.getEncoded() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$StringUri.getFragment() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$HierarchicalUri.getPath() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$StringUri.getEncodedPath() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Uri$OpaqueUri.getQuery() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.LocalSocket.getSoTimeout() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.LocalSocket.setSoTimeout(int) - @DSSink({DSSinkKind.NETWORK})
LocalSocketAddress android.net.LocalSocket.getRemoteSocketAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.LocalSocket.getReceiveBufferSize() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.LocalSocket.setFileDescriptorsForSend(FileDescriptor[]) - @DSSink({DSSinkKind.FILE})
int android.net.LocalSocket.getSendBufferSize() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
FileDescriptor[] android.net.LocalSocket.getAncillaryFileDescriptors() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
LocalSocketAddress android.net.LocalSocket.getLocalSocketAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
FileDescriptor android.net.LocalSocket.getFileDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
OutputStream android.net.LocalSocket.getOutputStream() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
InputStream android.net.LocalSocket.getInputStream() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.LocalSocket.setReceiveBufferSize(int) - @DSSink({DSSinkKind.NETWORK})
Credentials android.net.LocalSocket.getPeerCredentials() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.LocalSocket.setSendBufferSize(int) - @DSSink({DSSinkKind.NETWORK})
String android.net.http.HttpConnection.getScheme() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
EventHandler android.net.http.Request.getEventHandler() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.http.Request.getUri() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.http.Request.getHostPort() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Connection android.net.http.IdleCache.getConnection(HttpHost) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
CertificateChainValidator android.net.http.CertificateChainValidator.getInstance() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SslError android.net.http.CertificateChainValidator.doHandshakeAndValidateServerCertificates(HttpsConnection,SSLSocket,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Bundle android.net.http.SslCertificate.saveState(SslCertificate) - @DSSink({DSSinkKind.NETWORK})
String android.net.http.SslCertificate$DName.getCName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.http.SslCertificate$DName.getDName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Date android.net.http.SslCertificate.getValidNotBeforeDate() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.http.SslCertificate.getValidNotBefore() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.http.SslCertificate.getValidNotAfter() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.http.SslCertificate$DName.getUName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.http.SslCertificate$DName.getOName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Date android.net.http.SslCertificate.getValidNotAfterDate() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.http.AndroidHttpClientConnection.setSocketTimeout(int) - @DSSink({DSSinkKind.NETWORK})
HttpConnectionMetrics android.net.http.AndroidHttpClientConnection.getMetrics() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
InetAddress android.net.http.AndroidHttpClientConnection.getLocalAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
InetAddress android.net.http.AndroidHttpClientConnection.getRemoteAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.http.AndroidHttpClientConnection.getSocketTimeout() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.http.AndroidHttpClientConnection.getLocalPort() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.http.AndroidHttpClientConnection.getRemotePort() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.http.AndroidHttpClient.getMinGzipSize(ContentResolver) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
BasicHttpProcessor android.net.http.AndroidHttpClient$2.createHttpProcessor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
AbstractHttpEntity android.net.http.AndroidHttpClient.getCompressedEntity(byte[],ContentResolver) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ClientConnectionManager android.net.http.AndroidHttpClient.getConnectionManager() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
HttpParams android.net.http.AndroidHttpClient.getParams() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.http.RequestHandle.setupBasicAuthResponse(boolean,String,String) - @DSSink({DSSinkKind.NETWORK})
int android.net.http.RequestHandle.getRedirectCount() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.http.RequestHandle.setupRedirect(String,int,Map) - @DSSink({DSSinkKind.NETWORK})
String android.net.http.RequestHandle.getMethod() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.http.RequestHandle.setupDigestAuthResponse(boolean,String,String,String,String,String,String,String) - @DSSink({DSSinkKind.NETWORK})
AndroidHttpClientConnection android.net.http.HttpsConnection.openConnection(Request) - @DSSink({DSSinkKind.NETWORK})
X509Certificate[] android.net.http.HttpsConnection$1.getAcceptedIssuers() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.http.HttpsConnection.getScheme() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.http.SslError.getUrl() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SslCertificate android.net.http.SslError.getCertificate() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.http.SslError.getPrimaryError() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ConnectionThread android.net.http.RequestQueue$ActivePool.getThread(HttpHost) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Request android.net.http.RequestQueue.getRequest() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
HttpHost android.net.http.RequestQueue.getProxyHost() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Connection android.net.http.RequestQueue$ActivePool.getConnection(Context,HttpHost) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Request android.net.http.RequestQueue$SyncFeeder.getRequest() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Request android.net.http.RequestQueue$SyncFeeder.getRequest(HttpHost) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Request android.net.http.RequestQueue.getRequest(HttpHost) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
HttpHost android.net.http.RequestQueue$ActivePool.getProxyHost() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.http.RequestQueue.queueRequest(Request,boolean) - @DSSink({DSSinkKind.NETWORK})
HttpHost android.net.http.Connection.getHost() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
HttpContext android.net.http.Connection.getHttpContext() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SslCertificate android.net.http.Connection.getCertificate() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.http.Connection.getCanPersist() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Connection android.net.http.Connection.getConnection(Context,HttpHost,HttpHost,RequestFeeder) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
byte[] android.net.http.Connection.getBuf() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.http.Headers.setContentDisposition(String) - @DSSink({DSSinkKind.NETWORK})
int android.net.http.Headers.getConnectionType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.http.Headers.setWwwAuthenticate(String) - @DSSink({DSSinkKind.NETWORK})
String android.net.http.Headers.getContentDisposition() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.http.Headers.getAcceptRanges() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.http.Headers.setContentEncoding(String) - @DSSink({DSSinkKind.NETWORK})
long android.net.http.Headers.getContentLength() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.http.Headers.setXPermittedCrossDomainPolicies(String) - @DSSink({DSSinkKind.NETWORK})
String android.net.http.Headers.getContentType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.http.Headers.getPragma() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.http.Headers.getTransferEncoding() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.http.Headers.getContentEncoding() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.http.Headers.getLastModified() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.http.Headers.getRefresh() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.http.Headers.getCacheControl() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.http.Headers.getXPermittedCrossDomainPolicies() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.http.Headers.setCacheControl(String) - @DSSink({DSSinkKind.NETWORK})
void android.net.http.Headers.setAcceptRanges(String) - @DSSink({DSSinkKind.NETWORK})
void android.net.http.Headers.setEtag(String) - @DSSink({DSSinkKind.NETWORK})
void android.net.http.Headers.setContentType(String) - @DSSink({DSSinkKind.NETWORK})
String android.net.http.Headers.getWwwAuthenticate() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.http.Headers.setProxyAuthenticate(String) - @DSSink({DSSinkKind.NETWORK})
String android.net.http.Headers.getEtag() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.http.Headers.getProxyAuthenticate() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ArrayList android.net.http.Headers.getSetCookie() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.http.Headers.getExpires() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.http.Headers.getLocation() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.http.Headers.setLastModified(String) - @DSSink({DSSinkKind.NETWORK})
void android.net.http.Headers.setLocation(String) - @DSSink({DSSinkKind.NETWORK})
void android.net.http.Headers.setExpires(String) - @DSSink({DSSinkKind.NETWORK})
String android.net.http.ErrorStrings.getString(int,Context) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Collection android.net.LinkProperties.getLinkAddresses() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
LinkProperties android.net.LinkProperties$1.createFromParcel(Parcel) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Collection android.net.LinkProperties.getRoutes() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ProxyProperties android.net.LinkProperties.getHttpProxy() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Collection android.net.LinkProperties.getDnses() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.LinkProperties.getInterfaceName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.LinkProperties.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.NETWORK})
Collection android.net.LinkProperties.getAddresses() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.NetworkInfo.getTypeName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.NetworkInfo.getSubtype() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.NetworkInfo.getReason() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.NetworkInfo.getExtraInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.NetworkInfo.getSubtypeName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.NetworkInfo.getType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.ThrottleManager.getCliffThreshold(String,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.ThrottleManager.getByteCount(String,int,int,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.ThrottleManager.getHelpUri() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.ThrottleManager.getPeriodStartTime(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.ThrottleManager.getCliffLevel(String,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.ThrottleManager.getResetTime(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.NetworkQuotaInfo.getHardLimitBytes() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.NetworkQuotaInfo.getSoftLimitBytes() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.NetworkQuotaInfo.getEstimatedBytes() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
IBinder android.net.INetworkStatsService$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.INetworkStatsService$Stub$Proxy.setUidForeground(int,boolean) - @DSSink({DSSinkKind.NETWORK})
boolean android.net.INetworkStatsService$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.NETWORK})
NetworkStats android.net.INetworkStatsService$Stub$Proxy.getDataLayerSnapshotForUid(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.INetworkStatsService$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.INetworkStatsService$Stub$Proxy.incrementOperationCount(int,int,int) - @DSSink({DSSinkKind.NETWORK})
int android.net.ProxyProperties.getPort() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
InetSocketAddress android.net.ProxyProperties.getSocketAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.ProxyProperties.getExclusionList() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.ProxyProperties.getHost() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
NetworkQuotaInfo android.net.INetworkPolicyManager$Stub$Proxy.getNetworkQuotaInfo(NetworkState) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.INetworkPolicyManager$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.INetworkPolicyManager$Stub$Proxy.setNetworkPolicies(NetworkPolicy[]) - @DSSink({DSSinkKind.NETWORK})
NetworkPolicy[] android.net.INetworkPolicyManager$Stub$Proxy.getNetworkPolicies() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.INetworkPolicyManager$Stub$Proxy.unregisterListener(INetworkPolicyListener) - @DSSink({DSSinkKind.NETWORK})
void android.net.INetworkPolicyManager$Stub$Proxy.registerListener(INetworkPolicyListener) - @DSSink({DSSinkKind.NETWORK})
IBinder android.net.INetworkPolicyManager$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.INetworkPolicyManager$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.NETWORK})
void android.net.INetworkPolicyManager$Stub$Proxy.setUidPolicy(int,int) - @DSSink({DSSinkKind.NETWORK})
void android.net.INetworkPolicyManager$Stub$Proxy.setRestrictBackground(boolean) - @DSSink({DSSinkKind.NETWORK})
int android.net.INetworkPolicyManager$Stub$Proxy.getUidPolicy(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.INetworkPolicyManager$Stub$Proxy.isUidForeground(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.LinkCapabilities.put(int,String) - @DSSink({DSSinkKind.NETWORK})
String android.net.LinkCapabilities.get(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
LinkCapabilities android.net.LinkCapabilities$1.createFromParcel(Parcel) - @DSSink({DSSinkKind.NETWORK})
String android.net.NetworkTemplate.getSubscriberId() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.NetworkTemplate.getMatchRule() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] android.net.SSLCertificateSocketFactory.getDefaultCipherSuites() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Socket android.net.SSLCertificateSocketFactory.createSocket(Socket,String,int,boolean) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Socket android.net.SSLCertificateSocketFactory.createSocket(InetAddress,int,InetAddress,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLSocketFactory android.net.SSLCertificateSocketFactory.getDefault(int,SSLSessionCache) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] android.net.SSLCertificateSocketFactory.getSupportedCipherSuites() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Socket android.net.SSLCertificateSocketFactory.createSocket() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SocketFactory android.net.SSLCertificateSocketFactory.getDefault(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLSocketFactory android.net.SSLCertificateSocketFactory.getHttpSocketFactory(int,SSLSessionCache) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Socket android.net.SSLCertificateSocketFactory.createSocket(String,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Socket android.net.SSLCertificateSocketFactory.createSocket(String,int,InetAddress,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SSLSocketFactory android.net.SSLCertificateSocketFactory.getInsecure(int,SSLSessionCache) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
X509Certificate[] android.net.SSLCertificateSocketFactory$1.getAcceptedIssuers() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
Socket android.net.SSLCertificateSocketFactory.createSocket(InetAddress,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.ConnectivityManager.setNetworkPreference(int) - @DSSink({DSSinkKind.NETWORK})
NetworkInfo android.net.ConnectivityManager.getNetworkInfo(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.ConnectivityManager.setDataDependency(int,boolean) - @DSSink({DSSinkKind.NETWORK})
LinkProperties android.net.ConnectivityManager.getActiveLinkProperties() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.ConnectivityManager.setGlobalProxy(ProxyProperties) - @DSSink({DSSinkKind.NETWORK})
String[] android.net.ConnectivityManager.getTetherableBluetoothRegexs() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
String[] android.net.ConnectivityManager.getTetheredIfaces() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.ConnectivityManager.getNetworkPreference() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.ConnectivityManager.setBackgroundDataSetting(boolean) - @DSSink({DSSinkKind.NETWORK})
int android.net.ConnectivityManager.getLastTetherError(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
LinkProperties android.net.ConnectivityManager.getLinkProperties(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
NetworkInfo android.net.ConnectivityManager.getActiveNetworkInfoForUid(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
NetworkQuotaInfo android.net.ConnectivityManager.getActiveNetworkQuotaInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.ConnectivityManager.isNetworkSupported(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] android.net.ConnectivityManager.getTetheringErroredIfaces() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.ConnectivityManager.stopUsingNetworkFeature(int,String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.ConnectivityManager.setRadio(int,boolean) - @DSSink({DSSinkKind.NETWORK})
ProxyProperties android.net.ConnectivityManager.getProxy() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.ConnectivityManager.getMobileDataEnabled() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.ConnectivityManager.untether(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.ConnectivityManager.setUsbTethering(boolean) - @DSSink({DSSinkKind.NETWORK})
boolean android.net.ConnectivityManager.getBackgroundDataSetting() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] android.net.ConnectivityManager.getTetherableIfaces() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.ConnectivityManager.setRadios(boolean) - @DSSink({DSSinkKind.NETWORK})
int android.net.ConnectivityManager.tether(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ProxyProperties android.net.ConnectivityManager.getGlobalProxy() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.ConnectivityManager.startUsingNetworkFeature(int,String) - @DSSink({DSSinkKind.NETWORK})
String[] android.net.ConnectivityManager.getTetherableWifiRegexs() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.ConnectivityManager.setMobileDataEnabled(boolean) - @DSSink({DSSinkKind.NETWORK})
String[] android.net.ConnectivityManager.getTetherableUsbRegexs() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.ConnectivityManager.getNetworkTypeName(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
NetworkInfo[] android.net.ConnectivityManager.getAllNetworkInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
NetworkInfo android.net.ConnectivityManager.getActiveNetworkInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
InetAddress android.net.LinkAddress.getAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.LinkAddress.getNetworkPrefixLength() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.NetworkPolicyManager.computeNextCycleBoundary(long,NetworkPolicy) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.NetworkPolicyManager.computeLastCycleBoundary(long,NetworkPolicy) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.NetworkPolicyManager.setUidPolicy(int,int) - @DSSink({DSSinkKind.NETWORK})
int android.net.NetworkPolicyManager.getUidPolicy(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.NetworkPolicyManager.setNetworkPolicies(NetworkPolicy[]) - @DSSink({DSSinkKind.NETWORK})
NetworkPolicy[] android.net.NetworkPolicyManager.getNetworkPolicies() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.LocalSocketAddress.getName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.LocalSocketAddress$Namespace.getId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
IBinder android.net.IThrottleManager$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.IThrottleManager$Stub$Proxy.getHelpUri() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.IThrottleManager$Stub$Proxy.getCliffThreshold(String,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.IThrottleManager$Stub$Proxy.getResetTime(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.IThrottleManager$Stub$Proxy.getCliffLevel(String,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.IThrottleManager$Stub$Proxy.getPeriodStartTime(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.IThrottleManager$Stub$Proxy.getThrottle(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.IThrottleManager$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.NETWORK})
String android.net.IThrottleManager$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.IThrottleManager$Stub$Proxy.getByteCount(String,int,int,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
InetAddress android.net.NetworkUtils.getNetworkPart(InetAddress,int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.NetworkState.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.NETWORK})
AudioCodec android.net.rtp.AudioCodec.getCodec(int,String,String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
AudioCodec[] android.net.rtp.AudioCodec.getCodecs() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.rtp.AudioStream.getDtmfType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
AudioCodec android.net.rtp.AudioStream.getCodec() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
AudioGroup android.net.rtp.AudioStream.getGroup() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.rtp.AudioGroup.sendDtmf(int) - @DSSink({DSSinkKind.NETWORK})
int android.net.rtp.AudioGroup.getMode() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
AudioStream[] android.net.rtp.AudioGroup.getStreams() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.rtp.RtpStream.getMode() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.rtp.RtpStream.getLocalPort() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.rtp.RtpStream.getRemotePort() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
InetAddress android.net.rtp.RtpStream.getLocalAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
InetAddress android.net.rtp.RtpStream.getRemoteAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.NetworkPolicy.writeToParcel(Parcel,int) - @DSSink({DSSinkKind.NETWORK})
HttpHost android.net.Proxy.getPreferredHttpHost(Context,String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Proxy.getDefaultHost() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.Proxy.setHttpProxySystemProperty(String,String,String) - @DSSink({DSSinkKind.NETWORK})
Proxy android.net.Proxy.getProxy(Context,String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.Proxy.getHost(Context) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
HttpRoutePlanner android.net.Proxy.getAndroidProxySelectorRoutePlanner(Context) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.net.TrafficStats.getMobileTxBytes() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.TrafficStats.getTxBytes(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.TrafficStats.getRxBytes(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.TrafficStats.getRxPackets(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.TrafficStats.getMobileRxBytes() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.TrafficStats.getTotalTxPackets() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.TrafficStats.getTotalRxBytes() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.TrafficStats.getTxPackets(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.TrafficStats.setThreadStatsTag(int) - @DSSink({DSSinkKind.NETWORK})
void android.net.TrafficStats.setThreadStatsUid(int) - @DSSink({DSSinkKind.NETWORK})
int android.net.TrafficStats.getThreadStatsTag() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.TrafficStats.getTotalRxPackets() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.TrafficStats.getTotalTxBytes() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.TrafficStats.getMobileTxPackets() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.TrafficStats.getMobileRxPackets() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.IConnectivityManager$Stub$Proxy.requestRouteToHostAddress(int,byte[]) - @DSSink({DSSinkKind.NETWORK})
int android.net.IConnectivityManager$Stub$Proxy.getLastTetherError(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.IConnectivityManager$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.IConnectivityManager$Stub$Proxy.setUsbTethering(boolean) - @DSSink({DSSinkKind.NETWORK})
void android.net.IConnectivityManager$Stub$Proxy.setMobileDataEnabled(boolean) - @DSSink({DSSinkKind.NETWORK})
int android.net.IConnectivityManager$Stub$Proxy.stopUsingNetworkFeature(int,String) - @DSSink({DSSinkKind.NETWORK})
NetworkInfo[] android.net.IConnectivityManager$Stub$Proxy.getAllNetworkInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
NetworkInfo android.net.IConnectivityManager$Stub$Proxy.getActiveNetworkInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] android.net.IConnectivityManager$Stub$Proxy.getTetherableUsbRegexs() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] android.net.IConnectivityManager$Stub$Proxy.getTetherableIfaces() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.IConnectivityManager$Stub$Proxy.isNetworkSupported(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.IConnectivityManager$Stub$Proxy.tether(String) - @DSSink({DSSinkKind.NETWORK})
void android.net.IConnectivityManager$Stub$Proxy.setDataDependency(int,boolean) - @DSSink({DSSinkKind.NETWORK})
boolean android.net.IConnectivityManager$Stub$Proxy.requestRouteToHost(int,int) - @DSSink({DSSinkKind.NETWORK})
LinkProperties android.net.IConnectivityManager$Stub$Proxy.getLinkProperties(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] android.net.IConnectivityManager$Stub$Proxy.getTetheredIfacePairs() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.IConnectivityManager$Stub$Proxy.setNetworkPreference(int) - @DSSink({DSSinkKind.NETWORK})
int android.net.IConnectivityManager$Stub$Proxy.getNetworkPreference() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
LinkProperties android.net.IConnectivityManager$Stub$Proxy.getActiveLinkProperties() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
NetworkState[] android.net.IConnectivityManager$Stub$Proxy.getAllNetworkState() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.IConnectivityManager$Stub$Proxy.requestNetworkTransitionWakelock(String) - @DSSink({DSSinkKind.NETWORK})
ProxyProperties android.net.IConnectivityManager$Stub$Proxy.getGlobalProxy() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.IConnectivityManager$Stub$Proxy.startUsingNetworkFeature(int,String,IBinder) - @DSSink({DSSinkKind.NETWORK})
boolean android.net.IConnectivityManager$Stub$Proxy.setRadios(boolean) - @DSSink({DSSinkKind.NETWORK})
int android.net.IConnectivityManager$Stub$Proxy.untether(String) - @DSSink({DSSinkKind.NETWORK})
NetworkInfo android.net.IConnectivityManager$Stub$Proxy.getNetworkInfo(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] android.net.IConnectivityManager$Stub$Proxy.getTetherableWifiRegexs() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.IConnectivityManager$Stub$Proxy.setPolicyDataEnable(int,boolean) - @DSSink({DSSinkKind.NETWORK})
void android.net.IConnectivityManager$Stub$Proxy.reportInetCondition(int,int) - @DSSink({DSSinkKind.NETWORK})
void android.net.IConnectivityManager$Stub$Proxy.setGlobalProxy(ProxyProperties) - @DSSink({DSSinkKind.NETWORK})
boolean android.net.IConnectivityManager$Stub$Proxy.setRadio(int,boolean) - @DSSink({DSSinkKind.NETWORK})
LegacyVpnInfo android.net.IConnectivityManager$Stub$Proxy.getLegacyVpnInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.IConnectivityManager$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.NETWORK})
String[] android.net.IConnectivityManager$Stub$Proxy.getTetheredIfaces() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] android.net.IConnectivityManager$Stub$Proxy.getTetherableBluetoothRegexs() - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION})
boolean android.net.IConnectivityManager$Stub$Proxy.prepareVpn(String,String) - @DSSink({DSSinkKind.NETWORK})
ParcelFileDescriptor android.net.IConnectivityManager$Stub$Proxy.establishVpn(VpnConfig) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] android.net.IConnectivityManager$Stub$Proxy.getTetheringErroredIfaces() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
NetworkInfo android.net.IConnectivityManager$Stub$Proxy.getActiveNetworkInfoForUid(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ProxyProperties android.net.IConnectivityManager$Stub$Proxy.getProxy() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
NetworkQuotaInfo android.net.IConnectivityManager$Stub$Proxy.getActiveNetworkQuotaInfo() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
IBinder android.net.IConnectivityManager$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.Credentials.getUid() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.net.Credentials.getGid() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.net.Credentials.getPid() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.net.sip.SipProfile.getProtocol() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.sip.SipProfile.getSendKeepAlive() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.sip.SipProfile.getProfileName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.sip.SipProfile.getCallingUid() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Address android.net.sip.SipProfile.getSipAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.sip.SipProfile.getUserName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.sip.SipProfile.getAuthUserName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.sip.SipProfile.getAutoRegistration() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.sip.SipProfile.getSipDomain() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.sip.SipProfile.getPassword() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.sip.SipProfile.getDisplayName() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.sip.SipProfile.getProxyAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.sip.SipProfile.getUriString() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.sip.SipProfile.getPort() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SipURI android.net.sip.SipProfile.getUri() - @DSSource({DSSourceKind.FILE_INFORMATION})
String android.net.sip.SimpleSessionDescription.getAttribute(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.sip.SimpleSessionDescription.getBandwidth(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.net.sip.SimpleSessionDescription$Media.getRtpmap(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.sip.SimpleSessionDescription$Media.getFmtp(int) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.sip.SimpleSessionDescription$Media.getPort() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.sip.SimpleSessionDescription$Media.getFmtp(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.sip.SimpleSessionDescription.setAddress(String) - @DSSink({DSSinkKind.NETWORK})
String android.net.sip.SimpleSessionDescription$Fields.getEncryptionKey() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.sip.SimpleSessionDescription$Fields.setEncryption(String,String) - @DSSink({DSSinkKind.NETWORK})
int[] android.net.sip.SimpleSessionDescription$Media.getRtpPayloadTypes() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.sip.SimpleSessionDescription$Fields.getEncryptionMethod() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] android.net.sip.SimpleSessionDescription$Fields.getAttributeNames() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.sip.SimpleSessionDescription$Media.getPortCount() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.sip.SimpleSessionDescription$Fields.setAddress(String) - @DSSink({DSSinkKind.NETWORK})
void android.net.sip.SimpleSessionDescription.setBandwidth(String,int) - @DSSink({DSSinkKind.NETWORK})
String[] android.net.sip.SimpleSessionDescription$Fields.getBandwidthTypes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.net.sip.SimpleSessionDescription$Media.getType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.sip.SimpleSessionDescription$Fields.getAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] android.net.sip.SimpleSessionDescription.getAttributeNames() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.sip.SimpleSessionDescription.setAttribute(String,String) - @DSSink({DSSinkKind.NETWORK})
void android.net.sip.SimpleSessionDescription.setEncryption(String,String) - @DSSink({DSSinkKind.NETWORK})
String android.net.sip.SimpleSessionDescription$Media.getProtocol() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.sip.SimpleSessionDescription$Fields.getBandwidth(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.net.sip.SimpleSessionDescription$Fields.setBandwidth(String,int) - @DSSink({DSSinkKind.NETWORK})
String android.net.sip.SimpleSessionDescription.getAddress() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.sip.SimpleSessionDescription.getEncryptionKey() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] android.net.sip.SimpleSessionDescription.getBandwidthTypes() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.net.sip.SimpleSessionDescription$Media.setFormat(String,String) - @DSSink({DSSinkKind.NETWORK})
String[] android.net.sip.SimpleSessionDescription$Media.getFormats() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.sip.SimpleSessionDescription.getEncryptionMethod() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.sip.SimpleSessionDescription$Fields.setAttribute(String,String) - @DSSink({DSSinkKind.NETWORK})
String android.net.sip.SimpleSessionDescription$Fields.getAttribute(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.sip.SimpleSessionDescription$Media.setRtpPayload(int,String,String) - @DSSink({DSSinkKind.NETWORK})
void android.net.sip.ISipSessionListener$Stub$Proxy.onRinging(ISipSession,SipProfile,String) - @DSSink({DSSinkKind.VOIP})
void android.net.sip.ISipSessionListener$Stub$Proxy.onError(ISipSession,int,String) - @DSSink({DSSinkKind.VOIP})
void android.net.sip.ISipSessionListener$Stub$Proxy.onRegistrationDone(ISipSession,int) - @DSSink({DSSinkKind.VOIP})
IBinder android.net.sip.ISipSessionListener$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.sip.ISipSessionListener$Stub$Proxy.onCallBusy(ISipSession) - @DSSink({DSSinkKind.VOIP})
void android.net.sip.ISipSessionListener$Stub$Proxy.onRingingBack(ISipSession) - @DSSink({DSSinkKind.VOIP})
String android.net.sip.ISipSessionListener$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.sip.ISipSessionListener$Stub$Proxy.onCalling(ISipSession) - @DSSink({DSSinkKind.VOIP})
void android.net.sip.ISipSessionListener$Stub$Proxy.onRegistering(ISipSession) - @DSSink({DSSinkKind.VOIP})
void android.net.sip.ISipSessionListener$Stub$Proxy.onCallChangeFailed(ISipSession,int,String) - @DSSink({DSSinkKind.VOIP})
void android.net.sip.ISipSessionListener$Stub$Proxy.onRegistrationFailed(ISipSession,int,String) - @DSSink({DSSinkKind.VOIP})
void android.net.sip.ISipSessionListener$Stub$Proxy.onCallEstablished(ISipSession,String) - @DSSink({DSSinkKind.VOIP})
void android.net.sip.ISipSessionListener$Stub$Proxy.onCallTransferring(ISipSession,String) - @DSSink({DSSinkKind.VOIP})
void android.net.sip.ISipSessionListener$Stub$Proxy.onRegistrationTimeout(ISipSession) - @DSSink({DSSinkKind.VOIP})
void android.net.sip.ISipSessionListener$Stub$Proxy.onCallEnded(ISipSession) - @DSSink({DSSinkKind.VOIP})
void android.net.sip.ISipSession$Stub$Proxy.answerCall(String,int) - @DSSink({DSSinkKind.NETWORK})
void android.net.sip.ISipSession$Stub$Proxy.register(int) - @DSSink({DSSinkKind.NETWORK})
int android.net.sip.ISipSession$Stub$Proxy.getState() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.sip.ISipSession$Stub$Proxy.getLocalIp() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.sip.ISipSession$Stub$Proxy.getCallId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.net.sip.ISipSession$Stub$Proxy.setListener(ISipSessionListener) - @DSSink({DSSinkKind.VOIP})
boolean android.net.sip.ISipSession$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.NETWORK})
IBinder android.net.sip.ISipSession$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.sip.ISipSession$Stub$Proxy.makeCall(SipProfile,String,int) - @DSSink({DSSinkKind.VOIP})
SipProfile android.net.sip.ISipSession$Stub$Proxy.getPeerProfile() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.sip.ISipSession$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SipProfile android.net.sip.ISipSession$Stub$Proxy.getLocalProfile() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.sip.ISipSession$Stub$Proxy.changeCall(String,int) - @DSSink({DSSinkKind.NETWORK})
void android.net.sip.ISipService$Stub$Proxy.open3(SipProfile,PendingIntent,ISipSessionListener) - @DSSink({DSSinkKind.VOIP})
boolean android.net.sip.ISipService$Stub$Proxy.isOpened(String) - @DSSink({DSSinkKind.VOIP})
boolean android.net.sip.ISipService$Stub$Proxy.isRegistered(String) - @DSSink({DSSinkKind.NETWORK})
IBinder android.net.sip.ISipService$Stub.asBinder() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.sip.ISipService$Stub$Proxy.close(String) - @DSSink({DSSinkKind.NETWORK})
String android.net.sip.ISipService$Stub$Proxy.getInterfaceDescriptor() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.sip.ISipService$Stub.onTransact(int,Parcel,Parcel,int) - @DSSink({DSSinkKind.NETWORK})
void android.net.sip.ISipService$Stub$Proxy.setRegistrationListener(String,ISipSessionListener) - @DSSink({DSSinkKind.VOIP})
ISipSession android.net.sip.ISipService$Stub$Proxy.getPendingSession(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
ISipSession android.net.sip.ISipService$Stub$Proxy.createSession(SipProfile,ISipSessionListener) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SipProfile[] android.net.sip.ISipService$Stub$Proxy.getListOfProfiles() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.sip.SipManager.getOfferSessionDescription(Intent) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.sip.SipManager.setRegistrationListener(String,SipRegistrationListener) - @DSSink({DSSinkKind.VOIP})
boolean android.net.sip.SipManager.isRegistered(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
boolean android.net.sip.SipManager.isOpened(String) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SipSession android.net.sip.SipManager.getSessionFor(Intent) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.sip.SipManager.open(SipProfile) - @DSSink({DSSinkKind.VOIP})
Intent android.net.sip.SipManager.createIncomingCallBroadcast(String,String) - @DSSink({DSSinkKind.NETWORK})
SipProfile[] android.net.sip.SipManager.getListOfProfiles() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.sip.SipManager.getCallId(Intent) - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.sip.SipManager.open(SipProfile,PendingIntent,SipRegistrationListener) - @DSSink({DSSinkKind.VOIP})
void android.net.sip.SipAudioCall.setSpeakerMode(boolean) - @DSSink({DSSinkKind.NETWORK})
SipProfile android.net.sip.SipAudioCall.getLocalProfile() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.sip.SipAudioCall.getState() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
AudioGroup android.net.sip.SipAudioCall.getAudioGroup() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.sip.SipAudioCall.sendDtmf(int,Message) - @DSSink({DSSinkKind.LOG})
AudioStream android.net.sip.SipAudioCall.getAudioStream() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SipSession android.net.sip.SipAudioCall.getSipSession() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SipProfile android.net.sip.SipAudioCall.getPeerProfile() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.sip.SipAudioCall.sendDtmf(int) - @DSSink({DSSinkKind.NETWORK})
String android.net.sip.SipSession.getCallId() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ISipSession android.net.sip.SipSession.getRealSession() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
SipProfile android.net.sip.SipSession.getLocalProfile() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
String android.net.sip.SipSession.getLocalIp() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.net.sip.SipSession.getState() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
SipProfile android.net.sip.SipSession.getPeerProfile() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
boolean android.net.NetworkIdentity.getRoaming() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.NetworkIdentity.getSubType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.net.NetworkIdentity.getType() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String android.net.NetworkIdentity.getSubscriberId() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
String[] android.net.NetworkStats.getUniqueIfaces() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.NetworkStats.getTotalBytes() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.NetworkStats.getElapsedRealtime() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
long android.net.NetworkStats.getElapsedRealtimeAge() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
void android.net.NetworkStats.dump(String,PrintWriter) - @DSSink({DSSinkKind.NETWORK})
int[] android.net.NetworkStats.getUniqueUids() - @DSSource({DSSourceKind.NETWORK_INFORMATION})
int android.animation.IntKeyframeSet.getIntValue(float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.animation.IntKeyframeSet.getValue(float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.animation.PropertyValuesHolder.setKeyframes(Keyframe[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.animation.PropertyValuesHolder$IntPropertyValuesHolder.setIntValues(int[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.animation.PropertyValuesHolder$FloatPropertyValuesHolder.getAnimatedValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.animation.PropertyValuesHolder.getAnimatedValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.animation.PropertyValuesHolder$IntPropertyValuesHolder.setupSetter(Class) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.animation.PropertyValuesHolder$FloatPropertyValuesHolder.setupSetter(Class) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.animation.PropertyValuesHolder.setObjectValues(Object[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.animation.PropertyValuesHolder.getPropertyName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.animation.PropertyValuesHolder$FloatPropertyValuesHolder.setFloatValues(float[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.animation.PropertyValuesHolder.setupEndValue(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.animation.PropertyValuesHolder.setIntValues(int[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.animation.PropertyValuesHolder.setFloatValues(float[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.animation.PropertyValuesHolder.setupSetterAndGetter(Object) - @DSSink({DSSinkKind.LOG})
void android.animation.PropertyValuesHolder.setAnimatedValue(Object) - @DSSink({DSSinkKind.LOG})
void android.animation.PropertyValuesHolder.setupSetter(Class) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.animation.PropertyValuesHolder$FloatPropertyValuesHolder.setAnimatedValue(Object) - @DSSink({DSSinkKind.LOG})
void android.animation.PropertyValuesHolder$IntPropertyValuesHolder.setAnimatedValue(Object) - @DSSink({DSSinkKind.LOG})
Object android.animation.PropertyValuesHolder$IntPropertyValuesHolder.getAnimatedValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.animation.PropertyValuesHolder.setupStartValue(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.animation.PropertyValuesHolder.getMethodName(String,String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.animation.ValueAnimator.getStartDelay() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.animation.ValueAnimator.getFrameDelay() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.animation.ValueAnimator.getAnimatedValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.animation.ValueAnimator.getCurrentAnimationsCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.animation.ValueAnimator.getRepeatCount() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.animation.ValueAnimator.getCurrentPlayTime() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.animation.ValueAnimator.getRepeatMode() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TimeInterpolator android.animation.ValueAnimator.getInterpolator() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.animation.ValueAnimator.setFloatValues(float[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.animation.ValueAnimator.setFrameDelay(long) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
PropertyValuesHolder[] android.animation.ValueAnimator.getValues() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.animation.ValueAnimator.setIntValues(int[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long android.animation.ValueAnimator.getDuration() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.animation.ValueAnimator.setObjectValues(Object[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
float android.animation.ValueAnimator.getAnimatedFraction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.animation.ValueAnimator.setValues(PropertyValuesHolder[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.animation.ValueAnimator.getAnimatedValue(String) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.animation.KeyframeSet.getValue(float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Animator android.animation.AnimatorInflater.loadAnimator(Context,int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.animation.Keyframe$IntKeyframe.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.animation.Keyframe$ObjectKeyframe.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.animation.Keyframe$IntKeyframe.setValue(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
TimeInterpolator android.animation.Keyframe.getInterpolator() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Class android.animation.Keyframe.getType() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.animation.Keyframe$FloatKeyframe.setValue(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.animation.Keyframe$FloatKeyframe.getValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
int android.animation.Keyframe$IntKeyframe.getIntValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.animation.Keyframe$FloatKeyframe.getFloatValue() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.animation.Keyframe.getFraction() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.animation.Animator.setTarget(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
ArrayList android.animation.Animator.getListeners() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Animator android.animation.Animator.clone() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
ArrayList android.animation.AnimatorSet.getChildAnimations() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.animation.AnimatorSet.setTarget(Object) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long android.animation.AnimatorSet.getDuration() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.animation.AnimatorSet$DependencyListener.onAnimationEnd(Animator) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long android.animation.AnimatorSet.getStartDelay() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.animation.AnimatorSet$DependencyListener.onAnimationStart(Animator) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
Object android.animation.FloatKeyframeSet.getValue(float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
float android.animation.FloatKeyframeSet.getFloatValue(float) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Object android.animation.ObjectAnimator.getTarget() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.animation.ObjectAnimator.setIntValues(int[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.animation.ObjectAnimator.setPropertyName(String) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
String android.animation.ObjectAnimator.getPropertyName() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
void android.animation.ObjectAnimator.setObjectValues(Object[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
void android.animation.ObjectAnimator.setFloatValues(float[]) - @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED})
long android.animation.LayoutTransition.getStartDelay(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
Animator android.animation.LayoutTransition.getAnimator(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.animation.LayoutTransition.getStagger(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
TimeInterpolator android.animation.LayoutTransition.getInterpolator(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
List android.animation.LayoutTransition.getTransitionListeners() - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
long android.animation.LayoutTransition.getDuration(int) - @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED})
