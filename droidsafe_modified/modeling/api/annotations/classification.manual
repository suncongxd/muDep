<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Describes Acessibility Service")
<android.accessibilityservice.AccessibilityServiceInfo: boolean getCanRetrieveWindowContent()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Describes Acessibility Service")
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getDescription()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Describes Acessibility Service")
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getId()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Describes Acessibility Service")
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getSettingsActivityName()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Describes Acessibility Service")
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder with(android.animation.Animator)> - @DSSafe(DSCat.ANDROID_ANIMATION) - @DSComment("Animation class")
<android.animation.AnimatorSet: android.animation.AnimatorSet$Builder play(android.animation.Animator)> - @DSSafe(DSCat.ANDROID_ANIMATION) - @DSComment("Animation class")
<android.animation.AnimatorSet: void <init>()> - @DSSafe(DSCat.ANDROID_ANIMATION) - @DSComment("Animation class")
<android.animation.AnimatorSet: void playSequentially(java.util.List)> - @DSSafe(DSCat.ANDROID_ANIMATION) - @DSComment("Animation class")
<android.animation.AnimatorSet: void playTogether(java.util.Collection)> - @DSSafe(DSCat.ANDROID_ANIMATION) - @DSComment("Animation class")
<android.animation.AnimatorSet: void start()> - @DSSafe(DSCat.ANDROID_ANIMATION) - @DSComment("Animation class")
<android.animation.LayoutTransition: void <init>()> - @DSSafe(DSCat.ANDROID_ANIMATION) - @DSComment("Animation class")
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])> - @DSSafe(DSCat.ANDROID_ANIMATION) - @DSComment("Animation class")
<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)> - @DSSafe(DSCat.ANDROID_ANIMATION) - @DSComment("Animation class")
<android.animation.TimeInterpolator: float getInterpolation(float)> - @DSSafe(DSCat.ANDROID_ANIMATION) - @DSComment("Animation class")
<android.animation.ValueAnimator: long getFrameDelay()> - @DSSafe(DSCat.ANDROID_ANIMATION) - @DSComment("Animation class")
<android.animation.ValueAnimator: void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)> - @DSSafe(DSCat.ANDROID_ANIMATION) - @DSComment("Animation class")
<android.app.ActionBar$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Layout parameters")
<android.app.ActionBar$Tab: android.app.ActionBar$Tab setTabListener(android.app.ActionBar$TabListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.app.ActionBar: void addOnMenuVisibilityListener(android.app.ActionBar$OnMenuVisibilityListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.app.ActionBar: void setListNavigationCallbacks(android.widget.SpinnerAdapter,android.app.ActionBar$OnNavigationListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.app.Activity: android.app.ActionBar getActionBar()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: android.app.Activity getParent()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: android.app.Application getApplication()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: android.app.Dialog onCreateDialog(int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: android.app.FragmentManager getFragmentManager()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Android Manager retrieved/accessed")
<android.app.Activity: android.content.ComponentName getCallingActivity()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: android.content.ComponentName getComponentName()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: android.content.Intent getIntent()> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.Activity: android.content.SharedPreferences getPreferences(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSpec(DSCat.DATABASE) - @DSComment("returned DB object")
<android.app.Activity: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: android.view.LayoutInflater getLayoutInflater()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: android.view.MenuInflater getMenuInflater()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: android.view.View findViewById(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: android.view.Window getWindow()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: android.view.WindowManager getWindowManager()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Android Manager retrieved/accessed")
<android.app.Activity: boolean dispatchKeyEvent(android.view.KeyEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.app.Activity: boolean dispatchTouchEvent(android.view.MotionEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.app.Activity: boolean isChild()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: boolean isFinishing()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: boolean moveTaskToBack(boolean)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.app.Activity: boolean onContextItemSelected(android.view.MenuItem)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: boolean onCreateOptionsMenu(android.view.Menu)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: boolean onCreatePanelMenu(int,android.view.Menu)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: boolean onKeyDown(int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: boolean onKeyLongPress(int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: boolean onKeyUp(int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: boolean onMenuItemSelected(int,android.view.MenuItem)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: boolean onMenuOpened(int,android.view.Menu)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: boolean onOptionsItemSelected(android.view.MenuItem)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: boolean onPrepareOptionsMenu(android.view.Menu)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: boolean onPreparePanel(int,android.view.View,android.view.Menu)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: boolean onSearchRequested()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: boolean requestWindowFeature(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: int getRequestedOrientation()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: java.lang.CharSequence getTitle()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: java.lang.Object getLastNonConfigurationInstance()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: java.lang.Object getSystemService(java.lang.String)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: java.lang.String getCallingPackage()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: java.lang.String getLocalClassName()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void <init>()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void closeOptionsMenu()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void dismissDialog(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void finish()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void finishActivity(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void invalidateOptionsMenu()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void onActivityResult(int,int,android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.Activity: void onBackPressed()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onConfigurationChanged(android.content.res.Configuration)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onContextMenuClosed(android.view.Menu)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onCreate(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onDestroy()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onDetachedFromWindow()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onLowMemory()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onNewIntent(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.Activity: void onOptionsMenuClosed(android.view.Menu)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onPanelClosed(int,android.view.Menu)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onPause()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onPostCreate(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onPostResume()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onPrepareDialog(int,android.app.Dialog)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onRestart()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onResume()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onSaveInstanceState(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onStart()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onStop()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onTitleChanged(java.lang.CharSequence,int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onWindowFocusChanged(boolean)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void openContextMenu(android.view.View)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.app.Activity: void openOptionsMenu()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.app.Activity: void registerForContextMenu(android.view.View)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.app.Activity: void removeDialog(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void runOnUiThread(java.lang.Runnable)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void setContentView(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void setContentView(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void setDefaultKeyMode(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void setIntent(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.Activity: void setProgress(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void setProgressBarIndeterminate(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void setProgressBarIndeterminateVisibility(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void setProgressBarVisibility(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void setRequestedOrientation(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void setResult(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void setResult(int,android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.Activity: void setSecondaryProgress(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void setTitle(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void setTitle(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void setVolumeControlStream(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void showDialog(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void startActivity(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.Activity: void startActivityForResult(android.content.Intent,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.Activity: void startManagingCursor(android.database.Cursor)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.app.Activity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void stopManagingCursor(android.database.Cursor)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.app.Activity: void unregisterForContextMenu(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.ActivityGroup: android.app.LocalActivityManager getLocalActivityManager()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Android Manager retrieved/accessed")
<android.app.ActivityGroup: void <init>()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.ActivityGroup: void onCreate(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.ActivityGroup: void onPause()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.ActivityManager: java.util.List getRunningAppProcesses()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.ActivityManager: java.util.List getRunningServices(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.ActivityManager: java.util.List getRunningTasks(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.AlertDialog$Builder: android.app.AlertDialog create()> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog show()> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setAdapter(android.widget.ListAdapter,android.content.DialogInterface$OnClickListener)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCancelable(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCursor(android.database.Cursor,android.content.DialogInterface$OnClickListener,java.lang.String)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(int)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setItems(java.lang.CharSequence[],android.content.DialogInterface$OnClickListener)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(int)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(int,android.content.DialogInterface$OnClickListener)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnKeyListener(android.content.DialogInterface$OnKeyListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface$OnClickListener)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(int)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setView(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog: android.widget.Button getButton(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, alert dialog")
<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, alert dialog")
<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, alert dialog")
<android.app.AlertDialog: void setIcon(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, alert dialog")
<android.app.AlertDialog: void setIcon(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, alert dialog")
<android.app.AlertDialog: void setMessage(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, alert dialog")
<android.app.AlertDialog: void setTitle(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, alert dialog")
<android.app.AlertDialog: void setView(android.view.View,int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, alert dialog")
<android.app.Application: void <init>()> - @DSSafe(DSCat.ANDROID_APPLICATION) - @DSComment("Safe, check callback modeling")
<android.app.Application: void onConfigurationChanged(android.content.res.Configuration)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Application: void onCreate()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Application: void onTerminate()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.DatePickerDialog: void <init>(android.content.Context,android.app.DatePickerDialog$OnDateSetListener,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Date picker dialog")
<android.app.Dialog: android.content.Context getContext()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: android.os.Bundle onSaveInstanceState()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Dialog: android.view.View findViewById(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: android.view.Window getWindow()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: boolean isShowing()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: boolean requestWindowFeature(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: void <init>(android.content.Context,int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: void cancel()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: void dismiss()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: void hide()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: void onCreate(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Dialog: void onRestoreInstanceState(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Dialog: void setCancelable(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: void setCanceledOnTouchOutside(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: void setContentView(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: void setContentView(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: void setOnCancelListener(android.content.DialogInterface$OnCancelListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.app.Dialog: void setOnDismissListener(android.content.DialogInterface$OnDismissListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.app.Dialog: void setOnKeyListener(android.content.DialogInterface$OnKeyListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.app.Dialog: void setOwnerActivity(android.app.Activity)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: void setTitle(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: void setTitle(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: void show()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.DialogFragment: android.app.Dialog getDialog()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, dialog")
<android.app.DialogFragment: void <init>()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, dialog")
<android.app.DialogFragment: void dismiss()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, dialog")
<android.app.DialogFragment: void onCreate(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.DialogFragment: void show(android.app.FragmentManager,java.lang.String)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, dialog")
<android.app.DownloadManager$Query: android.app.DownloadManager$Query setFilterById(long[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Formulating request to download")
<android.app.DownloadManager$Query: void <init>()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Formulating request to download")
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setDescription(java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Formulating request to download")
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setDestinationInExternalPublicDir(java.lang.String,java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Formulating request to download")
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setNotificationVisibility(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Formulating request to download")
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setTitle(java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Formulating request to download")
<android.app.DownloadManager$Request: void <init>(android.net.Uri)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Formulating request to download")
<android.app.DownloadManager: android.database.Cursor query(android.app.DownloadManager$Query)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.DownloadManager: long enqueue(android.app.DownloadManager$Request)> - @DSSpec(DSCat.INTERNET) - @DSComment("Download manager access")
<android.app.ExpandableListActivity: android.widget.ExpandableListView getExpandableListView()> - @DSSafe(DSCat.GUI) - @DSComment("Expandable list activity")
<android.app.ExpandableListActivity: void <init>()> - @DSSafe(DSCat.GUI) - @DSComment("Expandable list activity")
<android.app.ExpandableListActivity: void setListAdapter(android.widget.ExpandableListAdapter)> - @DSSafe(DSCat.GUI) - @DSComment("Expandable list activity")
<android.app.Fragment: android.app.Activity getActivity()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment")
<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment")
<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment")
<android.app.Fragment: android.app.FragmentManager getFragmentManager()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Android Manager retrieved/accessed")
<android.app.Fragment: android.app.LoaderManager getLoaderManager()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Android Manager retrieved/accessed")
<android.app.Fragment: android.content.res.Resources getResources()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment")
<android.app.Fragment: android.os.Bundle getArguments()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment")
<android.app.Fragment: android.view.View getView()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment")
<android.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Fragment: boolean isDetached()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment")
<android.app.Fragment: boolean isResumed()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment")
<android.app.Fragment: java.lang.String getString(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment")
<android.app.Fragment: void <init>()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment")
<android.app.Fragment: void onActivityCreated(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Fragment: void onAttach(android.app.Activity)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Fragment: void onCreate(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Fragment: void onDestroy()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Fragment: void onPause()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Fragment: void onResume()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Fragment: void onStart()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Fragment: void onStop()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Fragment: void setArguments(android.os.Bundle)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment")
<android.app.Fragment: void setHasOptionsMenu(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment")
<android.app.Fragment: void startActivity(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.Fragment: void startActivityForResult(android.content.Intent,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.FragmentManager: android.app.Fragment findFragmentById(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment Manager")
<android.app.FragmentManager: android.app.Fragment findFragmentByTag(java.lang.String)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment Manager")
<android.app.FragmentManager: android.app.Fragment getFragment(android.os.Bundle,java.lang.String)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.FragmentManager: android.app.Fragment$SavedState saveFragmentInstanceState(android.app.Fragment)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment Manager")
<android.app.FragmentManager: android.app.FragmentManager$BackStackEntry getBackStackEntryAt(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment Manager")
<android.app.FragmentManager: boolean executePendingTransactions()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment Manager")
<android.app.FragmentManager: boolean popBackStackImmediate()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment Manager")
<android.app.FragmentManager: boolean popBackStackImmediate(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment Manager")
<android.app.FragmentManager: boolean popBackStackImmediate(java.lang.String,int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment Manager")
<android.app.FragmentManager: int getBackStackEntryCount()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.FragmentManager: void addOnBackStackChangedListener(android.app.FragmentManager$OnBackStackChangedListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.app.FragmentManager: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment Manager")
<android.app.FragmentManager: void invalidateOptionsMenu()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment Manager")
<android.app.FragmentManager: void popBackStack()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment Manager")
<android.app.FragmentManager: void popBackStack(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment Manager")
<android.app.FragmentManager: void popBackStack(java.lang.String,int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment Manager")
<android.app.FragmentManager: void putFragment(android.os.Bundle,java.lang.String,android.app.Fragment)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, Fragment Manager")
<android.app.FragmentManager: void removeOnBackStackChangedListener(android.app.FragmentManager$OnBackStackChangedListener)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action when removing callback")
<android.app.FragmentTransaction: android.app.FragmentTransaction add(int,android.app.Fragment)> - @DSSafe(DSCat.GUI) - @DSComment("Fragment transation")
<android.app.FragmentTransaction: android.app.FragmentTransaction add(int,android.app.Fragment,java.lang.String)> - @DSSafe(DSCat.GUI) - @DSComment("Fragment transation")
<android.app.FragmentTransaction: android.app.FragmentTransaction addToBackStack(java.lang.String)> - @DSSafe(DSCat.GUI) - @DSComment("Fragment transation")
<android.app.FragmentTransaction: android.app.FragmentTransaction attach(android.app.Fragment)> - @DSSafe(DSCat.GUI) - @DSComment("Fragment transation")
<android.app.FragmentTransaction: android.app.FragmentTransaction detach(android.app.Fragment)> - @DSSafe(DSCat.GUI) - @DSComment("Fragment transation")
<android.app.FragmentTransaction: android.app.FragmentTransaction replace(int,android.app.Fragment)> - @DSSafe(DSCat.GUI) - @DSComment("Fragment transation")
<android.app.FragmentTransaction: android.app.FragmentTransaction replace(int,android.app.Fragment,java.lang.String)> - @DSSafe(DSCat.GUI) - @DSComment("Fragment transation")
<android.app.FragmentTransaction: android.app.FragmentTransaction setTransition(int)> - @DSSafe(DSCat.GUI) - @DSComment("Fragment transation")
<android.app.FragmentTransaction: int commit()> - @DSSafe(DSCat.GUI) - @DSComment("Fragment transation")
<android.app.IntentService: int onStartCommand(android.content.Intent,int,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.IntentService: void onCreate()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.IntentService: void onDestroy()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.KeyguardManager: android.app.KeyguardManager$KeyguardLock newKeyguardLock(java.lang.String)> - @DSSpec(DSCat.DEVICE) - @DSComment("device control")
<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()> - @DSSpec(DSCat.DEVICE) - @DSComment("device control")
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)> - @DSSpec(DSCat.DEVICE) - @DSComment("device control")
<android.app.ListActivity: android.widget.ListAdapter getListAdapter()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.ListActivity: android.widget.ListView getListView()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.ListActivity: long getSelectedItemId()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.ListActivity: void <init>()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.ListActivity: void onDestroy()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.ListActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.ListActivity: void onRestoreInstanceState(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.ListActivity: void setListAdapter(android.widget.ListAdapter)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.ListActivity: void setSelection(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.ListFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.ListFragment: android.widget.ListView getListView()> - @DSSafe(DSCat.GUI) - @DSComment("GUI")
<android.app.ListFragment: void <init>()> - @DSSafe(DSCat.GUI) - @DSComment("GUI")
<android.app.ListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.ListFragment: void setEmptyText(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("GUI")
<android.app.ListFragment: void setListAdapter(android.widget.ListAdapter)> - @DSSafe(DSCat.GUI) - @DSComment("GUI")
<android.app.ListFragment: void setListShown(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("GUI")
<android.app.ListFragment: void setListShownNoAnimation(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("GUI")
<android.app.Notification$Builder: android.app.Notification getNotification()> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setAutoCancel(boolean)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setContent(android.widget.RemoteViews)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setContentInfo(java.lang.CharSequence)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setDefaults(int)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setLargeIcon(android.graphics.Bitmap)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setLights(int,int,int)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setNumber(int)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setOnlyAlertOnce(boolean)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setProgress(int,int,boolean)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int,int)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setSound(android.net.Uri,int)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setVibrate(long[])> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setWhen(long)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: void <init>(android.content.Context)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.NotificationManager: void cancel(int)> - @DSSafe(DSCat.GUI) - @DSComment("Notification can only go to screen")
<android.app.NotificationManager: void cancelAll()> - @DSSafe(DSCat.GUI) - @DSComment("Notification can only go to screen")
<android.app.NotificationManager: void notify(int,android.app.Notification)> - @DSSafe(DSCat.GUI) - @DSComment("Notification can only go to screen")
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.PendingIntent: void send(int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, progress dialog")
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, progress dialog")
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean,boolean)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, progress dialog")
<android.app.ProgressDialog: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, progress dialog")
<android.app.ProgressDialog: void setIndeterminate(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, progress dialog")
<android.app.ProgressDialog: void setMax(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, progress dialog")
<android.app.ProgressDialog: void setMessage(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, progress dialog")
<android.app.ProgressDialog: void setProgress(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, progress dialog")
<android.app.ProgressDialog: void setProgressStyle(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, progress dialog")
<android.app.SearchManager: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.Service: android.app.Application getApplication()> - @DSSafe(DSCat.SERVICE) - @DSComment("Modeled")
<android.app.Service: int onStartCommand(android.content.Intent,int,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.Service: void <init>()> - @DSSafe(DSCat.SERVICE) - @DSComment("Modeled")
<android.app.Service: void onCreate()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Service: void onDestroy()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Service: void onRebind(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.Service: void onStart(android.content.Intent,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.Service: void startForeground(int,android.app.Notification)> - @DSSafe(DSCat.SERVICE) - @DSComment("Modeled")
<android.app.Service: void stopForeground(boolean)> - @DSSafe(DSCat.SERVICE) - @DSComment("Modeled")
<android.app.Service: void stopSelf()> - @DSSafe(DSCat.SERVICE) - @DSComment("Modeled")
<android.app.TabActivity: android.widget.TabHost getTabHost()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.TabActivity: void <init>()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.TabActivity: void onRestoreInstanceState(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.TabActivity: void onSaveInstanceState(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.WallpaperManager: android.app.WallpaperManager getInstance(android.content.Context)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.WallpaperManager: android.graphics.drawable.Drawable getFastDrawable()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.admin.DeviceAdminReceiver: void <init>()> - @DSSpec(DSCat.DEVICE) - @DSComment("device administration")
<android.app.admin.DeviceAdminReceiver: void onDisabled(android.content.Context,android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.admin.DeviceAdminReceiver: void onEnabled(android.content.Context,android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.admin.DevicePolicyManager: boolean isActivePasswordSufficient()> - @DSSpec(DSCat.DEVICE) - @DSComment("device administration")
<android.app.admin.DevicePolicyManager: boolean isAdminActive(android.content.ComponentName)> - @DSSpec(DSCat.DEVICE) - @DSComment("device administration")
<android.app.admin.DevicePolicyManager: boolean resetPassword(java.lang.String,int)> - @DSSpec(DSCat.DEVICE) - @DSComment("device administration")
<android.app.admin.DevicePolicyManager: int getStorageEncryptionStatus()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.admin.DevicePolicyManager: int setStorageEncryption(android.content.ComponentName,boolean)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.admin.DevicePolicyManager: long getPasswordExpiration(android.content.ComponentName)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.admin.DevicePolicyManager: void lockNow()> - @DSSpec(DSCat.DEVICE) - @DSComment("device administration")
<android.app.admin.DevicePolicyManager: void removeActiveAdmin(android.content.ComponentName)> - @DSSpec(DSCat.DEVICE) - @DSComment("device administration")
<android.app.admin.DevicePolicyManager: void setCameraDisabled(android.content.ComponentName,boolean)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.admin.DevicePolicyManager: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.admin.DevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,long)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.admin.DevicePolicyManager: void setPasswordExpirationTimeout(android.content.ComponentName,long)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.admin.DevicePolicyManager: void setPasswordHistoryLength(android.content.ComponentName,int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLength(android.content.ComponentName,int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLetters(android.content.ComponentName,int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLowerCase(android.content.ComponentName,int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNumeric(android.content.ComponentName,int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.admin.DevicePolicyManager: void setPasswordMinimumSymbols(android.content.ComponentName,int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.admin.DevicePolicyManager: void setPasswordMinimumUpperCase(android.content.ComponentName,int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.admin.DevicePolicyManager: void setPasswordQuality(android.content.ComponentName,int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.admin.DevicePolicyManager: void wipeData(int)> - @DSSpec(DSCat.DEVICE) - @DSComment("device administration")
<android.app.backup.BackupAgent: void <init>()> - @DSSpec(DSCat.BACKUP_SUBSYSTEM) - @DSComment("Backup subsystem")
<android.app.backup.BackupAgent: void onCreate()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.backup.BackupAgentHelper: void <init>()> - @DSSpec(DSCat.BACKUP_SUBSYSTEM) - @DSComment("Backup subsystem")
<android.app.backup.BackupAgentHelper: void addHelper(java.lang.String,android.app.backup.BackupHelper)> - @DSSpec(DSCat.BACKUP_SUBSYSTEM) - @DSComment("Backup subsystem")
<android.app.backup.BackupAgentHelper: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.app.backup.BackupAgentHelper: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.app.backup.BackupDataInput: boolean readNextHeader()> - @DSSpec(DSCat.BACKUP_SUBSYSTEM) - @DSComment("Backup subsystem")
<android.app.backup.BackupDataInput: int getDataSize()> - @DSSpec(DSCat.BACKUP_SUBSYSTEM) - @DSComment("Backup subsystem")
<android.app.backup.BackupDataInput: int readEntityData(byte[],int,int)> - @DSSpec(DSCat.BACKUP_SUBSYSTEM) - @DSComment("Backup subsystem")
<android.app.backup.BackupDataInput: java.lang.String getKey()> - @DSSpec(DSCat.BACKUP_SUBSYSTEM) - @DSComment("Backup subsystem")
<android.app.backup.BackupDataInput: void skipEntityData()> - @DSSpec(DSCat.BACKUP_SUBSYSTEM) - @DSComment("Backup subsystem")
<android.app.backup.BackupDataOutput: int writeEntityData(byte[],int)> - @DSSpec(DSCat.BACKUP_SUBSYSTEM) - @DSComment("Backup subsystem")
<android.app.backup.BackupDataOutput: int writeEntityHeader(java.lang.String,int)> - @DSSpec(DSCat.BACKUP_SUBSYSTEM) - @DSComment("Backup subsystem")
<android.app.backup.BackupManager: void <init>(android.content.Context)> - @DSSpec(DSCat.BACKUP_SUBSYSTEM) - @DSComment("Backup subsystem")
<android.app.backup.BackupManager: void dataChanged()> - @DSSpec(DSCat.BACKUP_SUBSYSTEM) - @DSComment("Backup subsystem")
<android.app.backup.FileBackupHelper: void <init>(android.content.Context,java.lang.String[])> - @DSSpec(DSCat.BACKUP_SUBSYSTEM) - @DSComment("Backup subsystem")
<android.app.backup.SharedPreferencesBackupHelper: void <init>(android.content.Context,java.lang.String[])> - @DSSpec(DSCat.BACKUP_SUBSYSTEM) - @DSComment("Backup subsystem")
<android.appwidget.AppWidgetManager: android.appwidget.AppWidgetManager getInstance(android.content.Context)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.appwidget.AppWidgetManager: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.appwidget.AppWidgetManager: int[] getAppWidgetIds(android.content.ComponentName)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.appwidget.AppWidgetProvider: void <init>()> - @DSSafe(DSCat.GUI) - @DSComment("Widget wrapper")
<android.appwidget.AppWidgetProvider: void onDisabled(android.content.Context)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.appwidget.AppWidgetProvider: void onEnabled(android.content.Context)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.appwidget.AppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothAdapter getDefaultAdapter()> - @DSSpec(DSCat.BLUETOOTH) - @DSComment("Bluetooth subsystem")
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String)> - @DSSpec(DSCat.BLUETOOTH) - @DSComment("Bluetooth subsystem")
<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()> - @DSSpec(DSCat.BLUETOOTH) - @DSComment("Bluetooth subsystem")
<android.bluetooth.BluetoothAdapter: boolean disable()> - @DSSpec(DSCat.BLUETOOTH) - @DSComment("Bluetooth subsystem")
<android.bluetooth.BluetoothAdapter: boolean enable()> - @DSSpec(DSCat.BLUETOOTH) - @DSComment("Bluetooth subsystem")
<android.bluetooth.BluetoothAdapter: boolean isDiscovering()> - @DSSpec(DSCat.BLUETOOTH) - @DSComment("Bluetooth subsystem")
<android.bluetooth.BluetoothAdapter: boolean isEnabled()> - @DSSpec(DSCat.BLUETOOTH) - @DSComment("Bluetooth subsystem")
<android.bluetooth.BluetoothAdapter: int getState()> - @DSSpec(DSCat.BLUETOOTH) - @DSComment("Bluetooth subsystem")
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.bluetooth.BluetoothDevice: java.lang.String getAddress()> - @DSSpec(DSCat.BLUETOOTH) - @DSComment("Bluetooth subsystem")
<android.bluetooth.BluetoothDevice: java.lang.String getName()> - @DSSpec(DSCat.BLUETOOTH) - @DSComment("Bluetooth subsystem")
<android.bluetooth.BluetoothSocket: java.io.OutputStream getOutputStream()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.bluetooth.BluetoothSocket: void close()> - @DSSpec(DSCat.BLUETOOTH) - @DSComment("Bluetooth subsystem")
<android.bluetooth.BluetoothSocket: void connect()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.AsyncTaskLoader: void onCanceled(java.lang.Object)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.content.BroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.ClipboardManager: void setPrimaryClip(android.content.ClipData)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ComponentName: boolean equals(java.lang.Object)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ComponentName: int hashCode()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ComponentName: java.lang.String flattenToShortString()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ComponentName: java.lang.String flattenToString()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ComponentName: java.lang.String getClassName()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ComponentName: java.lang.String getPackageName()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<android.content.ComponentName: void <init>(android.content.Context,java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation build()> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("only building the operation, no action")
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withSelection(java.lang.String,java.lang.String[])> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("only building the operation, no action")
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValue(java.lang.String,java.lang.Object)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("only building the operation, no action")
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValueBackReference(java.lang.String,int)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("only building the operation, no action")
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValues(android.content.ContentValues)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("only building the operation, no action")
<android.content.ContentResolver: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)> - @DSSpec(DSCat.CONTENT) - @DSComment("Content model/data manipulation")
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> - @DSSpec(DSCat.CONTENT) - @DSComment("Content model/data manipulation")
<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])> - @DSSpec(DSCat.CONTENT) - @DSComment("Content model/data manipulation")
<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> - @DSSpec(DSCat.CONTENT) - @DSComment("Content model/data manipulation")
<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)> - @DSSpec(DSCat.CONTENT) - @DSComment("Content model/data manipulation")
<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)> - @DSSpec(DSCat.CONTENT) - @DSComment("Content model/data manipulation")
<android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Content uri manipulation utility")
<android.content.ContentUris: long parseId(android.net.Uri)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Content uri manipulation utility")
<android.content.ContentValues: boolean containsKey(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: java.lang.Object get(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: java.lang.String getAsString(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: java.util.Set keySet()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: java.util.Set valueSet()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: void <init>()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: void <init>(android.content.ContentValues)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: void <init>(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: void clear()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: void put(java.lang.String,byte[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: void put(java.lang.String,java.lang.Double)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: void put(java.lang.String,java.lang.Long)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: void put(java.lang.String,java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: void putNull(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: void remove(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.Context: android.content.ComponentName startService(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Context: android.content.pm.PackageManager getPackageManager()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Android Manager retrieved/accessed")
<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.Context: boolean deleteDatabase(java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.Context: boolean deleteFile(java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.Context: boolean stopService(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Context: java.io.File getCacheDir()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.content.Context: java.io.File getDatabasePath(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.content.Context: java.io.File getDir(java.lang.String,int)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.content.Context: java.io.File getExternalCacheDir()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.content.Context: java.io.File getExternalFilesDir(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.content.Context: java.io.File getFilesDir()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.content.Context: java.io.File getObbDir()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.Context: java.lang.ClassLoader getClassLoader()> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<android.content.Context: void registerComponentCallbacks(android.content.ComponentCallbacks)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.content.Context: void removeStickyBroadcast(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Context: void sendBroadcast(android.content.Intent)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.Context: void sendStickyBroadcast(android.content.Intent)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.Context: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.Context: void startActivity(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Context: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Android Manager retrieved/accessed")
<android.content.ContextWrapper: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.ContextWrapper: boolean stopService(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.ContextWrapper: java.io.File getDir(java.lang.String,int)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.content.ContextWrapper: java.io.File getFileStreamPath(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.content.ContextWrapper: java.io.File getFilesDir()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.ContextWrapper: java.lang.ClassLoader getClassLoader()> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.ContextWrapper: void startActivity(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.DialogInterface$OnCancelListener: void onCancel(android.content.DialogInterface)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.content.DialogInterface$OnDismissListener: void onDismiss(android.content.DialogInterface)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.content.Intent: android.content.ComponentName getComponent()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: android.content.Intent addCategory(java.lang.String)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent addFlags(int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent makeMainActivity(android.content.ComponentName)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent makeRestartActivityTask(android.content.ComponentName)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int[])> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long[])> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtras(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putParcelableArrayListExtra(java.lang.String,java.util.ArrayList)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent setAction(java.lang.String)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent setData(android.net.Uri)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent setFlags(int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent setPackage(java.lang.String)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent setType(java.lang.String)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.net.Uri getData()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: android.os.Bundle getExtras()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: boolean hasExtra(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: int getFlags()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: int getIntExtra(java.lang.String,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: int[] getIntArrayExtra(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: java.lang.CharSequence getCharSequenceExtra(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: java.lang.String getAction()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: java.lang.String getDataString()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: java.lang.String getPackage()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: java.lang.String getScheme()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: java.lang.String getStringExtra(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: java.lang.String getType()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: java.lang.String toString()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: java.lang.String[] getStringArrayExtra(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: java.util.Set getCategories()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: long getLongExtra(java.lang.String,long)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: long[] getLongArrayExtra(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: void <init>()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<android.content.Intent: void <init>(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: void <init>(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: void <init>(java.lang.String,android.net.Uri)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: void <init>(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<android.content.Intent: void removeExtra(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.IntentFilter: int countActions()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.IntentFilter: int match(java.lang.String,java.lang.String,java.lang.String,android.net.Uri,java.util.Set,java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.IntentFilter: java.lang.String getAction(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.IntentFilter: void <init>()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.IntentFilter: void <init>(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.IntentFilter: void addAction(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.IntentFilter: void addCategory(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.IntentFilter: void addDataScheme(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.IntentFilter: void addDataType(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.IntentFilter: void setPriority(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Loader: void onReset()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.content.SharedPreferences$OnSharedPreferenceChangeListener: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("is data structure")
<android.content.SharedPreferences: boolean contains(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("is data structure")
<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("is data structure")
<android.content.SharedPreferences: float getFloat(java.lang.String,float)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("is data structure")
<android.content.SharedPreferences: int getInt(java.lang.String,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("is data structure")
<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("is data structure")
<android.content.SharedPreferences: java.util.Map getAll()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("is data structure")
<android.content.SharedPreferences: java.util.Set getStringSet(java.lang.String,java.util.Set)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("is data structure")
<android.content.SharedPreferences: long getLong(java.lang.String,long)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("is data structure")
<android.content.SharedPreferences: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.content.SharedPreferences: void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action when removing callback")
<android.content.UriMatcher: int match(android.net.Uri)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("URL matching utility")
<android.content.UriMatcher: void <init>(int)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("URL matching utility")
<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("URL matching utility")
<android.content.pm.PackageItemInfo: android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager,java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("information about package")
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("information about package")
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("information about package")
<android.content.pm.PackageItemInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("information about package")
<android.content.pm.PackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.content.pm.PackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.content.pm.PackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationIcon(java.lang.String)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.content.pm.PackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.content.pm.PackageManager: java.util.List getInstalledApplications(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.content.pm.PackageManager: java.util.List getInstalledPackages(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.pm.PackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],android.content.Intent,int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.pm.PackageManager: void setComponentEnabledSetting(android.content.ComponentName,int,int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openFd(java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.res.AssetManager: java.lang.String[] list(java.lang.String)> - @DSSpec(DSCat.SECURITY) - @DSComment("Low level access to application asset")
<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.Resources: android.content.res.AssetFileDescriptor openRawResourceFd(int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.res.Resources: java.io.InputStream openRawResource(int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: boolean getBoolean(int,boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: boolean hasValue(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: float getDimension(int,float)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: float getFloat(int,float)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: int getColor(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: int getDimensionPixelSize(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: int getInt(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: int getInteger(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: int getLayoutDimension(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: int getResourceId(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: int length()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: java.lang.CharSequence getText(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: java.lang.String getString(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: void recycle()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.database.ContentObserver: void onChange(boolean)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.database.Cursor: boolean move(int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.database.Cursor: boolean moveToFirst()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.database.Cursor: boolean moveToLast()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.database.Cursor: boolean moveToNext()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.database.Cursor: boolean moveToPosition(int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.database.Cursor: void registerContentObserver(android.database.ContentObserver)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.database.Cursor: void registerDataSetObserver(android.database.DataSetObserver)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.database.DataSetObserver: void onChanged()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.database.DataSetObserver: void onInvalidated()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.database.Observable: void registerObserver(java.lang.Object)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)> - @DSSpec(DSCat.DATABASE) - @DSComment("returned DB object")
<android.database.sqlite.SQLiteDatabase: boolean isOpen()> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: void beginTransaction()> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: void close()> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: void endTransaction()> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()> - @DSSpec(DSCat.DATABASE) - @DSComment("returned DB object")
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()> - @DSSpec(DSCat.DATABASE) - @DSComment("returned DB object")
<android.database.sqlite.SQLiteProgram: void bindLong(int,long)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteQueryBuilder: void <init>()> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Build SQL queries")
<android.database.sqlite.SQLiteQueryBuilder: void appendWhere(java.lang.CharSequence)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Build SQL queries")
<android.database.sqlite.SQLiteQueryBuilder: void appendWhereEscapeString(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Build SQL queries")
<android.database.sqlite.SQLiteQueryBuilder: void setProjectionMap(java.util.Map)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Build SQL queries")
<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Build SQL queries")
<android.graphics.AvoidXfermode: void <init>(int,int,android.graphics.AvoidXfermode$Mode)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap$Config)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: boolean isMutable()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: boolean isRecycled()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: int getHeight()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: int getWidth()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: void getPixels(int[],int,int,int,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: void recycle()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: void setDensity(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory$Options)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.BitmapShader: void <init>(android.graphics.Bitmap,android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: boolean clipRect(int,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: int getHeight()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: int getWidth()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: int save()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: int save(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void <init>(android.graphics.Bitmap)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void concat(android.graphics.Matrix)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawARGB(int,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawColor(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawPaint(android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawText(char[],int,int,float,float,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawText(java.lang.String,float,float,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void restore()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void restoreToCount(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void rotate(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void rotate(float,float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void scale(float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void scale(float,float,float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void setDrawFilter(android.graphics.DrawFilter)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void translate(float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Color: int HSVToColor(float[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Color: int alpha(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Color: int argb(int,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Color: int blue(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Color: int green(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Color: int parseColor(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Color: int red(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Color: int rgb(int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Color: void colorToHSV(int,float[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.ColorMatrix: float[] getArray()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.ColorMatrix: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.ColorMatrix: void setRGB2YUV()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.ColorMatrixColorFilter: void <init>(float[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.ComposeShader: void <init>(android.graphics.Shader,android.graphics.Shader,android.graphics.PorterDuff$Mode)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.LinearGradient: void <init>(float,float,float,float,int[],float[],android.graphics.Shader$TileMode)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Matrix: boolean postScale(float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Matrix: boolean postTranslate(float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Matrix: boolean preRotate(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Matrix: boolean preTranslate(float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Matrix: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Matrix: void reset()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Matrix: void setRotate(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Movie: android.graphics.Movie decodeStream(java.io.InputStream)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Movie: boolean setTime(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Movie: int duration()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Movie: void draw(android.graphics.Canvas,float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: android.graphics.Paint$FontMetrics getFontMetrics()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: android.graphics.Typeface getTypeface()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: android.graphics.Typeface setTypeface(android.graphics.Typeface)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: float ascent()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: float descent()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: float getStrokeWidth()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: float getTextSize()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: float measureText(java.lang.CharSequence,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: float measureText(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: int getAlpha()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: int getColor()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: int getTextWidths(java.lang.String,float[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void <init>(android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void getTextBounds(java.lang.String,int,int,android.graphics.Rect)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void setARGB(int,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void setAlpha(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void setAntiAlias(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void setColor(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void setDither(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void setFakeBoldText(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void setFilterBitmap(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void setShadowLayer(float,float,float,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void setStrokeWidth(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void setTextAlign(android.graphics.Paint$Align)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void setTextSize(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void setUnderlineText(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.PaintFlagsDrawFilter: void <init>(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Path: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Path: void close()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Path: void lineTo(float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Path: void moveTo(float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Path: void reset()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.PixelFormat: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.PixelFormat: void getPixelFormatInfo(int,android.graphics.PixelFormat)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.PixelXorXfermode: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Point: boolean equals(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Point: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Point: void <init>(android.graphics.Point)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Point: void <init>(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.PointF: void <init>(float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.PointF: void set(float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.PorterDuffColorFilter: void <init>(int,android.graphics.PorterDuff$Mode)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.PorterDuffXfermode: void <init>(android.graphics.PorterDuff$Mode)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.RadialGradient: void <init>(float,float,float,int,int,android.graphics.Shader$TileMode)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.RadialGradient: void <init>(float,float,float,int[],float[],android.graphics.Shader$TileMode)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Rect: boolean contains(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Rect: int height()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Rect: int width()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Rect: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Rect: void <init>(int,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Rect: void inset(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Rect: void offset(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Rect: void set(android.graphics.Rect)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Rect: void set(int,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Rect: void setEmpty()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Rect: void union(int,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.RectF: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.RectF: void <init>(float,float,float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.RectF: void offset(float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.RectF: void set(float,float,float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.RectF: void union(android.graphics.RectF)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.SweepGradient: void <init>(float,float,int[],float[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Typeface: android.graphics.Typeface createFromAsset(android.content.res.AssetManager,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Typeface: android.graphics.Typeface defaultFromStyle(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Animatable: void start()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Animatable: void stop()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.AnimationDrawable: android.graphics.drawable.Drawable getFrame(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.AnimationDrawable: boolean isOneShot()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.AnimationDrawable: int getDuration(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.AnimationDrawable: int getNumberOfFrames()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.AnimationDrawable: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.AnimationDrawable: void addFrame(android.graphics.drawable.Drawable,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.AnimationDrawable: void setOneShot(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.Bitmap)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.BitmapDrawable: void setGravity(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.ClipDrawable: void <init>(android.graphics.drawable.Drawable,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable$ConstantState: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromPath(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: boolean isStateful()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: boolean setLevel(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: boolean setState(int[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: int getChangingConfigurations()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: int getIntrinsicHeight()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: int getIntrinsicWidth()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: int getMinimumHeight()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: int getMinimumWidth()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: int getOpacity()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: int[] getState()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: void clearColorFilter()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: void invalidateSelf()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: void jumpToCurrentState()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: void scheduleSelf(java.lang.Runnable,long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: void setAlpha(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.graphics.drawable.Drawable: void setChangingConfigurations(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: void setColorFilter(int,android.graphics.PorterDuff$Mode)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: void setDither(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: void setFilterBitmap(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: void unscheduleSelf(java.lang.Runnable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.GradientDrawable: void <init>(android.graphics.drawable.GradientDrawable$Orientation,int[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.GradientDrawable: void draw(android.graphics.Canvas)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.GradientDrawable: void setDither(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable findDrawableByLayerId(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable getDrawable(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.LayerDrawable: int getId(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.LayerDrawable: int getNumberOfLayers()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.LayerDrawable: void <init>(android.graphics.drawable.Drawable[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.LayerDrawable: void setId(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.ShapeDrawable: android.graphics.Paint getPaint()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.shapes.Shape getShape()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.ShapeDrawable: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.ShapeDrawable: void <init>(android.graphics.drawable.shapes.Shape)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.ShapeDrawable: void draw(android.graphics.Canvas)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.ShapeDrawable: void setAlpha(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.ShapeDrawable: void setIntrinsicHeight(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.ShapeDrawable: void setIntrinsicWidth(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.TransitionDrawable: void <init>(android.graphics.drawable.Drawable[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.TransitionDrawable: void resetTransition()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.TransitionDrawable: void setCrossFadeEnabled(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.TransitionDrawable: void startTransition(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.shapes.RectShape: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.shapes.RoundRectShape: void <init>(float[],android.graphics.RectF,float[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.shapes.Shape: float getHeight()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.shapes.Shape: float getWidth()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.shapes.Shape: void resize(float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.hardware.Camera$Parameters: boolean isZoomSupported()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera$Parameters: int getMaxZoom()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera$Parameters: int getZoom()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera$Parameters: java.lang.String getFocusMode()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera$Parameters: java.lang.String getSceneMode()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera$Parameters: java.util.List getSupportedColorEffects()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera$Parameters: java.util.List getSupportedFocusModes()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFormats()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera$Parameters: java.util.List getSupportedSceneModes()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera$Parameters: java.util.List getSupportedWhiteBalance()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera$Parameters: java.util.List getZoomRatios()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera$Parameters: void setColorEffect(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera$Parameters: void setFocusMode(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera$Parameters: void setPreviewFormat(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera$Parameters: void setRecordingHint(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera$Parameters: void setSceneMode(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera$Parameters: void setWhiteBalance(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera$Parameters: void setZoom(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.hardware.Camera: android.hardware.Camera open()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.hardware.Camera: android.hardware.Camera open(int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()> - @DSSpec(DSCat.DEVICE) - @DSComment("Camera control")
<android.hardware.Camera: int getNumberOfCameras()> - @DSSpec(DSCat.DEVICE) - @DSComment("Camera control")
<android.hardware.Camera: void addCallbackBuffer(byte[])> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)> - @DSSpec(DSCat.DEVICE) - @DSComment("Camera control")
<android.hardware.Camera: void lock()> - @DSSpec(DSCat.DEVICE) - @DSComment("Camera control")
<android.hardware.Camera: void release()> - @DSSpec(DSCat.DEVICE) - @DSComment("Camera control")
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)> - @DSSpec(DSCat.DEVICE) - @DSComment("Camera control")
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.hardware.Camera: void setPreviewCallbackWithBuffer(android.hardware.Camera$PreviewCallback)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)> - @DSSpec(DSCat.DEVICE) - @DSComment("Camera control")
<android.hardware.Camera: void startPreview()> - @DSSpec(DSCat.DEVICE) - @DSComment("Camera control")
<android.hardware.Camera: void stopPreview()> - @DSSpec(DSCat.DEVICE) - @DSComment("Camera control")
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)> - @DSSpec(DSCat.DEVICE) - @DSComment("Camera control")
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)> - @DSSpec(DSCat.DEVICE) - @DSComment("Camera control")
<android.hardware.Camera: void unlock()> - @DSSpec(DSCat.DEVICE) - @DSComment("Camera control")
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.hardware.SensorManager: boolean getRotationMatrix(float[],float[],float[],float[])> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.hardware.SensorManager: boolean remapCoordinateSystem(float[],int,int,float[])> - @DSSpec(DSCat.DEVICE) - @DSComment("Sensor accessing")
<android.hardware.SensorManager: float[] getOrientation(float[],float[])> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.hardware.SensorManager: java.util.List getSensorList(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action when removing callback")
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action when removing callback")
<android.hardware.usb.UsbManager: android.hardware.usb.UsbAccessory[] getAccessoryList()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.hardware.usb.UsbManager: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputConnection getCurrentInputConnection()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.inputmethodservice.InputMethodService: void onCreate()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.inputmethodservice.InputMethodService: void onDestroy()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.inputmethodservice.InputMethodService: void onFinishInput()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.inputmethodservice.InputMethodService: void onStartInput(android.view.inputmethod.EditorInfo,boolean)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.inputmethodservice.InputMethodService: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.inputmethodservice.InputMethodService: void onUpdateSelection(int,int,int,int,int,int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.inputmethodservice.KeyboardView$OnKeyboardActionListener: void onKey(int,int[])> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.inputmethodservice.KeyboardView: android.inputmethodservice.Keyboard getKeyboard()> - @DSSafe(DSCat.GUI) - @DSComment("Only setting keyboard for this app")
<android.inputmethodservice.KeyboardView: android.inputmethodservice.KeyboardView$OnKeyboardActionListener getOnKeyboardActionListener()> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.inputmethodservice.KeyboardView: boolean onLongPress(android.inputmethodservice.Keyboard$Key)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.inputmethodservice.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.inputmethodservice.KeyboardView: boolean setShifted(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Only setting keyboard for this app")
<android.inputmethodservice.KeyboardView: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("Only setting keyboard for this app")
<android.inputmethodservice.KeyboardView: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.GUI) - @DSComment("Only setting keyboard for this app")
<android.inputmethodservice.KeyboardView: void closing()> - @DSSafe(DSCat.GUI) - @DSComment("Only setting keyboard for this app")
<android.inputmethodservice.KeyboardView: void invalidateAllKeys()> - @DSSafe(DSCat.GUI) - @DSComment("Only setting keyboard for this app")
<android.inputmethodservice.KeyboardView: void setKeyboard(android.inputmethodservice.Keyboard)> - @DSSafe(DSCat.GUI) - @DSComment("Only setting keyboard for this app")
<android.inputmethodservice.KeyboardView: void setOnKeyboardActionListener(android.inputmethodservice.KeyboardView$OnKeyboardActionListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.inputmethodservice.KeyboardView: void setPreviewEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Only setting keyboard for this app")
<android.location.Address: double getLatitude()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Address: double getLongitude()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Address: int getMaxAddressLineIndex()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Address: java.lang.String getAddressLine(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Address: java.lang.String getAdminArea()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Address: java.lang.String getCountryCode()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Address: java.lang.String getCountryName()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Address: java.lang.String getFeatureName()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Address: java.lang.String getLocality()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Address: java.lang.String getPostalCode()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Address: java.lang.String getSubLocality()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Address: java.util.Locale getLocale()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Address: void <init>(java.util.Locale)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Address: void setAddressLine(int,java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Address: void setAdminArea(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Address: void setCountryCode(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Address: void setPostalCode(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Criteria: void <init>()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Used for thresholding")
<android.location.Criteria: void setAccuracy(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Used for thresholding")
<android.location.Criteria: void setAltitudeRequired(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Used for thresholding")
<android.location.Criteria: void setBearingRequired(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Used for thresholding")
<android.location.Criteria: void setCostAllowed(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Used for thresholding")
<android.location.Criteria: void setPowerRequirement(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Used for thresholding")
<android.location.Criteria: void setSpeedRequired(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Used for thresholding")
<android.location.Geocoder: boolean isPresent()> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility function")
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility function")
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility function")
<android.location.Geocoder: void <init>(android.content.Context)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility function")
<android.location.Geocoder: void <init>(android.content.Context,java.util.Locale)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility function")
<android.location.GpsStatus: int getTimeToFirstFix()> - @DSSpec(DSCat.LOCATION) - @DSComment("GPS status inquiry")
<android.location.Location: boolean hasAccuracy()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: boolean hasAltitude()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: double getAltitude()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: double getLatitude()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: double getLongitude()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: float distanceTo(android.location.Location)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: float getAccuracy()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: float getBearing()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: float getSpeed()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: java.lang.String getProvider()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: long getTime()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: void <init>(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: void distanceBetween(double,double,double,double,float[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: void setLatitude(double)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: void setLongitude(double)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.LocationListener: void onLocationChanged(android.location.Location)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> - @DSSpec(DSCat.LOCATION) - @DSComment("Location/GPS access")
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)> - @DSSpec(DSCat.LOCATION) - @DSComment("Location manager")
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.location.LocationManager: java.util.List getAllProviders()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> - @DSSpec(DSCat.LOCATION) - @DSComment("Location manager")
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action when removing callback")
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.media.AudioManager: boolean isBluetoothA2dpOn()> - @DSSpec(DSCat.DEVICE) - @DSComment("Controlling audio")
<android.media.AudioManager: boolean isBluetoothScoOn()> - @DSSpec(DSCat.DEVICE) - @DSComment("Controlling audio")
<android.media.AudioManager: boolean isSpeakerphoneOn()> - @DSSpec(DSCat.DEVICE) - @DSComment("Controlling audio")
<android.media.AudioManager: boolean isWiredHeadsetOn()> - @DSSpec(DSCat.DEVICE) - @DSComment("Controlling audio")
<android.media.AudioManager: int getMode()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.media.AudioManager: int getRingerMode()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.media.AudioManager: int getStreamMaxVolume(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.media.AudioManager: int getStreamVolume(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.media.AudioManager: int getVibrateSetting(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.media.AudioManager: void setBluetoothScoOn(boolean)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.media.AudioManager: void setMicrophoneMute(boolean)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.media.AudioManager: void setMode(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.media.AudioManager: void setRingerMode(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.media.AudioManager: void setSpeakerphoneOn(boolean)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.media.AudioManager: void setStreamMute(int,boolean)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.media.AudioManager: void setStreamSolo(int,boolean)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.media.AudioManager: void setStreamVolume(int,int,int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.media.AudioManager: void setVibrateSetting(int,int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.media.MediaRecorder: void <init>()> - @DSSpec(DSCat.MEDIA_RECORDER) - @DSComment("Media recorder function")
<android.media.MediaRecorder: void prepare()> - @DSSpec(DSCat.MEDIA_RECORDER) - @DSComment("Media recorder function")
<android.media.MediaRecorder: void release()> - @DSSpec(DSCat.MEDIA_RECORDER) - @DSComment("Media recorder function")
<android.media.MediaRecorder: void reset()> - @DSSpec(DSCat.MEDIA_RECORDER) - @DSComment("Media recorder function")
<android.media.MediaRecorder: void setAudioEncoder(int)> - @DSSpec(DSCat.MEDIA_RECORDER) - @DSComment("Media recorder function")
<android.media.MediaRecorder: void setAudioSource(int)> - @DSSpec(DSCat.MEDIA_RECORDER) - @DSComment("Media recorder function")
<android.media.MediaRecorder: void setCamera(android.hardware.Camera)> - @DSSpec(DSCat.MEDIA_RECORDER) - @DSComment("Media recorder function")
<android.media.MediaRecorder: void setOutputFile(java.lang.String)> - @DSSpec(DSCat.MEDIA_RECORDER) - @DSComment("Media recorder function")
<android.media.MediaRecorder: void setOutputFormat(int)> - @DSSpec(DSCat.MEDIA_RECORDER) - @DSComment("Media recorder function")
<android.media.MediaRecorder: void setPreviewDisplay(android.view.Surface)> - @DSSpec(DSCat.MEDIA_RECORDER) - @DSComment("Media recorder function")
<android.media.MediaRecorder: void setProfile(android.media.CamcorderProfile)> - @DSSpec(DSCat.MEDIA_RECORDER) - @DSComment("Media recorder function")
<android.media.MediaRecorder: void setVideoEncoder(int)> - @DSSpec(DSCat.MEDIA_RECORDER) - @DSComment("Media recorder function")
<android.media.MediaRecorder: void setVideoSource(int)> - @DSSpec(DSCat.MEDIA_RECORDER) - @DSComment("Media recorder function")
<android.media.MediaRecorder: void start()> - @DSSpec(DSCat.MEDIA_RECORDER) - @DSComment("Media recorder function")
<android.media.MediaRecorder: void stop()> - @DSSpec(DSCat.MEDIA_RECORDER) - @DSComment("Media recorder function")
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.media.SoundPool: void setOnLoadCompleteListener(android.media.SoundPool$OnLoadCompleteListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Only getActiveNetworkInfo() is important")
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Only getActiveNetworkInfo() is important")
<android.net.NetworkInfo: boolean isAvailable()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Only getActiveNetworkInfo() is important")
<android.net.NetworkInfo: boolean isConnected()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Only getActiveNetworkInfo() is important")
<android.net.NetworkInfo: boolean isConnectedOrConnecting()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Only getActiveNetworkInfo() is important")
<android.net.NetworkInfo: int getType()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Only getActiveNetworkInfo() is important")
<android.net.TrafficStats: int getThreadStatsTag()> - @DSSpec(DSCat.NETWORK_STATS) - @DSComment("Traffic statistics")
<android.net.TrafficStats: long getTotalRxBytes()> - @DSSpec(DSCat.NETWORK_STATS) - @DSComment("Traffic statistics")
<android.net.TrafficStats: long getTotalTxBytes()> - @DSSpec(DSCat.NETWORK_STATS) - @DSComment("Traffic statistics")
<android.net.TrafficStats: long getUidRxBytes(int)> - @DSSpec(DSCat.NETWORK_STATS) - @DSComment("Traffic statistics")
<android.net.TrafficStats: long getUidTxBytes(int)> - @DSSpec(DSCat.NETWORK_STATS) - @DSComment("Traffic statistics")
<android.net.TrafficStats: void clearThreadStatsTag()> - @DSSpec(DSCat.NETWORK_STATS) - @DSComment("Traffic statistics")
<android.net.TrafficStats: void incrementOperationCount(int)> - @DSSpec(DSCat.NETWORK_STATS) - @DSComment("Traffic statistics")
<android.net.TrafficStats: void incrementOperationCount(int,int)> - @DSSpec(DSCat.NETWORK_STATS) - @DSComment("Traffic statistics")
<android.net.TrafficStats: void setThreadStatsTag(int)> - @DSSpec(DSCat.NETWORK_STATS) - @DSComment("Traffic statistics")
<android.net.TrafficStats: void tagSocket(java.net.Socket)> - @DSSpec(DSCat.NETWORK_STATS) - @DSComment("Traffic statistics")
<android.net.TrafficStats: void untagSocket(java.net.Socket)> - @DSSpec(DSCat.NETWORK_STATS) - @DSComment("Traffic statistics")
<android.net.Uri$Builder: android.net.Uri build()> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("URI exchange is more important")
<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("URI exchange is more important")
<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("URI exchange is more important")
<android.net.Uri$Builder: android.net.Uri$Builder fragment(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("URI exchange is more important")
<android.net.Uri: android.net.Uri fromFile(java.io.File)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.Uri: android.net.Uri parse(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.Uri: android.net.Uri$Builder buildUpon()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.Uri: int getPort()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.Uri: java.lang.String decode(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.Uri: java.lang.String encode(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.Uri: java.lang.String getFragment()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.Uri: java.lang.String getHost()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.Uri: java.lang.String getLastPathSegment()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.Uri: java.lang.String getPath()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.Uri: java.lang.String getScheme()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.Uri: java.lang.String getUserInfo()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.Uri: java.lang.String toString()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.Uri: java.util.List getPathSegments()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.sip.SipAudioCall$Listener: void <init>()> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.net.sip.SipAudioCall: android.net.sip.SipProfile getPeerProfile()> - @DSSpec(DSCat.PHONE_CALL) - @DSComment("Sip phone call")
<android.net.sip.SipAudioCall: boolean isInCall()> - @DSSpec(DSCat.PHONE_CALL) - @DSComment("Sip phone call")
<android.net.sip.SipAudioCall: boolean isMuted()> - @DSSpec(DSCat.PHONE_CALL) - @DSComment("Sip phone call")
<android.net.sip.SipAudioCall: void answerCall(int)> - @DSSpec(DSCat.PHONE_CALL) - @DSComment("Sip phone call")
<android.net.sip.SipAudioCall: void close()> - @DSSpec(DSCat.PHONE_CALL) - @DSComment("Sip phone call")
<android.net.sip.SipAudioCall: void endCall()> - @DSSpec(DSCat.PHONE_CALL) - @DSComment("Sip phone call")
<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)> - @DSSpec(DSCat.PHONE_CALL) - @DSComment("Sip phone call")
<android.net.sip.SipAudioCall: void startAudio()> - @DSSpec(DSCat.PHONE_CALL) - @DSComment("Sip phone call")
<android.net.sip.SipAudioCall: void toggleMute()> - @DSSpec(DSCat.PHONE_CALL) - @DSComment("Sip phone call")
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Sip Manager")
<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.net.sip.SipManager: android.net.sip.SipManager newInstance(android.content.Context)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Sip Manager")
<android.net.sip.SipManager: boolean isRegistered(java.lang.String)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Sip Manager")
<android.net.sip.SipManager: void close(java.lang.String)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Sip Manager")
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile build()> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility to build profile")
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setOutboundProxy(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility to build profile")
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setPassword(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility to build profile")
<android.net.sip.SipProfile$Builder: void <init>(java.lang.String,java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility to build profile")
<android.net.sip.SipProfile: java.lang.String getDisplayName()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only, except writeToParcel")
<android.net.sip.SipProfile: java.lang.String getSipDomain()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only, except writeToParcel")
<android.net.sip.SipProfile: java.lang.String getUriString()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only, except writeToParcel")
<android.net.sip.SipProfile: java.lang.String getUserName()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only, except writeToParcel")
<android.net.wifi.WifiManager$WifiLock: boolean isHeld()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager$WifiLock: void acquire()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager$WifiLock: void release()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$MulticastLock createMulticastLock(java.lang.String)> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$WifiLock createWifiLock(int,java.lang.String)> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$WifiLock createWifiLock(java.lang.String)> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager: boolean disableNetwork(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.net.wifi.WifiManager: boolean disconnect()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.net.wifi.WifiManager: boolean isWifiEnabled()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager: boolean pingSupplicant()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager: boolean reassociate()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager: boolean reconnect()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager: boolean removeNetwork(int)> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager: boolean saveConfiguration()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.net.wifi.WifiManager: boolean startScan()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager: int getWifiState()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.net.wifi.WifiManager: int updateNetwork(android.net.wifi.WifiConfiguration)> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.net.wifi.WifiManager: java.util.List getScanResults()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.net.wifi.WpsInfo: void <init>()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.p2p.WifiP2pConfig: void <init>()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.p2p.WifiP2pDeviceList: java.util.Collection getDeviceList()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.net.wifi.p2p.WifiP2pManager: void cancelConnect(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.p2p.WifiP2pManager: void connect(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager$ActionListener)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.net.wifi.p2p.WifiP2pManager: void discoverPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.p2p.WifiP2pManager: void requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.net.wifi.p2p.WifiP2pManager: void requestPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$PeerListListener)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.nfc.NdefMessage: android.nfc.NdefRecord[] getRecords()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure, except writeToParcel")
<android.nfc.NdefMessage: void <init>(android.nfc.NdefRecord[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure, except writeToParcel")
<android.nfc.NdefRecord: byte[] getPayload()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure")
<android.nfc.NdefRecord: byte[] getType()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure")
<android.nfc.NdefRecord: short getTnf()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure")
<android.nfc.NdefRecord: void <init>(short,byte[],byte[],byte[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure")
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter(android.content.Context)> - @DSSpec(DSCat.NFC) - @DSComment("NFC adapter manipulation")
<android.nfc.NfcAdapter: void disableForegroundDispatch(android.app.Activity)> - @DSSpec(DSCat.NFC) - @DSComment("NFC adapter manipulation")
<android.nfc.NfcAdapter: void enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])> - @DSSpec(DSCat.NFC) - @DSComment("NFC adapter manipulation")
<android.nfc.Tag: java.lang.String[] getTechList()> - @DSSpec(DSCat.NFC) - @DSComment("NFC Tag")
<android.nfc.tech.MifareClassic: android.nfc.tech.MifareClassic get(android.nfc.Tag)> - @DSSpec(DSCat.NFC) - @DSComment("NFC technology implementation")
<android.nfc.tech.MifareClassic: boolean authenticateSectorWithKeyA(int,byte[])> - @DSSpec(DSCat.NFC) - @DSComment("NFC technology implementation")
<android.nfc.tech.MifareClassic: byte[] readBlock(int)> - @DSSpec(DSCat.NFC) - @DSComment("NFC technology implementation")
<android.nfc.tech.MifareClassic: int getBlockCountInSector(int)> - @DSSpec(DSCat.NFC) - @DSComment("NFC technology implementation")
<android.nfc.tech.MifareClassic: int getSectorCount()> - @DSSpec(DSCat.NFC) - @DSComment("NFC technology implementation")
<android.nfc.tech.MifareClassic: void connect()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.nfc.tech.Ndef: android.nfc.tech.Ndef get(android.nfc.Tag)> - @DSSpec(DSCat.NFC) - @DSComment("NFC technology implementation")
<android.nfc.tech.Ndef: void close()> - @DSSpec(DSCat.NFC) - @DSComment("NFC technology implementation")
<android.nfc.tech.Ndef: void connect()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.nfc.tech.Ndef: void writeNdefMessage(android.nfc.NdefMessage)> - @DSSpec(DSCat.NFC) - @DSComment("NFC technology implementation")
<android.opengl.ETC1: boolean isValid(java.nio.Buffer)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL ETC1")
<android.opengl.ETC1: int getHeight(java.nio.Buffer)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL ETC1")
<android.opengl.ETC1: int getWidth(java.nio.Buffer)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL ETC1")
<android.opengl.GLES20: boolean glIsTexture(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: int glCheckFramebufferStatus(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: int glCreateProgram()> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: int glCreateShader(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: int glGetAttribLocation(int,java.lang.String)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: int glGetError()> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: java.lang.String glGetProgramInfoLog(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: java.lang.String glGetShaderInfoLog(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: java.lang.String glGetString(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glActiveTexture(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glAttachShader(int,int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glBindAttribLocation(int,int,java.lang.String)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glBindBuffer(int,int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glBindFramebuffer(int,int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glBindTexture(int,int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glBlendFunc(int,int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glBufferData(int,int,java.nio.Buffer,int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glClear(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glClearColor(float,float,float,float)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glCompileShader(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glDeleteBuffers(int,int[],int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glDeleteFramebuffers(int,int[],int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glDeleteProgram(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glDeleteShader(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glDeleteTextures(int,int[],int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glDisable(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glDisableVertexAttribArray(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glDrawArrays(int,int,int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glDrawElements(int,int,int,int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glEnable(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glEnableVertexAttribArray(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glFinish()> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glFlush()> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glFramebufferTexture2D(int,int,int,int,int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glGenBuffers(int,int[],int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glGenFramebuffers(int,int[],int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glGenTextures(int,int[],int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glGetActiveAttrib(int,int,int,int[],int,int[],int,int[],int,byte[],int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glGetActiveUniform(int,int,int,int[],int,int[],int,int[],int,byte[],int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glGetFloatv(int,float[],int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glGetIntegerv(int,int[],int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glGetProgramiv(int,int,int[],int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glGetShaderiv(int,int,int[],int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glLineWidth(float)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glLinkProgram(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glPixelStorei(int,int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glScissor(int,int,int,int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glShaderSource(int,java.lang.String)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glTexParameterf(int,int,float)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glUniform1f(int,float)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glUniform1i(int,int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glUniform2f(int,float,float)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glUniform3f(int,float,float,float)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glUniform4f(int,float,float,float,float)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glUniformMatrix4fv(int,int,boolean,float[],int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glUseProgram(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glVertexAttribPointer(int,int,int,boolean,int,int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLES20: void glViewport(int,int,int,int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<android.opengl.GLSurfaceView: void <init>(android.content.Context)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Viewer")
<android.opengl.GLSurfaceView: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Viewer")
<android.opengl.GLSurfaceView: void onPause()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.opengl.GLSurfaceView: void onResume()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.opengl.GLSurfaceView: void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Viewer")
<android.opengl.GLSurfaceView: void setEGLContextClientVersion(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Viewer")
<android.opengl.GLSurfaceView: void setRenderer(android.opengl.GLSurfaceView$Renderer)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Viewer")
<android.opengl.GLU: java.lang.String gluErrorString(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Utils")
<android.opengl.GLU: void gluPerspective(javax.microedition.khronos.opengles.GL10,float,float,float,float)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Utils")
<android.opengl.GLUtils: void texImage2D(int,int,android.graphics.Bitmap,int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Utils")
<android.opengl.GLUtils: void texSubImage2D(int,int,int,int,android.graphics.Bitmap)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Utils")
<android.opengl.GLUtils: void texSubImage2D(int,int,int,int,android.graphics.Bitmap,int,int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Utils")
<android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Math")
<android.opengl.Matrix: void orthoM(float[],int,float,float,float,float,float,float)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Math")
<android.opengl.Matrix: void scaleM(float[],int,float,float,float)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Math")
<android.opengl.Matrix: void setIdentityM(float[],int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Math")
<android.opengl.Matrix: void setRotateM(float[],int,float,float,float,float)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Math")
<android.opengl.Matrix: void translateM(float[],int,float,float,float)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Math")
<android.os.AsyncTask: void onCancelled()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.os.AsyncTask: void onPostExecute(java.lang.Object)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.os.AsyncTask: void onPreExecute()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.os.AsyncTask: void onProgressUpdate(java.lang.Object[])> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.os.Binder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: boolean containsKey(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: boolean getBoolean(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: boolean isEmpty()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: byte[] getByteArray(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: double getDouble(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: float getFloat(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: int getInt(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: int getInt(java.lang.String,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: int size()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: int[] getIntArray(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: java.lang.Object get(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: java.lang.String getString(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: java.lang.String getString(java.lang.String,java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: java.lang.String[] getStringArray(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: java.util.Set keySet()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: long getLong(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: long getLong(java.lang.String,long)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: long[] getLongArray(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void <init>()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void putBoolean(java.lang.String,boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void putByteArray(java.lang.String,byte[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void putDouble(java.lang.String,double)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void putFloat(java.lang.String,float)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void putInt(java.lang.String,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void putIntArray(java.lang.String,int[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void putLong(java.lang.String,long)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void putShort(java.lang.String,short)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void putString(java.lang.String,java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<android.os.Bundle: void writeToParcel(android.os.Parcel,int)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.os.ConditionVariable: void open()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.os.CountDownTimer: android.os.CountDownTimer start()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General OS service, check callback")
<android.os.CountDownTimer: void <init>(long,long)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General OS service, check callback")
<android.os.CountDownTimer: void cancel()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General OS service, check callback")
<android.os.Environment: java.io.File getDataDirectory()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.os.Environment: java.io.File getExternalStorageDirectory()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.os.FileObserver: void <init>(java.lang.String,int)> - @DSSpec(DSCat.OS_LOW_LEVEL) - @DSComment("Low level monitoring file state")
<android.os.FileObserver: void startWatching()> - @DSSpec(DSCat.OS_LOW_LEVEL) - @DSComment("Low level monitoring file state")
<android.os.Handler: boolean sendEmptyMessage(int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.os.Handler: boolean sendEmptyMessageAtTime(int,long)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.os.Handler: boolean sendMessage(android.os.Message)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.os.IBinder: android.os.IInterface queryLocalInterface(java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.os.Message: android.os.Bundle getData()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Message")
<android.os.Message: android.os.Message obtain()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Message")
<android.os.Message: android.os.Message obtain(android.os.Handler,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Message")
<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Message")
<android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Message")
<android.os.Message: void <init>()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Message")
<android.os.Message: void sendToTarget()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.os.Message: void setData(android.os.Bundle)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Message")
<android.os.Messenger: android.os.IBinder getBinder()> - @DSSpec(DSCat.IPC) - @DSComment("Binder is vague, need modeling")
<android.os.Messenger: void send(android.os.Message)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.os.Parcel: android.os.Bundle readBundle()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: android.os.Parcel obtain()> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<android.os.Parcel: byte readByte()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: byte[] createByteArray()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: double readDouble()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: int readInt()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: int[] createIntArray()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: java.lang.Object readValue(java.lang.ClassLoader)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<android.os.Parcel: java.lang.String readString()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: java.lang.String[] createStringArray()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<android.os.Parcel: long readLong()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void enforceInterface(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void readException()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<android.os.Parcel: void recycle()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void writeArray(java.lang.Object[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void writeBundle(android.os.Bundle)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void writeByte(byte)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void writeByteArray(byte[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void writeDouble(double)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void writeInt(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void writeIntArray(int[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void writeInterfaceToken(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void writeList(java.util.List)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void writeLong(long)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void writeMap(java.util.Map)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void writeNoException()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.os.Parcel: void writeString(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void writeStringArray(java.lang.String[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.os.Parcel: void writeTypedList(java.util.List)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void writeValue(java.lang.Object)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.os.PowerManager$WakeLock: boolean isHeld()> - @DSSpec(DSCat.DEVICE) - @DSComment("Power management")
<android.os.PowerManager$WakeLock: void acquire()> - @DSSpec(DSCat.DEVICE) - @DSComment("Power management")
<android.os.PowerManager$WakeLock: void acquire(long)> - @DSSpec(DSCat.DEVICE) - @DSComment("Power management")
<android.os.PowerManager$WakeLock: void release()> - @DSSpec(DSCat.DEVICE) - @DSComment("Power management")
<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)> - @DSSpec(DSCat.DEVICE) - @DSComment("Power management")
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)> - @DSSpec(DSCat.DEVICE) - @DSComment("Power management")
<android.os.StatFs: int getAvailableBlocks()> - @DSSpec(DSCat.OS_LOW_LEVEL) - @DSComment("OS low level")
<android.os.StatFs: int getBlockSize()> - @DSSpec(DSCat.OS_LOW_LEVEL) - @DSComment("OS low level")
<android.os.StatFs: void <init>(java.lang.String)> - @DSSpec(DSCat.OS_LOW_LEVEL) - @DSComment("OS low level")
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy build()> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Only URI passing around is important")
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder permitAll()> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Only URI passing around is important")
<android.os.StrictMode$ThreadPolicy$Builder: void <init>()> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Only URI passing around is important")
<android.os.SystemClock: long elapsedRealtime()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("SystemClock only allows reading time")
<android.os.SystemClock: long uptimeMillis()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("SystemClock only allows reading time")
<android.os.SystemClock: void sleep(long)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("SystemClock only allows reading time")
<android.os.Vibrator: void vibrate(long)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("only vibrating the device")
<android.os.Vibrator: void vibrate(long[],int)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("only vibrating the device")
<android.preference.CheckBoxPreference: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.CheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.CheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.DialogPreference: android.os.Parcelable onSaveInstanceState()> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.preference.DialogPreference: android.view.View onCreateDialogView()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.preference.DialogPreference: java.lang.CharSequence getDialogMessage()> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.DialogPreference: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.DialogPreference: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.DialogPreference: void onBindDialogView(android.view.View)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.preference.DialogPreference: void onClick(android.content.DialogInterface,int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.preference.DialogPreference: void onDialogClosed(boolean)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.preference.DialogPreference: void onDismiss(android.content.DialogInterface)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.preference.DialogPreference: void onPrepareDialogBuilder(android.app.AlertDialog$Builder)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.preference.DialogPreference: void onRestoreInstanceState(android.os.Parcelable)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.preference.DialogPreference: void setDialogLayoutResource(int)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.DialogPreference: void setDialogMessage(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.DialogPreference: void setDialogTitle(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.EditTextPreference: android.widget.EditText getEditText()> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.EditTextPreference: java.lang.String getText()> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.EditTextPreference: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.EditTextPreference: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.EditTextPreference: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.EditTextPreference: void setText(java.lang.String)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.ListPreference: int findIndexOfValue(java.lang.String)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.ListPreference: java.lang.CharSequence getEntry()> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.ListPreference: java.lang.CharSequence getSummary()> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.ListPreference: java.lang.CharSequence[] getEntries()> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.ListPreference: java.lang.CharSequence[] getEntryValues()> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.ListPreference: java.lang.String getValue()> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.ListPreference: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.ListPreference: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.ListPreference: void onDialogClosed(boolean)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.preference.ListPreference: void setEntries(java.lang.CharSequence[])> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.ListPreference: void setEntryValues(int)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.ListPreference: void setEntryValues(java.lang.CharSequence[])> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.ListPreference: void setSummary(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.ListPreference: void setValue(java.lang.String)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.ListPreference: void setValueIndex(int)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.Preference$BaseSavedState: void <init>(android.os.Parcel)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.preference.Preference$BaseSavedState: void <init>(android.os.Parcelable)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.preference.Preference$OnPreferenceChangeListener: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.preference.Preference$OnPreferenceClickListener: boolean onPreferenceClick(android.preference.Preference)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.preference.Preference: android.content.Context getContext()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: android.content.Intent getIntent()> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.preference.Preference: android.content.SharedPreferences getSharedPreferences()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: android.view.View onCreateView(android.view.ViewGroup)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.preference.Preference: boolean callChangeListener(java.lang.Object)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.preference.Preference: boolean isEnabled()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: boolean isPersistent()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: boolean persistFloat(float)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: boolean persistInt(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: boolean persistString(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: float getPersistedFloat(float)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: int getPersistedInt(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: java.lang.CharSequence getSummary()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: java.lang.CharSequence getTitle()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: java.lang.String getDependency()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: java.lang.String getKey()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: java.lang.String getPersistedString(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: void <init>(android.content.Context)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: void onBindView(android.view.View)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.preference.Preference: void setDefaultValue(java.lang.Object)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: void setDependency(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: void setEnabled(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: void setIntent(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.preference.Preference: void setLayoutResource(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: void setOnPreferenceChangeListener(android.preference.Preference$OnPreferenceChangeListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.preference.Preference: void setOnPreferenceClickListener(android.preference.Preference$OnPreferenceClickListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.preference.Preference: void setPersistent(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: void setSelectable(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: void setSummary(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: void setSummary(java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: void setTitle(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: void setTitle(java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: void setWidgetLayoutResource(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.PreferenceActivity: android.preference.PreferenceManager getPreferenceManager()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Android Manager retrieved/accessed")
<android.preference.PreferenceActivity: void onActivityResult(int,int,android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.preference.PreferenceActivity: void onCreate(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.preference.PreferenceActivity: void onDestroy()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.preference.PreferenceActivity: void onStop()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.preference.PreferenceFragment: android.preference.Preference findPreference(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.PreferenceFragment: void <init>()> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.PreferenceFragment: void addPreferencesFromResource(int)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.PreferenceFragment: void onActivityCreated(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.preference.PreferenceFragment: void onActivityResult(int,int,android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.preference.PreferenceFragment: void onCreate(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.preference.PreferenceFragment: void onDestroy()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.preference.PreferenceGroup: android.preference.Preference findPreference(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.PreferenceGroup: android.preference.Preference getPreference(int)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.PreferenceGroup: boolean addPreference(android.preference.Preference)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.PreferenceGroup: boolean removePreference(android.preference.Preference)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.PreferenceGroup: int getPreferenceCount()> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.PreferenceGroup: void removeAll()> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.preference.PreferenceManager: android.preference.Preference findPreference(java.lang.CharSequence)> - @DSSpec(DSCat.SYSTEM) - @DSComment("May change system behavior")
<android.preference.PreferenceManager: void setDefaultValues(android.content.Context,int,boolean)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.preference.PreferenceManager: void setSharedPreferencesMode(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.preference.PreferenceManager: void setSharedPreferencesName(java.lang.String)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.preference.TwoStatePreference: boolean isChecked()> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.TwoStatePreference: void onClick()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.preference.TwoStatePreference: void setChecked(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.TwoStatePreference: void setSummaryOff(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.TwoStatePreference: void setSummaryOn(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.provider.ContactsContract$Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.provider.ContactsContract$Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri,boolean)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.speech.SpeechRecognizer: void setRecognitionListener(android.speech.RecognitionListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.speech.SpeechRecognizer: void startListening(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.speech.tts.TextToSpeech: int setOnUtteranceCompletedListener(android.speech.tts.TextToSpeech$OnUtteranceCompletedListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.telephony.PhoneStateListener: void <init>()> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.telephony.SmsManager: java.util.ArrayList divideMessage(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("SMS message data structure")
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.telephony.TelephonyManager: int getCallState()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.telephony.TelephonyManager: int getDataState()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.telephony.TelephonyManager: int getPhoneType()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.telephony.TelephonyManager: java.lang.String getDeviceId()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.telephony.TelephonyManager: java.lang.String getLine1Number()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.text.AndroidCharacter: void getEastAsianWidths(char[],int,int,byte[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.ClipboardManager: java.lang.CharSequence getText()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.text.ClipboardManager: void setText(java.lang.CharSequence)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.text.Editable$Factory: android.text.Editable newEditable(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.Editable$Factory: android.text.Editable$Factory getInstance()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.Html: android.text.Spanned fromHtml(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.Html: android.text.Spanned fromHtml(java.lang.String,android.text.Html$ImageGetter,android.text.Html$TagHandler)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.Html: java.lang.String toHtml(android.text.Spanned)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.Selection: int getSelectionEnd(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.Selection: int getSelectionStart(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.Selection: void setSelection(android.text.Spannable,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.Spannable: void removeSpan(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.SpannableString: void <init>(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.SpannableString: void removeSpan(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.SpannableString: void setSpan(java.lang.Object,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.SpannableStringBuilder: int getSpanEnd(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.SpannableStringBuilder: int getSpanStart(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.SpannableStringBuilder: int length()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.SpannableStringBuilder: int nextSpanTransition(int,int,java.lang.Class)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<android.text.SpannableStringBuilder: java.lang.CharSequence subSequence(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.SpannableStringBuilder: java.lang.Object[] getSpans(int,int,java.lang.Class)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<android.text.SpannableStringBuilder: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.SpannableStringBuilder: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.SpannableStringInternal: int length()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.SpannableStringInternal: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.Spanned: int getSpanEnd(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.Spanned: int getSpanStart(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<android.text.TextPaint: void <init>(android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.TextUtils: boolean isDigitsOnly(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.TextUtils: java.lang.String htmlEncode(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.TextUtils: java.lang.String[] split(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.text.TextWatcher: void afterTextChanged(android.text.Editable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.TextWatcher: void beforeTextChanged(java.lang.CharSequence,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.TextWatcher: void onTextChanged(java.lang.CharSequence,int,int,int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,java.util.Date)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.format.DateFormat: java.text.DateFormat getDateFormat(android.content.Context)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.format.DateFormat: java.text.DateFormat getTimeFormat(android.content.Context)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.format.DateUtils: boolean isToday(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.format.DateUtils: java.lang.String formatDateTime(android.content.Context,long,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.format.DateUtils: java.lang.String formatElapsedTime(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.format.Formatter: java.lang.String formatIpAddress(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.format.Time: boolean parse3339(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.format.Time: int compare(android.text.format.Time,android.text.format.Time)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.format.Time: java.lang.String format3339(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.format.Time: java.lang.String getCurrentTimezone()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.format.Time: long toMillis(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.format.Time: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.format.Time: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.format.Time: void set(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.format.Time: void setToNow()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.method.CharacterPickerDialog: void <init>(android.content.Context,android.view.View,android.text.Editable,java.lang.String,boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance()> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.text.method.KeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.text.method.KeyListener: boolean onKeyOther(android.view.View,android.text.Editable,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.text.method.KeyListener: boolean onKeyUp(android.view.View,android.text.Editable,int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.text.method.KeyListener: int getInputType()> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.text.method.KeyListener: void clearMetaKeyState(android.view.View,android.text.Editable,int)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.text.method.LinkMovementMethod: android.text.method.MovementMethod getInstance()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.method.PasswordTransformationMethod: android.text.method.PasswordTransformationMethod getInstance()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.method.ReplacementTransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.method.ScrollingMovementMethod: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.method.SingleLineTransformationMethod: android.text.method.SingleLineTransformationMethod getInstance()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.method.SingleLineTransformationMethod: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.style.BackgroundColorSpan: int getBackgroundColor()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.style.BackgroundColorSpan: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.style.BulletSpan: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.style.ClickableSpan: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.style.ForegroundColorSpan: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.style.LeadingMarginSpan$Standard: int getLeadingMargin(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.style.LeadingMarginSpan$Standard: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.style.RelativeSizeSpan: float getSizeChange()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.style.RelativeSizeSpan: void <init>(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.style.StrikethroughSpan: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.style.StyleSpan: int getStyle()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.style.StyleSpan: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.style.TypefaceSpan: java.lang.String getFamily()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.style.TypefaceSpan: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.style.UnderlineSpan: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.util.Linkify: boolean addLinks(android.widget.TextView,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.util.Linkify: void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String,android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.AttributeSet: int getAttributeCount()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.AttributeSet: int getAttributeIntValue(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.AttributeSet: int getAttributeIntValue(java.lang.String,java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.AttributeSet: int getAttributeResourceValue(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.AttributeSet: int getAttributeResourceValue(java.lang.String,java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.AttributeSet: java.lang.String getAttributeName(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.AttributeSet: java.lang.String getAttributeValue(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.AttributeSet: java.lang.String getPositionDescription()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.Base64: byte[] decode(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.Base64: byte[] encode(byte[],int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.Base64: java.lang.String encodeToString(byte[],int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.FloatMath: float ceil(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.FloatMath: float cos(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.FloatMath: float floor(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.FloatMath: float sin(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.FloatMath: float sqrt(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.Log: boolean isLoggable(java.lang.String,int)> - @DSSpec(DSCat.LOGGING) - @DSComment("Android logging subsystem")
<android.util.Log: int d(java.lang.String,java.lang.String)> - @DSSpec(DSCat.LOGGING) - @DSComment("Android logging subsystem")
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)> - @DSSpec(DSCat.LOGGING) - @DSComment("Android logging subsystem")
<android.util.Log: int e(java.lang.String,java.lang.String)> - @DSSpec(DSCat.LOGGING) - @DSComment("Android logging subsystem")
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)> - @DSSpec(DSCat.LOGGING) - @DSComment("Android logging subsystem")
<android.util.Log: int i(java.lang.String,java.lang.String)> - @DSSpec(DSCat.LOGGING) - @DSComment("Android logging subsystem")
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)> - @DSSpec(DSCat.LOGGING) - @DSComment("Android logging subsystem")
<android.util.Log: int println(int,java.lang.String,java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.util.Log: int v(java.lang.String,java.lang.String)> - @DSSpec(DSCat.LOGGING) - @DSComment("Android logging subsystem")
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)> - @DSSpec(DSCat.LOGGING) - @DSComment("Android logging subsystem")
<android.util.Log: int w(java.lang.String,java.lang.String)> - @DSSpec(DSCat.LOGGING) - @DSComment("Android logging subsystem")
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)> - @DSSpec(DSCat.LOGGING) - @DSComment("Android logging subsystem")
<android.util.Log: int w(java.lang.String,java.lang.Throwable)> - @DSSpec(DSCat.LOGGING) - @DSComment("Android logging subsystem")
<android.util.Log: int wtf(java.lang.String,java.lang.Throwable)> - @DSSpec(DSCat.LOGGING) - @DSComment("Android logging subsystem")
<android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)> - @DSSpec(DSCat.LOGGING) - @DSComment("Android logging subsystem")
<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseArray: int indexOfValue(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseArray: int keyAt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseArray: int size()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseArray: java.lang.Object get(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseArray: java.lang.Object valueAt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseArray: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseArray: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseArray: void append(int,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseArray: void clear()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseArray: void delete(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseArray: void put(int,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseArray: void remove(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseBooleanArray: boolean get(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseBooleanArray: boolean valueAt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseBooleanArray: int keyAt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseBooleanArray: int size()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseBooleanArray: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseBooleanArray: void clear()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseBooleanArray: void put(int,boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseIntArray: int get(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseIntArray: int get(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseIntArray: int keyAt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseIntArray: int size()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseIntArray: int valueAt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseIntArray: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseIntArray: void clear()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseIntArray: void put(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.TimeUtils: java.lang.String getTimeZoneDatabaseVersion()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.TypedValue: float getFloat()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.TypedValue: float getFraction(float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.TypedValue: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.view.AbsSavedState: android.os.Parcelable getSuperState()> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.view.AbsSavedState: void writeToParcel(android.os.Parcel,int)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.view.ActionMode: android.view.Menu getMenu()> - @DSSafe(DSCat.GUI) - @DSComment("Action mode, providing alternative interaction mode")
<android.view.ActionMode: android.view.MenuInflater getMenuInflater()> - @DSSafe(DSCat.GUI) - @DSComment("Action mode, providing alternative interaction mode")
<android.view.ActionMode: android.view.View getCustomView()> - @DSSafe(DSCat.GUI) - @DSComment("Action mode, providing alternative interaction mode")
<android.view.ActionMode: java.lang.CharSequence getSubtitle()> - @DSSafe(DSCat.GUI) - @DSComment("Action mode, providing alternative interaction mode")
<android.view.ActionMode: java.lang.CharSequence getTitle()> - @DSSafe(DSCat.GUI) - @DSComment("Action mode, providing alternative interaction mode")
<android.view.ActionMode: java.lang.Object getTag()> - @DSSafe(DSCat.GUI) - @DSComment("Action mode, providing alternative interaction mode")
<android.view.ActionMode: void finish()> - @DSSafe(DSCat.GUI) - @DSComment("Action mode, providing alternative interaction mode")
<android.view.ActionMode: void invalidate()> - @DSSafe(DSCat.GUI) - @DSComment("Action mode, providing alternative interaction mode")
<android.view.ActionMode: void setCustomView(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Action mode, providing alternative interaction mode")
<android.view.ActionMode: void setSubtitle(int)> - @DSSafe(DSCat.GUI) - @DSComment("Action mode, providing alternative interaction mode")
<android.view.ActionMode: void setSubtitle(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Action mode, providing alternative interaction mode")
<android.view.ActionMode: void setTag(java.lang.Object)> - @DSSafe(DSCat.GUI) - @DSComment("Action mode, providing alternative interaction mode")
<android.view.ActionMode: void setTitle(int)> - @DSSafe(DSCat.GUI) - @DSComment("Action mode, providing alternative interaction mode")
<android.view.ActionMode: void setTitle(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Action mode, providing alternative interaction mode")
<android.view.Display: float getRefreshRate()> - @DSSafe(DSCat.GUI) - @DSComment("only for display view")
<android.view.Display: int getHeight()> - @DSSafe(DSCat.GUI) - @DSComment("only for display view")
<android.view.Display: int getOrientation()> - @DSSafe(DSCat.GUI) - @DSComment("only for display view")
<android.view.Display: int getPixelFormat()> - @DSSafe(DSCat.GUI) - @DSComment("only for display view")
<android.view.Display: int getRotation()> - @DSSafe(DSCat.GUI) - @DSComment("only for display view")
<android.view.Display: int getWidth()> - @DSSafe(DSCat.GUI) - @DSComment("only for display view")
<android.view.Display: void getMetrics(android.util.DisplayMetrics)> - @DSSafe(DSCat.GUI) - @DSComment("only for display view")
<android.view.Display: void getSize(android.graphics.Point)> - @DSSafe(DSCat.GUI) - @DSComment("only for display view")
<android.view.GestureDetector$OnDoubleTapListener: boolean onDoubleTap(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.GestureDetector$OnDoubleTapListener: boolean onDoubleTapEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.GestureDetector$OnDoubleTapListener: boolean onSingleTapConfirmed(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.GestureDetector$OnGestureListener: boolean onDown(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.GestureDetector$OnGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.GestureDetector$OnGestureListener: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.GestureDetector$OnGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.GestureDetector$OnGestureListener: void onLongPress(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.GestureDetector$OnGestureListener: void onShowPress(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.GestureDetector$SimpleOnGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.GestureDetector$SimpleOnGestureListener: boolean onSingleTapConfirmed(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.GestureDetector$SimpleOnGestureListener: void <init>()> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.GestureDetector$SimpleOnGestureListener: void onLongPress(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.GestureDetector: boolean onTouchEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.GestureDetector: void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.KeyEvent: boolean getKeyData(android.view.KeyCharacterMap$KeyData)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: boolean isAltPressed()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: boolean isLongPress()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: boolean isShiftPressed()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: boolean metaStateHasModifiers(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: boolean metaStateHasNoModifiers(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: int getAction()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: int getKeyCode()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: int getMetaState()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: int getRepeatCount()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: int getUnicodeChar(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: int normalizeMetaState(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: java.lang.String getCharacters()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: long getEventTime()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: void <init>(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: void <init>(long,long,int,int,int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.Menu: android.view.MenuItem add(int)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.Menu: android.view.MenuItem add(int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.Menu: android.view.MenuItem add(int,int,int,java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.Menu: android.view.MenuItem add(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.Menu: android.view.MenuItem findItem(int)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.Menu: android.view.MenuItem getItem(int)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.Menu: android.view.SubMenu addSubMenu(int)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.Menu: android.view.SubMenu addSubMenu(int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.Menu: android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.Menu: android.view.SubMenu addSubMenu(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.Menu: boolean hasVisibleItems()> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.Menu: boolean isShortcutKey(int,android.view.KeyEvent)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.Menu: boolean performIdentifierAction(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.Menu: boolean performShortcut(int,android.view.KeyEvent,int)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.Menu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.view.Menu: int size()> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.Menu: void clear()> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.Menu: void close()> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.Menu: void removeGroup(int)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.Menu: void removeItem(int)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.Menu: void setGroupCheckable(int,boolean,boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.Menu: void setGroupEnabled(int,boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.Menu: void setGroupVisible(int,boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.Menu: void setQwertyMode(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.MenuItem$OnMenuItemClickListener: boolean onMenuItemClick(android.view.MenuItem)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.MenuItem: android.content.Intent getIntent()> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.view.MenuItem: android.graphics.drawable.Drawable getIcon()> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: android.view.ActionProvider getActionProvider()> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: android.view.ContextMenu$ContextMenuInfo getMenuInfo()> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: android.view.MenuItem setActionProvider(android.view.ActionProvider)> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: android.view.MenuItem setActionView(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: android.view.MenuItem setActionView(int)> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char)> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: android.view.MenuItem setCheckable(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: android.view.MenuItem setChecked(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: android.view.MenuItem setEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: android.view.MenuItem setIcon(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: android.view.MenuItem setIcon(int)> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: android.view.MenuItem setIntent(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.view.MenuItem: android.view.MenuItem setNumericShortcut(char)> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.MenuItem: android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.MenuItem: android.view.MenuItem setShortcut(char,char)> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: android.view.MenuItem setShowAsActionFlags(int)> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: android.view.MenuItem setTitle(int)> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: android.view.MenuItem setTitle(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: android.view.MenuItem setTitleCondensed(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: android.view.MenuItem setVisible(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: android.view.SubMenu getSubMenu()> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: android.view.View getActionView()> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: boolean collapseActionView()> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: boolean expandActionView()> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: boolean hasSubMenu()> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: boolean isActionViewExpanded()> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: boolean isCheckable()> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: boolean isChecked()> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: boolean isEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: boolean isVisible()> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: char getAlphabeticShortcut()> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: char getNumericShortcut()> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: int getGroupId()> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: int getItemId()> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: int getOrder()> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: java.lang.CharSequence getTitle()> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: java.lang.CharSequence getTitleCondensed()> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MenuItem: void setShowAsAction(int)> - @DSSafe(DSCat.GUI) - @DSComment("Menu manipulation")
<android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: float getHistoricalX(int)> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: float getHistoricalY(int)> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: float getRawX()> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: float getRawY()> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: float getX()> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: float getX(int)> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: float getY()> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: float getY(int)> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: int findPointerIndex(int)> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: int getAction()> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: int getEdgeFlags()> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: int getHistorySize()> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: int getPointerCount()> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: int getPointerId(int)> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: long getDownTime()> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: long getEventTime()> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: long getHistoricalEventTime(int)> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: void recycle()> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.SubMenu: android.view.MenuItem getItem()> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.SubMenu: android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.SubMenu: android.view.SubMenu setHeaderIcon(int)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.SubMenu: android.view.SubMenu setHeaderTitle(int)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.SubMenu: android.view.SubMenu setHeaderTitle(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.SubMenu: android.view.SubMenu setHeaderView(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.SubMenu: android.view.SubMenu setIcon(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.SubMenu: android.view.SubMenu setIcon(int)> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.SubMenu: void clearHeader()> - @DSSafe(DSCat.GUI) - @DSComment("Menu part of the UI")
<android.view.SurfaceHolder: android.graphics.Canvas lockCanvas(android.graphics.Rect)> - @DSSafe(DSCat.GUI) - @DSComment("Surface Holder")
<android.view.SurfaceHolder: android.view.Surface getSurface()> - @DSSafe(DSCat.GUI) - @DSComment("Surface Holder")
<android.view.SurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.SurfaceHolder: void removeCallback(android.view.SurfaceHolder$Callback)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action when removing callback")
<android.view.SurfaceHolder: void setKeepScreenOn(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Surface Holder")
<android.view.SurfaceHolder: void setType(int)> - @DSSafe(DSCat.GUI) - @DSComment("Surface Holder")
<android.view.SurfaceHolder: void unlockCanvasAndPost(android.graphics.Canvas)> - @DSSafe(DSCat.GUI) - @DSComment("Surface Holder")
<android.view.SurfaceView: android.view.SurfaceHolder getHolder()> - @DSSafe(DSCat.GUI) - @DSComment("Dedicated drawing surface")
<android.view.SurfaceView: boolean gatherTransparentRegion(android.graphics.Region)> - @DSSafe(DSCat.GUI) - @DSComment("Dedicated drawing surface")
<android.view.SurfaceView: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("Dedicated drawing surface")
<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("Dedicated drawing surface")
<android.view.SurfaceView: void draw(android.graphics.Canvas)> - @DSSafe(DSCat.GUI) - @DSComment("Dedicated drawing surface")
<android.view.SurfaceView: void setVisibility(int)> - @DSSafe(DSCat.GUI) - @DSComment("Dedicated drawing surface")
<android.view.SurfaceView: void setZOrderMediaOverlay(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Dedicated drawing surface")
<android.view.SurfaceView: void setZOrderOnTop(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Dedicated drawing surface")
<android.view.VelocityTracker: android.view.VelocityTracker obtain()> - @DSSafe(DSCat.GUI) - @DSComment("Touch event tracking")
<android.view.VelocityTracker: float getXVelocity()> - @DSSafe(DSCat.GUI) - @DSComment("Touch event tracking")
<android.view.VelocityTracker: float getXVelocity(int)> - @DSSafe(DSCat.GUI) - @DSComment("Touch event tracking")
<android.view.VelocityTracker: float getYVelocity()> - @DSSafe(DSCat.GUI) - @DSComment("Touch event tracking")
<android.view.VelocityTracker: float getYVelocity(int)> - @DSSafe(DSCat.GUI) - @DSComment("Touch event tracking")
<android.view.VelocityTracker: void addMovement(android.view.MotionEvent)> - @DSSafe(DSCat.GUI) - @DSComment("Touch event tracking")
<android.view.VelocityTracker: void clear()> - @DSSafe(DSCat.GUI) - @DSComment("Touch event tracking")
<android.view.VelocityTracker: void computeCurrentVelocity(int)> - @DSSafe(DSCat.GUI) - @DSComment("Touch event tracking")
<android.view.VelocityTracker: void computeCurrentVelocity(int,float)> - @DSSafe(DSCat.GUI) - @DSComment("Touch event tracking")
<android.view.VelocityTracker: void recycle()> - @DSSafe(DSCat.GUI) - @DSComment("Touch event tracking")
<android.view.View$AccessibilityDelegate: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View$AccessibilityDelegate: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View$AccessibilityDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View$AccessibilityDelegate: void sendAccessibilityEvent(android.view.View,int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.view.View$AccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.view.View$BaseSavedState: void <init>(android.os.Parcel)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.view.View$BaseSavedState: void <init>(android.os.Parcelable)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.view.View$OnClickListener: void onClick(android.view.View)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View$OnFocusChangeListener: void onFocusChange(android.view.View,boolean)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View$OnKeyListener: boolean onKey(android.view.View,int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View$OnLongClickListener: boolean onLongClick(android.view.View)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View$OnTouchListener: boolean onTouch(android.view.View,android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: android.content.Context getContext()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.content.res.Resources getResources()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.graphics.Bitmap getDrawingCache()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.graphics.Matrix getMatrix()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.graphics.drawable.Drawable getBackground()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.os.Handler getHandler()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.os.IBinder getApplicationWindowToken()> - @DSSpec(DSCat.IPC) - @DSComment("Binder is vague, need modeling")
<android.view.View: android.os.IBinder getWindowToken()> - @DSSpec(DSCat.IPC) - @DSComment("Binder is vague, need modeling")
<android.view.View: android.os.Parcelable onSaveInstanceState()> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.view.KeyEvent$DispatcherState getKeyDispatcherState()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.view.TouchDelegate getTouchDelegate()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.view.View findFocus()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.view.View findViewById(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.view.View findViewWithTag(java.lang.Object)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.view.View focusSearch(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.view.View getRootView()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.view.View inflate(android.content.Context,int,android.view.ViewGroup)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.view.View$OnFocusChangeListener getOnFocusChangeListener()> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.view.ViewParent getParent()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.view.ViewPropertyAnimator animate()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.view.animation.Animation getAnimation()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.view.View: boolean awakenScrollBars(int,boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean callOnClick()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean canScrollHorizontally(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean canScrollVertically(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean checkInputConnectionProxy(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: boolean dispatchGenericMotionEvent(android.view.MotionEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: boolean dispatchKeyEvent(android.view.KeyEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: boolean dispatchKeyEventPreIme(android.view.KeyEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: boolean dispatchTrackballEvent(android.view.MotionEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: boolean dispatchUnhandledMove(android.view.View,int)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: boolean fitsSystemWindows()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean getFilterTouchesWhenObscured()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean getKeepScreenOn()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean getLocalVisibleRect(android.graphics.Rect)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean hasFocus()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean hasFocusable()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean hasOnClickListeners()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean hasWindowFocus()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isActivated()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isClickable()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isDirty()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isDrawingCacheEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isDuplicateParentStateEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isFocusable()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isFocusableInTouchMode()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isFocused()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isHapticFeedbackEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isHardwareAccelerated()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isHorizontalFadingEdgeEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isHorizontalScrollBarEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isHovered()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isInEditMode()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isInTouchMode()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isLayoutRequested()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isLongClickable()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isOpaque()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isPressed()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isSaveEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isSaveFromParentEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isScrollbarFadingEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isSelected()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isShown()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isSoundEffectsEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isVerticalFadingEdgeEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isVerticalScrollBarEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean onCheckIsTextEditor()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: boolean onDragEvent(android.view.DragEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: boolean onFilterTouchEventForSecurity(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: boolean onGenericMotionEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: boolean onHoverEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: boolean onKeyDown(int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: boolean onKeyLongPress(int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: boolean onKeyMultiple(int,int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: boolean onKeyPreIme(int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: boolean onKeyShortcut(int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: boolean onKeyUp(int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: boolean onTouchEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: boolean onTrackballEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: boolean performClick()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean performHapticFeedback(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean performHapticFeedback(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean performLongClick()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean post(java.lang.Runnable)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean postDelayed(java.lang.Runnable,long)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean removeCallbacks(java.lang.Runnable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action when removing callback")
<android.view.View: boolean requestFocus()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean requestFocus(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean requestFocus(int,android.graphics.Rect)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean requestFocusFromTouch()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect,boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean showContextMenu()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean verifyDrawable(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean willNotCacheDrawing()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean willNotDraw()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: float getAlpha()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: float getPivotX()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: float getPivotY()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: float getRotation()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: float getRotationX()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: float getRotationY()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: float getScaleX()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: float getScaleY()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: float getTranslationX()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: float getTranslationY()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: float getX()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: float getY()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int computeHorizontalScrollExtent()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getBaseline()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getBottom()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getDefaultSize(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getDrawingCacheBackgroundColor()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getDrawingCacheQuality()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getHeight()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getHorizontalFadingEdgeLength()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getId()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getLayerType()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getLeft()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getMeasuredHeight()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getMeasuredHeightAndState()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getMeasuredState()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getMeasuredWidth()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getMeasuredWidthAndState()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getNextFocusDownId()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getNextFocusForwardId()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getNextFocusLeftId()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getNextFocusRightId()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getNextFocusUpId()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getOverScrollMode()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getPaddingBottom()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getPaddingLeft()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getPaddingRight()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getPaddingTop()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getRight()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getScrollBarStyle()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getScrollX()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getScrollY()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getSolidColor()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getSuggestedMinimumHeight()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getSuggestedMinimumWidth()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getSystemUiVisibility()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getTop()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getVerticalFadingEdgeLength()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getVerticalScrollbarPosition()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getVerticalScrollbarWidth()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getVisibility()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getWidth()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getWindowVisibility()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int resolveSize(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int resolveSizeAndState(int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int[] getDrawableState()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: java.lang.CharSequence getContentDescription()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: java.lang.Object getTag()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: java.lang.Object getTag(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: java.util.ArrayList getFocusables(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: java.util.ArrayList getTouchables()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: long getDrawingTime()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void addFocusables(java.util.ArrayList,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void addFocusables(java.util.ArrayList,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: void addTouchables(java.util.ArrayList)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void bringToFront()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void buildDrawingCache()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void buildDrawingCache(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void buildLayer()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void cancelLongPress()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void clearAnimation()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void clearFocus()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void computeScroll()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void createContextMenu(android.view.ContextMenu)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void destroyDrawingCache()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void dispatchConfigurationChanged(android.content.res.Configuration)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: void dispatchDisplayHint(int)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: void dispatchSystemUiVisibilityChanged(int)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: void dispatchWindowFocusChanged(boolean)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: void dispatchWindowVisibilityChanged(int)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: void draw(android.graphics.Canvas)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void drawableStateChanged()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void forceLayout()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void getDrawingRect(android.graphics.Rect)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void getFocusedRect(android.graphics.Rect)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void getHitRect(android.graphics.Rect)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void getLocationInWindow(int[])> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void getLocationOnScreen(int[])> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void getWindowVisibleDisplayFrame(android.graphics.Rect)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void invalidate()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void invalidate(android.graphics.Rect)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void invalidate(int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void invalidateDrawable(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void jumpDrawablesToCurrentState()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void layout(int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void measure(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void offsetLeftAndRight(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void offsetTopAndBottom(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void onAttachedToWindow()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: void onConfigurationChanged(android.content.res.Configuration)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: void onCreateContextMenu(android.view.ContextMenu)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: void onDetachedFromWindow()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: void onDraw(android.graphics.Canvas)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: void onFinishInflate()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: void onFinishTemporaryDetach()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: void onHoverChanged(boolean)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: void onRestoreInstanceState(android.os.Parcelable)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.view.View: void onScrollChanged(int,int,int,int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: void onSizeChanged(int,int,int,int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: void onStartTemporaryDetach()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: void onVisibilityChanged(android.view.View,int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: void onWindowFocusChanged(boolean)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: void playSoundEffect(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void postInvalidate()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void postInvalidate(int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void postInvalidateDelayed(long)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void postInvalidateDelayed(long,int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void refreshDrawableState()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: void removeOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: void requestLayout()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void restoreHierarchyState(android.util.SparseArray)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void saveHierarchyState(android.util.SparseArray)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void scrollBy(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void scrollTo(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void sendAccessibilityEvent(int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.view.View: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setActivated(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setAlpha(float)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setAnimation(android.view.animation.Animation)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setBackgroundColor(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setBackgroundResource(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setBottom(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setCameraDistance(float)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setClickable(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setContentDescription(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setDrawingCacheBackgroundColor(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setDrawingCacheEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setDrawingCacheQuality(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setDuplicateParentStateEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setFadingEdgeLength(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setFilterTouchesWhenObscured(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setFitsSystemWindows(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setFocusable(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setFocusableInTouchMode(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setHapticFeedbackEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setHorizontalFadingEdgeEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setHorizontalScrollBarEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setHovered(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setId(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setKeepScreenOn(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setLayerType(int,android.graphics.Paint)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setLeft(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setLongClickable(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setMeasuredDimension(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setMinimumHeight(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setMinimumWidth(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setNextFocusDownId(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setNextFocusForwardId(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setNextFocusLeftId(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setNextFocusRightId(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setNextFocusUpId(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: void setOnDragListener(android.view.View$OnDragListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: void setOnFocusChangeListener(android.view.View$OnFocusChangeListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: void setOnGenericMotionListener(android.view.View$OnGenericMotionListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: void setOnHoverListener(android.view.View$OnHoverListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: void setOnKeyListener(android.view.View$OnKeyListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: void setOnLongClickListener(android.view.View$OnLongClickListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: void setOnTouchListener(android.view.View$OnTouchListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: void setOverScrollMode(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setPadding(int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setPivotX(float)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setPivotY(float)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setPressed(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setRight(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setRotation(float)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setRotationX(float)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setRotationY(float)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setSaveEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setSaveFromParentEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setScaleX(float)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setScaleY(float)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setScrollBarStyle(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setScrollContainer(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setScrollX(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setScrollY(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setScrollbarFadingEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setSelected(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setSoundEffectsEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setSystemUiVisibility(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setTag(int,java.lang.Object)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setTag(java.lang.Object)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setTop(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setTouchDelegate(android.view.TouchDelegate)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setTranslationX(float)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setTranslationY(float)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setVerticalFadingEdgeEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setVerticalScrollBarEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setVerticalScrollbarPosition(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setVisibility(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setWillNotCacheDrawing(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setWillNotDraw(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setX(float)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setY(float)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void startAnimation(android.view.animation.Animation)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("View configuration")
<android.view.ViewConfiguration: boolean hasPermanentMenuKey()> - @DSSafe(DSCat.GUI) - @DSComment("View configuration")
<android.view.ViewConfiguration: float getScrollFriction()> - @DSSafe(DSCat.GUI) - @DSComment("View configuration")
<android.view.ViewConfiguration: int getDoubleTapTimeout()> - @DSSafe(DSCat.GUI) - @DSComment("View configuration")
<android.view.ViewConfiguration: int getLongPressTimeout()> - @DSSafe(DSCat.GUI) - @DSComment("View configuration")
<android.view.ViewConfiguration: int getMinimumFlingVelocity()> - @DSSafe(DSCat.GUI) - @DSComment("View configuration")
<android.view.ViewConfiguration: int getScaledDoubleTapSlop()> - @DSSafe(DSCat.GUI) - @DSComment("View configuration")
<android.view.ViewConfiguration: int getScaledMaximumFlingVelocity()> - @DSSafe(DSCat.GUI) - @DSComment("View configuration")
<android.view.ViewConfiguration: int getScaledMinimumFlingVelocity()> - @DSSafe(DSCat.GUI) - @DSComment("View configuration")
<android.view.ViewConfiguration: int getScaledPagingTouchSlop()> - @DSSafe(DSCat.GUI) - @DSComment("View configuration")
<android.view.ViewConfiguration: int getScaledTouchSlop()> - @DSSafe(DSCat.GUI) - @DSComment("View configuration")
<android.view.ViewConfiguration: int getTapTimeout()> - @DSSafe(DSCat.GUI) - @DSComment("View configuration")
<android.view.ViewConfiguration: int getTouchSlop()> - @DSSafe(DSCat.GUI) - @DSComment("View configuration")
<android.view.ViewGroup: android.animation.LayoutTransition getLayoutTransition()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("callback needs to be called")
<android.view.ViewGroup: android.view.View findFocus()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: android.view.View focusSearch(android.view.View,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: android.view.View getChildAt(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: android.view.View getFocusedChild()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: android.view.animation.Animation$AnimationListener getLayoutAnimationListener()> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.ViewGroup: android.view.animation.LayoutAnimationController getLayoutAnimation()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: boolean addStatesFromChildren()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: boolean canAnimate()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: boolean dispatchDragEvent(android.view.DragEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.ViewGroup: boolean dispatchKeyEvent(android.view.KeyEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.ViewGroup: boolean dispatchKeyEventPreIme(android.view.KeyEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.ViewGroup: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.ViewGroup: boolean dispatchTouchEvent(android.view.MotionEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.ViewGroup: boolean dispatchTrackballEvent(android.view.MotionEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.ViewGroup: boolean dispatchUnhandledMove(android.view.View,int)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: boolean hasFocus()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: boolean hasFocusable()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: boolean isAlwaysDrawnWithCacheEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: boolean isAnimationCacheEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: boolean isMotionEventSplittingEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: boolean onInterceptHoverEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.ViewGroup: boolean onInterceptTouchEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.ViewGroup: boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.ViewGroup: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: boolean requestFocus(int,android.graphics.Rect)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: boolean showContextMenuForChild(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: int getChildCount()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: int getDescendantFocusability()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: int getPersistentDrawingCache()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: int indexOfChild(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void addFocusables(java.util.ArrayList,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void addFocusables(java.util.ArrayList,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void addTouchables(java.util.ArrayList)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void addView(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void addView(android.view.View,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void addView(android.view.View,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void bringChildToFront(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void childDrawableStateChanged(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void clearChildFocus(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void clearDisappearingChildren()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void clearFocus()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void dispatchConfigurationChanged(android.content.res.Configuration)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.ViewGroup: void dispatchDisplayHint(int)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.ViewGroup: void dispatchDraw(android.graphics.Canvas)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.ViewGroup: void dispatchFreezeSelfOnly(android.util.SparseArray)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.ViewGroup: void dispatchSetActivated(boolean)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.ViewGroup: void dispatchSetSelected(boolean)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.ViewGroup: void dispatchSystemUiVisibilityChanged(int)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.ViewGroup: void dispatchThawSelfOnly(android.util.SparseArray)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.ViewGroup: void dispatchWindowFocusChanged(boolean)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.ViewGroup: void dispatchWindowVisibilityChanged(int)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.ViewGroup: void drawableStateChanged()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void endViewTransition(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void focusableViewAvailable(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void invalidateChild(android.view.View,android.graphics.Rect)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void layout(int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void measureChild(android.view.View,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void measureChildWithMargins(android.view.View,int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void offsetDescendantRectToMyCoords(android.view.View,android.graphics.Rect)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void offsetRectIntoDescendantCoords(android.view.View,android.graphics.Rect)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void recomputeViewAttributes(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void removeAllViews()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void removeAllViewsInLayout()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void removeDetachedView(android.view.View,boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void removeView(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void removeViewAt(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void removeViewInLayout(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void removeViews(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void removeViewsInLayout(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void requestChildFocus(android.view.View,android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void requestDisallowInterceptTouchEvent(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void requestTransparentRegion(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void scheduleLayoutAnimation()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void setAddStatesFromChildren(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void setAnimationCacheEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void setClipChildren(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void setClipToPadding(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void setDescendantFocusability(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void setLayoutAnimation(android.view.animation.LayoutAnimationController)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void setLayoutAnimationListener(android.view.animation.Animation$AnimationListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.ViewGroup: void setLayoutTransition(android.animation.LayoutTransition)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void setMotionEventSplittingEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.ViewGroup: void setPadding(int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void setPersistentDrawingCache(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void startLayoutAnimation()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void startViewTransition(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.ViewTreeObserver: void removeGlobalOnLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.Window$Callback: void onContentChanged()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.Window: android.view.WindowManager getWindowManager()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Android Manager retrieved/accessed")
<android.view.WindowManager: android.view.Display getDefaultDisplay()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.view.accessibility.AccessibilityManager: boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.accessibility.AccessibilityManager: boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.accessibility.AccessibilityManager: java.util.List getEnabledAccessibilityServiceList(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.view.accessibility.AccessibilityManager: java.util.List getInstalledAccessibilityServiceList()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.view.accessibility.AccessibilityRecord: android.os.Parcelable getParcelableData()> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.view.accessibility.AccessibilityRecord: void setParcelableData(android.os.Parcelable)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.view.animation.Animation: void setAnimationListener(android.view.animation.Animation$AnimationListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.inputmethod.BaseInputConnection: boolean sendKeyEvent(android.view.KeyEvent)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.view.inputmethod.InputConnection: boolean deleteSurroundingText(int,int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.view.inputmethod.InputConnection: boolean sendKeyEvent(android.view.KeyEvent)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.webkit.WebView: boolean onKeyUp(int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.webkit.WebView: boolean onTouchEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.webkit.WebView: void onMeasure(int,int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.webkit.WebView: void onWindowFocusChanged(boolean)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.webkit.WebView: void setPictureListener(android.webkit.WebView$PictureListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.webkit.WebViewClient: void onLoadResource(android.webkit.WebView,java.lang.String)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.webkit.WebViewClient: void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.AbsListView$LayoutParams: void <init>(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Layout params")
<android.widget.AbsListView$LayoutParams: void <init>(int,int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Layout params")
<android.widget.AbsListView: android.util.SparseBooleanArray getCheckedItemPositions()> - @DSSafe(DSCat.GUI) - @DSComment("Abstract AbsListView")
<android.widget.AbsListView: boolean hasTextFilter()> - @DSSafe(DSCat.GUI) - @DSComment("Abstract AbsListView")
<android.widget.AbsListView: boolean isItemChecked(int)> - @DSSafe(DSCat.GUI) - @DSComment("Abstract AbsListView")
<android.widget.AbsListView: boolean onTouchEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.AbsListView: int getCacheColorHint()> - @DSSafe(DSCat.GUI) - @DSComment("Abstract AbsListView")
<android.widget.AbsListView: int getCheckedItemCount()> - @DSSafe(DSCat.GUI) - @DSComment("Abstract AbsListView")
<android.widget.AbsListView: int getCheckedItemPosition()> - @DSSafe(DSCat.GUI) - @DSComment("Abstract AbsListView")
<android.widget.AbsListView: int getChoiceMode()> - @DSSafe(DSCat.GUI) - @DSComment("Abstract AbsListView")
<android.widget.AbsListView: int getListPaddingBottom()> - @DSSafe(DSCat.GUI) - @DSComment("Abstract AbsListView")
<android.widget.AbsListView: int getListPaddingTop()> - @DSSafe(DSCat.GUI) - @DSComment("Abstract AbsListView")
<android.widget.AbsListView: int pointToPosition(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Abstract AbsListView")
<android.widget.AbsListView: void invalidateViews()> - @DSSafe(DSCat.GUI) - @DSComment("Abstract AbsListView")
<android.widget.AbsListView: void onDetachedFromWindow()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.AbsListView: void onWindowFocusChanged(boolean)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.AbsListView: void requestLayout()> - @DSSafe(DSCat.GUI) - @DSComment("Abstract AbsListView")
<android.widget.AbsListView: void setChoiceMode(int)> - @DSSafe(DSCat.GUI) - @DSComment("Abstract AbsListView")
<android.widget.AbsListView: void setDrawSelectorOnTop(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Abstract AbsListView")
<android.widget.AbsListView: void setFastScrollEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Abstract AbsListView")
<android.widget.AbsListView: void setItemChecked(int,boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Abstract AbsListView")
<android.widget.AbsListView: void setMultiChoiceModeListener(android.widget.AbsListView$MultiChoiceModeListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.AbsListView: void setOnScrollListener(android.widget.AbsListView$OnScrollListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.AbsListView: void setSelector(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("Abstract AbsListView")
<android.widget.AbsListView: void setStackFromBottom(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Abstract AbsListView")
<android.widget.AbsListView: void setTextFilterEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Abstract AbsListView")
<android.widget.AbsListView: void setTranscriptMode(int)> - @DSSafe(DSCat.GUI) - @DSComment("Abstract AbsListView")
<android.widget.AbsSeekBar: void setMax(int)> - @DSSafe(DSCat.GUI) - @DSComment("Abstract SeekBar")
<android.widget.AbsSpinner: android.widget.SpinnerAdapter getAdapter()> - @DSSafe(DSCat.GUI) - @DSComment("Spinner")
<android.widget.AbsSpinner: int getCount()> - @DSSafe(DSCat.GUI) - @DSComment("Spinner")
<android.widget.AbsSpinner: void setSelection(int)> - @DSSafe(DSCat.GUI) - @DSComment("Spinner")
<android.widget.AbsSpinner: void setSelection(int,boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Spinner")
<android.widget.Adapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.Adapter: boolean hasStableIds()> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.Adapter: boolean isEmpty()> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.Adapter: int getCount()> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.Adapter: int getItemViewType(int)> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.Adapter: int getViewTypeCount()> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.Adapter: java.lang.Object getItem(int)> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.Adapter: long getItemId(int)> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.Adapter: void registerDataSetObserver(android.database.DataSetObserver)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.Adapter: void unregisterDataSetObserver(android.database.DataSetObserver)> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.AdapterView$OnItemClickListener: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.AdapterView$OnItemLongClickListener: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.AdapterView$OnItemSelectedListener: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.AdapterView$OnItemSelectedListener: void onNothingSelected(android.widget.AdapterView)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.AdapterView: android.widget.Adapter getAdapter()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, AdapterView")
<android.widget.AdapterView: int getCount()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, AdapterView")
<android.widget.AdapterView: int getFirstVisiblePosition()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, AdapterView")
<android.widget.AdapterView: int getLastVisiblePosition()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, AdapterView")
<android.widget.AdapterView: int getSelectedItemPosition()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, AdapterView")
<android.widget.AdapterView: java.lang.Object getItemAtPosition(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, AdapterView")
<android.widget.AdapterView: java.lang.Object getSelectedItem()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, AdapterView")
<android.widget.AdapterView: long getItemIdAtPosition(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, AdapterView")
<android.widget.AdapterView: long getSelectedItemId()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, AdapterView")
<android.widget.AdapterView: void setAdapter(android.widget.Adapter)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, AdapterView")
<android.widget.AdapterView: void setEmptyView(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, AdapterView")
<android.widget.AdapterView: void setFocusable(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, AdapterView")
<android.widget.AdapterView: void setFocusableInTouchMode(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, AdapterView")
<android.widget.AdapterView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.AdapterView: void setOnItemLongClickListener(android.widget.AdapterView$OnItemLongClickListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.AdapterView: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.AdapterView: void setSelection(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, AdapterView")
<android.widget.ArrayAdapter: android.content.Context getContext()> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: android.widget.ArrayAdapter createFromResource(android.content.Context,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: android.widget.Filter getFilter()> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: int getCount()> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: int getPosition(java.lang.Object)> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: java.lang.Object getItem(int)> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: void <init>(android.content.Context,int)> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,int,java.util.List)> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,java.lang.Object[])> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,java.util.List)> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: void add(java.lang.Object)> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: void addAll(java.util.Collection)> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: void clear()> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: void insert(java.lang.Object,int)> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: void notifyDataSetChanged()> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: void remove(java.lang.Object)> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: void setDropDownViewResource(int)> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.AutoCompleteTextView: void setAdapter(android.widget.ListAdapter)> - @DSSafe(DSCat.GUI) - @DSComment("Autocomplete")
<android.widget.AutoCompleteTextView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.BaseAdapter: void <init>()> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.BaseAdapter: void notifyDataSetChanged()> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.BaseAdapter: void notifyDataSetInvalidated()> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.BaseAdapter: void registerDataSetObserver(android.database.DataSetObserver)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.BaseExpandableListAdapter: void <init>()> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.BaseExpandableListAdapter: void notifyDataSetChanged()> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.Button: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("Button")
<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("Button")
<android.widget.CalendarView: long getDate()> - @DSSafe(DSCat.GUI) - @DSComment("just calendar view")
<android.widget.CalendarView: void setOnDateChangeListener(android.widget.CalendarView$OnDateChangeListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.CheckBox: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("CheckBox")
<android.widget.CheckedTextView: boolean isChecked()> - @DSSafe(DSCat.GUI) - @DSComment("CheckedTextView")
<android.widget.CheckedTextView: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("CheckedTextView")
<android.widget.CheckedTextView: void onDraw(android.graphics.Canvas)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.CheckedTextView: void setCheckMarkDrawable(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("CheckedTextView")
<android.widget.CheckedTextView: void setChecked(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("CheckedTextView")
<android.widget.CheckedTextView: void setPadding(int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("CheckedTextView")
<android.widget.CompoundButton$OnCheckedChangeListener: void onCheckedChanged(android.widget.CompoundButton,boolean)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.CompoundButton: boolean isChecked()> - @DSSafe(DSCat.GUI) - @DSComment("CompoundButton, check modeling")
<android.widget.CompoundButton: void setChecked(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("CompoundButton, check modeling")
<android.widget.CompoundButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.CursorAdapter: android.database.Cursor getCursor()> - @DSSpec(DSCat.DATABASE) - @DSComment("returned DB object")
<android.widget.CursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database cursor wrapper")
<android.widget.CursorAdapter: android.widget.FilterQueryProvider getFilterQueryProvider()> - @DSSpec(DSCat.DATABASE) - @DSComment("Database cursor wrapper")
<android.widget.CursorAdapter: int getCount()> - @DSSpec(DSCat.DATABASE) - @DSComment("Database cursor wrapper")
<android.widget.CursorAdapter: long getItemId(int)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database cursor wrapper")
<android.widget.CursorAdapter: void <init>(android.content.Context,android.database.Cursor)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database cursor wrapper")
<android.widget.CursorAdapter: void <init>(android.content.Context,android.database.Cursor,boolean)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database cursor wrapper")
<android.widget.CursorAdapter: void changeCursor(android.database.Cursor)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database cursor wrapper")
<android.widget.CursorAdapter: void setFilterQueryProvider(android.widget.FilterQueryProvider)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database cursor wrapper")
<android.widget.DatePicker: int getDayOfMonth()> - @DSSafe(DSCat.GUI) - @DSComment("GUI/Date Picker")
<android.widget.DatePicker: int getMonth()> - @DSSafe(DSCat.GUI) - @DSComment("GUI/Date Picker")
<android.widget.DatePicker: int getYear()> - @DSSafe(DSCat.GUI) - @DSComment("GUI/Date Picker")
<android.widget.DatePicker: void updateDate(int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI/Date Picker")
<android.widget.EdgeEffect: boolean draw(android.graphics.Canvas)> - @DSSafe(DSCat.GUI) - @DSComment("GUI/Edge Effect, check callbacks")
<android.widget.EdgeEffect: boolean isFinished()> - @DSSafe(DSCat.GUI) - @DSComment("GUI/Edge Effect, check callbacks")
<android.widget.EdgeEffect: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("GUI/Edge Effect, check callbacks")
<android.widget.EdgeEffect: void finish()> - @DSSafe(DSCat.GUI) - @DSComment("GUI/Edge Effect, check callbacks")
<android.widget.EdgeEffect: void onAbsorb(int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.EdgeEffect: void onPull(float)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.EdgeEffect: void onRelease()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.EdgeEffect: void setSize(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI/Edge Effect, check callbacks")
<android.widget.EditText: android.text.Editable getText()> - @DSSafe(DSCat.GUI) - @DSComment("GUI/EditText, check callbacks")
<android.widget.EditText: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("GUI/EditText, check callbacks")
<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("GUI/EditText, check callbacks")
<android.widget.EditText: void selectAll()> - @DSSafe(DSCat.GUI) - @DSComment("GUI/EditText, check callbacks")
<android.widget.EditText: void setSelection(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI/EditText, check callbacks")
<android.widget.EditText: void setSelection(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI/EditText, check callbacks")
<android.widget.EditText: void setText(java.lang.CharSequence,android.widget.TextView$BufferType)> - @DSSafe(DSCat.GUI) - @DSComment("GUI/EditText, check callbacks")
<android.widget.ExpandableListAdapter: java.lang.Object getChild(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("ExpandableListAdapter, data binding")
<android.widget.ExpandableListView$OnChildClickListener: boolean onChildClick(android.widget.ExpandableListView,android.view.View,int,int,long)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.ExpandableListView: android.widget.ExpandableListAdapter getExpandableListAdapter()> - @DSSafe(DSCat.GUI) - @DSComment("CompoundButton, check modeling")
<android.widget.ExpandableListView: android.widget.ListAdapter getAdapter()> - @DSSafe(DSCat.GUI) - @DSComment("CompoundButton, check modeling")
<android.widget.ExpandableListView: int getPackedPositionChild(long)> - @DSSafe(DSCat.GUI) - @DSComment("CompoundButton, check modeling")
<android.widget.ExpandableListView: int getPackedPositionGroup(long)> - @DSSafe(DSCat.GUI) - @DSComment("CompoundButton, check modeling")
<android.widget.ExpandableListView: int getPackedPositionType(long)> - @DSSafe(DSCat.GUI) - @DSComment("CompoundButton, check modeling")
<android.widget.ExpandableListView: void setAdapter(android.widget.ExpandableListAdapter)> - @DSSafe(DSCat.GUI) - @DSComment("CompoundButton, check modeling")
<android.widget.ExpandableListView: void setOnChildClickListener(android.widget.ExpandableListView$OnChildClickListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.FilterQueryProvider: android.database.Cursor runQuery(java.lang.CharSequence)> - @DSSpec(DSCat.DATABASE) - @DSComment("returned DB object")
<android.widget.FrameLayout$LayoutParams: void <init>(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Layout parameters")
<android.widget.FrameLayout$LayoutParams: void <init>(int,int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Layout parameters")
<android.widget.FrameLayout: android.graphics.drawable.Drawable getForeground()> - @DSSafe(DSCat.GUI) - @DSComment("GUI/FrameLayout, check callbacks")
<android.widget.FrameLayout: android.widget.FrameLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("GUI/FrameLayout, check callbacks")
<android.widget.FrameLayout: boolean gatherTransparentRegion(android.graphics.Region)> - @DSSafe(DSCat.GUI) - @DSComment("GUI/FrameLayout, check callbacks")
<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()> - @DSSafe(DSCat.GUI) - @DSComment("GUI/FrameLayout, check callbacks")
<android.widget.FrameLayout: boolean getMeasureAllChildren()> - @DSSafe(DSCat.GUI) - @DSComment("GUI/FrameLayout, check callbacks")
<android.widget.FrameLayout: boolean shouldDelayChildPressedState()> - @DSSafe(DSCat.GUI) - @DSComment("GUI/FrameLayout, check callbacks")
<android.widget.FrameLayout: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("GUI/FrameLayout, check callbacks")
<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("GUI/FrameLayout, check callbacks")
<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI/FrameLayout, check callbacks")
<android.widget.FrameLayout: void draw(android.graphics.Canvas)> - @DSSafe(DSCat.GUI) - @DSComment("GUI/FrameLayout, check callbacks")
<android.widget.FrameLayout: void jumpDrawablesToCurrentState()> - @DSSafe(DSCat.GUI) - @DSComment("GUI/FrameLayout, check callbacks")
<android.widget.FrameLayout: void onLayout(boolean,int,int,int,int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.FrameLayout: void onMeasure(int,int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.FrameLayout: void onSizeChanged(int,int,int,int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.FrameLayout: void setForeground(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("GUI/FrameLayout, check callbacks")
<android.widget.FrameLayout: void setForegroundGravity(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI/FrameLayout, check callbacks")
<android.widget.FrameLayout: void setMeasureAllChildren(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("GUI/FrameLayout, check callbacks")
<android.widget.GridView: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("GUI GridView")
<android.widget.GridView: void setAdapter(android.widget.ListAdapter)> - @DSSafe(DSCat.GUI) - @DSComment("GUI GridView")
<android.widget.GridView: void setNumColumns(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI GridView")
<android.widget.GridView: void setSelection(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI GridView")
<android.widget.HorizontalScrollView: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("GUI ScrollView")
<android.widget.HorizontalScrollView: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("GUI ScrollView")
<android.widget.HorizontalScrollView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.GUI) - @DSComment("GUI ScrollView")
<android.widget.HorizontalScrollView: void onMeasure(int,int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.HorizontalScrollView: void requestLayout()> - @DSSafe(DSCat.GUI) - @DSComment("GUI ScrollView")
<android.widget.HorizontalScrollView: void setFillViewport(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("GUI ScrollView")
<android.widget.HorizontalScrollView: void smoothScrollTo(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI ScrollView")
<android.widget.ImageButton: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("ImageButton")
<android.widget.ImageButton: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("ImageButton")
<android.widget.ImageButton: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.GUI) - @DSComment("ImageButton")
<android.widget.ImageView: android.graphics.drawable.Drawable getDrawable()> - @DSSafe(DSCat.GUI) - @DSComment("Safe excetp setImageURI")
<android.widget.ImageView: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("Safe excetp setImageURI")
<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("Safe excetp setImageURI")
<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.GUI) - @DSComment("Safe excetp setImageURI")
<android.widget.ImageView: void onAttachedToWindow()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.ImageView: void onDetachedFromWindow()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.ImageView: void onDraw(android.graphics.Canvas)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.ImageView: void setAdjustViewBounds(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Safe excetp setImageURI")
<android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)> - @DSSafe(DSCat.GUI) - @DSComment("Safe excetp setImageURI")
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("Safe excetp setImageURI")
<android.widget.ImageView: void setImageResource(int)> - @DSSafe(DSCat.GUI) - @DSComment("Safe excetp setImageURI")
<android.widget.ImageView: void setImageState(int[],boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Safe excetp setImageURI")
<android.widget.ImageView: void setImageURI(android.net.Uri)> - @DSSafe(DSCat.GUI) - @DSComment("Safe excetp setImageURI")
<android.widget.ImageView: void setMaxHeight(int)> - @DSSafe(DSCat.GUI) - @DSComment("Safe excetp setImageURI")
<android.widget.ImageView: void setMaxWidth(int)> - @DSSafe(DSCat.GUI) - @DSComment("Safe excetp setImageURI")
<android.widget.ImageView: void setScaleType(android.widget.ImageView$ScaleType)> - @DSSafe(DSCat.GUI) - @DSComment("Safe excetp setImageURI")
<android.widget.ImageView: void setVisibility(int)> - @DSSafe(DSCat.GUI) - @DSComment("Safe excetp setImageURI")
<android.widget.LinearLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("GUI Layout")
<android.widget.LinearLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)> - @DSSafe(DSCat.GUI) - @DSComment("GUI Layout")
<android.widget.LinearLayout$LayoutParams: void <init>(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI Layout")
<android.widget.LinearLayout$LayoutParams: void <init>(int,int,float)> - @DSSafe(DSCat.GUI) - @DSComment("GUI Layout")
<android.widget.LinearLayout: int getOrientation()> - @DSSafe(DSCat.GUI) - @DSComment("Layout")
<android.widget.LinearLayout: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("Layout")
<android.widget.LinearLayout: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("Layout")
<android.widget.LinearLayout: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.GUI) - @DSComment("Layout")
<android.widget.LinearLayout: void onDraw(android.graphics.Canvas)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.LinearLayout: void onLayout(boolean,int,int,int,int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.LinearLayout: void onMeasure(int,int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.LinearLayout: void setBaselineAligned(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Layout")
<android.widget.LinearLayout: void setGravity(int)> - @DSSafe(DSCat.GUI) - @DSComment("Layout")
<android.widget.LinearLayout: void setOrientation(int)> - @DSSafe(DSCat.GUI) - @DSComment("Layout")
<android.widget.ListView: android.graphics.drawable.Drawable getDivider()> - @DSSafe(DSCat.GUI) - @DSComment("ListView")
<android.widget.ListView: android.widget.ListAdapter getAdapter()> - @DSSafe(DSCat.GUI) - @DSComment("ListView")
<android.widget.ListView: int getDividerHeight()> - @DSSafe(DSCat.GUI) - @DSComment("ListView")
<android.widget.ListView: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("ListView")
<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("ListView")
<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.GUI) - @DSComment("ListView")
<android.widget.ListView: void addFooterView(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("ListView")
<android.widget.ListView: void addHeaderView(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("ListView")
<android.widget.ListView: void addHeaderView(android.view.View,java.lang.Object,boolean)> - @DSSafe(DSCat.GUI) - @DSComment("ListView")
<android.widget.ListView: void layoutChildren()> - @DSSafe(DSCat.GUI) - @DSComment("ListView")
<android.widget.ListView: void setAdapter(android.widget.ListAdapter)> - @DSSafe(DSCat.GUI) - @DSComment("ListView")
<android.widget.ListView: void setCacheColorHint(int)> - @DSSafe(DSCat.GUI) - @DSComment("ListView")
<android.widget.ListView: void setDivider(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("ListView")
<android.widget.ListView: void setDividerHeight(int)> - @DSSafe(DSCat.GUI) - @DSComment("ListView")
<android.widget.ListView: void setItemsCanFocus(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("ListView")
<android.widget.ListView: void setSelection(int)> - @DSSafe(DSCat.GUI) - @DSComment("ListView")
<android.widget.ListView: void setSelectionFromTop(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("ListView")
<android.widget.MediaController: boolean dispatchKeyEvent(android.view.KeyEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.MediaController: boolean isShowing()> - @DSSafe(DSCat.GUI) - @DSComment("No action.  Check callbacks modeling")
<android.widget.MediaController: boolean onTouchEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.MediaController: boolean onTrackballEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.MediaController: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("No action.  Check callbacks modeling")
<android.widget.MediaController: void hide()> - @DSSafe(DSCat.GUI) - @DSComment("No action.  Check callbacks modeling")
<android.widget.MediaController: void onFinishInflate()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.MediaController: void setAnchorView(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("No action.  Check callbacks modeling")
<android.widget.MediaController: void setEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("No action.  Check callbacks modeling")
<android.widget.MediaController: void setMediaPlayer(android.widget.MediaController$MediaPlayerControl)> - @DSSafe(DSCat.GUI) - @DSComment("No action.  Check callbacks modeling")
<android.widget.MediaController: void setPrevNextListeners(android.view.View$OnClickListener,android.view.View$OnClickListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.MediaController: void show()> - @DSSafe(DSCat.GUI) - @DSComment("No action.  Check callbacks modeling")
<android.widget.MediaController: void show(int)> - @DSSafe(DSCat.GUI) - @DSComment("No action.  Check callbacks modeling")
<android.widget.NumberPicker: int getValue()> - @DSSafe(DSCat.GUI) - @DSComment("UI of number picker")
<android.widget.NumberPicker: void setDisplayedValues(java.lang.String[])> - @DSSafe(DSCat.GUI) - @DSComment("UI of number picker")
<android.widget.NumberPicker: void setMaxValue(int)> - @DSSafe(DSCat.GUI) - @DSComment("UI of number picker")
<android.widget.NumberPicker: void setMinValue(int)> - @DSSafe(DSCat.GUI) - @DSComment("UI of number picker")
<android.widget.NumberPicker: void setValue(int)> - @DSSafe(DSCat.GUI) - @DSComment("UI of number picker")
<android.widget.PopupMenu: android.view.Menu getMenu()> - @DSSafe(DSCat.GUI) - @DSComment("Popup menu, check callbacks modeled")
<android.widget.PopupMenu: android.view.MenuInflater getMenuInflater()> - @DSSafe(DSCat.GUI) - @DSComment("Popup menu, check callbacks modeled")
<android.widget.PopupMenu: void <init>(android.content.Context,android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Popup menu, check callbacks modeled")
<android.widget.PopupMenu: void setOnMenuItemClickListener(android.widget.PopupMenu$OnMenuItemClickListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.PopupMenu: void show()> - @DSSafe(DSCat.GUI) - @DSComment("Popup menu, check callbacks modeled")
<android.widget.PopupWindow$OnDismissListener: void onDismiss()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.PopupWindow: android.graphics.drawable.Drawable getBackground()> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: android.view.View getContentView()> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: boolean isShowing()> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: int getHeight()> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: int getInputMethodMode()> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: int getWidth()> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: void <init>(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: void dismiss()> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: void setContentView(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: void setFocusable(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: void setHeight(int)> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: void setInputMethodMode(int)> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.PopupWindow: void setOutsideTouchable(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: void setTouchInterceptor(android.view.View$OnTouchListener)> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: void setTouchable(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: void setWidth(int)> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: void setWindowLayoutMode(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: void showAsDropDown(android.view.View,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: void update(android.view.View,int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.PopupWindow: void update(int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Popup Window, check callbacks modeled")
<android.widget.ProgressBar: int getMax()> - @DSSafe(DSCat.GUI) - @DSComment("ProgressBar")
<android.widget.ProgressBar: int getProgress()> - @DSSafe(DSCat.GUI) - @DSComment("ProgressBar")
<android.widget.ProgressBar: int getSecondaryProgress()> - @DSSafe(DSCat.GUI) - @DSComment("ProgressBar")
<android.widget.ProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.GUI) - @DSComment("ProgressBar")
<android.widget.ProgressBar: void setIndeterminate(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("ProgressBar")
<android.widget.ProgressBar: void setMax(int)> - @DSSafe(DSCat.GUI) - @DSComment("ProgressBar")
<android.widget.ProgressBar: void setProgress(int)> - @DSSafe(DSCat.GUI) - @DSComment("ProgressBar")
<android.widget.ProgressBar: void setProgressDrawable(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("ProgressBar")
<android.widget.ProgressBar: void setSecondaryProgress(int)> - @DSSafe(DSCat.GUI) - @DSComment("ProgressBar")
<android.widget.ProgressBar: void setVisibility(int)> - @DSSafe(DSCat.GUI) - @DSComment("ProgressBar")
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)> - @DSSpec(DSCat.CONTACT) - @DSComment("Contact manipulation UI")
<android.widget.QuickContactBadge: void assignContactUri(android.net.Uri)> - @DSSpec(DSCat.CONTACT) - @DSComment("Contact manipulation UI")
<android.widget.RadioButton: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("RadioButton")
<android.widget.RadioGroup$LayoutParams: void <init>(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("")
<android.widget.RadioGroup: int getCheckedRadioButtonId()> - @DSSafe(DSCat.GUI) - @DSComment("RadioGroup")
<android.widget.RadioGroup: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("RadioGroup")
<android.widget.RadioGroup: void check(int)> - @DSSafe(DSCat.GUI) - @DSComment("RadioGroup")
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.RatingBar$OnRatingBarChangeListener: void onRatingChanged(android.widget.RatingBar,float,boolean)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.RatingBar: float getRating()> - @DSSafe(DSCat.GUI) - @DSComment("RatingBar")
<android.widget.RatingBar: void setOnRatingBarChangeListener(android.widget.RatingBar$OnRatingBarChangeListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.RatingBar: void setRating(float)> - @DSSafe(DSCat.GUI) - @DSComment("RatingBar")
<android.widget.RelativeLayout$LayoutParams: void <init>(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Layout info")
<android.widget.RelativeLayout$LayoutParams: void addRule(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Layout info")
<android.widget.RelativeLayout$LayoutParams: void addRule(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Layout info")
<android.widget.RelativeLayout: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("Layout")
<android.widget.RelativeLayout: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("Layout")
<android.widget.RelativeLayout: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.GUI) - @DSComment("Layout")
<android.widget.RelativeLayout: void onLayout(boolean,int,int,int,int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.RelativeLayout: void onMeasure(int,int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.RemoteViews: void <init>(java.lang.String,int)> - @DSSafe(DSCat.GUI) - @DSComment("check setOnClickPendingIntent")
<android.widget.RemoteViews: void setImageViewResource(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("check setOnClickPendingIntent")
<android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)> - @DSSafe(DSCat.GUI) - @DSComment("check setOnClickPendingIntent")
<android.widget.RemoteViews: void setProgressBar(int,int,int,boolean)> - @DSSafe(DSCat.GUI) - @DSComment("check setOnClickPendingIntent")
<android.widget.RemoteViews: void setTextColor(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("check setOnClickPendingIntent")
<android.widget.RemoteViews: void setTextViewText(int,java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("check setOnClickPendingIntent")
<android.widget.RemoteViews: void setViewVisibility(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("check setOnClickPendingIntent")
<android.widget.ScrollView: boolean onInterceptTouchEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.ScrollView: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("ScrollView")
<android.widget.ScrollView: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("ScrollView")
<android.widget.ScrollView: void addView(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("ScrollView")
<android.widget.ScrollView: void scrollTo(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("ScrollView")
<android.widget.Scroller: boolean computeScrollOffset()> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: boolean isFinished()> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: float getCurrVelocity()> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: int getCurrX()> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: int getCurrY()> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: int getDuration()> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: int getFinalX()> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: int getFinalY()> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: int timePassed()> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator)> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: void abortAnimation()> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: void fling(int,int,int,int,int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: void startScroll(int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: void startScroll(int,int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.SearchView: boolean isIconified()> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: boolean isQueryRefinementEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: boolean isSubmitButtonEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: java.lang.CharSequence getQuery()> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: void onActionViewCollapsed()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.SearchView: void setIconified(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: void setImeOptions(int)> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: void setInputType(int)> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: void setMaxWidth(int)> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: void setOnCloseListener(android.widget.SearchView$OnCloseListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.SearchView: void setOnQueryTextListener(android.widget.SearchView$OnQueryTextListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.SearchView: void setQuery(java.lang.CharSequence,boolean)> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: void setQueryHint(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: void setQueryRefinementEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: void setSearchableInfo(android.app.SearchableInfo)> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: void setSubmitButtonEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SeekBar$OnSeekBarChangeListener: void onProgressChanged(android.widget.SeekBar,int,boolean)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.SeekBar$OnSeekBarChangeListener: void onStartTrackingTouch(android.widget.SeekBar)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.SeekBar$OnSeekBarChangeListener: void onStopTrackingTouch(android.widget.SeekBar)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.SeekBar: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("SeekBar")
<android.widget.SeekBar: void setOnSeekBarChangeListener(android.widget.SeekBar$OnSeekBarChangeListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.ShareActionProvider: void <init>(android.content.Context)> - @DSSpec(DSCat.SHARING) - @DSComment("Sharing request")
<android.widget.ShareActionProvider: void setShareHistoryFileName(java.lang.String)> - @DSSpec(DSCat.SHARING) - @DSComment("Sharing request")
<android.widget.ShareActionProvider: void setShareIntent(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.widget.SimpleCursorAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.widget.Spinner: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("Spinner")
<android.widget.Spinner: void setAdapter(android.widget.SpinnerAdapter)> - @DSSafe(DSCat.GUI) - @DSComment("Spinner")
<android.widget.Spinner: void setEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Spinner")
<android.widget.SpinnerAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> - @DSSafe(DSCat.GUI) - @DSComment("Spinner data holder")
<android.widget.Switch: void setChecked(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Switch, UI only")
<android.widget.TabHost$OnTabChangeListener: void onTabChanged(java.lang.String)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TabHost: java.lang.String getCurrentTabTag()> - @DSSafe(DSCat.GUI) - @DSComment("TabHost, check callbacks modeled")
<android.widget.TabHost: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("TabHost, check callbacks modeled")
<android.widget.TabHost: void onAttachedToWindow()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TabHost: void onDetachedFromWindow()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TabHost: void setCurrentTab(int)> - @DSSafe(DSCat.GUI) - @DSComment("TabHost, check callbacks modeled")
<android.widget.TabHost: void setCurrentTabByTag(java.lang.String)> - @DSSafe(DSCat.GUI) - @DSComment("TabHost, check callbacks modeled")
<android.widget.TabHost: void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.TabHost: void setup()> - @DSSafe(DSCat.GUI) - @DSComment("TabHost, check callbacks modeled")
<android.widget.TabHost: void setup(android.app.LocalActivityManager)> - @DSSafe(DSCat.GUI) - @DSComment("TabHost, check callbacks modeled")
<android.widget.TabWidget: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("Tab Widget")
<android.widget.TableLayout$LayoutParams: void <init>(int,int,float)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Layout parameters")
<android.widget.TableLayout: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("Layout")
<android.widget.TableLayout: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("Layout")
<android.widget.TableLayout: void addView(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Layout")
<android.widget.TableLayout: void addView(android.view.View,android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.GUI) - @DSComment("Layout")
<android.widget.TableLayout: void addView(android.view.View,int)> - @DSSafe(DSCat.GUI) - @DSComment("Layout")
<android.widget.TableLayout: void onMeasure(int,int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TableLayout: void setColumnStretchable(int,boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Layout")
<android.widget.TableLayout: void setStretchAllColumns(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Layout")
<android.widget.TableRow$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Layout parameters")
<android.widget.TableRow$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Layout parameters")
<android.widget.TableRow$LayoutParams: void <init>(int,int,float)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Layout parameters")
<android.widget.TextSwitcher: void setText(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("TextSwitcher, switching among views")
<android.widget.TextView: android.content.res.ColorStateList getHintTextColors()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: android.content.res.ColorStateList getLinkTextColors()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: android.content.res.ColorStateList getTextColors()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: android.graphics.Typeface getTypeface()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawables()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: android.os.Bundle getInputExtras(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: android.os.Parcelable onSaveInstanceState()> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.widget.TextView: android.text.Editable getEditableText()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: android.text.InputFilter[] getFilters()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: android.text.Layout getLayout()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: android.text.TextPaint getPaint()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: android.text.TextUtils$TruncateAt getEllipsize()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: android.text.method.KeyListener getKeyListener()> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.TextView: android.text.method.MovementMethod getMovementMethod()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: android.text.method.TransformationMethod getTransformationMethod()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: android.text.style.URLSpan[] getUrls()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: android.view.ActionMode$Callback getCustomSelectionActionModeCallback()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.widget.TextView: boolean bringPointIntoView(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: boolean didTouchFocusSelect()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: boolean extractText(android.view.inputmethod.ExtractedTextRequest,android.view.inputmethod.ExtractedText)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: boolean getFreezesText()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: boolean getLinksClickable()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: boolean hasSelection()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: boolean isInputMethodTarget()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: boolean isSuggestionsEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: boolean isTextSelectable()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: boolean moveCursorToVisibleOffset()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.widget.TextView: boolean onCheckIsTextEditor()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: boolean onDragEvent(android.view.DragEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: boolean onGenericMotionEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: boolean onKeyDown(int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: boolean onKeyMultiple(int,int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: boolean onKeyPreIme(int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: boolean onKeyShortcut(int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: boolean onKeyUp(int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: boolean onPreDraw()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: boolean onPrivateIMECommand(java.lang.String,android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: boolean onTextContextMenuItem(int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: boolean onTouchEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: boolean onTrackballEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: boolean performLongClick()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: float getTextScaleX()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: float getTextSize()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getAutoLinkMask()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getBaseline()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getCompoundDrawablePadding()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getCompoundPaddingBottom()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getCompoundPaddingLeft()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getCompoundPaddingRight()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getCompoundPaddingTop()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getCurrentHintTextColor()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getCurrentTextColor()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getExtendedPaddingBottom()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getExtendedPaddingTop()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getGravity()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getImeActionId()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getImeOptions()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getInputType()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getLineBounds(int,android.graphics.Rect)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getLineCount()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getLineHeight()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getOffsetForPosition(float,float)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getPaintFlags()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getSelectionEnd()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getSelectionStart()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getTotalPaddingBottom()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getTotalPaddingLeft()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getTotalPaddingRight()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int getTotalPaddingTop()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: int length()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: java.lang.CharSequence getError()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: java.lang.CharSequence getHint()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: java.lang.CharSequence getImeActionLabel()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: java.lang.CharSequence getText()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: java.lang.String getPrivateImeOptions()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void addTextChangedListener(android.text.TextWatcher)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.TextView: void append(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void append(java.lang.CharSequence,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void beginBatchEdit()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void cancelLongPress()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void clearComposingText()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void computeScroll()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void debug(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void endBatchEdit()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void getFocusedRect(android.graphics.Rect)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void invalidateDrawable(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void jumpDrawablesToCurrentState()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void onBeginBatchEdit()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: void onCommitCompletion(android.view.inputmethod.CompletionInfo)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: void onCommitCorrection(android.view.inputmethod.CorrectionInfo)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: void onDraw(android.graphics.Canvas)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: void onEditorAction(int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: void onEndBatchEdit()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: void onFinishTemporaryDetach()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: void onMeasure(int,int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: void onRestoreInstanceState(android.os.Parcelable)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.widget.TextView: void onStartTemporaryDetach()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: void onWindowFocusChanged(boolean)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TextView: void removeTextChangedListener(android.text.TextWatcher)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.TextView: void sendAccessibilityEvent(int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.widget.TextView: void setAllCaps(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setAutoLinkMask(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setCompoundDrawablePadding(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setCompoundDrawables(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setCursorVisible(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.TextView: void setEditableFactory(android.text.Editable$Factory)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setEllipsize(android.text.TextUtils$TruncateAt)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setEms(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setError(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setError(java.lang.CharSequence,android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setExtractedText(android.view.inputmethod.ExtractedText)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setFilters(android.text.InputFilter[])> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setFreezesText(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setGravity(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setHeight(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setHighlightColor(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setHint(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setHint(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setHintTextColor(android.content.res.ColorStateList)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setHintTextColor(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setHorizontallyScrolling(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setImeActionLabel(java.lang.CharSequence,int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setImeOptions(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setIncludeFontPadding(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setInputExtras(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setInputType(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setKeyListener(android.text.method.KeyListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.TextView: void setLineSpacing(float,float)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setLines(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setLinkTextColor(android.content.res.ColorStateList)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setLinkTextColor(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setLinksClickable(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setMarqueeRepeatLimit(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setMaxEms(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setMaxHeight(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setMaxLines(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setMaxWidth(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setMinEms(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setMinHeight(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setMinLines(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setMinWidth(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setMovementMethod(android.text.method.MovementMethod)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setOnEditorActionListener(android.widget.TextView$OnEditorActionListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.TextView: void setPadding(int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setPaintFlags(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setPrivateImeOptions(java.lang.String)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setRawInputType(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setScroller(android.widget.Scroller)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setSelectAllOnFocus(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setSelected(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setShadowLayer(float,float,float,int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setSingleLine()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setSingleLine(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setSpannableFactory(android.text.Spannable$Factory)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setText(char[],int,int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setText(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setText(int,android.widget.TextView$BufferType)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setText(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setText(java.lang.CharSequence,android.widget.TextView$BufferType)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setTextAppearance(android.content.Context,int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setTextColor(android.content.res.ColorStateList)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setTextColor(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setTextIsSelectable(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setTextKeepState(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setTextKeepState(java.lang.CharSequence,android.widget.TextView$BufferType)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setTextScaleX(float)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setTextSize(float)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setTextSize(int,float)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setTransformationMethod(android.text.method.TransformationMethod)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setTypeface(android.graphics.Typeface)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setTypeface(android.graphics.Typeface,int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setWidth(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TimePicker: java.lang.Integer getCurrentHour()> - @DSSafe(DSCat.GUI) - @DSComment("TimePicker, check callbacks modeled")
<android.widget.TimePicker: java.lang.Integer getCurrentMinute()> - @DSSafe(DSCat.GUI) - @DSComment("TimePicker, check callbacks modeled")
<android.widget.TimePicker: void setCurrentHour(java.lang.Integer)> - @DSSafe(DSCat.GUI) - @DSComment("TimePicker, check callbacks modeled")
<android.widget.TimePicker: void setCurrentMinute(java.lang.Integer)> - @DSSafe(DSCat.GUI) - @DSComment("TimePicker, check callbacks modeled")
<android.widget.TimePicker: void setIs24HourView(java.lang.Boolean)> - @DSSafe(DSCat.GUI) - @DSComment("TimePicker, check callbacks modeled")
<android.widget.TimePicker: void setOnTimeChangedListener(android.widget.TimePicker$OnTimeChangedListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Toast")
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)> - @DSSafe(DSCat.GUI) - @DSComment("Toast")
<android.widget.Toast: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("Toast")
<android.widget.Toast: void setDuration(int)> - @DSSafe(DSCat.GUI) - @DSComment("Toast")
<android.widget.Toast: void setGravity(int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Toast")
<android.widget.Toast: void setText(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Toast")
<android.widget.Toast: void setView(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Toast")
<android.widget.Toast: void show()> - @DSSafe(DSCat.GUI) - @DSComment("Toast")
<android.widget.ToggleButton: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("ToggleButton, check callbacks modeled")
<android.widget.ToggleButton: void setChecked(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("ToggleButton, check callbacks modeled")
<android.widget.ToggleButton: void setTextOff(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("ToggleButton, check callbacks modeled")
<android.widget.ToggleButton: void setTextOn(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("ToggleButton, check callbacks modeled")
<android.widget.TwoLineListItem: android.widget.TextView getText1()> - @DSSafe(DSCat.GUI) - @DSComment("ToggleButton, check callbacks modeled")
<android.widget.TwoLineListItem: android.widget.TextView getText2()> - @DSSafe(DSCat.GUI) - @DSComment("ToggleButton, check callbacks modeled")
<android.widget.TwoLineListItem: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("ToggleButton, check callbacks modeled")
<android.widget.TwoLineListItem: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.GUI) - @DSComment("ToggleButton, check callbacks modeled")
<android.widget.TwoLineListItem: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.GUI) - @DSComment("ToggleButton, check callbacks modeled")
<android.widget.TwoLineListItem: void onFinishInflate()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.VideoView: boolean canPause()> - @DSSafe(DSCat.GUI) - @DSComment("VideoView, check callbacks modeled")
<android.widget.VideoView: boolean canSeekBackward()> - @DSSafe(DSCat.GUI) - @DSComment("VideoView, check callbacks modeled")
<android.widget.VideoView: boolean canSeekForward()> - @DSSafe(DSCat.GUI) - @DSComment("VideoView, check callbacks modeled")
<android.widget.VideoView: boolean isPlaying()> - @DSSafe(DSCat.GUI) - @DSComment("VideoView, check callbacks modeled")
<android.widget.VideoView: boolean onKeyDown(int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.VideoView: boolean onTouchEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.VideoView: boolean onTrackballEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.VideoView: int getBufferPercentage()> - @DSSafe(DSCat.GUI) - @DSComment("VideoView, check callbacks modeled")
<android.widget.VideoView: int getCurrentPosition()> - @DSSafe(DSCat.GUI) - @DSComment("VideoView, check callbacks modeled")
<android.widget.VideoView: int getDuration()> - @DSSafe(DSCat.GUI) - @DSComment("VideoView, check callbacks modeled")
<android.widget.VideoView: int resolveAdjustedSize(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("VideoView, check callbacks modeled")
<android.widget.VideoView: void pause()> - @DSSafe(DSCat.GUI) - @DSComment("VideoView, check callbacks modeled")
<android.widget.VideoView: void resume()> - @DSSafe(DSCat.GUI) - @DSComment("VideoView, check callbacks modeled")
<android.widget.VideoView: void seekTo(int)> - @DSSafe(DSCat.GUI) - @DSComment("VideoView, check callbacks modeled")
<android.widget.VideoView: void setMediaController(android.widget.MediaController)> - @DSSafe(DSCat.GUI) - @DSComment("VideoView, check callbacks modeled")
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.VideoView: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.widget.VideoView: void setVideoPath(java.lang.String)> - @DSSafe(DSCat.GUI) - @DSComment("VideoView, check callbacks modeled")
<android.widget.VideoView: void setVideoURI(android.net.Uri)> - @DSSafe(DSCat.GUI) - @DSComment("VideoView, check callbacks modeled")
<android.widget.VideoView: void start()> - @DSSafe(DSCat.GUI) - @DSComment("VideoView, check callbacks modeled")
<android.widget.VideoView: void stopPlayback()> - @DSSafe(DSCat.GUI) - @DSComment("VideoView, check callbacks modeled")
<android.widget.VideoView: void suspend()> - @DSSafe(DSCat.GUI) - @DSComment("VideoView, check callbacks modeled")
<android.widget.ViewAnimator: android.view.View getCurrentView()> - @DSSafe(DSCat.GUI) - @DSComment("ViewAnimator, check callbacks modeled")
<android.widget.ViewAnimator: int getDisplayedChild()> - @DSSafe(DSCat.GUI) - @DSComment("ViewAnimator, check callbacks modeled")
<android.widget.ViewAnimator: void removeAllViews()> - @DSSafe(DSCat.GUI) - @DSComment("ViewAnimator, check callbacks modeled")
<android.widget.ViewAnimator: void removeViewAt(int)> - @DSSafe(DSCat.GUI) - @DSComment("ViewAnimator, check callbacks modeled")
<android.widget.ViewAnimator: void setDisplayedChild(int)> - @DSSafe(DSCat.GUI) - @DSComment("ViewAnimator, check callbacks modeled")
<android.widget.ViewAnimator: void setInAnimation(android.view.animation.Animation)> - @DSSafe(DSCat.GUI) - @DSComment("ViewAnimator, check callbacks modeled")
<android.widget.ViewAnimator: void setOutAnimation(android.view.animation.Animation)> - @DSSafe(DSCat.GUI) - @DSComment("ViewAnimator, check callbacks modeled")
<android.widget.ViewAnimator: void showNext()> - @DSSafe(DSCat.GUI) - @DSComment("ViewAnimator, check callbacks modeled")
<android.widget.ViewAnimator: void showPrevious()> - @DSSafe(DSCat.GUI) - @DSComment("ViewAnimator, check callbacks modeled")
<android.widget.ZoomButtonsController: void setAutoDismissed(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("ZoomButtonController")
<com.google.android.maps.GeoPoint: int getLatitudeE6()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Simple data structure")
<com.google.android.maps.GeoPoint: int getLongitudeE6()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Simple data structure")
<com.google.android.maps.GeoPoint: void <init>(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Simple data structure")
<com.google.android.maps.ItemizedOverlay: android.graphics.drawable.Drawable boundCenter(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("ItemizedOverlay, display only")
<com.google.android.maps.ItemizedOverlay: android.graphics.drawable.Drawable boundCenterBottom(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("ItemizedOverlay, display only")
<com.google.android.maps.ItemizedOverlay: boolean onTap(int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.ItemizedOverlay: boolean onTouchEvent(android.view.MotionEvent,com.google.android.maps.MapView)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.ItemizedOverlay: void <init>(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("ItemizedOverlay, display only")
<com.google.android.maps.ItemizedOverlay: void draw(android.graphics.Canvas,com.google.android.maps.MapView,boolean)> - @DSSafe(DSCat.GUI) - @DSComment("ItemizedOverlay, display only")
<com.google.android.maps.ItemizedOverlay: void populate()> - @DSSafe(DSCat.GUI) - @DSComment("ItemizedOverlay, display only")
<com.google.android.maps.MapActivity: android.app.ActionBar getActionBar()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: android.app.Activity getParent()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: android.app.Application getApplication()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: android.app.Dialog onCreateDialog(int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: android.app.FragmentManager getFragmentManager()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Android Manager retrieved/accessed")
<com.google.android.maps.MapActivity: android.app.LoaderManager getLoaderManager()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Android Manager retrieved/accessed")
<com.google.android.maps.MapActivity: android.app.PendingIntent createPendingResult(int,android.content.Intent,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<com.google.android.maps.MapActivity: android.content.ComponentName getCallingActivity()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: android.content.ComponentName getComponentName()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: android.content.ContentResolver getContentResolver()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: android.content.Context getApplicationContext()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: android.content.Context getBaseContext()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: android.content.Intent getIntent()> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<com.google.android.maps.MapActivity: android.content.SharedPreferences getPreferences(int)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: android.content.pm.ApplicationInfo getApplicationInfo()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: android.content.pm.PackageManager getPackageManager()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Android Manager retrieved/accessed")
<com.google.android.maps.MapActivity: android.content.res.AssetManager getAssets()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: android.content.res.Resources getResources()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: android.content.res.Resources$Theme getTheme()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: android.graphics.drawable.Drawable getWallpaper()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: android.graphics.drawable.Drawable peekWallpaper()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: android.os.Looper getMainLooper()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("callback needs to be called")
<com.google.android.maps.MapActivity: android.view.LayoutInflater getLayoutInflater()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: android.view.MenuInflater getMenuInflater()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: android.view.View findViewById(int)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: android.view.View getCurrentFocus()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: android.view.View onCreatePanelView(int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: android.view.Window getWindow()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: android.view.WindowManager getWindowManager()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Android Manager retrieved/accessed")
<com.google.android.maps.MapActivity: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<com.google.android.maps.MapActivity: boolean dispatchGenericMotionEvent(android.view.MotionEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<com.google.android.maps.MapActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<com.google.android.maps.MapActivity: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<com.google.android.maps.MapActivity: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<com.google.android.maps.MapActivity: boolean dispatchTouchEvent(android.view.MotionEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<com.google.android.maps.MapActivity: boolean dispatchTrackballEvent(android.view.MotionEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<com.google.android.maps.MapActivity: boolean hasWindowFocus()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: boolean isChangingConfigurations()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: boolean isChild()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: boolean isFinishing()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: boolean isLocationDisplayed()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: boolean isRestricted()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: boolean isTaskRoot()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: boolean moveTaskToBack(boolean)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<com.google.android.maps.MapActivity: boolean onContextItemSelected(android.view.MenuItem)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: boolean onCreateOptionsMenu(android.view.Menu)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: boolean onCreatePanelMenu(int,android.view.Menu)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: boolean onCreateThumbnail(android.graphics.Bitmap,android.graphics.Canvas)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: boolean onGenericMotionEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: boolean onKeyDown(int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: boolean onKeyLongPress(int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: boolean onKeyMultiple(int,int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: boolean onKeyShortcut(int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: boolean onKeyUp(int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: boolean onMenuItemSelected(int,android.view.MenuItem)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: boolean onMenuOpened(int,android.view.Menu)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: boolean onOptionsItemSelected(android.view.MenuItem)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: boolean onPrepareOptionsMenu(android.view.Menu)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: boolean onPreparePanel(int,android.view.View,android.view.Menu)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: boolean onSearchRequested()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: boolean onTouchEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: boolean onTrackballEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: boolean startActivityIfNeeded(android.content.Intent,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<com.google.android.maps.MapActivity: boolean startNextMatchingActivity(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<com.google.android.maps.MapActivity: int getChangingConfigurations()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: int getRequestedOrientation()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: int getTaskId()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: int getTitleColor()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: int getVolumeControlStream()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: int getWallpaperDesiredMinimumHeight()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: int getWallpaperDesiredMinimumWidth()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: int onGetMapDataSource()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: java.io.File getCacheDir()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<com.google.android.maps.MapActivity: java.io.File getExternalCacheDir()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<com.google.android.maps.MapActivity: java.io.File getFilesDir()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<com.google.android.maps.MapActivity: java.io.File getObbDir()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<com.google.android.maps.MapActivity: java.io.FileInputStream openFileInput(java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<com.google.android.maps.MapActivity: java.io.FileOutputStream openFileOutput(java.lang.String,int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<com.google.android.maps.MapActivity: java.lang.CharSequence getTitle()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: java.lang.CharSequence onCreateDescription()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: java.lang.ClassLoader getClassLoader()> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<com.google.android.maps.MapActivity: java.lang.Object getLastNonConfigurationInstance()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: java.lang.Object getSystemService(java.lang.String)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: java.lang.Object onRetainNonConfigurationInstance()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: java.lang.String getCallingPackage()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: java.lang.String getLocalClassName()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: java.lang.String getPackageCodePath()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: java.lang.String getPackageName()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: java.lang.String getPackageResourcePath()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: java.lang.String getString(int)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: java.lang.String[] databaseList()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: java.lang.String[] fileList()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void <init>()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void closeContextMenu()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void closeOptionsMenu()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void finish()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void finishActivity(int)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void finishActivityFromChild(android.app.Activity,int)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void finishFromChild(android.app.Activity)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void invalidateOptionsMenu()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void onActionModeFinished(android.view.ActionMode)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onActionModeStarted(android.view.ActionMode)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onActivityResult(int,int,android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<com.google.android.maps.MapActivity: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onAttachFragment(android.app.Fragment)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onAttachedToWindow()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onBackPressed()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onChildTitleChanged(android.app.Activity,java.lang.CharSequence)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onConfigurationChanged(android.content.res.Configuration)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onContentChanged()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onContextMenuClosed(android.view.Menu)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onCreate(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onDestroy()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onDetachedFromWindow()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onLowMemory()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onNewIntent(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<com.google.android.maps.MapActivity: void onOptionsMenuClosed(android.view.Menu)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onPanelClosed(int,android.view.Menu)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onPause()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onPostCreate(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onPostResume()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onPrepareDialog(int,android.app.Dialog)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onPrepareDialog(int,android.app.Dialog,android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onRestart()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onRestoreInstanceState(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onResume()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onSaveInstanceState(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onStart()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onStop()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onTitleChanged(java.lang.CharSequence,int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onTrimMemory(int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onUserInteraction()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onUserLeaveHint()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void onWindowFocusChanged(boolean)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapActivity: void openContextMenu(android.view.View)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<com.google.android.maps.MapActivity: void openOptionsMenu()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<com.google.android.maps.MapActivity: void overridePendingTransition(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void recreate()> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void registerForContextMenu(android.view.View)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<com.google.android.maps.MapActivity: void setContentView(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void setContentView(int)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void setFinishOnTouchOutside(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void setIntent(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<com.google.android.maps.MapActivity: void setRequestedOrientation(int)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void setResult(int,android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<com.google.android.maps.MapActivity: void setTitle(int)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void setTitle(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void setTitleColor(int)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void setVisible(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void startActivities(android.content.Intent[])> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void startActivity(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<com.google.android.maps.MapActivity: void startActivityForResult(android.content.Intent,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<com.google.android.maps.MapActivity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<com.google.android.maps.MapActivity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<com.google.android.maps.MapActivity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<com.google.android.maps.MapActivity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<com.google.android.maps.MapActivity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<com.google.android.maps.MapActivity: void startManagingCursor(android.database.Cursor)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void stopManagingCursor(android.database.Cursor)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void takeKeyEvents(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void triggerSearch(java.lang.String,android.os.Bundle)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void unbindService(android.content.ServiceConnection)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapActivity: void unregisterForContextMenu(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("MapActivity")
<com.google.android.maps.MapView: android.content.res.Resources getResources()> - @DSSafe(DSCat.GUI) - @DSComment("MapView only")
<com.google.android.maps.MapView: android.widget.ZoomButtonsController getZoomButtonsController()> - @DSSafe(DSCat.GUI) - @DSComment("MapView only")
<com.google.android.maps.MapView: com.google.android.maps.MapController getController()> - @DSSafe(DSCat.GUI) - @DSComment("MapView only")
<com.google.android.maps.MapView: com.google.android.maps.Projection getProjection()> - @DSSafe(DSCat.GUI) - @DSComment("MapView only")
<com.google.android.maps.MapView: java.util.List getOverlays()> - @DSSafe(DSCat.GUI) - @DSComment("MapView only")
<com.google.android.maps.MapView: void <init>(android.content.Context,java.lang.String)> - @DSSafe(DSCat.GUI) - @DSComment("MapView only")
<com.google.android.maps.MapView: void invalidate()> - @DSSafe(DSCat.GUI) - @DSComment("MapView only")
<com.google.android.maps.MapView: void onAttachedToWindow()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapView: void onDetachedFromWindow()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MapView: void setBuiltInZoomControls(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("MapView only")
<com.google.android.maps.MapView: void setClickable(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("MapView only")
<com.google.android.maps.MapView: void setSatellite(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("MapView only")
<dalvik.system.DexClassLoader: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.ClassLoader)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<dalvik.system.DexFile: dalvik.system.DexFile loadDex(java.lang.String,java.lang.String,int)> - @DSBan(DSCat.DALVIK) - @DSComment("Dalvik class method")
<dalvik.system.DexFile: java.util.Enumeration entries()> - @DSBan(DSCat.DALVIK) - @DSComment("Dalvik class method")
<java.io.BufferedInputStream: int read(byte[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.BufferedOutputStream: void write(byte[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.BufferedReader: java.lang.String readLine()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.BufferedWriter: void write(int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.ByteArrayOutputStream: void write(byte[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.ByteArrayOutputStream: void write(int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.CharArrayWriter: void write(char[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.CharArrayWriter: void write(int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataInput: boolean readBoolean()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataInput: byte readByte()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataInput: char readChar()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataInput: int readInt()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataInput: int readUnsignedByte()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataInput: int readUnsignedShort()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataInput: java.lang.String readUTF()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataInput: long readLong()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataInput: short readShort()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataInputStream: boolean readBoolean()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataInputStream: float readFloat()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataInputStream: int read(byte[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataInputStream: int readInt()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataInputStream: int readUnsignedByte()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataInputStream: int readUnsignedShort()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataInputStream: java.lang.String readUTF()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataInputStream: long readLong()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataInputStream: void readFully(byte[])> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataInputStream: void readFully(byte[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataOutput: void writeBoolean(boolean)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataOutput: void writeByte(int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataOutput: void writeInt(int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataOutput: void writeLong(long)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataOutput: void writeShort(int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataOutput: void writeUTF(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataOutputStream: void writeBoolean(boolean)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataOutputStream: void writeBytes(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataOutputStream: void writeFloat(float)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataOutputStream: void writeInt(int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataOutputStream: void writeLong(long)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataOutputStream: void writeShort(int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.DataOutputStream: void writeUTF(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.File: boolean delete()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.File: boolean mkdir()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.File: boolean mkdirs()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.File: boolean renameTo(java.io.File)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.File: boolean setLastModified(long)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.File: java.io.File getAbsoluteFile()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.File: java.io.File getCanonicalFile()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.File: java.io.File getParentFile()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.File: java.io.File[] listFiles()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.File: java.lang.String[] list()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.File: void <init>(java.net.URI)> - @DSSpec(DSCat.URI_EXCHANGE) - @DSComment("Potential Internet/URI processing")
<java.io.File: void deleteOnExit()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.FileInputStream: int available()> - @DSSpec(DSCat.IO) - @DSComment("File Input Stream")
<java.io.FileInputStream: int read()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.FileInputStream: int read(byte[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.FileInputStream: java.io.FileDescriptor getFD()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.FileInputStream: void <init>(java.io.File)> - @DSSpec(DSCat.IO) - @DSComment("File Input Stream")
<java.io.FileInputStream: void <init>(java.io.FileDescriptor)> - @DSSpec(DSCat.IO) - @DSComment("File Input Stream")
<java.io.FileInputStream: void <init>(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("File Input Stream")
<java.io.FileInputStream: void close()> - @DSSpec(DSCat.IO) - @DSComment("File Input Stream")
<java.io.FileOutputStream: java.io.FileDescriptor getFD()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.FileOutputStream: void <init>(java.io.File)> - @DSSpec(DSCat.IO) - @DSComment("File Output Stream")
<java.io.FileOutputStream: void <init>(java.io.File,boolean)> - @DSSpec(DSCat.IO) - @DSComment("File Output Stream")
<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)> - @DSSpec(DSCat.IO) - @DSComment("File Output Stream")
<java.io.FileOutputStream: void <init>(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("File Output Stream")
<java.io.FileOutputStream: void <init>(java.lang.String,boolean)> - @DSSpec(DSCat.IO) - @DSComment("File Output Stream")
<java.io.FileOutputStream: void close()> - @DSSpec(DSCat.IO) - @DSComment("File Output Stream")
<java.io.FileOutputStream: void write(byte[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.FileOutputStream: void write(int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.FileReader: void <init>(java.io.File)> - @DSSpec(DSCat.IO) - @DSComment("FileReader class")
<java.io.FileReader: void <init>(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("FileReader class")
<java.io.FileWriter: void <init>(java.io.File)> - @DSSpec(DSCat.IO) - @DSComment("FileWrite class")
<java.io.FileWriter: void <init>(java.io.File,boolean)> - @DSSpec(DSCat.IO) - @DSComment("FileWrite class")
<java.io.FileWriter: void <init>(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("FileWrite class")
<java.io.FileWriter: void <init>(java.lang.String,boolean)> - @DSSpec(DSCat.IO) - @DSComment("FileWrite class")
<java.io.FilterInputStream: int read()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.FilterInputStream: int read(byte[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.FilterOutputStream: void write(int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.InputStream: int read()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.InputStream: int read(byte[])> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.InputStream: int read(byte[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.InputStreamReader: void <init>(java.io.InputStream)> - @DSSpec(DSCat.IO) - @DSComment("InputStreamReader class")
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("InputStreamReader class")
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)> - @DSSpec(DSCat.IO) - @DSComment("InputStreamReader class")
<java.io.InputStreamReader: void close()> - @DSSpec(DSCat.IO) - @DSComment("InputStreamReader class")
<java.io.ObjectInputStream: boolean readBoolean()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.ObjectInputStream: double readDouble()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.ObjectInputStream: int read()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.io.ObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.io.ObjectInputStream: java.lang.Object readObject()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.ObjectInputStream: java.lang.String readUTF()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.ObjectOutputStream: void write(int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.ObjectOutputStream: void writeBoolean(boolean)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.ObjectOutputStream: void writeDouble(double)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.ObjectOutputStream: void writeUTF(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.OutputStream: void write(byte[])> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.OutputStream: void write(byte[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.OutputStream: void write(int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)> - @DSSpec(DSCat.IO) - @DSComment("OutputStreamWrite class")
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("OutputStreamWrite class")
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)> - @DSSpec(DSCat.IO) - @DSComment("OutputStreamWrite class")
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.CharsetEncoder)> - @DSSpec(DSCat.IO) - @DSComment("OutputStreamWrite class")
<java.io.OutputStreamWriter: void close()> - @DSSpec(DSCat.IO) - @DSComment("OutputStreamWrite class")
<java.io.OutputStreamWriter: void flush()> - @DSSpec(DSCat.IO) - @DSComment("OutputStreamWrite class")
<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void print(char)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void print(java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void println()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void println(boolean)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void println(java.lang.Object)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void println(java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void <init>(java.io.OutputStream)> - @DSSpec(DSCat.IO) - @DSComment("PrintWriter class")
<java.io.PrintWriter: void <init>(java.io.Writer)> - @DSSpec(DSCat.IO) - @DSComment("PrintWriter class")
<java.io.PrintWriter: void <init>(java.io.Writer,boolean)> - @DSSpec(DSCat.IO) - @DSComment("PrintWriter class")
<java.io.PrintWriter: void <init>(java.lang.String,java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("PrintWriter class")
<java.io.PrintWriter: void close()> - @DSSpec(DSCat.IO) - @DSComment("PrintWriter class")
<java.io.PrintWriter: void flush()> - @DSSpec(DSCat.IO) - @DSComment("PrintWriter class")
<java.io.PrintWriter: void print(boolean)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void print(int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void print(java.lang.Object)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void print(java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void println()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void println(boolean)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void println(int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void println(java.lang.Object)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void println(java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void write(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.PushbackInputStream: int read()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.RandomAccessFile: int read()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.RandomAccessFile: int read(byte[])> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.RandomAccessFile: int read(byte[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.RandomAccessFile: void write(byte[])> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.RandomAccessFile: void write(int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.Reader: boolean ready()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.Reader: int read()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.Reader: int read(char[])> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.Reader: int read(char[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.Reader: int read(java.nio.CharBuffer)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.StringWriter: void write(char[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.Writer: java.io.Writer append(char)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.Writer: java.io.Writer append(java.lang.CharSequence,int,int)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.Writer: void write(char[])> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.Writer: void write(char[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.Writer: void write(int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.Writer: void write(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.Writer: void write(java.lang.String,int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.ArithmeticException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.AssertionError: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.AssertionError: void <init>(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Boolean: boolean booleanValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Boolean: boolean equals(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Boolean: boolean parseBoolean(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Boolean: int compareTo(java.lang.Boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Boolean: int hashCode()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Boolean: java.lang.Boolean valueOf(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Boolean: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Boolean: java.lang.String toString(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Boolean: void <init>(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Byte: byte byteValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Byte: byte parseByte(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Byte: java.lang.Byte valueOf(byte)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Byte: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.CharSequence: char charAt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.CharSequence: int length()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.CharSequence: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock of(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: boolean isDefined(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: boolean isDigit(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: boolean isHighSurrogate(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: boolean isISOControl(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: boolean isLetter(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: boolean isLetterOrDigit(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: boolean isLowSurrogate(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: boolean isLowerCase(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: boolean isTitleCase(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: boolean isUpperCase(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: boolean isWhitespace(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: char charValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: char toLowerCase(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: char toTitleCase(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: char toUpperCase(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: char[] toChars(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: int charCount(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: int codePointAt(java.lang.CharSequence,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: int digit(char,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: int getType(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: int toUpperCase(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: java.lang.Character valueOf(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: java.lang.String toString(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: void <init>(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Class: boolean desiredAssertionStatus()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: boolean isAnnotation()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Class: boolean isArray()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: boolean isAssignableFrom(java.lang.Class)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Class: boolean isEnum()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: boolean isInstance(java.lang.Object)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: boolean isInterface()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: boolean isLocalClass()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: boolean isMemberClass()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: boolean isPrimitive()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: int getModifiers()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.lang.Class: java.lang.Class forName(java.lang.String)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Class: java.lang.Class getComponentType()> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Class: java.lang.Class getEnclosingClass()> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Class: java.lang.Class getSuperclass()> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Class: java.lang.ClassLoader getClassLoader()> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Class: java.lang.Class[] getInterfaces()> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Class: java.lang.Object cast(java.lang.Object)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.Object newInstance()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.Object[] getEnumConstants()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.Package getPackage()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.String getCanonicalName()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.String getName()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.String getSimpleName()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.String toString()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.annotation.Annotation getAnnotation(java.lang.Class)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.reflect.Field[] getFields()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.reflect.Method[] getMethods()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.ClassCastException: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.ClassCastException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Comparable: int compareTo(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: boolean isInfinite()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: boolean isInfinite(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: boolean isNaN()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: boolean isNaN(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: double doubleValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: double longBitsToDouble(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: double parseDouble(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: float floatValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: int compare(double,double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: int intValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: java.lang.Double valueOf(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: java.lang.Double valueOf(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: long doubleToLongBits(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: long doubleToRawLongBits(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Enum: boolean equals(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Enum: int compareTo(java.lang.Enum)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Enum: int ordinal()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Enum: java.lang.String name()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Enum: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Enum: void <init>(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Error: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Exception: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Exception: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Exception: void <init>(java.lang.Throwable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: boolean isInfinite()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: boolean isInfinite(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: boolean isNaN()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: boolean isNaN(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: float floatValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: float intBitsToFloat(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: float parseFloat(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: int compare(float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: int floatToIntBits(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: int floatToRawIntBits(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: java.lang.Float valueOf(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: java.lang.Float valueOf(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: java.lang.String toString(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: void <init>(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.IllegalArgumentException: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.IllegalArgumentException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.IllegalStateException: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.IllegalStateException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.IllegalStateException: void <init>(java.lang.Throwable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.IndexOutOfBoundsException: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: boolean equals(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: byte byteValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: double doubleValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: float floatValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: int compareTo(java.lang.Integer)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: int hashCode()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: int intValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: int numberOfTrailingZeros(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: int parseInt(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: int parseInt(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: java.lang.Integer decode(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: java.lang.Integer valueOf(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: java.lang.Integer valueOf(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: java.lang.String toHexString(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: java.lang.String toString(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: java.lang.String toString(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: long longValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: short shortValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.InternalError: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.InternalError: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.InterruptedException: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Iterable: java.util.Iterator iterator()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: boolean equals(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: int bitCount(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: int intValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: java.lang.Long decode(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: java.lang.Long valueOf(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: java.lang.Long valueOf(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: java.lang.String toHexString(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: java.lang.String toString(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: java.lang.String toString(long,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: long longValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: long parseLong(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: long parseLong(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: void <init>(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double abs(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double atan(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double atan2(double,double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double ceil(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double cos(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double exp(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double floor(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double hypot(double,double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double log(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double max(double,double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double min(double,double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double pow(double,double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double random()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double sin(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double sqrt(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double tan(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double toDegrees(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double toRadians(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: float abs(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: float max(float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: float min(float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: float signum(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: int abs(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: int max(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: int min(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: int round(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: long abs(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: long max(long,long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: long min(long,long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: long round(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.NoSuchMethodException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.NullPointerException: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.NullPointerException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Number: byte byteValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Number: double doubleValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Number: float floatValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Number: int intValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Number: long longValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Number: short shortValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Number: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.NumberFormatException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Object: boolean equals(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Object: int hashCode()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Object: java.lang.Class getClass()> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Object: java.lang.Object clone()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Object: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Object: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Object: void finalize()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Object: void notify()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Object: void notifyAll()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Object: void wait()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Object: void wait(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.OutOfMemoryError: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Package: java.lang.Package getPackage(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Package: java.lang.String getName()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Process: int exitValue()> - @DSSpec(DSCat.OS_LOW_LEVEL) - @DSComment("external process")
<java.lang.Process: int waitFor()> - @DSSpec(DSCat.OS_LOW_LEVEL) - @DSComment("external process")
<java.lang.Process: java.io.InputStream getErrorStream()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.lang.Process: java.io.InputStream getInputStream()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.lang.Process: java.io.OutputStream getOutputStream()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.lang.Process: void destroy()> - @DSSpec(DSCat.OS_LOW_LEVEL) - @DSComment("external process")
<java.lang.Readable: int read(java.nio.CharBuffer)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Runtime: java.lang.Process exec(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Runtime: java.lang.Process exec(java.lang.String[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Runtime: java.lang.Runtime getRuntime()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Runtime: long freeMemory()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Runtime: long maxMemory()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Runtime: long totalMemory()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.RuntimeException: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.RuntimeException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.RuntimeException: void <init>(java.lang.Throwable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Short: java.lang.Short valueOf(short)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Short: short parseShort(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Short: short shortValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Short: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StackTraceElement: int getLineNumber()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StackTraceElement: java.lang.String getClassName()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StackTraceElement: java.lang.String getFileName()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StackTraceElement: java.lang.String getMethodName()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: boolean contains(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: boolean contentEquals(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: boolean contentEquals(java.lang.StringBuffer)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: boolean endsWith(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: boolean equals(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: boolean equalsIgnoreCase(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: boolean isEmpty()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: boolean matches(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: boolean startsWith(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: boolean startsWith(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: byte[] getBytes()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: byte[] getBytes(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: byte[] getBytes(java.nio.charset.Charset)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: char charAt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: char[] toCharArray()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int codePointAt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int codePointBefore(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int codePointCount(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int compareTo(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int compareToIgnoreCase(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int hashCode()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int indexOf(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int indexOf(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int indexOf(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int indexOf(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int lastIndexOf(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int lastIndexOf(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int lastIndexOf(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int lastIndexOf(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int length()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int offsetByCodePoints(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.CharSequence subSequence(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String concat(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String intern()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String replace(char,char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String substring(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String substring(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String toLowerCase()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String toLowerCase(java.util.Locale)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String toUpperCase()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String toUpperCase(java.util.Locale)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String trim()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String valueOf(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String valueOf(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String valueOf(char[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String valueOf(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String valueOf(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String valueOf(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String valueOf(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String valueOf(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String[] split(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String[] split(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: void <init>(byte[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: void <init>(byte[],int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: void <init>(byte[],int,int,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: void <init>(byte[],java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: void <init>(byte[],java.nio.charset.Charset)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: void <init>(char[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: void <init>(char[],int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: void getBytes(int,int,byte[],int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: void getChars(int,int,char[],int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: char charAt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: int capacity()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: int codePointAt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: int codePointBefore(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: int codePointCount(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: int indexOf(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: int indexOf(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: int lastIndexOf(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: int length()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: int offsetByCodePoints(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.String substring(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.String substring(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(char[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer reverse()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: void ensureCapacity(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: void getChars(int,int,char[],int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: void setCharAt(int,char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: void setLength(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: void trimToSize()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: char charAt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: int lastIndexOf(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: int length()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.String substring(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.String substring(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(char[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder reverse()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: void <init>(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: void setLength(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringIndexOutOfBoundsException: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.System: java.lang.SecurityManager getSecurityManager()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Android Manager retrieved/accessed")
<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Throwable: java.lang.String getLocalizedMessage()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Throwable: java.lang.String getMessage()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Throwable: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Throwable: java.lang.Throwable fillInStackTrace()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Throwable: java.lang.Throwable getCause()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Throwable: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Throwable: void printStackTrace()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Throwable: void printStackTrace(java.io.PrintStream)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.UnsupportedOperationException: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.UnsupportedOperationException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.annotation.Annotation: java.lang.Class annotationType()> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.ref.PhantomReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.ref.Reference: java.lang.Object get()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.ref.Reference: void clear()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.ref.ReferenceQueue: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.ref.SoftReference: void <init>(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.ref.WeakReference: void <init>(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.reflect.AccessibleObject: boolean isAccessible()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.AccessibleObject: void setAccessible(boolean)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Array: int getLength(java.lang.Object)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Constructor: java.lang.annotation.Annotation getAnnotation(java.lang.Class)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.reflect.Field: int getInt(java.lang.Object)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Field: int getModifiers()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Field: java.lang.Class getType()> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Field: java.lang.String getName()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Field: java.lang.annotation.Annotation getAnnotation(java.lang.Class)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Member: boolean isSynthetic()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Member: int getModifiers()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Member: java.lang.Class getDeclaringClass()> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.reflect.Method: int getModifiers()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Method: java.lang.Class getDeclaringClass()> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.reflect.Method: java.lang.Class getReturnType()> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Method: java.lang.String getName()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Method: java.lang.annotation.Annotation getAnnotation(java.lang.Class)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.reflect.Modifier: boolean isAbstract(int)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Modifier: boolean isPublic(int)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Modifier: boolean isStatic(int)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Modifier: boolean isTransient(int)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.math.BigDecimal: void <init>(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigDecimal: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: boolean equals(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: byte[] toByteArray()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: int bitLength()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: int compareTo(java.math.BigInteger)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: int intValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: java.lang.String toString(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: java.math.BigInteger negate()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: java.math.BigInteger setBit(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: java.math.BigInteger valueOf(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: long longValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: void <init>(byte[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: void <init>(int,byte[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: void <init>(int,java.util.Random)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.math.BigInteger: void <init>(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.net.DatagramPacket: byte[] getData()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.DatagramPacket: int getLength()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.DatagramPacket: int getPort()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.DatagramPacket: java.net.InetAddress getAddress()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.DatagramPacket: void <init>(byte[],int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.DatagramPacket: void setAddress(java.net.InetAddress)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.DatagramPacket: void setLength(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.DatagramPacket: void setPort(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.DatagramSocket: void receive(java.net.DatagramPacket)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.net.DatagramSocket: void send(java.net.DatagramPacket)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.net.InetAddress: boolean equals(java.lang.Object)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.InetAddress: boolean isLoopbackAddress()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.InetAddress: byte[] getAddress()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.InetAddress: java.lang.String getHostAddress()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.InetAddress: java.lang.String getHostName()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.InetAddress: java.net.InetAddress getLocalHost()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()> - @DSSpec(DSCat.NETWORK) - @DSComment("Network interface accessing")
<java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()> - @DSSpec(DSCat.NETWORK) - @DSComment("Network interface accessing")
<java.net.ServerSocket: java.net.Socket accept()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.net.ServerSocket: void bind(java.net.SocketAddress)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.net.Socket: java.io.InputStream getInputStream()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.net.Socket: java.io.OutputStream getOutputStream()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.net.Socket: void bind(java.net.SocketAddress)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.net.Socket: void connect(java.net.SocketAddress)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.net.Socket: void connect(java.net.SocketAddress,int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.net.URL: java.io.InputStream openStream()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.net.URL: java.net.URLConnection openConnection()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.net.URLConnection: java.io.InputStream getInputStream()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.net.URLConnection: java.io.OutputStream getOutputStream()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.net.URLConnection: void connect()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.net.URLEncoder: java.lang.String encode(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility function")
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility function")
<java.nio.Buffer: boolean hasRemaining()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.Buffer: int capacity()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.Buffer: int limit()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.Buffer: int position()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.Buffer: int remaining()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.Buffer: java.nio.Buffer clear()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.nio.Buffer: java.nio.Buffer flip()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.Buffer: java.nio.Buffer limit(int)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.Buffer: java.nio.Buffer position(int)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.Buffer: java.nio.Buffer rewind()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: boolean hasArray()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: byte get()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: byte get(int)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: byte[] array()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: int arrayOffset()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: int getInt()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: int getInt(int)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer asReadOnlyBuffer()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer compact()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer putFloat(float)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(int,short)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer slice()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: short getShort()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: short getShort(int)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.CharBuffer: boolean hasArray()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.CharBuffer: char get()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.CharBuffer: char[] array()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.CharBuffer: int length()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.CharBuffer: java.lang.String toString()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.CharBuffer: java.nio.CharBuffer allocate(int)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.CharBuffer: java.nio.CharBuffer compact()> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.CharBuffer: java.nio.CharBuffer put(char)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder replaceWith(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Character encoder/decoder")
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Character encoder/decoder")
<java.nio.charset.CharsetDecoder: void <init>(java.nio.charset.Charset,float,float)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Character encoder/decoder")
<java.nio.charset.CharsetEncoder: float maxBytesPerChar()> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Character encoder/decoder")
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Character encoder/decoder")
<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Character encoder/decoder")
<java.nio.charset.CoderResult: boolean isError()> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Character encoder/decoder")
<java.nio.charset.CoderResult: boolean isOverflow()> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Character encoder/decoder")
<java.nio.charset.CoderResult: boolean isUnderflow()> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Character encoder/decoder")
<java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Character encoder/decoder")
<java.nio.charset.CoderResult: java.nio.charset.CoderResult unmappableForLength(int)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Character encoder/decoder")
<java.nio.charset.CoderResult: void throwException()> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Character encoder/decoder")
<java.text.DateFormat: java.lang.String format(java.util.Date)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormat: java.text.DateFormat getDateInstance()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormat: java.text.DateFormat getDateTimeInstance()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormat: java.text.DateFormat getInstance()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormat: java.text.DateFormat getTimeInstance()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormat: java.text.DateFormat getTimeInstance(int,java.util.Locale)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormat: java.util.Calendar getCalendar()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormat: java.util.Date parse(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormat: void setCalendar(java.util.Calendar)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormat: void setLenient(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormat: void setTimeZone(java.util.TimeZone)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormatSymbols: java.lang.String[] getEras()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormatSymbols: java.lang.String[] getMonths()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormatSymbols: void <init>(java.util.Locale)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DecimalFormat: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DecimalFormat: void setMaximumIntegerDigits(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.Format: java.lang.Object parseObject(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.Format: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.Format: java.lang.String format(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.Format: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.Format: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.MessageFormat: boolean equals(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.MessageFormat: int hashCode()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.MessageFormat: java.lang.String toPattern()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.MessageFormat: java.text.Format[] getFormats()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.MessageFormat: java.util.Locale getLocale()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.MessageFormat: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.MessageFormat: void applyPattern(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.MessageFormat: void setFormats(java.text.Format[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.MessageFormat: void setLocale(java.util.Locale)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.NumberFormat: java.lang.String format(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.ParseException: void <init>(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.ParsePosition: int getIndex()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.ParsePosition: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.ParsePosition: void setErrorIndex(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.ParsePosition: void setIndex(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.SimpleDateFormat: java.lang.String toPattern()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.SimpleDateFormat: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.SimpleDateFormat: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.SimpleDateFormat: void applyPattern(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractCollection: boolean add(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractCollection: boolean addAll(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractCollection: boolean contains(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractCollection: boolean isEmpty()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractCollection: boolean removeAll(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractCollection: boolean retainAll(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractCollection: java.lang.Object[] toArray()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractCollection: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractCollection: java.util.Iterator iterator()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractList: boolean addAll(int,java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractList: boolean equals(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractList: int indexOf(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractList: java.util.Iterator iterator()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractList: java.util.List subList(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractList: java.util.ListIterator listIterator()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractList: java.util.ListIterator listIterator(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractList: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractList: void clear()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractMap: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractMap: java.util.Collection values()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractMap: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractSequentialList: java.util.Iterator iterator()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractSet: boolean removeAll(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.AbstractSet: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: boolean add(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: boolean addAll(int,java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: boolean addAll(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: boolean contains(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: boolean equals(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: boolean isEmpty()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: boolean remove(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: int hashCode()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: int indexOf(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: int lastIndexOf(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: int size()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: java.lang.Object clone()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: java.lang.Object get(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: java.lang.Object remove(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: java.lang.Object[] toArray()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: java.util.Iterator iterator()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: void <init>(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: void add(int,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: void clear()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: void ensureCapacity(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: void trimToSize()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: boolean equals(boolean[],boolean[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: boolean equals(byte[],byte[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: boolean equals(char[],char[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: boolean equals(double[],double[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: boolean equals(float[],float[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: boolean equals(int[],int[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: boolean equals(long[],long[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: boolean equals(short[],short[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: byte[] copyOf(byte[],int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: int binarySearch(char[],char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: int binarySearch(long[],long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: int hashCode(boolean[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: int hashCode(byte[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: int hashCode(char[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: int hashCode(double[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: int hashCode(float[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: int hashCode(int[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: int hashCode(java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: int hashCode(long[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: int hashCode(short[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: java.lang.String toString(float[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: java.lang.String toString(java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: java.lang.String toString(long[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: java.util.List asList(java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(byte[],byte)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(char[],char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(char[],int,int,char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(int[],int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(int[],int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(long[],long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(char[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(int[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(java.lang.Object[],int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(java.lang.Object[],int,int,java.util.Comparator)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.BitSet: boolean get(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.BitSet: int length()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.BitSet: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.BitSet: void clear(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.BitSet: void set(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: boolean after(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: boolean before(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: boolean equals(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: int compareTo(java.util.Calendar)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: int get(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: int getActualMaximum(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: int getActualMinimum(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: int getLeastMaximum(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: int getMaximum(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: java.lang.Object clone()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: java.lang.String getDisplayName(int,int,java.util.Locale)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: java.util.Calendar getInstance()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: java.util.Date getTime()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: java.util.TimeZone getTimeZone()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: long getTimeInMillis()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: void add(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: void clear()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: void roll(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: void set(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: void set(int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: void setLenient(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: void setTime(java.util.Date)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: void setTimeInMillis(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collection: boolean add(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collection: boolean addAll(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collection: boolean contains(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collection: boolean isEmpty()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collection: boolean remove(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collection: boolean retainAll(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collection: int size()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collection: java.lang.Object[] toArray()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collection: java.util.Iterator iterator()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collection: void clear()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collections: java.lang.Object max(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collections: java.util.List emptyList()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collections: java.util.List synchronizedList(java.util.List)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collections: java.util.List unmodifiableList(java.util.List)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collections: java.util.Map emptyMap()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collections: java.util.Set singleton(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collections: java.util.Set synchronizedSet(java.util.Set)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collections: void reverse(java.util.List)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collections: void shuffle(java.util.List)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collections: void sort(java.util.List)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collections: void sort(java.util.List,java.util.Comparator)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collections: void swap(java.util.List,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Currency: java.util.Currency getInstance(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: boolean after(java.util.Date)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: int compareTo(java.util.Date)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: int getDate()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: int getHours()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: int getMinutes()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: int getMonth()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: int getSeconds()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: int getYear()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: java.lang.String toGMTString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: long getTime()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: void <init>(int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: void <init>(int,int,int,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: void <init>(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: void setTime(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.EnumMap: boolean containsKey(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.EnumMap: java.lang.Object get(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.EnumMap: void <init>(java.lang.Class)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.util.EnumMap: void clear()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.EnumSet: java.util.EnumSet copyOf(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.util.EnumSet: java.util.EnumSet range(java.lang.Enum,java.lang.Enum)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Enumeration: boolean hasMoreElements()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Enumeration: java.lang.Object nextElement()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.GregorianCalendar: java.util.Date getGregorianChange()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.GregorianCalendar: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.GregorianCalendar: void <init>(int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.GregorianCalendar: void <init>(java.util.TimeZone)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.GregorianCalendar: void add(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashMap: boolean containsKey(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashMap: boolean containsValue(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashMap: boolean isEmpty()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashMap: int size()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashMap: java.lang.Object get(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashMap: java.lang.Object remove(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashMap: java.util.Collection values()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashMap: java.util.Set entrySet()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashMap: java.util.Set keySet()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashMap: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashMap: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashMap: void <init>(java.util.Map)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashMap: void clear()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashMap: void putAll(java.util.Map)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashSet: boolean add(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashSet: boolean contains(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashSet: boolean isEmpty()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashSet: boolean remove(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashSet: int size()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashSet: java.util.Iterator iterator()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashSet: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashSet: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashSet: void <init>(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashSet: void clear()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Hashtable: boolean containsKey(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Hashtable: int size()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Hashtable: java.lang.Object clone()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Hashtable: java.lang.Object get(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Hashtable: java.util.Collection values()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Hashtable: java.util.Enumeration keys()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Hashtable: java.util.Set entrySet()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Hashtable: java.util.Set keySet()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Hashtable: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Hashtable: void clear()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Hashtable: void putAll(java.util.Map)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Iterator: boolean hasNext()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Iterator: java.lang.Object next()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Iterator: void remove()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.LinkedHashMap: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.LinkedHashMap: void <init>(int,float,boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.LinkedHashMap: void <init>(java.util.Map)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.LinkedHashSet: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.LinkedHashSet: void <init>(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.LinkedList: boolean add(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.LinkedList: boolean offer(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.LinkedList: boolean remove(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.LinkedList: int size()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.LinkedList: java.lang.Object clone()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.LinkedList: java.lang.Object get(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.LinkedList: java.lang.Object getFirst()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.LinkedList: java.lang.Object poll()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.LinkedList: java.lang.Object remove()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.LinkedList: java.lang.Object removeFirst()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.LinkedList: java.lang.Object[] toArray()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.LinkedList: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.LinkedList: void <init>(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.LinkedList: void addFirst(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: boolean add(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: boolean addAll(int,java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: boolean addAll(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: boolean contains(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: boolean containsAll(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: boolean equals(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: boolean isEmpty()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: boolean remove(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: boolean removeAll(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: boolean retainAll(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: int hashCode()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: int indexOf(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: int lastIndexOf(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: int size()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: java.lang.Object get(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: java.lang.Object remove(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: java.lang.Object set(int,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: java.lang.Object[] toArray()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: java.lang.Object[] toArray(java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: java.util.Iterator iterator()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: java.util.List subList(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: java.util.ListIterator listIterator()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: java.util.ListIterator listIterator(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: void add(int,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.List: void clear()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ListIterator: boolean hasNext()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ListIterator: boolean hasPrevious()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ListIterator: int nextIndex()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ListIterator: int previousIndex()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ListIterator: java.lang.Object next()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ListIterator: java.lang.Object previous()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Locale: boolean equals(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Locale: int hashCode()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Locale: java.lang.String getCountry()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Locale: java.lang.String getDisplayName()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Locale: java.lang.String getISO3Country()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Locale: java.lang.String getLanguage()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Locale: java.lang.String getVariant()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Locale: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Locale: java.util.Locale getDefault()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Locale: java.util.Locale[] getAvailableLocales()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Locale: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Locale: void <init>(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Locale: void setDefault(java.util.Locale)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Map$Entry: java.lang.Object getKey()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Map$Entry: java.lang.Object getValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Map: boolean containsKey(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Map: boolean containsValue(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Map: boolean equals(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Map: boolean isEmpty()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Map: int hashCode()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Map: int size()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Map: java.lang.Object get(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Map: java.lang.Object remove(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Map: java.util.Collection values()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Map: java.util.Set entrySet()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Map: java.util.Set keySet()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Map: void clear()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Map: void putAll(java.util.Map)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.NoSuchElementException: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.NoSuchElementException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Properties: java.lang.String getProperty(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Properties: java.util.Enumeration propertyNames()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Properties: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Properties: void load(java.io.InputStream)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Queue: boolean add(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Queue: boolean offer(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Queue: java.lang.Object peek()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Queue: java.lang.Object poll()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Random: boolean nextBoolean()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Random: double nextDouble()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Random: float nextFloat()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Random: int nextInt()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Random: int nextInt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Random: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Random: void <init>(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ResourceBundle: java.lang.String getString(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Scanner: boolean hasNext()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Scanner: boolean hasNextLine()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Scanner: boolean nextBoolean()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Scanner: int nextInt()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Scanner: java.lang.String findWithinHorizon(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Scanner: java.lang.String next()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Scanner: java.lang.String nextLine()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Scanner: java.util.Scanner useDelimiter(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Scanner: java.util.regex.MatchResult match()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Scanner: long nextLong()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Scanner: void <init>(java.io.File)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Scanner: void <init>(java.io.InputStream)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Scanner: void <init>(java.lang.Readable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Scanner: void close()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Set: boolean add(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Set: boolean addAll(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Set: boolean contains(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Set: boolean equals(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Set: boolean isEmpty()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Set: boolean remove(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Set: boolean removeAll(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Set: int hashCode()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Set: int size()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Set: java.lang.Object[] toArray()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Set: java.util.Iterator iterator()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.SimpleTimeZone: void <init>(int,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Stack: java.lang.Object peek()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Stack: java.lang.Object pop()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Stack: java.lang.Object push(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Stack: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.StringTokenizer: boolean hasMoreTokens()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.StringTokenizer: int countTokens()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.StringTokenizer: java.lang.String nextToken()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TimeZone: boolean useDaylightTime()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TimeZone: int getDSTSavings()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TimeZone: int getOffset(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TimeZone: java.lang.String getDisplayName()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TimeZone: java.lang.String getID()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TimeZone: java.util.TimeZone getDefault()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TreeMap: int size()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TreeMap: java.lang.Object get(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TreeMap: java.util.Set entrySet()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TreeMap: java.util.Set keySet()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TreeMap: java.util.SortedMap tailMap(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TreeMap: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TreeMap: void <init>(java.util.Comparator)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TreeSet: boolean add(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TreeSet: int size()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TreeSet: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TreeSet: void <init>(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TreeSet: void <init>(java.util.Comparator)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.UUID: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.UUID: java.util.UUID fromString(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.UUID: java.util.UUID randomUUID()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: boolean add(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: boolean contains(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: boolean isEmpty()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: boolean remove(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: int size()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: java.lang.Object clone()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: java.lang.Object elementAt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: java.lang.Object firstElement()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: java.lang.Object get(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: java.lang.Object lastElement()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: java.lang.Object remove(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: java.lang.Object set(int,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: void <init>(java.util.Collection)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: void addElement(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: void clear()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: void insertElementAt(java.lang.Object,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: void removeElementAt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: void setSize(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: void trimToSize()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.WeakHashMap: boolean containsKey(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.WeakHashMap: java.util.Collection values()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.WeakHashMap: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.WeakHashMap: void clear()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.BlockingQueue: boolean add(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.BlockingQueue: boolean contains(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.BlockingQueue: boolean remove(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.BlockingQueue: java.lang.Object take()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.Callable: java.lang.Object call()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.ConcurrentHashMap: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.ConcurrentHashMap: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.ConcurrentLinkedQueue: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.CopyOnWriteArrayList: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.CountDownLatch: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.CountDownLatch: void await()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.CountDownLatch: void countDown()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.Executor: void execute(java.lang.Runnable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.LinkedBlockingDeque: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.LinkedBlockingQueue: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.LinkedBlockingQueue: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.List shutdownNow()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.ScheduledThreadPoolExecutor: void setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.ScheduledThreadPoolExecutor: void setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.ScheduledThreadPoolExecutor: void shutdown()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.Semaphore: boolean tryAcquire()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.Semaphore: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.Semaphore: void <init>(int,boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.Semaphore: void acquire()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.Semaphore: void release()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.TimeUnit: long toMillis(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.atomic.AtomicBoolean: boolean get()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.atomic.AtomicBoolean: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.atomic.AtomicInteger: void <init>(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.atomic.AtomicLong: long get()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.atomic.AtomicLong: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.atomic.AtomicLong: void <init>(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.atomic.AtomicReference: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.locks.Condition: void await()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.locks.Condition: void signal()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.locks.Condition: void signalAll()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.locks.Lock: java.util.concurrent.locks.Condition newCondition()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.locks.Lock: void lock()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.locks.Lock: void unlock()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.locks.ReentrantLock: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.locks.ReentrantLock: void lock()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.locks.ReentrantLock: void unlock()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.MatchResult: int groupCount()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.MatchResult: java.lang.String group(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: boolean find()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: boolean lookingAt()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: boolean matches()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: int end()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: int groupCount()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: int regionEnd()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: int regionStart()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: int start()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: java.lang.String group()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: java.lang.String group(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: java.util.regex.Matcher reset(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: java.util.regex.Matcher usePattern(java.util.regex.Pattern)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Pattern: java.lang.String quote(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<javax.microedition.khronos.opengles.GL10: void glClear(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.microedition.khronos.opengles.GL10: void glClearColor(float,float,float,float)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.microedition.khronos.opengles.GL10: void glClearDepthf(float)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.microedition.khronos.opengles.GL10: void glColor4f(float,float,float,float)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.microedition.khronos.opengles.GL10: void glColorPointer(int,int,int,java.nio.Buffer)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.microedition.khronos.opengles.GL10: void glCullFace(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.microedition.khronos.opengles.GL10: void glDepthFunc(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.microedition.khronos.opengles.GL10: void glDisable(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.microedition.khronos.opengles.GL10: void glDisableClientState(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.microedition.khronos.opengles.GL10: void glDrawArrays(int,int,int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.microedition.khronos.opengles.GL10: void glDrawElements(int,int,int,java.nio.Buffer)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.microedition.khronos.opengles.GL10: void glEnable(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.microedition.khronos.opengles.GL10: void glEnableClientState(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.microedition.khronos.opengles.GL10: void glFrontFace(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.microedition.khronos.opengles.GL10: void glHint(int,int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.microedition.khronos.opengles.GL10: void glLoadIdentity()> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.microedition.khronos.opengles.GL10: void glMatrixMode(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.microedition.khronos.opengles.GL10: void glRotatef(float,float,float,float)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.microedition.khronos.opengles.GL10: void glScalef(float,float,float)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.microedition.khronos.opengles.GL10: void glShadeModel(int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.microedition.khronos.opengles.GL10: void glTranslatef(float,float,float)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.microedition.khronos.opengles.GL10: void glVertexPointer(int,int,int,java.nio.Buffer)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.microedition.khronos.opengles.GL10: void glViewport(int,int,int,int)> - @DSSafe(DSCat.GRAPHICS) - @DSComment("OpenGL Graphics Manipulation")
<javax.xml.parsers.SAXParser: org.xml.sax.XMLReader getXMLReader()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<javax.xml.transform.TransformerException: void printStackTrace()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<org.apache.http.HttpEntity: java.io.InputStream getContent()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<org.apache.http.HttpMessage: boolean containsHeader(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Only data structure")
<org.apache.http.HttpMessage: org.apache.http.Header getFirstHeader(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Only data structure")
<org.apache.http.HttpMessage: org.apache.http.HeaderIterator headerIterator(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Only data structure")
<org.apache.http.HttpMessage: org.apache.http.Header[] getHeaders(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Only data structure")
<org.apache.http.HttpMessage: org.apache.http.params.HttpParams getParams()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Only data structure")
<org.apache.http.HttpMessage: void addHeader(java.lang.String,java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Only data structure")
<org.apache.http.client.methods.HttpGet: void <init>(java.net.URI)> - @DSSpec(DSCat.URI_EXCHANGE) - @DSComment("Potential Internet/URI processing")
<org.apache.http.client.methods.HttpRequestBase: void setURI(java.net.URI)> - @DSSpec(DSCat.URI_EXCHANGE) - @DSComment("Potential Internet/URI processing")
<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<org.apache.http.params.BasicHttpParams: void <init>()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Http parameter structures")
<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Http parameter structures")
<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Http parameter structures")
<org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Http parameter structures")
<org.apache.http.params.HttpParams: boolean removeParameter(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Http parameter structures")
<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Http parameter structures")
<org.apache.http.params.HttpProtocolParams: void setUserAgent(org.apache.http.params.HttpParams,java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Http parameter structures")
<org.apache.lucene.store.FSDirectory: org.apache.lucene.store.FSDirectory open(java.io.File)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<org.bouncycastle2.openpgp.PGPCompressedData: java.io.InputStream getDataStream()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<org.bouncycastle2.openpgp.PGPCompressedDataGenerator: java.io.OutputStream open(java.io.OutputStream)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<org.bouncycastle2.openpgp.PGPEncryptedDataGenerator: java.io.OutputStream open(java.io.OutputStream,byte[])> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<org.bouncycastle2.openpgp.PGPLiteralData: java.io.InputStream getInputStream()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<org.bouncycastle2.openpgp.PGPLiteralDataGenerator: java.io.OutputStream open(java.io.OutputStream,char,java.lang.String,java.util.Date,byte[])> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<org.bouncycastle2.openpgp.PGPPBEEncryptedData: java.io.InputStream getDataStream(char[],java.security.Provider)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<org.bouncycastle2.openpgp.PGPPublicKeyEncryptedData: java.io.InputStream getDataStream(org.bouncycastle2.openpgp.PGPPrivateKey,java.security.Provider)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<org.bouncycastle2.openpgp.PGPUtil: java.io.InputStream getDecoderStream(java.io.InputStream)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<org.mozilla.javascript.WrapFactory: java.lang.Object wrap(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object,java.lang.Class)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<org.mozilla.javascript.WrapFactory: org.mozilla.javascript.Scriptable wrapAsJavaObject(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object,java.lang.Class)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<org.xml.sax.helpers.DefaultHandler: void <init>()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("No op default handler")
<org.xml.sax.helpers.DefaultHandler: void endDocument()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("No op default handler")
<org.xml.sax.helpers.DefaultHandler: void startDocument()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("No op default handler")
<org.xmlpull.v1.XmlPullParserException: void printStackTrace()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.app.ActivityManager$MemoryInfo: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact")
<android.app.AlarmManager: void cancel(android.app.PendingIntent)> - @DSSpec(DSCat.IPC) - @DSComment("IPC activity")
<android.app.IntentService: void setIntentRedelivery(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact")
<android.app.Notification: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact")
<android.app.Notification: void <init>(int,java.lang.CharSequence,long)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact")
<android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)> - @DSSpec(DSCat.IPC) - @DSComment("IPC activity")
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int)> - @DSSpec(DSCat.IPC) - @DSComment("IPC activity")
<android.app.PendingIntent: void cancel()> - @DSSafe(DSCat.IPC) - @DSComment("other application can control this intent")
<android.appwidget.AppWidgetManager: void updateAppWidget(int,android.widget.RemoteViews)> - @DSSpec(DSCat.ANDROID_MANAGER)
<android.content.AsyncTaskLoader: boolean cancelLoad()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact")
<android.content.BroadcastReceiver: int getResultCode()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact")
<android.content.BroadcastReceiver: void abortBroadcast()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact")
<android.content.ClipData: android.content.ClipData newPlainText(java.lang.CharSequence,java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.content.ContentProvider: android.content.Context getContext()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, get get member variable")
<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newInsert(android.net.Uri)> - @DSSpec(DSCat.CONTENT) - @DSComment("Content provider manipulation")
<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newUpdate(android.net.Uri)> - @DSSpec(DSCat.CONTENT) - @DSComment("Content provider manipulation")
<android.content.Context: android.content.ContentResolver getContentResolver()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact, delated to ContentResolver")
<android.content.Context: android.content.Context createPackageContext(java.lang.String,int)> - @DSSpec(DSCat.SECURITY) - @DSComment("creating context for other app")
<android.content.Context: android.content.Context getApplicationContext()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)> - @DSSpec(DSCat.SYSTEM_PREFERENCES)
<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()> - @DSSpec(DSCat.SECURITY) - @DSComment("can be used to harvest all app info")
<android.content.Context: android.content.res.AssetManager getAssets()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Not an action.  delegates to Asset manager")
<android.content.Context: android.content.res.Resources getResources()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not an action, delegated to Resources")
<android.content.Context: android.content.res.Resources$Theme getTheme()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int,int[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.Context: android.graphics.drawable.Drawable getWallpaper()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.Context: android.graphics.drawable.Drawable peekWallpaper()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.Context: android.os.Looper getMainLooper()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.Context: boolean isRestricted()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.Context: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)> - @DSSpec(DSCat.ANDROID_INSTRUMENTATION)
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.Context: int checkCallingOrSelfUriPermission(android.net.Uri,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.Context: int checkCallingPermission(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.Context: int checkCallingUriPermission(android.net.Uri,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.Context: int checkPermission(java.lang.String,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.Context: int checkUriPermission(android.net.Uri,int,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.Context: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.Context: int getWallpaperDesiredMinimumHeight()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.Context: int getWallpaperDesiredMinimumWidth()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.Context: java.lang.CharSequence getText(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.Context: java.lang.String getPackageCodePath()> - @DSSpec(DSCat.SECURITY) - @DSComment("Harvesting information")
<android.content.Context: java.lang.String getPackageName()> - @DSSpec(DSCat.SECURITY) - @DSComment("Harvesting information")
<android.content.Context: java.lang.String getPackageResourcePath()> - @DSSpec(DSCat.SECURITY) - @DSComment("Harvesting information")
<android.content.Context: java.lang.String getString(int)> - @DSSpec(DSCat.SECURITY) - @DSComment("resource info that may not be resolved")
<android.content.Context: java.lang.String getString(int,java.lang.Object[])> - @DSSpec(DSCat.SECURITY) - @DSComment("resource info that may not be resolved")
<android.content.Context: java.lang.String[] databaseList()> - @DSSpec(DSCat.SECURITY) - @DSComment("accessing application databases")
<android.content.Context: java.lang.String[] fileList()> - @DSSpec(DSCat.SECURITY) - @DSComment("accessing application package files")
<android.content.Context: void clearWallpaper()> - @DSSafe(DSCat.DEVICE) - @DSComment("physical/global device - wise settting")
<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)> - @DSSpec(DSCat.SECURITY) - @DSComment("modifying permission to a URI for an app")
<android.content.Context: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)> - @DSSpec(DSCat.SECURITY) - @DSComment("modifying permission to a URI for an app")
<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)> - @DSSpec(DSCat.SECURITY) - @DSComment("modifying permission to a URI for an app")
<android.content.Context: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)> - @DSSpec(DSCat.SECURITY) - @DSComment("modifying permission to a URI for an app")
<android.content.Context: void enforcePermission(java.lang.String,int,int,java.lang.String)> - @DSSpec(DSCat.SECURITY) - @DSComment("modifying permission to a URI for an app")
<android.content.Context: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)> - @DSSpec(DSCat.SECURITY) - @DSComment("modifying permission to a URI for an app")
<android.content.Context: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)> - @DSSpec(DSCat.SECURITY) - @DSComment("modifying permission to a URI for an app")
<android.content.Context: void grantUriPermission(java.lang.String,android.net.Uri,int)> - @DSSpec(DSCat.SECURITY) - @DSComment("modifying permission to a URI for an app")
<android.content.Context: void revokeUriPermission(android.net.Uri,int)> - @DSSpec(DSCat.SECURITY) - @DSComment("modifying permission to a URI for an app")
<android.content.Context: void setTheme(int)> - @DSSafe(DSCat.DEVICE) - @DSComment("physical/global device - wise settting")
<android.content.Context: void setWallpaper(android.graphics.Bitmap)> - @DSSafe(DSCat.DEVICE) - @DSComment("physical/global device - wise settting")
<android.content.Context: void setWallpaper(java.io.InputStream)> - @DSSafe(DSCat.DEVICE) - @DSComment("physical/global device - wise settting")
<android.content.Context: void startActivities(android.content.Intent[])> - @DSSpec(DSCat.INTENT_EXCHAGE) - @DSComment("start a bunch of activities")
<android.content.Context: void unbindService(android.content.ServiceConnection)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.ContextWrapper: android.content.Context getApplicationContext()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("delegated to android.content.Context")
<android.content.ContextWrapper: android.content.Context getBaseContext()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("delegated to android.content.Context")
<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)> - @DSSpec(DSCat.SYSTEM_PREFERENCES)
<android.content.ContextWrapper: android.content.pm.ApplicationInfo getApplicationInfo()> - @DSSpec(DSCat.SECURITY) - @DSComment("Harvesting information")
<android.content.DialogInterface: void cancel()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.DialogInterface: void dismiss()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impact/not an action")
<android.content.pm.ComponentInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)> - @DSSpec(DSCat.SECURITY) - @DSComment("Harvesting information")
<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)> - @DSSpec(DSCat.SECURITY) - @DSComment("Harvesting information")
<android.content.pm.ResolveInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("only compare method available, not too useful")
<android.content.pm.ResolveInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("get string associated resolution")
<android.content.pm.ResolveInfo: java.lang.String toString()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("string out of intent resolution, safe")
<android.content.pm.Signature: java.lang.String toCharsString()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("nothing useful out of signature")
<android.content.res.AssetFileDescriptor: long getLength()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.content.res.AssetFileDescriptor: long getStartOffset()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.content.res.AssetFileDescriptor: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.content.res.ColorStateList: int getDefaultColor()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.content.res.Configuration: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.content.res.Resources: android.content.res.AssetManager getAssets()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, delagated to Resources")
<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("ColorSttatList is not too significant")
<android.content.res.Resources: android.content.res.Configuration getConfiguration()> - @DSSpec(DSCat.SYSTEM) - @DSComment("System resources")
<android.content.res.Resources: android.content.res.Resources getSystem()> - @DSSpec(DSCat.SYSTEM) - @DSComment("System resources")
<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("seemed harmless")
<android.content.res.Resources: android.content.res.XmlResourceParser getLayout(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("seemed harmless")
<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("seemed harmless")
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("seemed harmless")
<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("seemed harmless")
<android.content.res.Resources: boolean getBoolean(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Resource is a data structure, getting system resource is spec")
<android.content.res.Resources: float getDimension(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Resource is a data structure, getting system resource is spec")
<android.content.res.Resources: int getColor(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Resource is a data structure, getting system resource is spec")
<android.content.res.Resources: int getDimensionPixelSize(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Resource is a data structure, getting system resource is spec")
<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Resource is a data structure, getting system resource is spec")
<android.content.res.Resources: int getInteger(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Resource is a data structure, getting system resource is spec")
<android.content.res.Resources: int[] getIntArray(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Resource is a data structure, getting system resource is spec")
<android.content.res.Resources: java.lang.CharSequence getText(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Resource is a data structure, getting system resource is spec")
<android.content.res.Resources: java.lang.CharSequence[] getTextArray(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Resource is a data structure, getting system resource is spec")
<android.content.res.Resources: java.lang.String getQuantityString(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Resource is a data structure, getting system resource is spec")
<android.content.res.Resources: java.lang.String getQuantityString(int,int,java.lang.Object[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Resource is a data structure, getting system resource is spec")
<android.content.res.Resources: java.lang.String getResourceEntryName(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Resource is a data structure, getting system resource is spec")
<android.content.res.Resources: java.lang.String getResourceName(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Resource is a data structure, getting system resource is spec")
<android.content.res.Resources: java.lang.String getResourcePackageName(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Resource is a data structure, getting system resource is spec")
<android.content.res.Resources: java.lang.String getResourceTypeName(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Resource is a data structure, getting system resource is spec")
<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Resource is a data structure")
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)> - @DSSpec(DSCat.SYSTEM) - @DSComment("update system configuration")
<android.content.res.XmlResourceParser: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("seemed harmless")
<android.database.Cursor: boolean isAfterLast()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no concerns")
<android.database.Cursor: boolean isBeforeFirst()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no concerns")
<android.database.Cursor: boolean isClosed()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no concerns")
<android.database.Cursor: boolean isFirst()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no concerns")
<android.database.Cursor: boolean isNull(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no concerns")
<android.database.Cursor: boolean requery()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no concerns")

<android.database.Cursor: byte[] getBlob(int)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.Cursor: double getDouble(int)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.Cursor: float getFloat(int)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.Cursor: int getColumnCount()> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.Cursor: int getColumnIndex(java.lang.String)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.Cursor: int getInt(int)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.Cursor: java.lang.String getColumnName(int)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.Cursor: java.lang.String getString(int)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.Cursor: java.lang.String[] getColumnNames()> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.Cursor: long getLong(int)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.Cursor: short getShort(int)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")

<android.database.Cursor: int getCount()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no concerns")
<android.database.Cursor: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no concerns")
<android.database.Cursor: void deactivate()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no concerns")
<android.database.DataSetObservable: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no concerns")
<android.database.DataSetObserver: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no concerns")
<android.database.DatabaseUtils: java.lang.String sqlEscapeString(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility function")
<android.database.MatrixCursor: void <init>(java.lang.String[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.database.MatrixCursor: void addRow(java.lang.Object[])> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.Observable: void unregisterObserver(java.lang.Object)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.database.SQLException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.database.sqlite.SQLiteProgram: void clearBindings()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.database.sqlite.SQLiteStatement: long executeInsert()> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.graphics.BitmapFactory$Options: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.graphics.Picture: int getHeight()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.graphics.Picture: int getWidth()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.graphics.Picture: void draw(android.graphics.Canvas)> - @DSSpec(DSCat.SECURITY) - @DSComment("Unintended picture could be put here")
<android.hardware.Sensor: float getMaximumRange()> - @DSSpec(DSCat.SECURITY) - @DSComment("Harvesting information")
<android.hardware.Sensor: int getType()> - @DSSpec(DSCat.SECURITY) - @DSComment("Harvesting information")
<android.hardware.usb.UsbAccessory: java.lang.String getDescription()> - @DSSpec(DSCat.SECURITY) - @DSComment("Harvesting information")
<android.hardware.usb.UsbAccessory: java.lang.String getManufacturer()> - @DSSpec(DSCat.SECURITY) - @DSComment("Harvesting information")
<android.hardware.usb.UsbAccessory: java.lang.String getModel()> - @DSSpec(DSCat.SECURITY) - @DSComment("Harvesting information")
<android.hardware.usb.UsbAccessory: java.lang.String toString()> - @DSSpec(DSCat.SECURITY) - @DSComment("Harvesting information")
<android.inputmethodservice.InputMethodService: android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.inputmethodservice.InputMethodService: boolean isExtractViewShown()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.inputmethodservice.InputMethodService: boolean isFullscreenMode()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.inputmethodservice.InputMethodService: int getMaxWidth()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.inputmethodservice.InputMethodService: void setCandidatesViewShown(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.CamcorderProfile: android.media.CamcorderProfile get(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.CamcorderProfile: boolean hasProfile(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.ExifInterface: boolean getLatLong(float[])> - @DSSpec(DSCat.SECURITY) - @DSComment("GPS location from recorded picture")
<android.media.ExifInterface: java.lang.String getAttribute(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("getting the ExifInterface is already SPEC")
<android.media.ExifInterface: void <init>(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("Get Exif from a file")
<android.media.ExifInterface: void setAttribute(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("nothing happens until saveAttributes")
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri)> - @DSSpec(DSCat.INTERNET) - @DSComment("Media source is remote")
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.MediaPlayer: boolean isPlaying()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.MediaPlayer: int getCurrentPosition()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.MediaPlayer: int getDuration()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.MediaPlayer: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.MediaPlayer: void pause()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.MediaPlayer: void prepare()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.MediaPlayer: void release()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.MediaPlayer: void reset()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.MediaPlayer: void seekTo(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.MediaPlayer: void setAudioStreamType(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)> - @DSSpec(DSCat.IO) - @DSComment("Reaching to files/URI")
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)> - @DSSpec(DSCat.IO) - @DSComment("Reaching to files/URI")
<android.media.MediaPlayer: void setDataSource(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("Reaching to files/URI")
<android.media.MediaPlayer: void setLooping(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.MediaPlayer: void setVolume(float,float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.MediaPlayer: void start()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.MediaPlayer: void stop()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Droidsafe will catch when app does something with the getTitle")
<android.media.SoundPool: boolean unload(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.SoundPool: int load(android.content.Context,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.SoundPool: int load(android.content.res.AssetFileDescriptor,int)> - @DSSpec(DSCat.IO) - @DSComment("Reaching to files/URI")
<android.media.SoundPool: int load(java.io.FileDescriptor,long,long,int)> - @DSSpec(DSCat.IO) - @DSComment("Reaching to files/URI")
<android.media.SoundPool: int load(java.lang.String,int)> - @DSSpec(DSCat.IO) - @DSComment("Reaching to files/URI")
<android.media.SoundPool: int play(int,float,float,int,int,float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.SoundPool: void <init>(int,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.SoundPool: void pause(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.SoundPool: void release()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.SoundPool: void resume(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.SoundPool: void setLoop(int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.SoundPool: void setRate(int,float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.SoundPool: void setVolume(int,float,float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.SoundPool: void stop(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.ThumbnailUtils: android.graphics.Bitmap createVideoThumbnail(java.lang.String,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.ThumbnailUtils: android.graphics.Bitmap extractThumbnail(android.graphics.Bitmap,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.net.rtp.AudioStream: void join(android.net.rtp.AudioGroup)> - @DSSpec(DSCat.RTP_CALL) - @DSComment("Audio call")
<android.net.rtp.RtpStream: void setMode(int)> - @DSSpec(DSCat.RTP_CALL) - @DSComment("can change to send/receive only mode")
<android.opengl.ETC1Util: void loadTexture(int,int,int,int,int,java.io.InputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("seems harmless")
<android.os.AsyncTask: android.os.AsyncTask$Status getStatus()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.os.AsyncTask: boolean cancel(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.os.AsyncTask: boolean isCancelled()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.os.AsyncTask: java.lang.Object get()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.os.AsyncTask: java.lang.Object get(long,java.util.concurrent.TimeUnit)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.os.ConditionVariable: boolean block(long)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.os.ConditionVariable: void <init>(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.os.Handler: boolean hasMessages(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.os.Handler: void removeCallbacks(java.lang.Runnable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.os.Handler: void removeMessages(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.os.HandlerThread: boolean quit()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.os.HandlerThread: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.os.Looper: void prepare()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.os.Messenger: int hashCode()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.os.Process: void setThreadPriority(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.os.RemoteException: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)> - @DSSpec(DSCat.SYSTEM) - @DSComment("this may allow other IPC component to detect activity on this thread, can be used as a trigger???")
<android.provider.ContactsContract$CommonDataKinds$Email: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.provider.MediaStore$Audio$Playlists$Members: android.net.Uri getContentUri(java.lang.String,long)> - @DSSpec(DSCat.URI_EXCHANGE) - @DSComment("URI moving around")
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("Insert an image and create a thumbnail")
<android.provider.SearchRecentSuggestions: void <init>(android.content.Context,java.lang.String,int)> - @DSSpec(DSCat.SECURITY) - @DSComment("accessing search suggestion DB")
<android.provider.SearchRecentSuggestions: void clearHistory()> - @DSSpec(DSCat.SECURITY) - @DSComment("clear history, could be the hidden one")
<android.provider.SearchRecentSuggestions: void saveRecentQuery(java.lang.String,java.lang.String)> - @DSSpec(DSCat.SECURITY) - @DSComment("save infor to search DB")
<android.provider.Settings$Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)> - @DSSpec(DSCat.SYSTEM) - @DSComment("System settings, info collection")
<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)> - @DSSpec(DSCat.SYSTEM) - @DSComment("System settings, info collection")
<android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)> - @DSSpec(DSCat.SYSTEM) - @DSComment("System settings, info collection")
<android.provider.Settings$System: boolean putInt(android.content.ContentResolver,java.lang.String,int)> - @DSSpec(DSCat.SYSTEM) - @DSComment("System settings/policy")
<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String)> - @DSSpec(DSCat.SYSTEM) - @DSComment("System settings/policy")
<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)> - @DSSpec(DSCat.SYSTEM) - @DSComment("System settings/policy")
<android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)> - @DSSpec(DSCat.SYSTEM) - @DSComment("System settings/policy")
<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive on info")
<android.speech.tts.TextToSpeech: int playSilence(long,int,java.util.HashMap)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive on info")
<android.speech.tts.TextToSpeech: int setLanguage(java.util.Locale)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive on info")
<android.speech.tts.TextToSpeech: int setPitch(float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive on info")
<android.speech.tts.TextToSpeech: int speak(java.lang.String,int,java.util.HashMap)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive on info")
<android.speech.tts.TextToSpeech: int stop()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive on info")
<android.speech.tts.TextToSpeech: void shutdown()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive on info")
<android.telephony.PhoneNumberUtils: boolean isWellFormedSmsAddress(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility function")
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility function")
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])> - @DSSpec(DSCat.TELEPHONY) - @DSComment("SMS message creation from raw data")
<android.telephony.SmsMessage: android.telephony.SmsMessage$MessageClass getMessageClass()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.telephony.SmsMessage: boolean isEmail()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.telephony.SmsMessage: boolean isReplace()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.telephony.SmsMessage: int[] calculateLength(java.lang.CharSequence,boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.telephony.SmsMessage: java.lang.String getDisplayOriginatingAddress()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.telephony.SmsMessage: java.lang.String getEmailBody()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.telephony.SmsMessage: java.lang.String getEmailFrom()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.telephony.SmsMessage: java.lang.String getMessageBody()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.telephony.SmsMessage: java.lang.String getOriginatingAddress()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.telephony.SmsMessage: java.lang.String getPseudoSubject()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.telephony.SmsMessage: java.lang.String getServiceCenterAddress()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.telephony.SmsMessage: long getTimestampMillis()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.text.ClipboardManager: boolean hasText()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.util.DisplayMetrics: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.util.Xml: org.xmlpull.v1.XmlSerializer newSerializer()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.util.Xml: void parse(java.io.InputStream,android.util.Xml$Encoding,org.xml.sax.ContentHandler)> - @DSSpec(DSCat.IO) - @DSComment("I/O activity")
<android.util.Xml: void parse(java.io.Reader,org.xml.sax.ContentHandler)> - @DSSpec(DSCat.IO) - @DSComment("I/O activity")
<android.view.ContextMenu: android.view.ContextMenu setHeaderIcon(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.ContextMenu: android.view.ContextMenu setHeaderTitle(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.FocusFinder: android.view.FocusFinder getInstance()> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.FocusFinder: android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.FocusFinder: android.view.View findNextFocusFromRect(android.view.ViewGroup,android.graphics.Rect,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.GestureDetector: boolean isLongpressEnabled()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.view.InflateException: void <init>(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("this exception is data structure only")
<android.view.InflateException: void <init>(java.lang.String,java.lang.Throwable)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("this exception is data structure only")
<android.view.KeyCharacterMap$KeyData: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.view.KeyCharacterMap: android.view.KeyCharacterMap load(int)> - @DSSpec(DSCat.DEVICE) - @DSComment("device physical access/control")
<android.view.KeyCharacterMap: int getDeadChar(int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.view.KeyCharacterMap: int getKeyboardType()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.view.MenuInflater: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.view.SoundEffectConstants: int getContantForFocusDirection(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.view.View$AccessibilityDelegate: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.view.ViewGroup$LayoutParams: void <init>(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.ViewGroup$MarginLayoutParams: void setMargins(int,int,int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.ViewManager: void addView(android.view.View,android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.ViewManager: void removeView(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.ViewManager: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.ViewParent: android.view.ViewParent getParent()> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.ViewStub: android.view.View inflate()> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.ViewTreeObserver: boolean isAlive()> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.Window: android.view.View getDecorView()> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.Window: android.view.Window$Callback getCallback()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Getting Listener has no action")
<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.Window: boolean hasFeature(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.Window: boolean requestFeature(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.Window: void <init>(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.Window: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.Window: void addFlags(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.Window: void clearFlags(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.Window: void invalidatePanelMenu(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.Window: void setAttributes(android.view.WindowManager$LayoutParams)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.Window: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.Window: void setContentView(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.Window: void setFeatureDrawableResource(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.Window: void setFeatureInt(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.Window: void setFlags(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.Window: void setGravity(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.Window: void setSoftInputMode(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.Window: void setTitle(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.Window: void setUiOptions(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.Window: void setUiOptions(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.WindowManager$LayoutParams: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action/not sensitive")
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityRecord getRecord(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.view.accessibility.AccessibilityEvent: int getEventType()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.view.accessibility.AccessibilityEvent: int getRecordCount()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")

<android.view.accessibility.AccessibilityEvent: void appendRecord(android.view.accessibility.AccessibilityRecord)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("can only append for its own use")
<android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("for the same app usage only")
<android.view.accessibility.AccessibilityManager: boolean isEnabled()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")

<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.accessibility.AccessibilityNodeInfo)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: boolean isPassword()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: boolean isScrollable()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: boolean isSelected()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: int getActions()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: int getWindowId()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: java.util.List findAccessibilityNodeInfosByText(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(android.graphics.Rect)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInScreen(android.graphics.Rect)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInScreen(android.graphics.Rect)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setCheckable(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setChecked(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setContentDescription(java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setPackageName(java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setPassword(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setSelected(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setText(java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")

<android.view.accessibility.AccessibilityNodeInfo: boolean isCheckable()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")

<android.view.accessibility.AccessibilityNodeInfo: void recycle()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no relevant action/ recycle the node for reuse")
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain(android.view.accessibility.AccessibilityRecord)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: boolean isChecked()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: boolean isEnabled()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: boolean isFullScreen()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: boolean isPassword()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: boolean isScrollable()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: int getAddedCount()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: int getCurrentItemIndex()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: int getFromIndex()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: int getItemCount()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: int getMaxScrollX()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: int getMaxScrollY()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: int getRemovedCount()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: int getScrollX()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: int getScrollY()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: int getToIndex()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: int getWindowId()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getBeforeText()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getClassName()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getContentDescription()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: java.util.List getText()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void recycle()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setAddedCount(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setBeforeText(java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setChecked(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setClassName(java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setContentDescription(java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setCurrentItemIndex(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setEnabled(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setFromIndex(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setFullScreen(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setItemCount(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setMaxScrollX(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setMaxScrollY(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setPassword(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setRemovedCount(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setScrollX(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setScrollY(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setScrollable(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setToIndex(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.animation.AccelerateDecelerateInterpolator: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action/not sensitive")
<android.view.animation.AccelerateInterpolator: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action/not sensitive")
<android.view.animation.AccelerateInterpolator: void <init>(float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action/not sensitive")
<android.view.animation.AlphaAnimation: void <init>(float,float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action/not sensitive")
<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.Animation: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.Animation: void setDuration(long)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.Animation: void setFillAfter(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.Animation: void setRepeatCount(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.Animation: void setRepeatMode(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.Animation: void setStartOffset(long)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.Animation: void setStartTime(long)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.AnimationSet: void <init>(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.AnimationSet: void addAnimation(android.view.animation.Animation)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.AnimationUtils: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.AnimationUtils: long currentAnimationTimeMillis()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.DecelerateInterpolator: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.DecelerateInterpolator: void <init>(float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.LinearInterpolator: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.ScaleAnimation: void <init>(float,float,float,float,float,float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.ScaleAnimation: void <init>(float,float,float,float,int,float,int,float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.Transformation: android.graphics.Matrix getMatrix()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.Transformation: float getAlpha()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.Transformation: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.Transformation: void setAlpha(float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getText()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions")
<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int)> - @DSSpec(DSCat.SYSTEM) - @DSComment("System settings/policy")
<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int)> - @DSSpec(DSCat.SYSTEM) - @DSComment("System settings/policy")
<android.view.inputmethod.InputMethodManager: void toggleSoftInput(int,int)> - @DSSpec(DSCat.SYSTEM) - @DSComment("System settings/policy")
<android.view.inputmethod.InputMethodSubtype: int getIconResId()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.webkit.MimeTypeMap: android.webkit.MimeTypeMap getSingleton()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure factory")
<android.webkit.MimeTypeMap: java.lang.String getMimeTypeFromExtension(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility function")
<android.webkit.URLUtil: boolean isValidUrl(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility function")
<android.webkit.WebChromeClient: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.webkit.WebSettings: void setBuiltInZoomControls(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.webkit.WebSettings: void setDefaultFontSize(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.webkit.WebSettings: void setDefaultZoom(android.webkit.WebSettings$ZoomDensity)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)> - @DSSpec(DSCat.SECURITY) - @DSComment("enable javascript setting")
<android.webkit.WebSettings: void setLayoutAlgorithm(android.webkit.WebSettings$LayoutAlgorithm)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.webkit.WebSettings: void setLoadWithOverviewMode(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.webkit.WebSettings: void setUseWideViewPort(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.webkit.WebView: android.webkit.WebSettings getSettings()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Spec classification done at the Setting manipulation level")
<android.webkit.WebView: boolean canGoBack()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.webkit.WebView: boolean pageDown(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.webkit.WebView: int computeHorizontalScrollRange()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.webkit.WebView: int computeVerticalScrollExtent()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.webkit.WebView: int computeVerticalScrollRange()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.webkit.WebView: int getContentHeight()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.webkit.WebView: void addJavascriptInterface(java.lang.Object,java.lang.String)> - @DSSpec(DSCat.SYSTEM) - @DSComment("System settings/policy")
<android.webkit.WebView: void computeScroll()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.webkit.WebView: void goBack()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.webkit.WebView: void loadData(java.lang.String,java.lang.String,java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("I/O load/store")
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> - @DSSpec(DSCat.INTERNET) - @DSComment("I/O load/store/Internet")
<android.webkit.WebView: void loadUrl(java.lang.String)> - @DSSpec(DSCat.INTERNET) - @DSComment("I/O load/store/Internet")
<android.webkit.WebView: void setBackgroundColor(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.webkit.WebViewClient: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.widget.Filter$FilterResults: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.widget.Filter: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.widget.Filter: void filter(java.lang.CharSequence)> - @DSSpec(DSCat.CALLBACK_INVOKE) - @DSComment("Callback invoke happens in this method")
<android.widget.ListAdapter: boolean areAllItemsEnabled()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.widget.ListAdapter: boolean isEnabled(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.widget.TabHost$TabSpec: java.lang.String getTag()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.widget.TableRow: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<com.google.android.maps.MapController: int setZoom(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<com.google.android.maps.MapController: void animateTo(com.google.android.maps.GeoPoint)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<com.google.android.maps.MapController: void setCenter(com.google.android.maps.GeoPoint)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<com.google.android.maps.MapController: void zoomToSpan(int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<com.google.android.maps.MyLocationOverlay: boolean enableCompass()> - @DSSpec(DSCat.SENSOR) - @DSComment("Sensor access")
<com.google.android.maps.MyLocationOverlay: boolean enableMyLocation()> - @DSSpec(DSCat.SENSOR) - @DSComment("Sensor access")
<com.google.android.maps.MyLocationOverlay: boolean isMyLocationEnabled()> - @DSSpec(DSCat.LOCATION) - @DSComment("Harvesting information")
<com.google.android.maps.MyLocationOverlay: com.google.android.maps.GeoPoint getMyLocation()> - @DSSpec(DSCat.LOCATION) - @DSComment("Harvesting information")
<com.google.android.maps.MyLocationOverlay: float getOrientation()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<com.google.android.maps.MyLocationOverlay: void disableCompass()> - @DSSpec(DSCat.DEVICE) - @DSComment("Device physical access/control")
<com.google.android.maps.MyLocationOverlay: void disableMyLocation()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<com.google.android.maps.OverlayItem: java.lang.String getSnippet()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<com.google.android.maps.OverlayItem: java.lang.String getTitle()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<com.google.android.maps.OverlayItem: void <init>(com.google.android.maps.GeoPoint,java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<com.google.android.maps.OverlayItem: void setMarker(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<com.google.android.maps.Projection: com.google.android.maps.GeoPoint fromPixels(int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("pixel coordinate coversion")
<difflib.DiffUtils: difflib.Patch diff(java.util.List,java.util.List)> - @DSSafe(DSCat.SAFE_OTHERS)
<difflib.Patch: java.util.List getDeltas()> - @DSSafe(DSCat.SAFE_OTHERS)
<java.io.BufferedInputStream: void <init>(java.io.InputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Spec is marked when opening raw stream")
<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Spec is marked when opening raw stream")
<java.io.BufferedInputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Spec is marked when opening raw stream")
<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Spec is marked when opening raw stream")
<java.io.BufferedOutputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.BufferedOutputStream: void flush()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.BufferedReader: void <init>(java.io.Reader)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Spec is marked when opening raw stream")
<java.io.BufferedReader: void <init>(java.io.Reader,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Spec is marked when opening raw stream")
<java.io.BufferedReader: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.BufferedReader: void mark(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.BufferedReader: void reset()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.BufferedWriter: void <init>(java.io.Writer)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Spec is marked when opening raw stream")
<java.io.BufferedWriter: void <init>(java.io.Writer,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Spec is marked when opening raw stream")
<java.io.BufferedWriter: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.BufferedWriter: void flush()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.BufferedWriter: void newLine()> - @DSSpec(DSCat.IO) - @DSComment("new info makes to destination")
<java.io.ByteArrayInputStream: int available()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.ByteArrayInputStream: void <init>(byte[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.ByteArrayInputStream: void <init>(byte[],int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.ByteArrayInputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.ByteArrayOutputStream: byte[] toByteArray()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.ByteArrayOutputStream: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.ByteArrayOutputStream: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.ByteArrayOutputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.ByteArrayOutputStream: void reset()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.CharArrayReader: void <init>(char[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.CharArrayWriter: char[] toCharArray()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.CharArrayWriter: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.CharArrayWriter: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.CharConversionException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("exception message, is only a data structure")
<java.io.DataInputStream: void <init>(java.io.InputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Spec is marked when opening raw stream")
<java.io.DataOutputStream: void <init>(java.io.OutputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Spec is marked when opening raw stream")
<java.io.DataOutputStream: void flush()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.EOFException: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("exception message, is only a data structure")
<java.io.EOFException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("exception message, is only a data structure")
<java.io.File: boolean canRead()> - @DSSpec(DSCat.IO) - @DSComment("File Information")
<java.io.File: boolean canWrite()> - @DSSpec(DSCat.IO) - @DSComment("File Information")
<java.io.File: boolean createNewFile()> - @DSSpec(DSCat.IO)
<java.io.File: boolean equals(java.lang.Object)> - @DSSpec(DSCat.IO)
<java.io.File: boolean exists()> - @DSSpec(DSCat.IO)
<java.io.File: boolean isDirectory()> - @DSSpec(DSCat.IO)
<java.io.File: boolean isFile()> - @DSSpec(DSCat.IO)
<java.io.File: boolean isHidden()> - @DSSpec(DSCat.IO)
<java.io.File: java.lang.String getAbsolutePath()> - @DSSpec(DSCat.IO) - @DSComment("File Information")
<java.io.File: java.lang.String getCanonicalPath()> - @DSSpec(DSCat.IO) - @DSComment("File Information")
<java.io.File: java.lang.String getName()> - @DSSpec(DSCat.IO) - @DSComment("File Information")
<java.io.File: java.lang.String getParent()> - @DSSpec(DSCat.IO) - @DSComment("File Information")
<java.io.File: java.lang.String getPath()> - @DSSpec(DSCat.IO) - @DSComment("File Information")
<java.io.File: java.net.URI toURI()> - @DSSpec(DSCat.IO) - @DSComment("File Information")
<java.io.File: long lastModified()> - @DSSpec(DSCat.IO) - @DSComment("File Information")
<java.io.File: long length()> - @DSSpec(DSCat.IO) - @DSComment("File Information")
<java.io.File: void <init>(java.io.File,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, real action happens on operations of File")
<java.io.File: void <init>(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, real action happens on operations of File")
<java.io.FileDescriptor: void sync()> - @DSSpec(DSCat.IO) - @DSComment("Syncing file with storage")
<java.io.FileNotFoundException: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS)
<java.io.FileNotFoundException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS)
<java.io.FilterReader: void <init>(java.io.Reader)> - @DSSpec(DSCat.IO) - @DSComment("IO reader/writer construtor")
<java.io.FilterWriter: void <init>(java.io.Writer)> - @DSSpec(DSCat.IO) - @DSComment("IO reader/writer construtor")
<java.io.InterruptedIOException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("exception message, is only a data structure")
<java.io.ObjectInputStream: void <init>(java.io.InputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Spec is marked when opening raw stream")
<java.io.ObjectInputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.ObjectInputStream: void defaultReadObject()> - @DSSpec(DSCat.IO) - @DSComment("I/O load/store")
<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Spec is marked when opening raw stream")
<java.io.ObjectOutputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.ObjectOutputStream: void defaultWriteObject()> - @DSSpec(DSCat.IO) - @DSComment("I/O load/store")
<java.io.ObjectStreamClass: java.lang.String getName()> - @DSBan(DSCat.REFLECTION) - @DSComment("class serialization")
<java.io.PrintStream: void <init>(java.io.OutputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Spec is marked when opening raw stream")
<java.io.PrintStream: void <init>(java.io.OutputStream,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Spec is marked when opening raw stream")
<java.io.PrintStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.PrintStream: void flush()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.PushbackInputStream: void <init>(java.io.InputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Spec is marked when opening raw stream")
<java.io.PushbackInputStream: void unread(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.RandomAccessFile: long getFilePointer()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.RandomAccessFile: long length()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("File opening")
<java.io.RandomAccessFile: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.RandomAccessFile: void seek(long)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.Reader: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.SequenceInputStream: void <init>(java.util.Enumeration)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.StringReader: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.StringWriter: java.lang.String toString()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.StringWriter: java.lang.StringBuffer getBuffer()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.StringWriter: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.StringWriter: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.UnsupportedEncodingException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("exception message, is only a data structure")
<java.lang.InheritableThreadLocal: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.lang.ProcessBuilder: java.lang.Process start()> - @DSSpec(DSCat.OS_LOW_LEVEL) - @DSComment("Spawning a new process, outside of DVM")
<java.lang.ProcessBuilder: void <init>(java.lang.String[])> - @DSSpec(DSCat.OS_LOW_LEVEL) - @DSComment("Spawning a new process, outside of DVM")
<java.lang.System: int identityHashCode(java.lang.Object)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<java.lang.System: java.lang.String getProperty(java.lang.String)> - @DSSpec(DSCat.JAVA_SECURITY) - @DSComment("JVM/DVM parameters")
<java.lang.System: java.util.Properties getProperties()> - @DSSafe(DSCat.SYSTEM) - @DSComment("get JVM operation environment")
<java.lang.System: long currentTimeMillis()> - @DSSafe(DSCat.OS_GENERAL)
<java.lang.System: long nanoTime()> - @DSSafe(DSCat.OS_GENERAL)
<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<java.lang.System: void gc()> - @DSSafe(DSCat.SAFE_OTHERS)
<java.lang.System: void loadLibrary(java.lang.String)> - @DSSpec(DSCat.JAVA_SECURITY) - @DSComment("Dynamically loading library")
<java.lang.Thread: boolean isAlive()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("final method& no activity")
<java.lang.Thread: boolean isInterrupted()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("final method& no activity")
<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("final method& no activity")
<java.lang.Thread: java.lang.String getName()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("final method& no activity")
<java.lang.Thread: java.lang.Thread currentThread()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<java.lang.Thread: long getId()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("final method& no activity")
<java.lang.Thread: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action")
<java.lang.Thread: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action")
<java.lang.Thread: void interrupt()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("final method, no action")
<java.lang.Thread: void join()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("final method, no action")
<java.lang.Thread: void join(long)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("final method, no action")
<java.lang.Thread: void setDaemon(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("final method, no action")
<java.lang.Thread: void setName(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("final method, no action")
<java.lang.Thread: void setPriority(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("final method, no action")
<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("final method, no action")
<java.lang.Thread: void sleep(long)> - @DSSafe(DSCat.OS_GENERAL)
<java.lang.Thread: void yield()> - @DSSafe(DSCat.OS_GENERAL)
<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)> - @DSSpec(DSCat.TO_MODEL)
<java.lang.ThreadLocal: java.lang.Object get()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<java.lang.ThreadLocal: void remove()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<java.lang.ThreadLocal: void set(java.lang.Object)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<java.net.DatagramSocket: boolean isClosed()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.net.DatagramSocket: int getSoTimeout()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.net.DatagramSocket: java.net.InetAddress getLocalAddress()> - @DSSpec(DSCat.NETWORK) - @DSComment("Could try to obtain device IP")
<java.net.DatagramSocket: void <init>(int,java.net.InetAddress)> - @DSSpec(DSCat.NETWORK) - @DSComment("Socket construction")
<java.net.DatagramSocket: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no information leakage")
<java.net.DatagramSocket: void setSoTimeout(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no information leakage")
<java.net.HttpURLConnection: int getResponseCode()> - @DSSpec(DSCat.NETWORKING) - @DSComment("accessing network response data")
<java.net.HttpURLConnection: java.lang.String getContentEncoding()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just calls super function")
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just gets string")
<java.net.InetSocketAddress: void <init>(java.lang.String,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just sets class variable")
<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just sets class variable")
<java.net.MalformedURLException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("exception")
<java.net.ServerSocket: boolean isClosed()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action")
<java.net.ServerSocket: int getLocalPort()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("local port has to be provided, no new info leaking")
<java.net.ServerSocket: java.net.InetAddress getInetAddress()> - @DSSpec(DSCat.NETWORK) - @DSComment("can learn network device info")
<java.net.ServerSocket: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action")
<java.net.ServerSocket: void <init>(int)> - @DSSpec(DSCat.NETWORK) - @DSComment("can learn network device info")
<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)> - @DSSpec(DSCat.NETWORK) - @DSComment("can learn network device info")
<java.net.ServerSocket: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action")
<java.net.ServerSocket: void setSoTimeout(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no info leakage")
<java.net.Socket: boolean getTcpNoDelay()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action")
<java.net.Socket: boolean isClosed()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action")
<java.net.Socket: boolean isConnected()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action")
<java.net.Socket: int getSoLinger()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action")
<java.net.Socket: int getSoTimeout()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action")
<java.net.Socket: java.net.InetAddress getInetAddress()> - @DSSpec(DSCat.NETWORK) - @DSComment("potential info leak")
<java.net.Socket: java.net.InetAddress getLocalAddress()> - @DSSpec(DSCat.NETWORK) - @DSComment("potential info leak")
<java.net.Socket: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action")
<java.net.Socket: void <init>(java.lang.String,int)> - @DSSpec(DSCat.NETWORK) - @DSComment("Connect to outside")
<java.net.Socket: void <init>(java.net.InetAddress,int)> - @DSSpec(DSCat.NETWORK) - @DSComment("Connect to outside")
<java.net.Socket: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no info leak")
<java.net.Socket: void setSoLinger(boolean,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no info leak")
<java.net.Socket: void setSoTimeout(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no info leak")
<java.net.Socket: void setTcpNoDelay(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no info leak")
<java.net.SocketTimeoutException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just sets class variable")
<java.net.URI: java.lang.String getPath()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just calls class function")
<java.net.URI: java.lang.String toString()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just gets string")
<java.net.URI: java.net.URI create(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just creates object")
<java.net.URI: java.net.URL toURL()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just creates object")
<java.net.URI: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just calls class function")
<java.net.URL: int getPort()> - @DSSpec(DSCat.NETWORKING) - @DSComment("getting networking information")
<java.net.URL: java.lang.Object getContent()> - @DSSpec(DSCat.NETWORKING) - @DSComment("opening connection/getting data")
<java.net.URL: java.lang.String getFile()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just gets string")
<java.net.URL: java.lang.String getHost()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just gets string")
<java.net.URL: java.lang.String getProtocol()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just gets string")
<java.net.URL: java.lang.String toExternalForm()> - @DSSpec(DSCat.NETWORKING) - @DSComment("accesses networking information")
<java.net.URL: java.lang.String toString()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just calls class function")
<java.net.URL: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just chanegs object")
<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just URL data structure building")
<java.net.URLConnection: java.lang.String getContentType()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.net.URLConnection: java.util.Map getRequestProperties()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.net.URLConnection: void addRequestProperty(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.net.URLConnection: void setConnectTimeout(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.net.URLConnection: void setDefaultUseCaches(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.net.URLConnection: void setDoInput(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.net.URLConnection: void setDoOutput(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.net.URLConnection: void setReadTimeout(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.net.URLConnection: void setUseCaches(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.nio.IntBuffer: java.nio.IntBuffer wrap(int[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.nio.ShortBuffer: java.nio.ShortBuffer wrap(short[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.nio.channels.spi.AbstractInterruptibleChannel: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.nio.charset.Charset: boolean canEncode()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.nio.charset.Charset: boolean isRegistered()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.nio.charset.Charset: boolean isSupported(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.nio.charset.Charset: java.lang.String displayName()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.nio.charset.Charset: java.lang.String name()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.nio.charset.Charset: java.lang.String toString()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.nio.charset.Charset: java.util.SortedMap availableCharsets()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just creating an object")
<java.security.AlgorithmParameters: void init(java.security.spec.AlgorithmParameterSpec)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just creating an object")
<java.security.InvalidKeyException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just creating an object")
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.security.KeyPair: java.security.PrivateKey getPrivate()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.security.KeyPair: java.security.PublicKey getPublic()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity")
<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.security.Provider)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.security.KeyPairGenerator: void initialize(int,java.security.SecureRandom)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity")
<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity")
<java.security.MessageDigest: byte[] digest()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.security.MessageDigest: byte[] digest(byte[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.security.MessageDigest: void reset()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.security.MessageDigest: void update(byte[],int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity")
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.security.SecureRandom: void <init>()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.security.SecureRandom: void nextBytes(byte[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity")
<java.security.SecureRandom: void setSeed(byte[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity")
<java.security.Security: int addProvider(java.security.Provider)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity")
<java.security.spec.DSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.security.spec.PKCS8EncodedKeySpec: byte[] getEncoded()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity")
<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity")
<java.security.spec.RSAKeyGenParameterSpec: void <init>(int,java.math.BigInteger)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity")
<java.security.spec.RSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.security.spec.RSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.security.spec.X509EncodedKeySpec: byte[] getEncoded()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity")
<java.security.spec.X509EncodedKeySpec: void <init>(byte[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.sql.Time: void <init>(long)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.sql.Timestamp: void <init>(long)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.util.Timer: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action/impact")
<java.util.Timer: void <init>(java.lang.String,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action/impact")
<java.util.Timer: void cancel()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action/impact")
<java.util.TimerTask: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action/impact")
<java.util.concurrent.Exchanger: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action/impact")
<java.util.concurrent.FutureTask: boolean cancel(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action/impact")
<java.util.concurrent.FutureTask: boolean isCancelled()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action/impact")
<java.util.concurrent.FutureTask: java.lang.Object get()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action/impact")
<java.util.concurrent.FutureTask: java.lang.Object get(long,java.util.concurrent.TimeUnit)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action/impact")
<java.util.concurrent.ThreadPoolExecutor: boolean awaitTermination(long,java.util.concurrent.TimeUnit)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action/impact")
<java.util.concurrent.ThreadPoolExecutor: boolean isTerminating()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action/impact")
<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("only execute will submit runnable to thread pool")
<java.util.zip.CRC32: long getValue()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no info moving")
<java.util.zip.CRC32: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no info moving")
<java.util.zip.CheckedInputStream: void <init>(java.io.InputStream,java.util.zip.Checksum)> - @DSSpec(DSCat.IO) - @DSComment("IO/Stream accessing")
<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)> - @DSSpec(DSCat.IO) - @DSComment("IO/Stream accessing")
<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream,int)> - @DSSpec(DSCat.IO) - @DSComment("IO/Stream accessing")
<java.util.zip.GZIPInputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action/impact")
<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)> - @DSSpec(DSCat.IO) - @DSComment("IO/Stream accessing")
<java.util.zip.GZIPOutputStream: void write(byte[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("IO/Stream accessing")
<java.util.zip.Inflater: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action/impact")
<java.util.zip.InflaterInputStream: int read(byte[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("zip/io")
<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)> - @DSSpec(DSCat.IO) - @DSComment("zip/io")
<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)> - @DSSpec(DSCat.IO) - @DSComment("zip/io")
<java.util.zip.InflaterInputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action/impact")
<java.util.zip.ZipEntry: void <init>(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("zip/io")
<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("zip/io")
<java.util.zip.ZipFile: void <init>(java.io.File)> - @DSSpec(DSCat.IO) - @DSComment("zip/io")
<java.util.zip.ZipOutputStream: void <init>(java.io.OutputStream)> - @DSSpec(DSCat.IO) - @DSComment("zip/io")
<java.util.zip.ZipOutputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impacts")
<java.util.zip.ZipOutputStream: void closeEntry()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impacts")
<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)> - @DSSpec(DSCat.IO) - @DSComment("zip/io")
<javax.crypto.Cipher: byte[] doFinal(byte[])> - @DSSpec(DSCat.IO) - @DSComment("IO/cryptographic transformation")
<javax.crypto.Cipher: byte[] wrap(java.security.Key)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Only wrap key, not a potential data leak")
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)> - @DSSpec(DSCat.SAFE_OTHERS) - @DSComment("not data related")
<javax.crypto.Cipher: void init(int,java.security.Key)> - @DSSpec(DSCat.SAFE_OTHERS) - @DSComment("not data related")
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters)> - @DSSpec(DSCat.SAFE_OTHERS) - @DSComment("not data related")
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)> - @DSSpec(DSCat.SAFE_OTHERS) - @DSComment("not data related")
<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)> - @DSSpec(DSCat.IO) - @DSComment("cipher input stream")
<javax.crypto.CipherInputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impacts")
<javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream,javax.crypto.Cipher)> - @DSSpec(DSCat.IO) - @DSComment("cipher input stream")
<javax.crypto.CipherOutputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impacts")
<javax.crypto.CipherOutputStream: void write(byte[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("IO operations")
<javax.crypto.EncryptedPrivateKeyInfo: byte[] getEncoded()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not data related")
<javax.crypto.EncryptedPrivateKeyInfo: void <init>(java.security.AlgorithmParameters,byte[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not data related")
<javax.crypto.Mac: byte[] doFinal(byte[])> - @DSSpec(DSCat.IO) - @DSComment("IO operations")
<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not data related")
<javax.crypto.Mac: void init(java.security.Key)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not data related")
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not data related")
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not data related")
<javax.crypto.spec.IvParameterSpec: void <init>(byte[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not data related")
<javax.crypto.spec.PBEKeySpec: void <init>(char[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not data related")
<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not data related")
<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not data related")
<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not data related")
<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not data related")
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.File)> - @DSSpec(DSCat.IO) - @DSComment("input is io file object")
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream)> - @DSSpec(DSCat.IO) - @DSComment("input is io InputStream")
<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just creates object")
<javax.xml.parsers.SAXParser: void parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler)> - @DSSpec(DSCat.IO) - @DSComment("input is io InputSource")
<javax.xml.parsers.SAXParser: void parse(org.xml.sax.InputSource,org.xml.sax.helpers.DefaultHandler)> - @DSSpec(DSCat.IO) - @DSComment("input is io InputSource")
<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just creates objects")
<javax.xml.parsers.SAXParserFactory: void setValidating(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, only creates object")
<javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, only creates object")
<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, only creates object")
<javax.xml.transform.stream.StreamResult: void <init>(java.io.File)> - @DSSpec(DSCat.IO) - @DSComment("input is file object")
<javax.xml.transform.stream.StreamResult: void <init>(java.io.Writer)> - @DSSpec(DSCat.IO) - @DSComment("input is io writer")
<org.apache.http.HttpHost: void <init>(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, only creates object")
<org.apache.http.HttpHost: void <init>(java.lang.String,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, only creates object")
<org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity")
<org.apache.http.auth.UsernamePasswordCredentials: void <init>(java.lang.String,java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, only creates object")
<org.apache.http.client.CredentialsProvider: void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity")
<org.apache.http.client.entity.UrlEncodedFormEntity: void <init>(java.util.List)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, only creates object")
<org.apache.http.client.entity.UrlEncodedFormEntity: void <init>(java.util.List,java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, only creates object")
<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: void setEntity(org.apache.http.HttpEntity)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, only creates object")
<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, only creates object")
<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, only creates object")
<org.apache.http.client.methods.HttpPut: void <init>(java.lang.String)> - @DSSpec(DSCat.NETWORKING) - @DSComment("possibly sends data through network")
<org.apache.http.conn.params.ConnManagerParams: void setMaxConnectionsPerRoute(org.apache.http.params.HttpParams,org.apache.http.conn.params.ConnPerRoute)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<org.apache.http.conn.params.ConnManagerParams: void setMaxTotalConnections(org.apache.http.params.HttpParams,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory()> - @DSSpec(DSCat.NETWORKING) - @DSComment("possible socket creation")
<org.apache.http.conn.scheme.SchemeRegistry: void <init>()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("creates data structure")
<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()> - @DSSpec(DSCat.NETWORKING) - @DSComment("possible socket creation")
<org.apache.http.entity.AbstractHttpEntity: void setChunked(boolean)> - @DSSpec(DSCat.NETWORKING) - @DSComment("possibly edits networking data")
<org.apache.http.entity.AbstractHttpEntity: void setContentEncoding(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, only creates object, nothing useful in encoding")
<org.apache.http.entity.InputStreamEntity: void <init>(java.io.InputStream,long)> - @DSSpec(DSCat.IO) - @DSComment("Networking and IO")
<org.apache.http.entity.StringEntity: void <init>(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, only creates object")
<org.apache.http.impl.DefaultConnectionReuseStrategy: org.apache.http.TokenIterator createTokenIterator(org.apache.http.HeaderIterator)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, only creates object")
<org.apache.http.impl.DefaultConnectionReuseStrategy: void <init>()> - @DSSpec(DSCat.NETWORKING) - @DSComment("possible networking data collection or keeping secure connection open")
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)> - @DSSpec(DSCat.NETWORKING) - @DSComment("sends data through network")
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> - @DSSpec(DSCat.NETWORKING) - @DSComment("sends data through network")
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CredentialsProvider getCredentialsProvider()> - @DSSpec(DSCat.NETWORKING) - @DSComment("possible networking data collection")
<org.apache.http.impl.client.AbstractHttpClient: void addRequestInterceptor(org.apache.http.HttpRequestInterceptor)> - @DSSpec(DSCat.NETWORKING) - @DSComment("possible networking data collection")
<org.apache.http.impl.client.AbstractHttpClient: void addResponseInterceptor(org.apache.http.HttpResponseInterceptor)> - @DSSpec(DSCat.NETWORKING) - @DSComment("possible networking data collection")
<org.apache.http.impl.client.BasicResponseHandler: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no input, no suspicious activity")
<org.apache.http.impl.client.DefaultHttpClient: void <init>()> - @DSSpec(DSCat.NETWORKING) - @DSComment("creates connection ability")
<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)> - @DSSpec(DSCat.NETWORKING) - @DSComment("edits networking object")
<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)> - @DSSpec(DSCat.NETWORKING) - @DSComment("edits networking object")
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: int getConnectionsInPool()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not network data manipulation")
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void closeExpiredConnections()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not network data manipulation")
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void closeIdleConnections(long,java.util.concurrent.TimeUnit)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not network data manipulation")
<org.apache.http.message.AbstractHttpMessage: void setHeader(java.lang.String,java.lang.String)> - @DSSpec(DSCat.NETWORKING) - @DSComment("edits networking object")
<org.apache.http.message.BasicHeaderElementIterator: void <init>(org.apache.http.HeaderIterator)> - @DSSpec(DSCat.NETWORKING) - @DSComment("edits networking object")
<org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)> - @DSSpec(DSCat.NETWORKING) - @DSComment("edits networking object")
<org.apache.http.protocol.BasicHttpContext: void <init>()> - @DSSpec(DSCat.NETWORKING) - @DSComment("edits networking object")
<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("simple string conversion, does not perform networking actions")
<org.json.JSONArray: int length()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no input, no suspicious activity")
<org.json.JSONArray: java.lang.Object get(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("nothing useful in int")
<org.json.JSONArray: java.lang.String getString(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("nothing useful in int")
<org.json.JSONArray: java.lang.String optString(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("nothing useful in int")
<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("nothing useful in object")
<org.json.JSONArray: org.json.JSONObject getJSONObject(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("nothing useful in int")
<org.json.JSONArray: void <init>()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no input, no suspicious activity")
<org.json.JSONObject: boolean has(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("nothing useful in String")
<org.json.JSONObject: double getDouble(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("nothing useful in String")
<org.json.JSONObject: java.lang.Object get(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("nothing useful in String")
<org.json.JSONObject: java.lang.String getString(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("nothing useful in String")
<org.json.JSONObject: java.lang.String optString(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("nothing useful in String")
<org.json.JSONObject: java.lang.String toString()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no input, no suspicious activity")
<org.json.JSONObject: long getLong(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("nothing useful in String")
<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("nothing useful in String")
<org.json.JSONObject: org.json.JSONArray optJSONArray(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("nothing useful in String")
<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("nothing useful in String")
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,double)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("nothing useful in inputs")
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("nothing useful in inputs")
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("nothing useful in String")
<org.json.JSONObject: void <init>()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no input, no suspicious activity")
<org.json.JSONObject: void <init>(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("nothing useful in String")
<org.xml.sax.InputSource: void <init>(java.io.InputStream)> - @DSSpec(DSCat.IO) - @DSComment("parameter is from IO")
<org.xml.sax.InputSource: void <init>(java.io.Reader)> - @DSSpec(DSCat.IO) - @DSComment("parameter is from IO")
<org.xml.sax.SAXException: java.lang.String getMessage()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no input, no suspicious activity and just exception")
<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("just an exception, nothing useful in input string")
<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParser newPullParser()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no input, no suspicious activity and output is just an instance of a parser")
<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParserFactory newInstance()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no input, no suspicious activity to abstract method")
<android.view.GestureDetector: void setIsLongpressEnabled(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("nothing useful in inputs")
<android.app.IntentService: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Standard service for offloading task to background")
<android.app.LoaderManager: android.content.Loader initLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)> - @DSSpec(DSCat.ANDROID_LOADER) - @DSComment("Loading android component dynamically/potential callbacks as well")
<android.content.AsyncTaskLoader: void <init>(android.content.Context)> - @DSSpec(DSCat.ANDROID_LOADER) - @DSComment("Loading android component dynamically")
<android.content.BroadcastReceiver: void <init>()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.content.BroadcastReceiver: void setResult(int,java.lang.String,android.os.Bundle)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.content.BroadcastReceiver: void setResultData(java.lang.String)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.content.BroadcastReceiver: void setResultExtras(android.os.Bundle)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.content.ContentProvider: void <init>()> - @DSSpec(DSCat.TO_MODEL) - @DSComment("Interface/abstract method")
<android.content.Context: java.lang.Object getSystemService(java.lang.String)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("Need to model all [common] services used")
<android.content.Context: void unregisterComponentCallbacks(android.content.ComponentCallbacks)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action for callback unregistration")

<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.content.ContextWrapper: android.content.Context createPackageContext(java.lang.String,int)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.content.ContextWrapper: android.content.res.AssetManager getAssets()> - @DSSpec(DSCat.APP_RESOURCE) - @DSComment("Accessing App Resource")
<android.content.ContextWrapper: android.content.res.Resources getResources()> - @DSSpec(DSCat.APP_RESOURCE) - @DSComment("Accessing App Resource")
<android.content.ContextWrapper: android.os.Looper getMainLooper()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("Need to model all [common] services used")
<android.content.ContextWrapper: java.lang.String getPackageName()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("Is there concern about package info harvesting???")

<android.content.ContextWrapper: void <init>(android.content.Context)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.content.ContextWrapper: void unbindService(android.content.ServiceConnection)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action for callback unregistration")
<android.content.ContextWrapper: void unregisterReceiver(android.content.BroadcastReceiver)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action for callback unregistration")

<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.content.Loader: android.content.Context getContext()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.content.Loader: boolean takeContentChanged()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.content.Loader: void forceLoad()> - @DSSpec(DSCat.ANDROID_LOADER) - @DSComment("Force loading content, event handler may also be invoked")
<android.content.SearchRecentSuggestionsProvider: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.content.SearchRecentSuggestionsProvider: void setupSuggestions(java.lang.String,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")

<android.content.pm.ResolveInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)> - @DSSpec(DSCat.APP_RESOURCE) - @DSComment("Accessing App Resource")
<android.content.res.Resources: java.lang.String getString(int)> - @DSSpec(DSCat.APP_RESOURCE) - @DSComment("Accessing App Resource")
<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])> - @DSSpec(DSCat.APP_RESOURCE) - @DSComment("Accessing App Resource")
<android.content.res.Resources: java.lang.String[] getStringArray(int)> - @DSSpec(DSCat.APP_RESOURCE) - @DSComment("Accessing App Resource")
<android.database.ContentObserver: void <init>(android.os.Handler)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Observer setup, no action")
<android.database.Cursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)> - @DSSpec(DSCat.MONITORING) - @DSComment("register to monitor event/uri")
<android.database.Cursor: void unregisterContentObserver(android.database.ContentObserver)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action for callback unregistration")
<android.database.Cursor: void unregisterDataSetObserver(android.database.DataSetObserver)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action for callback unregistration")
<android.database.DataSetObservable: void notifyChanged()> - @DSSpec(DSCat.CALLBACK_INVOKE) - @DSComment("callback will be invoked")
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.database.sqlite.SQLiteOpenHelper: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")

<android.inputmethodservice.InputMethodService: android.view.LayoutInflater getLayoutInflater()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.inputmethodservice.InputMethodService: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.inputmethodservice.Keyboard$Key: boolean isInside(int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.inputmethodservice.Keyboard$Key: void <init>(android.content.res.Resources,android.inputmethodservice.Keyboard$Row,int,int,android.content.res.XmlResourceParser)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.inputmethodservice.Keyboard: void <init>(android.content.Context,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.inputmethodservice.Keyboard: void <init>(android.content.Context,int,java.lang.CharSequence,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")

<android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.AsyncTask: android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.os.AsyncTask: void <init>()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.AsyncTask: void publishProgress(java.lang.Object[])> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Binder: void <init>()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Binder: void attachInterface(android.os.IInterface,java.lang.String)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Handler: android.os.Looper getLooper()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Handler: android.os.Message obtainMessage(int)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Handler: boolean post(java.lang.Runnable)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Handler: boolean postAtTime(java.lang.Runnable,long)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Handler: void <init>()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Handler: void <init>(android.os.Looper)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Handler: void handleMessage(android.os.Message)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.HandlerThread: android.os.Looper getLooper()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Looper: android.os.Looper getMainLooper()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Looper: android.os.Looper myLooper()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Messenger: void <init>(android.os.Handler)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Messenger: void <init>(android.os.IBinder)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")

<android.preference.PreferenceActivity: android.preference.Preference findPreference(java.lang.CharSequence)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.preference.PreferenceActivity: android.preference.PreferenceScreen getPreferenceScreen()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.preference.PreferenceActivity: void <init>()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.preference.PreferenceActivity: void addPreferencesFromResource(int)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.preference.RingtonePreference: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.speech.tts.TextToSpeech: void <init>(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("callback needs to be called")
<android.util.AndroidRuntimeException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.view.ActionProvider: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.view.ContextThemeWrapper: void <init>(android.content.Context,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.view.ContextThemeWrapper: void setTheme(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.view.GestureDetector: void <init>(android.content.Context,android.view.GestureDetector$OnGestureListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("callback needs to be called")
<android.view.GestureDetector: void <init>(android.content.Context,android.view.GestureDetector$OnGestureListener,android.os.Handler)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("callback needs to be called")
<android.view.GestureDetector: void <init>(android.view.GestureDetector$OnGestureListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("callback needs to be called")
<android.view.LayoutInflater: android.view.LayoutInflater from(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.view.LayoutInflater: android.view.LayoutInflater cloneInContext(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.view.LayoutInflater: android.view.LayoutInflater$Factory getFactory()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.view.LayoutInflater: android.view.View createView(java.lang.String,java.lang.String,android.util.AttributeSet)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("Proper view needs to be created/instantiated")
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("Proper view needs to be created/instantiated")
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("Proper view needs to be created/instantiated")
<android.view.LayoutInflater: void setFactory(android.view.LayoutInflater$Factory)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")

<android.view.MenuInflater: void inflate(int,android.view.Menu)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("Proper menu needs to be created/instantiated/inflated")

<android.view.ViewGroup$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure manipulation")
<android.view.ViewGroup$MarginLayoutParams: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure manipulation")
<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure manipulation")
<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure manipulation")
<android.view.ViewGroup$MarginLayoutParams: void <init>(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure manipulation")

<android.view.inputmethod.BaseInputConnection: void <init>(android.view.View,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.webkit.JsResult: void confirm()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")

<android.webkit.WebView: android.webkit.WebBackForwardList restoreState(android.os.Bundle)> - @DSSpec(DSCat.STORAGE_ACCESS) - @DSComment("Storage access indirectly")
<android.webkit.WebView: android.webkit.WebBackForwardList saveState(android.os.Bundle)> - @DSSpec(DSCat.STORAGE_ACCESS) - @DSComment("Storage access indirectly")
<android.webkit.WebView: java.lang.String getTitle()> - @DSSpec(DSCat.IO) - @DSComment("information may be on internet")
<android.webkit.WebView: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Webview display, no IO access to outside world")
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Webview display, no IO access to outside world")
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Webview display, no IO access to outside world")
<android.webkit.WebView: void setWebChromeClient(android.webkit.WebChromeClient)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Webview display, no IO access to outside world")
<android.webkit.WebView: void setWebViewClient(android.webkit.WebViewClient)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Webview display, no IO access to outside world")

<android.webkit.WebViewClient: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")

<android.widget.ResourceCursorAdapter: android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("View to hold data at cursor, no security concern")
<android.widget.ResourceCursorAdapter: void <init>(android.content.Context,int,android.database.Cursor)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.widget.ResourceCursorAdapter: void setDropDownViewResource(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.widget.SimpleAdapter: void <init>(android.content.Context,java.util.List,int,java.lang.String[],int[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.widget.SimpleCursorAdapter: void <init>(android.content.Context,int,android.database.Cursor,java.lang.String[],int[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.widget.SimpleExpandableListAdapter: void <init>(android.content.Context,java.util.List,int,java.lang.String[],int[],java.util.List,int,java.lang.String[],int[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")

<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence,android.graphics.drawable.Drawable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")

<com.google.android.maps.MyLocationOverlay: boolean runOnFirstFix(java.lang.Runnable)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<com.google.android.maps.MyLocationOverlay: void <init>(android.content.Context,com.google.android.maps.MapView)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")

<java.io.File: int compareTo(java.io.File)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.File: java.lang.String toString()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.File: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.FilterInputStream: int available()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.FilterInputStream: long skip(long)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.FilterInputStream: void <init>(java.io.InputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.FilterInputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.FilterOutputStream: void <init>(java.io.OutputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.FilterOutputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.IOException: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.IOException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.InputStream: boolean markSupported()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.InputStream: int available()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.InputStream: long skip(long)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.InputStream: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.InputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.InputStream: void mark(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.InputStream: void reset()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.OutputStream: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.OutputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.OutputStream: void flush()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.Reader: boolean markSupported()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.Reader: long skip(long)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.Reader: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.Reader: void mark(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.Reader: void reset()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.Writer: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.Writer: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.Writer: void flush()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")

<java.lang.SecurityManager: void checkPermission(java.security.Permission)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.lang.Thread: void <init>(java.lang.Runnable)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("callback needs to be called")
<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("callback needs to be called")
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("callback needs to be called")
<java.lang.Thread: void start()> - @DSSpec(DSCat.OS_LOW_LEVEL) - @DSComment("Thread starting")

<java.lang.ThreadLocal: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.net.DatagramSocket: int getLocalPort()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.net.DatagramSocket: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.net.Socket: int getLocalPort()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.net.Socket: int getPort()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.nio.charset.Charset: void <init>(java.lang.String,java.lang.String[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")

<java.security.BasicPermission: void <init>(java.lang.String)> - @DSBan(DSCat.BAN_OTHERS) - @DSComment("not recommended as a practice any more")

<java.util.Timer: void schedule(java.util.TimerTask,long)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("callback needs to be called")
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("callback needs to be called")

<java.util.concurrent.Exchanger: java.lang.Object exchange(java.lang.Object)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android/java operation, no security concern")
<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("callback needs to be called")
<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("callback needs to be called")
<org.apache.http.entity.HttpEntityWrapper: void <init>(org.apache.http.HttpEntity)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> - @DSSpec(DSCat.INTERNET) - @DSComment("internet access")
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void <init>(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry)> - @DSSpec(DSCat.INTERNET) - @DSComment("internet access")
