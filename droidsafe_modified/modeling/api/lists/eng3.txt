<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Describes Acessibility Service")
<android.accessibilityservice.AccessibilityServiceInfo: boolean getCanRetrieveWindowContent()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Describes Acessibility Service")
<android.accessibilityservice.AccessibilityServiceInfo: int getCapabilities()> - @DSSafe(DSCat.SAFE_OTHERS)
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getDescription()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Describes Acessibility Service")
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getId()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Describes Acessibility Service")
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getSettingsActivityName()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Describes Acessibility Service")
<android.accounts.AbstractAccountAuthenticator: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.accounts.Account: void <init>(android.os.Parcel)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.accounts.Account: void <init>(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> - @DSSpec(DSCat.ANDROID_ACCOUNT)
<android.animation.ValueAnimator: long getFrameDelay()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.app.Activity: android.app.ActionBar getActionBar()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: android.app.Application getApplication()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: android.content.ComponentName getCallingActivity()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: android.content.ComponentName getComponentName()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: android.content.Intent getIntent()> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.Activity: android.view.LayoutInflater getLayoutInflater()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: android.view.View findViewById(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: android.view.Window getWindow()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: boolean onContextItemSelected(android.view.MenuItem)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: boolean onCreateOptionsMenu(android.view.Menu)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: boolean onCreatePanelMenu(int,android.view.Menu)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: boolean onKeyDown(int,android.view.KeyEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: boolean onMenuItemSelected(int,android.view.MenuItem)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: boolean onOptionsItemSelected(android.view.MenuItem)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: boolean onPreparePanel(int,android.view.View,android.view.Menu)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: java.lang.String getCallingPackage()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void finish()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void invalidateOptionsMenu()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void onActivityResult(int,int,android.content.Intent)> - @DSSafe(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.Activity: void onBackPressed()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onConfigurationChanged(android.content.res.Configuration)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onCreate(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onDestroy()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onLowMemory()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onNewIntent(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.Activity: void onPanelClosed(int,android.view.Menu)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onPause()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onPostResume()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onResume()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onSaveInstanceState(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onStart()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void onStop()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Activity: void setProgressBarIndeterminateVisibility(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void setTitle(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void setTitle(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.Activity: void startActivity(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.Activity: void startActivityForResult(android.content.Intent,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.ActivityManager: java.util.List getRunningAppProcesses()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.AlertDialog$Builder: android.app.AlertDialog create()> - @DSSpec(DSCat.SPEC_OTHERS) - @DSComment("New Dialog")
<android.app.AlertDialog$Builder: android.app.AlertDialog show()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setAdapter(android.widget.ListAdapter,android.content.DialogInterface$OnClickListener)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCancelable(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(int)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setItems(int,android.content.DialogInterface$OnClickListener)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setItems(java.lang.CharSequence[],android.content.DialogInterface$OnClickListener)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(android.database.Cursor,java.lang.String,java.lang.String,android.content.DialogInterface$OnMultiChoiceClickListener)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(int,boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)> - @DSSafe(DSCat.GUI) - @DSComment("Dialog builder")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setView(android.view.View)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setView(android.view.View,int,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.app.AlertDialog$Builder: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.app.AlertDialog$Builder: void <init>(android.content.Context,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.app.AlertDialog: android.widget.Button getButton(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, alert dialog")
<android.app.Application: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.app.Application: void onCreate()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Application: void onTerminate()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Dialog: android.content.Context getContext()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: android.os.Bundle onSaveInstanceState()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Dialog: android.view.View findViewById(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: android.view.Window getWindow()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: boolean requestWindowFeature(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.app.Dialog: void <init>(android.content.Context,boolean,android.content.DialogInterface$OnCancelListener)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.app.Dialog: void <init>(android.content.Context,boolean,android.os.Message)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.app.Dialog: void <init>(android.content.Context,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.app.Dialog: void <init>(android.content.Context,int,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.app.Dialog: void dismiss()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: void hide()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: void onRestoreInstanceState(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Dialog: void setCancelable(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: void setContentView(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no info sink")
<android.app.Dialog: void setContentView(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: void setOnCancelListener(android.content.DialogInterface$OnCancelListener)> - @DSSafe(DSCat.ANDROID_CALLBACK)
<android.app.Dialog: void setOnDismissListener(android.content.DialogInterface$OnDismissListener)> - @DSSafe(DSCat.ANDROID_CALLBACK)
<android.app.Dialog: void setOwnerActivity(android.app.Activity)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.Dialog: void show()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, no security concern")
<android.app.DialogFragment: android.app.Dialog getDialog()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, dialog")
<android.app.DialogFragment: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.app.DialogFragment: void dismiss()> - @DSSafe(DSCat.GUI) - @DSComment("GUI, dialog")
<android.app.DialogFragment: void onAttach(android.app.Activity)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Fragment: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.app.Fragment: void onActivityCreated(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Fragment: void onPause()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Fragment: void onResume()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.FragmentManager: android.app.Fragment findFragmentById(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.app.FragmentManager: android.app.Fragment findFragmentByTag(java.lang.String)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.app.FragmentTransaction: android.app.FragmentTransaction add(int,android.app.Fragment)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.app.FragmentTransaction: android.app.FragmentTransaction add(int,android.app.Fragment,java.lang.String)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.app.FragmentTransaction: android.app.FragmentTransaction replace(int,android.app.Fragment)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.app.FragmentTransaction: android.app.FragmentTransaction replace(int,android.app.Fragment,java.lang.String)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.app.FragmentTransaction: android.app.FragmentTransaction setTransition(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.app.FragmentTransaction: int commit()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.app.ListActivity: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.app.ListActivity: void onDestroy()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.ListActivity: void setListAdapter(android.widget.ListAdapter)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.app.ListFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.ListFragment: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.app.LoaderManager: android.content.Loader initLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.app.Notification$Builder: android.app.Notification getNotification()> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setAutoCancel(boolean)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setContent(android.widget.RemoteViews)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setContentInfo(java.lang.CharSequence)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setDefaults(int)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setLargeIcon(android.graphics.Bitmap)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setLights(int,int,int)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setNumber(int)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setOnlyAlertOnce(boolean)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setProgress(int,int,boolean)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int,int)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setSound(android.net.Uri)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setSound(android.net.Uri,int)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setVibrate(long[])> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: android.app.Notification$Builder setWhen(long)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Building Notification")
<android.app.Notification$Builder: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.app.Notification: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.app.Notification: void <init>(android.content.Context,int,java.lang.CharSequence,long,java.lang.CharSequence,java.lang.CharSequence,android.content.Intent)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.app.Notification: void <init>(android.os.Parcel)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.app.Notification: void <init>(int,java.lang.CharSequence,long)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)> - @DSSpec(DSCat.IPC) - @DSComment("IPC activity")
<android.app.NotificationManager: void cancel(int)> - @DSSafe(DSCat.GUI) - @DSComment("Notification can only go to screen")
<android.app.NotificationManager: void cancel(java.lang.String,int)> - @DSSafe(DSCat.GUI) - @DSComment("Notification can only go to screen")
<android.app.NotificationManager: void notify(int,android.app.Notification)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int)> - @DSSpec(DSCat.IPC) - @DSComment("IPC activity")
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.PendingIntent: void cancel()> - @DSSafe(DSCat.IPC) - @DSComment("other application can control this intent")
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean,boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean,boolean,android.content.DialogInterface$OnCancelListener)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.app.SearchManager: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.app.Service: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.app.Service: void onCreate()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Service: void onDestroy()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.app.Service: void onStart(android.content.Intent,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.app.TabActivity: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.appwidget.AppWidgetManager: void updateAppWidget(android.content.ComponentName,android.widget.RemoteViews)> - @DSSafe(DSCat.GUI) - @DSComment("Request update on remote view")
<android.appwidget.AppWidgetManager: void updateAppWidget(int,android.widget.RemoteViews)> - @DSSpec(DSCat.ANDROID_MANAGER)
<android.appwidget.AppWidgetManager: void updateAppWidget(int[],android.widget.RemoteViews)> - @DSSafe(DSCat.GUI) - @DSComment("Request update on remote view")
<android.appwidget.AppWidgetProvider: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothAdapter getDefaultAdapter()> - @DSSpec(DSCat.BLUETOOTH) - @DSComment("Bluetooth subsystem")
<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()> - @DSSpec(DSCat.BLUETOOTH) - @DSComment("Bluetooth subsystem")
<android.bluetooth.BluetoothAdapter: boolean isEnabled()> - @DSSpec(DSCat.BLUETOOTH) - @DSComment("Bluetooth subsystem")
<android.bluetooth.BluetoothAdapter: boolean startDiscovery()> - @DSSpec(DSCat.BLUETOOTH) - @DSComment("Bluetooth subsystem")
<android.bluetooth.BluetoothClass: java.lang.String toString()> - @DSSpec(DSCat.BLUETOOTH) - @DSComment("Bluetooth subsystem")
<android.bluetooth.BluetoothDevice: java.lang.String getAddress()> - @DSSpec(DSCat.BLUETOOTH) - @DSComment("Bluetooth subsystem")
<android.content.BroadcastReceiver: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.BroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Abstract Method")
<android.content.ComponentName: java.lang.String flattenToShortString()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ComponentName: java.lang.String getClassName()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ComponentName: java.lang.String getPackageName()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ComponentName: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.ComponentName: void <init>(android.content.Context,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.ComponentName: void <init>(android.os.Parcel)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.ComponentName: void <init>(java.lang.String,android.os.Parcel)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.ContentProvider: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.ContentProvider: void <init>(android.content.Context,java.lang.String,java.lang.String,android.content.pm.PathPermission[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.ContentProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)> - @DSSpec(DSCat.CONTENT)
<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.content.ContentResolver: int bulkInsert(android.net.Uri,android.content.ContentValues[])> - @DSSpec(DSCat.CONTENT) - @DSComment("Content model/data manipulation")
<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])> - @DSSpec(DSCat.CONTENT) - @DSComment("Content model/data manipulation")
<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> - @DSSpec(DSCat.CONTENT) - @DSComment("Content model/data manipulation")
<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> - @DSSpec(DSCat.CONTENT) - @DSComment("Content model/data manipulation")
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)> - @DSSpec(DSCat.CONTENT) - @DSComment("Content model/data manipulation")
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)> - @DSSpec(DSCat.CONTENT) - @DSComment("Content model/data manipulation")
<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)> - @DSSpec(DSCat.CONTENT) - @DSComment("Content model/data manipulation")
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> - @DSSpec(DSCat.CONTENT) - @DSComment("Content model/data manipulation")
<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)> - @DSSpec(DSCat.CONTENT) - @DSComment("Content model/data manipulation")
<android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Content uri manipulation utility")
<android.content.ContentValues: int size()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: java.lang.Object get(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: java.lang.String getAsString(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.ContentValues: void <init>(android.content.ContentValues)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.ContentValues: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.ContentValues: void <init>(java.util.HashMap)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.ContentValues: void <init>(java.util.HashMap,android.content.ContentValues$1)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.ContentValues: void put(java.lang.String,byte[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: void put(java.lang.String,java.lang.Byte)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: void put(java.lang.String,java.lang.Double)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: void put(java.lang.String,java.lang.Float)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: void put(java.lang.String,java.lang.Long)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: void put(java.lang.String,java.lang.Short)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: void put(java.lang.String,java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.ContentValues: void remove(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.Context: android.content.ComponentName startService(android.content.Intent)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: android.content.ContentResolver getContentResolver()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: android.content.Context getApplicationContext()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: android.content.pm.PackageManager getPackageManager()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: android.content.res.AssetManager getAssets()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: android.content.res.Resources getResources()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])> - @DSSafe(DSCat.SAFE_OTHERS)
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int,int[])> - @DSSafe(DSCat.SAFE_OTHERS)
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])> - @DSSafe(DSCat.SAFE_OTHERS)
<android.content.Context: android.os.Looper getMainLooper()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: boolean stopService(android.content.Intent)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: java.io.File getCacheDir()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: java.io.File getExternalCacheDir()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: java.io.File getExternalFilesDir(java.lang.String)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: java.io.File getFilesDir()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: java.io.File getObbDir()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: java.lang.CharSequence getText(int)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.content.Context: java.lang.ClassLoader getClassLoader()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: java.lang.Object getSystemService(java.lang.String)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: java.lang.String getPackageCodePath()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: java.lang.String getPackageName()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: java.lang.String getString(int)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.content.Context: java.lang.String getString(int,java.lang.Object[])> - @DSSafe(DSCat.SAFE_OTHERS)
<android.content.Context: void sendBroadcast(android.content.Intent)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: void startActivities(android.content.Intent[])> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: void startActivity(android.content.Intent)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: void unbindService(android.content.ServiceConnection)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.DialogInterface: void cancel()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.DialogInterface: void dismiss()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.Intent: android.content.ComponentName getComponent()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: android.content.Intent addCategory(java.lang.String)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent addFlags(int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent makeMainActivity(android.content.ComponentName)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent makeRestartActivityTask(android.content.ComponentName)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.IBinder)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable[])> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean[])> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,char)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,char[])> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,double)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,double[])> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,float)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,float[])> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int[])> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence[])> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long[])> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,short)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putExtra(java.lang.String,short[])> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent putParcelableArrayListExtra(java.lang.String,java.util.ArrayList)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent setAction(java.lang.String)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent setData(android.net.Uri)> - @DSSafe(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)> - @DSSafe(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent setFlags(int)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent setPackage(java.lang.String)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.content.Intent setType(java.lang.String)> - @DSSafe(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.content.Intent: android.net.Uri getData()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: android.os.Bundle getExtras()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: boolean hasExtra(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: double getDoubleExtra(java.lang.String,double)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: int getIntExtra(java.lang.String,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: java.lang.CharSequence getCharSequenceExtra(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: java.lang.String getAction()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: java.lang.String getStringExtra(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: java.lang.String getType()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: java.lang.String[] getStringArrayExtra(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: long getLongExtra(java.lang.String,long)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: short getShortExtra(java.lang.String,short)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Intent: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.Intent: void <init>(android.content.Intent)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.Intent: void <init>(android.content.Intent,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.Intent: void <init>(android.os.Parcel)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.Intent: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.Intent: void <init>(java.lang.String,android.net.Uri)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.Intent: void <init>(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.Intent: void removeExtra(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.IntentFilter: int countActions()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.IntentFilter: java.lang.String getAction(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.IntentFilter: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.IntentFilter: void <init>(android.content.IntentFilter)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.IntentFilter: void <init>(android.os.Parcel)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.IntentFilter: void <init>(android.os.Parcel,android.content.IntentFilter$1)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.IntentFilter: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.IntentFilter: void <init>(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.IntentFilter: void addAction(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("movement of Intent is spec")
<android.content.Loader: int getId()> - @DSSafe(DSCat.SAFE_OTHERS)
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor clear()> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor remove(java.lang.String)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.content.SharedPreferences$Editor: boolean commit()> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.content.SharedPreferences: int getInt(java.lang.String,int)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.content.SharedPreferences: long getLong(java.lang.String,long)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.content.SharedPreferences: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.content.SharedPreferences: void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.content.UriMatcher: int match(android.net.Uri)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("URL matching utility")
<android.content.UriMatcher: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.UriMatcher: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("URL matching utility")
<android.content.pm.PackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.pm.PackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.Intent)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationIcon(java.lang.String)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.pm.PackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.pm.PackageManager: void setComponentEnabledSetting(android.content.ComponentName,int,int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String,int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.res.AssetManager: java.lang.String[] list(java.lang.String)> - @DSSpec(DSCat.SECURITY) - @DSComment("Low level access to application asset")
<android.content.res.ColorStateList: int getDefaultColor()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.content.res.Resources: android.content.res.Configuration getConfiguration()> - @DSSpec(DSCat.SYSTEM) - @DSComment("System resources")
<android.content.res.Resources: android.content.res.Resources getSystem()> - @DSSpec(DSCat.SYSTEM) - @DSComment("System resources")
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("seemed harmless")
<android.content.res.Resources: int getColor(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Resource is a data structure, getting system resource is spec")
<android.content.res.Resources: java.io.InputStream openRawResource(int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.res.Resources: java.io.InputStream openRawResource(int,android.util.TypedValue)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.content.res.Resources: java.lang.CharSequence getText(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Resource is a data structure, getting system resource is spec")
<android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.content.res.Resources: java.lang.String getResourceEntryName(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Resource is a data structure, getting system resource is spec")
<android.content.res.Resources: java.lang.String getResourceName(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Resource is a data structure, getting system resource is spec")
<android.content.res.Resources: java.lang.String getResourcePackageName(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Resource is a data structure, getting system resource is spec")
<android.content.res.Resources: java.lang.String getResourceTypeName(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Resource is a data structure, getting system resource is spec")
<android.content.res.Resources: java.lang.String getString(int)> - @DSSpec(DSCat.APP_RESOURCE) - @DSComment("Accessing App Resource")
<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])> - @DSSpec(DSCat.APP_RESOURCE) - @DSComment("Accessing App Resource")
<android.content.res.Resources: java.lang.String[] getStringArray(int)> - @DSSpec(DSCat.APP_RESOURCE) - @DSComment("Accessing App Resource")
<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: boolean getBoolean(int,boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: boolean hasValue(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: float getFloat(int,float)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: int getColor(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: int getDimensionPixelSize(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: int getInt(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: int getInteger(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: int getResourceId(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: java.lang.String getString(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure class")
<android.content.res.TypedArray: void recycle()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.database.ContentObserver: void <init>(android.os.Handler)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.database.Cursor: boolean isAfterLast()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: boolean isClosed()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: boolean move(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: boolean moveToFirst()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: boolean moveToLast()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: boolean moveToNext()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: boolean moveToPosition(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: boolean requery()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: byte[] getBlob(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: int getColumnCount()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: int getColumnIndex(java.lang.String)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: int getCount()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: int getInt(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: int getPosition()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: int getType(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: java.lang.String getColumnName(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: java.lang.String getString(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: java.lang.String[] getColumnNames()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: long getLong(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: void close()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: void registerContentObserver(android.database.ContentObserver)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: void registerDataSetObserver(android.database.DataSetObserver)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: void unregisterContentObserver(android.database.ContentObserver)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.Cursor: void unregisterDataSetObserver(android.database.DataSetObserver)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.database.DataSetObservable: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.database.DataSetObservable: void notifyChanged()> - @DSSpec(DSCat.CALLBACK_INVOKE) - @DSComment("callback will be invoked")
<android.database.DataSetObservable: void registerObserver(android.database.DataSetObserver)> - @DSSafe(DSCat.ANDROID_CALLBACK)
<android.database.DataSetObservable: void registerObserver(java.lang.Object)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.database.DataSetObserver: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.database.DataSetObserver: void onChanged()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.database.DataSetObserver: void onInvalidated()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.database.DatabaseUtils: long queryNumEntries(android.database.sqlite.SQLiteDatabase,java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.database.DatabaseUtils: long queryNumEntries(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.database.DatabaseUtils: long queryNumEntries(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,java.lang.String[])> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.database.MatrixCursor: void <init>(java.lang.String[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.database.MatrixCursor: void <init>(java.lang.String[],int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.database.MatrixCursor: void addRow(java.lang.Iterable)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("MatrixCursor is array backed data structure")
<android.database.MatrixCursor: void addRow(java.lang.Object[])> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.MatrixCursor: void addRow(java.util.ArrayList,int)> - @DSBan(DSCat.PRIVATE_METHOD) - @DSComment("Private Method")
<android.database.SQLException: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.database.SQLException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler,short)> - @DSSpec(DSCat.DATABASE)
<android.database.sqlite.SQLiteDatabase: boolean isOpen()> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: void beginTransaction()> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: void beginTransaction(android.database.sqlite.SQLiteTransactionListener,boolean)> - @DSBan(DSCat.PRIVATE_METHOD) - @DSComment("Private Method")
<android.database.sqlite.SQLiteDatabase: void close()> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: void endTransaction()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()> - @DSSpec(DSCat.DATABASE) - @DSComment("Database access")
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.database.sqlite.SQLiteQueryBuilder: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.database.sqlite.SQLiteQueryBuilder: void appendWhere(java.lang.CharSequence)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Build SQL queries")
<android.database.sqlite.SQLiteQueryBuilder: void appendWhereEscapeString(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Build SQL queries")
<android.database.sqlite.SQLiteQueryBuilder: void setProjectionMap(java.util.Map)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Build SQL queries")
<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Build SQL queries")
<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean)> - @DSBan(DSCat.PRIVATE_METHOD) - @DSComment("Private Method")
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap$Config)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,int,int,android.graphics.Bitmap$Config)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: int getHeight()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: int getPixel(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: int getWidth()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: void recycle()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Bitmap: void setPixel(int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.BitmapFactory$Options: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: android.graphics.Rect getClipBounds()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: boolean clipRect(android.graphics.Rect,android.graphics.Region$Op)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: boolean clipRect(android.graphics.RectF)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: boolean clipRect(android.graphics.RectF,android.graphics.Region$Op)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: boolean clipRect(float,float,float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: boolean clipRect(float,float,float,float,android.graphics.Region$Op)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: boolean clipRect(int,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: boolean getClipBounds(android.graphics.Rect)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: int getHeight()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: int getWidth()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: int save()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: int save(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.Canvas: void <init>(android.graphics.Bitmap)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.Canvas: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawText(char[],int,int,float,float,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawText(java.lang.String,float,float,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void drawText(java.lang.String,int,int,float,float,android.graphics.Paint)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void restore()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void restoreToCount(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void rotate(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void rotate(float,float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void scale(float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void scale(float,float,float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void setDrawFilter(android.graphics.DrawFilter)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Canvas: void translate(float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Color: int alpha(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Color: int argb(int,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Color: int blue(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Color: int green(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Color: int red(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Matrix: boolean postScale(float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Matrix: boolean postScale(float,float,float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Matrix: boolean postTranslate(float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Matrix: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.Matrix: void <init>(android.graphics.Matrix)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: float descent()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.Paint: void <init>(android.graphics.Paint)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.Paint: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.Paint: void setAntiAlias(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void setColor(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void setStrokeWidth(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void setTextAlign(android.graphics.Paint$Align)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Paint: void setTextSize(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.PaintFlagsDrawFilter: void <init>(int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.PorterDuffColorFilter: void <init>(int,android.graphics.PorterDuff$Mode)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.Rect: boolean intersect(android.graphics.Rect)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Rect: boolean intersect(int,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Rect: boolean isEmpty()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Rect: int width()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Rect: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.Rect: void <init>(android.graphics.Rect)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.Rect: void <init>(int,int,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.Rect: void offset(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Rect: void set(android.graphics.Rect)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Rect: void set(int,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Rect: void union(android.graphics.Rect)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Rect: void union(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.Rect: void union(int,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.RectF: float height()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.RectF: float width()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.RectF: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.RectF: void <init>(android.graphics.Rect)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.RectF: void <init>(android.graphics.RectF)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.RectF: void <init>(float,float,float,float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.Typeface: android.graphics.Typeface defaultFromStyle(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.BitmapDrawable: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,java.io.InputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.Bitmap)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources,android.graphics.drawable.BitmapDrawable$1)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.drawable.BitmapDrawable: void <init>(java.io.InputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.drawable.BitmapDrawable: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: boolean isStateful()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: boolean setState(int[])> - @DSSafe(DSCat.SAFE_OTHERS)
<android.graphics.drawable.Drawable: int getIntrinsicHeight()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: int getIntrinsicWidth()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: int getOpacity()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.graphics.drawable.Drawable: void jumpToCurrentState()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: void setAlpha(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.graphics.drawable.LevelListDrawable: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.drawable.LevelListDrawable: void <init>(android.graphics.drawable.LevelListDrawable$LevelListState,android.content.res.Resources)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.graphics.drawable.LevelListDrawable: void <init>(android.graphics.drawable.LevelListDrawable$LevelListState,android.content.res.Resources,android.graphics.drawable.LevelListDrawable$1)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.hardware.SensorManager: boolean getRotationMatrix(float[],float[],float[],float[])> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)> - @DSSafe(DSCat.ANDROID_CALLBACK)
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler)> - @DSSafe(DSCat.ANDROID_CALLBACK)
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int)> - @DSSafe(DSCat.ANDROID_CALLBACK)
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)> - @DSSafe(DSCat.ANDROID_CALLBACK)
<android.hardware.SensorManager: float[] getOrientation(float[],float[])> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action when removing callback")
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action when removing callback")
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener,int)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.hardware.SensorManager: void unregisterListener(java.lang.Object)> - @DSBan(DSCat.PRIVATE_METHOD) - @DSComment("Private Method")
<android.hardware.SensorManager: void unregisterListener(java.lang.Object,android.hardware.Sensor)> - @DSBan(DSCat.PRIVATE_METHOD) - @DSComment("Private Method")
<android.location.Address: double getLatitude()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Address: double getLongitude()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Criteria: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.location.Criteria: void <init>(android.location.Criteria)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility function")
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int,double,double,double,double)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility function")
<android.location.Geocoder: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.location.Geocoder: void <init>(android.content.Context,java.util.Locale)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.location.Location: boolean hasAccuracy()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: boolean hasAltitude()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: boolean hasBearing()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: boolean hasSpeed()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: double getAltitude()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: double getLatitude()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: double getLongitude()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: float getAccuracy()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: float getBearing()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: float getSpeed()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: java.lang.String getProvider()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.Location: long getTime()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> - @DSSpec(DSCat.LOCATION) - @DSComment("Location/GPS access")
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)> - @DSSpec(DSCat.LOCATION) - @DSComment("Location manager")
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.location.LocationManager: java.util.List getProviders(boolean)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)> - @DSSpec(DSCat.LOCATION) - @DSComment("Location manager")
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action when removing callback")
<android.media.AudioManager: int abandonAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener)> - @DSSpec(DSCat.DEVICE) - @DSComment("Controlling audio")
<android.media.AudioManager: int getStreamMaxVolume(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.media.AudioManager: int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,int,int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.media.AudioManager: void registerMediaButtonEventReceiver(android.content.ComponentName)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.media.AudioManager: void registerRemoteControlClient(android.media.RemoteControlClient)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.media.AudioManager: void setRingerMode(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.media.AudioManager: void setStreamVolume(int,int,int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.media.AudioManager: void unregisterMediaButtonEventReceiver(android.content.ComponentName)> - @DSSpec(DSCat.DEVICE) - @DSComment("Controlling audio")
<android.media.AudioManager: void unregisterRemoteControlClient(android.media.RemoteControlClient)> - @DSSpec(DSCat.DEVICE) - @DSComment("Controlling audio")
<android.media.FaceDetector$Face: void getMidPoint(android.graphics.PointF)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.media.FaceDetector: int findFaces(android.graphics.Bitmap,android.media.FaceDetector$Face[])> - @DSSafe(DSCat.SAFE_OTHERS)
<android.media.FaceDetector: void <init>(int,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.media.MediaPlayer: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.media.MediaPlayer: void pause()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.MediaPlayer: void prepare()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.MediaPlayer: void release()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.MediaPlayer: void reset()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)> - @DSSpec(DSCat.URI_EXCHANGE)
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)> - @DSSpec(DSCat.URI_EXCHANGE)
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)> - @DSSpec(DSCat.IO) - @DSComment("Reaching to files/URI")
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)> - @DSSpec(DSCat.IO) - @DSComment("Reaching to files/URI")
<android.media.MediaPlayer: void setDataSource(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("Reaching to files/URI")
<android.media.MediaPlayer: void setDataSource(java.lang.String,java.util.Map)> - @DSSpec(DSCat.IO)
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)> - @DSSafe(DSCat.ANDROID_CALLBACK)
<android.media.MediaPlayer: void start()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.MediaPlayer: void stop()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.media.RemoteControlClient: void <init>(android.app.PendingIntent)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.media.RemoteControlClient: void <init>(android.app.PendingIntent,android.os.Looper)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.media.RemoteControlClient: void setPlaybackState(int)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.media.RemoteControlClient: void setTransportControlFlags(int)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Only getActiveNetworkInfo() is important")
<android.net.NetworkInfo: boolean isConnected()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Only getActiveNetworkInfo() is important")
<android.net.NetworkInfo: int getType()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Only getActiveNetworkInfo() is important")
<android.net.TrafficStats: int getThreadStatsTag()> - @DSSpec(DSCat.NETWORK_STATS) - @DSComment("Traffic statistics")
<android.net.TrafficStats: void clearThreadStatsTag()> - @DSSpec(DSCat.NETWORK_STATS) - @DSComment("Traffic statistics")
<android.net.TrafficStats: void incrementOperationCount(int)> - @DSSpec(DSCat.NETWORK_STATS) - @DSComment("Traffic statistics")
<android.net.TrafficStats: void incrementOperationCount(int,int)> - @DSSpec(DSCat.NETWORK_STATS) - @DSComment("Traffic statistics")
<android.net.TrafficStats: void setThreadStatsTag(int)> - @DSSpec(DSCat.NETWORK_STATS) - @DSComment("Traffic statistics")
<android.net.TrafficStats: void tagSocket(java.net.Socket)> - @DSSpec(DSCat.NETWORK_STATS) - @DSComment("Traffic statistics")
<android.net.TrafficStats: void untagSocket(java.net.Socket)> - @DSSpec(DSCat.NETWORK_STATS) - @DSComment("Traffic statistics")
<android.net.Uri$Builder: android.net.Uri build()> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("URI exchange is more important")
<android.net.Uri$Builder: android.net.Uri$Builder authority(android.net.Uri$Part)> - @DSBan(DSCat.DEFAULT_MODIFIER) - @DSComment("Package priviledge")
<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Only URI passing around is important")
<android.net.Uri$Builder: android.net.Uri$Builder encodedPath(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Only URI passing around is important")
<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Only URI passing around is important")
<android.net.Uri$Builder: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.net.Uri: android.net.Uri fromFile(java.io.File)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.Uri: android.net.Uri parse(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.Uri: java.lang.String decode(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.Uri: java.lang.String encode(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("URI exchange is more important")
<android.net.Uri: java.lang.String encode(java.lang.String,java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Only URI passing around is important")
<android.net.Uri: java.lang.String getEncodedPath()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.net.Uri: java.lang.String getLastPathSegment()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.net.Uri: java.lang.String getPath()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.net.Uri: java.lang.String toString()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.net.Uri: java.util.List getPathSegments()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiInfo: int getLinkSpeed()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiInfo: java.lang.String getBSSID()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiInfo: java.lang.String getSSID()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager$MulticastLock: boolean isHeld()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager$MulticastLock: void acquire()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager$WifiLock: boolean isHeld()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager$WifiLock: void acquire()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager$WifiLock: void release()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$MulticastLock createMulticastLock(java.lang.String)> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$WifiLock createWifiLock(int,java.lang.String)> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$WifiLock createWifiLock(java.lang.String)> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.net.wifi.WifiManager: boolean startScan()> - @DSSpec(DSCat.WIFI) - @DSComment("Wifi subsystem")
<android.net.wifi.WifiManager: int getWifiState()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.net.wifi.WifiManager: java.util.List getScanResults()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.os.AsyncTask: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.os.AsyncTask: void onCancelled()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.os.AsyncTask: void onCancelled(java.lang.Object)> - @DSSafe(DSCat.ANDROID_CALLBACK)
<android.os.AsyncTask: void onPostExecute(java.lang.Object)> - @DSSafe(DSCat.ANDROID_CALLBACK)
<android.os.Binder: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: boolean containsKey(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: boolean getBoolean(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: boolean isEmpty()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: byte getByte(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: int getInt(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.os.Bundle: int getInt(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: java.lang.Byte getByte(java.lang.String,byte)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: java.lang.Object get(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.os.Bundle: java.lang.String getString(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.os.Bundle: java.lang.String getString(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.os.Bundle: java.lang.String toString()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: java.lang.String[] getStringArray(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: java.util.Set keySet()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: long getLong(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.os.Bundle: long getLong(java.lang.String,long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.os.Bundle: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.os.Bundle: void <init>(android.os.Bundle)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.os.Bundle: void <init>(android.os.Parcel)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.os.Bundle: void <init>(android.os.Parcel,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.os.Bundle: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.os.Bundle: void <init>(java.lang.ClassLoader)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.os.Bundle: void putBoolean(java.lang.String,boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void putByte(java.lang.String,byte)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void putInt(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void putString(java.lang.String,java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Bundle data structure")
<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<android.os.Environment: java.io.File getExternalStorageDirectory()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.os.Environment: java.lang.String getExternalStorageState()> - @DSSpec(DSCat.STORAGE_STATE)
<android.os.Handler: android.os.Looper getLooper()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Handler: android.os.Message obtainMessage()> - @DSSafe(DSCat.OS_GENERAL)
<android.os.Handler: android.os.Message obtainMessage(int)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Handler: android.os.Message obtainMessage(int,int,int)> - @DSSafe(DSCat.OS_GENERAL)
<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)> - @DSSafe(DSCat.OS_GENERAL)
<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Handler: boolean hasMessages(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.os.Handler: boolean hasMessages(int,java.lang.Object)> - @DSSafe(DSCat.OS_GENERAL)
<android.os.Handler: boolean post(java.lang.Runnable)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Handler: boolean postAtTime(java.lang.Runnable,java.lang.Object,long)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Handler: boolean postAtTime(java.lang.Runnable,long)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Handler: boolean sendEmptyMessage(int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.os.Handler: boolean sendMessage(android.os.Message)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.os.Handler: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.os.Handler: void <init>(android.os.Handler$Callback)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.os.Handler: void <init>(android.os.Looper)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.os.Handler: void handleMessage(android.os.Message)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Handler: void removeCallbacks(java.lang.Runnable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.os.Handler: void removeCallbacks(java.lang.Runnable,java.lang.Object)> - @DSSafe(DSCat.OS_GENERAL)
<android.os.Handler: void removeMessages(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.os.Handler: void removeMessages(int,java.lang.Object)> - @DSSafe(DSCat.OS_GENERAL)
<android.os.HandlerThread: android.os.Looper getLooper()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.HandlerThread: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.os.HandlerThread: void <init>(java.lang.String,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.os.Looper: android.os.Looper myLooper()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("General android operation, no security concern")
<android.os.Message: android.os.Bundle getData()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Message")
<android.os.Message: android.os.Message obtain()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Message")
<android.os.Message: android.os.Message obtain(android.os.Handler)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Message")
<android.os.Message: android.os.Message obtain(android.os.Handler,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Message")
<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Message")
<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int,java.lang.Object)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Message")
<android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Message")
<android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Message")
<android.os.Message: android.os.Message obtain(android.os.Message)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Message")
<android.os.Message: void sendToTarget()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.os.Message: void setData(android.os.Bundle)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("OS Message")
<android.os.Messenger: android.os.IBinder getBinder()> - @DSSpec(DSCat.IPC) - @DSComment("Binder is vague, need modeling")
<android.os.Messenger: void <init>(android.os.Handler)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.os.Messenger: void <init>(android.os.IBinder)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.os.Messenger: void send(android.os.Message)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.os.Parcel: android.os.Bundle readBundle()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: android.os.Bundle readBundle(java.lang.ClassLoader)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<android.os.Parcel: int readInt()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.os.Parcel: int[] createIntArray()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: java.lang.Object readValue(java.lang.ClassLoader)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.os.Parcel: java.lang.String readString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.os.Parcel: java.lang.String[] createStringArray()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<android.os.Parcel: void writeBundle(android.os.Bundle)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void writeInt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.os.Parcel: void writeIntArray(int[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void writeList(java.util.List)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void writeMap(java.util.Map)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.os.Parcel: void writeString(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void writeStringArray(java.lang.String[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.os.Parcel: void writeValue(java.lang.Object)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("check any serialization")
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<android.os.ParcelFileDescriptor: void close()> - @DSSafe(DSCat.SAFE_OTHERS)
<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.os.PowerManager$WakeLock: void acquire()> - @DSSpec(DSCat.DEVICE) - @DSComment("Power management")
<android.os.PowerManager$WakeLock: void acquire(long)> - @DSSpec(DSCat.DEVICE) - @DSComment("Power management")
<android.os.PowerManager$WakeLock: void release()> - @DSSpec(DSCat.DEVICE) - @DSComment("Power management")
<android.os.PowerManager$WakeLock: void release(int)> - @DSSpec(DSCat.DEVICE) - @DSComment("Power management")
<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)> - @DSSpec(DSCat.DEVICE) - @DSComment("Power management")
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)> - @DSSpec(DSCat.DEVICE) - @DSComment("Power management")
<android.os.Process: void setThreadPriority(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.os.Process: void setThreadPriority(int,int)> - @DSSafe(DSCat.OS_GENERAL)
<android.os.SystemClock: long uptimeMillis()> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("SystemClock only allows reading time")
<android.os.Vibrator: void vibrate(long)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("only vibrating the device")
<android.os.Vibrator: void vibrate(long[],int)> - @DSSafe(DSCat.OS_GENERAL) - @DSComment("only vibrating the device")
<android.preference.EditTextPreference: java.lang.String getText()> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.EditTextPreference: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.preference.EditTextPreference: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.preference.EditTextPreference: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.preference.EditTextPreference: void setText(java.lang.String)> - @DSSpec(DSCat.SPEC_OTHERS) - @DSComment("Persists text to disk")
<android.preference.ListPreference: void setEntries(int)> - @DSSpec(DSCat.SPEC_OTHERS)
<android.preference.ListPreference: void setEntries(java.lang.CharSequence[])> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.ListPreference: void setEntryValues(int)> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.ListPreference: void setEntryValues(java.lang.CharSequence[])> - @DSSafe(DSCat.GUI) - @DSComment("Perference UI, only change preference is spec")
<android.preference.Preference: void setOnPreferenceClickListener(android.preference.Preference$OnPreferenceClickListener)> - @DSSafe(DSCat.ANDROID_CALLBACK)
<android.preference.Preference: void setSummary(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: void setSummary(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("data structure only")
<android.preference.Preference: void setTitle(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.Preference: void setTitle(java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.preference.PreferenceActivity: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.preference.PreferenceActivity: void onCreate(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.preference.PreferenceFragment: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.preference.PreferenceFragment: void onCreate(android.os.Bundle)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.provider.Contacts$People: android.graphics.Bitmap loadContactPhoto(android.content.Context,android.net.Uri,int,android.graphics.BitmapFactory$Options)> - @DSSpec(DSCat.IO) - @DSComment("load photo from a URI")
<android.provider.ContactsContract$CommonDataKinds$Email: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)> - @DSSpec(DSCat.CONTACT)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> - @DSSpec(DSCat.CONTACT)
<android.provider.ContactsContract$Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.provider.ContactsContract$Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri,boolean)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.provider.ContactsContract$QuickContact: void showQuickContact(android.content.Context,android.graphics.Rect,android.net.Uri,int,java.lang.String[])> - @DSSpec(DSCat.CONTACT)
<android.provider.ContactsContract$QuickContact: void showQuickContact(android.content.Context,android.view.View,android.net.Uri,int,java.lang.String[])> - @DSSpec(DSCat.CONTACT)
<android.provider.MediaStore$Images$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory$Options)> - @DSSpec(DSCat.IO) - @DSComment("Thumbnails can be sent outside")
<android.provider.MediaStore$Images$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,long,int,android.graphics.BitmapFactory$Options)> - @DSSpec(DSCat.IO) - @DSComment("Thumbnails can be sent outside")
<android.provider.Settings$System: boolean putInt(android.content.ContentResolver,java.lang.String,int)> - @DSSpec(DSCat.SYSTEM) - @DSComment("System settings/policy")
<android.telephony.PhoneNumberUtils: boolean compare(android.content.Context,java.lang.String,java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION)
<android.telephony.PhoneNumberUtils: boolean compare(java.lang.String,java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION)
<android.telephony.PhoneNumberUtils: boolean compare(java.lang.String,java.lang.String,boolean)> - @DSSafe(DSCat.UTIL_FUNCTION)
<android.telephony.PhoneNumberUtils: boolean isWellFormedSmsAddress(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility function")
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility function")
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String,int)> - @DSSafe(DSCat.UTIL_FUNCTION)
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String,java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION)
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String,java.lang.String,java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION)
<android.telephony.PhoneNumberUtils: void formatNumber(android.text.Editable,int)> - @DSSafe(DSCat.UTIL_FUNCTION)
<android.telephony.PhoneStateListener: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.telephony.ServiceState: int getState()> - @DSSpec(DSCat.PHONE_STATE)
<android.telephony.ServiceState: java.lang.String getOperatorAlphaLong()> - @DSSpec(DSCat.PHONE_STATE)
<android.telephony.SignalStrength: boolean isGsm()> - @DSSpec(DSCat.PHONE_STATE)
<android.telephony.SignalStrength: int getCdmaDbm()> - @DSSpec(DSCat.PHONE_STATE)
<android.telephony.SignalStrength: int getGsmBitErrorRate()> - @DSSpec(DSCat.PHONE_STATE)
<android.telephony.SignalStrength: int getGsmSignalStrength()> - @DSSpec(DSCat.PHONE_STATE)
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.telephony.SmsManager: java.util.ArrayList divideMessage(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("SMS message data structure")
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])> - @DSSpec(DSCat.TELEPHONY) - @DSComment("SMS message creation from raw data")
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[],java.lang.String)> - @DSSpec(DSCat.SMS)
<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.telephony.SmsMessage: java.lang.String getOriginatingAddress()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.text.Editable: android.text.Editable append(char)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.text.Editable: android.text.Editable append(java.lang.CharSequence)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.text.Editable: android.text.Editable append(java.lang.CharSequence,int,int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.text.Editable: android.text.Editable delete(int,int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.text.Editable: void clear()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.text.Html: android.text.Spanned fromHtml(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.Html: android.text.Spanned fromHtml(java.lang.String,android.text.Html$ImageGetter,android.text.Html$TagHandler)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.Html: java.lang.String toHtml(android.text.Spanned)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.method.PasswordTransformationMethod: android.text.method.PasswordTransformationMethod getInstance()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.text.method.ScrollingMovementMethod: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.text.method.SingleLineTransformationMethod: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.util.AndroidRuntimeException: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.util.AndroidRuntimeException: void <init>(java.lang.Exception)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.util.AndroidRuntimeException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.util.AndroidRuntimeException: void <init>(java.lang.String,java.lang.Throwable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.util.AttributeSet: java.lang.String getAttributeValue(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.util.AttributeSet: java.lang.String getAttributeValue(java.lang.String,java.lang.String)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.util.AttributeSet: java.lang.String getPositionDescription()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.util.Log: boolean isLoggable(java.lang.String,int)> - @DSSpec(DSCat.LOGGING) - @DSComment("Android logging subsystem")
<android.util.Log: int d(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.Log: int e(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.Log: int i(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.Log: int println(int,java.lang.String,java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.util.Log: int v(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.Log: int w(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.Log: int w(java.lang.String,java.lang.Throwable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.util.SparseArray: int size()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseArray: java.lang.Object get(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseArray: java.lang.Object get(int,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseArray: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.util.SparseArray: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.util.SparseArray: void clear()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseArray: void put(int,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseArray: void remove(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseIntArray: int get(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseIntArray: int get(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseIntArray: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.util.SparseIntArray: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.util.SparseIntArray: void clear()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.util.SparseIntArray: void put(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.view.ContextMenu: android.view.ContextMenu setHeaderTitle(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.ContextMenu: android.view.ContextMenu setHeaderTitle(java.lang.CharSequence)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.Display: int getDisplayId()> - @DSSafe(DSCat.GUI) - @DSComment("only for display view")
<android.view.Display: int getHeight()> - @DSSafe(DSCat.GUI) - @DSComment("only for display view")
<android.view.Display: int getWidth()> - @DSSafe(DSCat.GUI) - @DSComment("only for display view")
<android.view.FocusFinder: android.view.FocusFinder getInstance()> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.FocusFinder: android.view.View findNextFocus(android.view.ViewGroup,android.view.View,android.graphics.Rect,int)> - @DSBan(DSCat.PRIVATE_METHOD) - @DSComment("Private Method")
<android.view.FocusFinder: android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.GestureDetector$OnDoubleTapListener: boolean onDoubleTapEvent(android.view.MotionEvent)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.GestureDetector$OnDoubleTapListener: boolean onSingleTapConfirmed(android.view.MotionEvent)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.GestureDetector$OnGestureListener: boolean onDown(android.view.MotionEvent)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.GestureDetector$OnGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.GestureDetector$OnGestureListener: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.GestureDetector$OnGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.GestureDetector$OnGestureListener: void onLongPress(android.view.MotionEvent)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.GestureDetector$OnGestureListener: void onShowPress(android.view.MotionEvent)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.GestureDetector: boolean isLongpressEnabled()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.view.GestureDetector: boolean onTouchEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.GestureDetector: void <init>(android.content.Context,android.view.GestureDetector$OnGestureListener)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.GestureDetector: void <init>(android.content.Context,android.view.GestureDetector$OnGestureListener,android.os.Handler)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.GestureDetector: void <init>(android.content.Context,android.view.GestureDetector$OnGestureListener,android.os.Handler,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.GestureDetector: void <init>(android.view.GestureDetector$OnGestureListener)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.GestureDetector: void <init>(android.view.GestureDetector$OnGestureListener,android.os.Handler)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.GestureDetector: void setIsLongpressEnabled(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.view.GestureDetector: void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.Gravity: int getAbsoluteGravity(int,int)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect,int)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.view.Gravity: void applyDisplay(int,android.graphics.Rect,android.graphics.Rect)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.view.KeyEvent$DispatcherState: boolean isTracking(android.view.KeyEvent)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.view.KeyEvent$DispatcherState: void startTracking(android.view.KeyEvent,java.lang.Object)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback,android.view.KeyEvent$DispatcherState,java.lang.Object)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.KeyEvent: boolean isCanceled()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: boolean isTracking()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: boolean metaStateHasModifiers(int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: boolean metaStateHasNoModifiers(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: int getAction()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: int getKeyCode()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: int getMetaState()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: int getRepeatCount()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: int normalizeMetaState(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.KeyEvent: void startTracking()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("data structure only")
<android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.view.LayoutInflater: android.view.LayoutInflater$Factory getFactory()> - @DSSafe(DSCat.SAFE_OTHERS)
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup,boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.view.LayoutInflater: void setFactory(android.view.LayoutInflater$Factory)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.view.Menu: android.view.MenuItem add(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.Menu: android.view.MenuItem add(int,int,int,int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.Menu: android.view.MenuItem add(int,int,int,java.lang.CharSequence)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.Menu: android.view.MenuItem add(java.lang.CharSequence)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.Menu: android.view.MenuItem findItem(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.Menu: android.view.MenuItem getItem(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.Menu: android.view.SubMenu addSubMenu(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.Menu: android.view.SubMenu addSubMenu(int,int,int,int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.Menu: android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.Menu: android.view.SubMenu addSubMenu(java.lang.CharSequence)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.Menu: void clear()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.MenuInflater: void inflate(int,android.view.Menu)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.view.MenuItem: android.view.ActionProvider getActionProvider()> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.view.MenuItem: android.view.ContextMenu$ContextMenuInfo getMenuInfo()> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.view.MenuItem: android.view.MenuItem setActionProvider(android.view.ActionProvider)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.view.MenuItem: android.view.MenuItem setActionView(android.view.View)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.view.MenuItem: android.view.MenuItem setActionView(int)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.view.MenuItem: android.view.MenuItem setEnabled(boolean)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.view.MenuItem: android.view.MenuItem setIcon(android.graphics.drawable.Drawable)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.view.MenuItem: android.view.MenuItem setIcon(int)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.view.MenuItem: android.view.MenuItem setIntent(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE)
<android.view.MenuItem: android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.view.MenuItem: android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.view.MenuItem: android.view.MenuItem setTitle(int)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.view.MenuItem: android.view.MenuItem setTitle(java.lang.CharSequence)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.view.MenuItem: android.view.MenuItem setVisible(boolean)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.view.MenuItem: android.view.View getActionView()> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.view.MenuItem: boolean collapseActionView()> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.view.MenuItem: boolean expandActionView()> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.view.MenuItem: boolean hasSubMenu()> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.view.MenuItem: boolean isActionViewExpanded()> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.view.MenuItem: int getItemId()> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.view.MenuItem: java.lang.CharSequence getTitle()> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.view.MenuItem: void setShowAsAction(int)> - @DSSpec(DSCat.ABSTRACT_METHOD)
<android.view.MotionEvent: float getX()> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: float getX(int)> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: float getY()> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: float getY(int)> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: int findPointerIndex(int)> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: int getAction()> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: int getPointerCount()> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: int getPointerId(int)> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: long getEventTime()> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.MotionEvent: void recycle()> - @DSSafe(DSCat.GUI) - @DSComment("Event associated with motion")
<android.view.SoundEffectConstants: int getContantForFocusDirection(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.view.VelocityTracker: android.view.VelocityTracker obtain()> - @DSSafe(DSCat.GUI) - @DSComment("Touch event tracking")
<android.view.VelocityTracker: float getXVelocity()> - @DSSafe(DSCat.GUI) - @DSComment("Touch event tracking")
<android.view.VelocityTracker: float getXVelocity(int)> - @DSSafe(DSCat.GUI) - @DSComment("Touch event tracking")
<android.view.VelocityTracker: float getYVelocity()> - @DSSafe(DSCat.GUI) - @DSComment("Touch event tracking")
<android.view.VelocityTracker: float getYVelocity(int)> - @DSSafe(DSCat.GUI) - @DSComment("Touch event tracking")
<android.view.VelocityTracker: void addMovement(android.view.MotionEvent)> - @DSSafe(DSCat.GUI) - @DSComment("Touch event tracking")
<android.view.VelocityTracker: void clear()> - @DSSafe(DSCat.GUI) - @DSComment("Touch event tracking")
<android.view.VelocityTracker: void computeCurrentVelocity(int)> - @DSSafe(DSCat.GUI) - @DSComment("Touch event tracking")
<android.view.VelocityTracker: void computeCurrentVelocity(int,float)> - @DSSafe(DSCat.GUI) - @DSComment("Touch event tracking")
<android.view.VelocityTracker: void recycle()> - @DSSafe(DSCat.GUI) - @DSComment("Touch event tracking")
<android.view.View$AccessibilityDelegate: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK)
<android.view.View$AccessibilityDelegate: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View$AccessibilityDelegate: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View$AccessibilityDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View$AccessibilityDelegate: void sendAccessibilityEvent(android.view.View,int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.view.View$AccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.view.View$BaseSavedState: void <init>(android.os.Parcel)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.View$BaseSavedState: void <init>(android.os.Parcelable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.View$MeasureSpec: int getMode(int)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.view.View$MeasureSpec: int getSize(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.view.View$MeasureSpec: int makeMeasureSpec(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.view.View: android.content.Context getContext()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.view.View: android.content.res.Resources getResources()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.graphics.Bitmap getDrawingCache()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.graphics.drawable.Drawable getBackground()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.os.IBinder getWindowToken()> - @DSSpec(DSCat.IPC) - @DSComment("Binder is vague, need modeling")
<android.view.View: android.view.KeyEvent$DispatcherState getKeyDispatcherState()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.view.View findViewById(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.view.View: android.view.ViewParent getParent()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean canScrollHorizontally(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean canScrollVertically(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.View: boolean getLocalVisibleRect(android.graphics.Rect)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isClickable()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isDrawingCacheEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isFocusable()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isFocused()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isHorizontalScrollBarEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isLongClickable()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isOpaque()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isPressed()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isSelected()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean isVerticalScrollBarEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean onTouchEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: boolean postDelayed(java.lang.Runnable,long)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean requestFocus()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean requestFocus(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean requestFocus(int,android.graphics.Rect)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: boolean willNotDraw()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: float getAlpha()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getBottom()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getHeight()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getId()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.view.View: int getLayerType()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getLayoutDirection()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getLeft()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.view.View: int getMeasuredHeight()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getMeasuredHeightAndState()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getMeasuredState()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getMeasuredWidth()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.view.View: int getMeasuredWidthAndState()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getOverScrollMode()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getRight()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getScrollX()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getScrollY()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getTop()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getVisibility()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.view.View: int getWidth()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int getWindowVisibility()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int resolveSize(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: int resolveSizeAndState(int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: java.lang.Object getTag()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.view.View: java.lang.Object getTag(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.view.View: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.View: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.View: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.View: void <init>(droidsafe.helpers.DSOnlyType)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.View: void addFocusables(java.util.ArrayList,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void addFocusables(java.util.ArrayList,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void addTouchables(java.util.ArrayList)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void clearAnimation()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void getLocationOnScreen(int[])> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void invalidate()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void invalidate(android.graphics.Rect)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void invalidate(boolean)> - @DSBan(DSCat.DEFAULT_MODIFIER) - @DSComment("Package priviledge")
<android.view.View: void invalidate(int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void layout(int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void measure(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.view.View: void offsetLeftAndRight(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void offsetTopAndBottom(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.View: void postInvalidate()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void postInvalidate(int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void postInvalidateDelayed(long)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void postInvalidateDelayed(long,int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void restoreHierarchyState(android.util.SparseArray)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void saveHierarchyState(android.util.SparseArray)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void sendAccessibilityEvent(int)> - @DSSafe(DSCat.ANDROID_CALLBACK)
<android.view.View: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setBackgroundColor(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setDrawingCacheEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setId(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setLayerType(int,android.graphics.Paint)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setLayoutDirection(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setMinimumHeight(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setMinimumWidth(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener)> - @DSSafe(DSCat.ANDROID_CALLBACK)
<android.view.View: void setOnFocusChangeListener(android.view.View$OnFocusChangeListener)> - @DSSafe(DSCat.ANDROID_CALLBACK)
<android.view.View: void setOverScrollMode(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setTag(int,java.lang.Object)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setTag(java.lang.Object)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.View: void setVisibility(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.view.View: void startAnimation(android.view.animation.Animation)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)> - @DSSafe(DSCat.GUI) - @DSComment("View configuration")
<android.view.ViewConfiguration: int getDoubleTapTimeout()> - @DSSafe(DSCat.GUI) - @DSComment("View configuration")
<android.view.ViewConfiguration: int getLongPressTimeout()> - @DSSafe(DSCat.GUI) - @DSComment("View configuration")
<android.view.ViewConfiguration: int getScaledDoubleTapSlop()> - @DSSafe(DSCat.GUI) - @DSComment("View configuration")
<android.view.ViewConfiguration: int getScaledMaximumFlingVelocity()> - @DSSafe(DSCat.GUI) - @DSComment("View configuration")
<android.view.ViewConfiguration: int getScaledMinimumFlingVelocity()> - @DSSafe(DSCat.GUI) - @DSComment("View configuration")
<android.view.ViewConfiguration: int getScaledPagingTouchSlop()> - @DSSafe(DSCat.GUI) - @DSComment("View configuration")
<android.view.ViewConfiguration: int getScaledTouchSlop()> - @DSSafe(DSCat.GUI) - @DSComment("View configuration")
<android.view.ViewConfiguration: int getTapTimeout()> - @DSSafe(DSCat.GUI) - @DSComment("View configuration")
<android.view.ViewGroup$LayoutParams: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.ViewGroup$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.ViewGroup$LayoutParams: void <init>(int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.ViewGroup$MarginLayoutParams: boolean isMarginRelative()> - @DSSafe(DSCat.SAFE_OTHERS)
<android.view.ViewGroup$MarginLayoutParams: int getMarginEnd()> - @DSSafe(DSCat.SAFE_OTHERS)
<android.view.ViewGroup$MarginLayoutParams: int getMarginStart()> - @DSSafe(DSCat.SAFE_OTHERS)
<android.view.ViewGroup$MarginLayoutParams: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.ViewGroup$MarginLayoutParams: void <init>(int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.ViewGroup: android.view.View getChildAt(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.view.ViewGroup: boolean dispatchKeyEvent(android.view.KeyEvent)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: boolean onInterceptTouchEvent(android.view.MotionEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.ViewGroup: boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.view.ViewGroup: int getChildCount()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.ViewGroup: void addView(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void addView(android.view.View,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void addView(android.view.View,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void drawableStateChanged()> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void removeView(android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void requestChildFocus(android.view.View,android.view.View)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void requestDisallowInterceptTouchEvent(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewGroup: void setMotionEventSplittingEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Normal GUI")
<android.view.ViewParent: android.view.ViewParent getParent()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.ViewParent: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.ViewParent: void requestDisallowInterceptTouchEvent(boolean)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.Window: android.view.View getDecorView()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()> - @DSSafe(DSCat.GUI)
<android.view.Window: void addFlags(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.Window: void setGravity(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.Window: void setSoftInputMode(int)> - @DSSafe(DSCat.GUI) - @DSComment("Normal UI operations")
<android.view.WindowManager: android.view.Display getDefaultDisplay()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(android.view.accessibility.AccessibilityEvent)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityRecord getRecord(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.view.accessibility.AccessibilityEvent: int getEventType()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.view.accessibility.AccessibilityEvent: int getRecordCount()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.view.accessibility.AccessibilityEvent: void appendRecord(android.view.accessibility.AccessibilityRecord)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("can only append for its own use")
<android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("for the same app usage only")
<android.view.accessibility.AccessibilityManager: boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.accessibility.AccessibilityManager: boolean isEnabled()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.view.accessibility.AccessibilityManager: boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)> - @DSSpec(DSCat.TO_MODEL) - @DSComment("potential callback called inside method")
<android.view.accessibility.AccessibilityManager: java.util.List getEnabledAccessibilityServiceList(int)> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.view.accessibility.AccessibilityManager: java.util.List getInstalledAccessibilityServiceList()> - @DSSpec(DSCat.ANDROID_MANAGER) - @DSComment("Request/Change/Listen Android Manger")
<android.view.accessibility.AccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.accessibility.AccessibilityNodeInfo)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: boolean isCheckable()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: boolean isPassword()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: boolean isScrollable()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: boolean isSelected()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: int getActions()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: int getWindowId()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: java.util.List findAccessibilityNodeInfosByText(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(android.graphics.Rect)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInScreen(android.graphics.Rect)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void recycle()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no relevant action/ recycle the node for reuse")
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInScreen(android.graphics.Rect)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setCheckable(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setChecked(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setContentDescription(java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setPackageName(java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setPassword(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setSelected(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityNodeInfo: void setText(java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityRecord: android.os.Parcelable getParcelableData()> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("View state info")
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain(android.view.accessibility.AccessibilityRecord)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: boolean isChecked()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: boolean isEnabled()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: boolean isFullScreen()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: boolean isPassword()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: boolean isScrollable()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: int getAddedCount()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: int getCurrentItemIndex()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: int getFromIndex()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: int getItemCount()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: int getMaxScrollX()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: int getMaxScrollY()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: int getRemovedCount()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: int getScrollX()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: int getScrollY()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: int getToIndex()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: int getWindowId()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getBeforeText()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getClassName()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getContentDescription()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: java.util.List getText()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void recycle()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setAddedCount(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setBeforeText(java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setChecked(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setClassName(java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setContentDescription(java.lang.CharSequence)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setCurrentItemIndex(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setEnabled(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setFromIndex(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setFullScreen(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setItemCount(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setMaxScrollX(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setMaxScrollY(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setParcelableData(android.os.Parcelable)> - @DSSpec(DSCat.SERIALIZATION) - @DSComment("Data serialization/deserialization")
<android.view.accessibility.AccessibilityRecord: void setPassword(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setRemovedCount(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setScrollX(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setScrollY(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setScrollable(boolean)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.accessibility.AccessibilityRecord: void setToIndex(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure/no action")
<android.view.animation.AccelerateInterpolator: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.animation.AccelerateInterpolator: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.animation.AccelerateInterpolator: void <init>(float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.animation.AlphaAnimation: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.animation.AlphaAnimation: void <init>(float,float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.animation.Animation: void setAnimationListener(android.view.animation.Animation$AnimationListener)> - @DSSafe(DSCat.ANDROID_CALLBACK)
<android.view.animation.AnimationSet: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.animation.AnimationSet: void <init>(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.animation.AnimationSet: void addAnimation(android.view.animation.Animation)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.view.animation.AnimationUtils: long currentAnimationTimeMillis()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no actions/not sensitive")
<android.view.animation.DecelerateInterpolator: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.animation.DecelerateInterpolator: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.animation.DecelerateInterpolator: void <init>(float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int)> - @DSSpec(DSCat.SYSTEM) - @DSComment("System settings/policy")
<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int,android.os.ResultReceiver)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.view.inputmethod.InputMethodManager: boolean isFullscreenMode()> - @DSSafe(DSCat.SAFE_OTHERS)
<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int)> - @DSSpec(DSCat.SYSTEM) - @DSComment("System settings/policy")
<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int,android.os.ResultReceiver)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.webkit.JsResult: void confirm()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<android.webkit.MimeTypeMap: android.webkit.MimeTypeMap getSingleton()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure factory")
<android.webkit.MimeTypeMap: java.lang.String getFileExtensionFromUrl(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION)
<android.webkit.MimeTypeMap: java.lang.String getMimeTypeFromExtension(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility function")
<android.webkit.WebChromeClient: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.webkit.WebSettings: void setBuiltInZoomControls(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.webkit.WebSettings: void setCacheMode(int)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)> - @DSSpec(DSCat.SECURITY) - @DSComment("enable javascript setting")
<android.webkit.WebSettings: void setSaveFormData(boolean)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.webkit.WebSettings: void setSavePassword(boolean)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.webkit.WebSettings: void setSupportZoom(boolean)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.webkit.WebView: android.webkit.WebSettings getSettings()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Spec classification done at the Setting manipulation level")
<android.webkit.WebView: boolean canGoBack()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.webkit.WebView: java.lang.String getUrl()> - @DSSpec(DSCat.URI_EXCHANGE)
<android.webkit.WebView: void addJavascriptInterface(java.lang.Object,java.lang.String)> - @DSSpec(DSCat.SYSTEM) - @DSComment("System settings/policy")
<android.webkit.WebView: void goBack()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<android.webkit.WebView: void loadUrl(java.lang.String)> - @DSSpec(DSCat.INTERNET) - @DSComment("I/O load/store/Internet")
<android.webkit.WebView: void loadUrl(java.lang.String,java.util.Map)> - @DSSpec(DSCat.INTERNET)
<android.webkit.WebView: void reload()> - @DSSafe(DSCat.SAFE_OTHERS)
<android.webkit.WebView: void setWebChromeClient(android.webkit.WebChromeClient)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Webview display, no IO access to outside world")
<android.webkit.WebView: void setWebViewClient(android.webkit.WebViewClient)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("Webview display, no IO access to outside world")
<android.webkit.WebViewClient: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.AbsListView$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.AbsListView$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.AbsListView$LayoutParams: void <init>(int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.AbsListView$LayoutParams: void <init>(int,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.Adapter: java.lang.Object getItem(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.widget.AdapterView: android.widget.Adapter getAdapter()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.widget.AdapterView: java.lang.Object getItemAtPosition(int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI, AdapterView")
<android.widget.ArrayAdapter: android.widget.ArrayAdapter createFromResource(android.content.Context,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: java.lang.Object getItem(int)> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: void <init>(android.content.Context,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,int,java.lang.Object[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,int,java.util.List)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,java.lang.Object[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,java.util.List)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.ArrayAdapter: void add(java.lang.Object)> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: void addAll(java.lang.Object[])> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to e safe")
<android.widget.ArrayAdapter: void addAll(java.util.Collection)> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: void clear()> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: void notifyDataSetChanged()> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.ArrayAdapter: void setDropDownViewResource(int)> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.AutoCompleteTextView: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.AutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.AutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.AutoCompleteTextView: void setAdapter(android.widget.ListAdapter)> - @DSSafe(DSCat.GUI) - @DSComment("Autocomplete")
<android.widget.AutoCompleteTextView: void setText(java.lang.CharSequence,boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Autocomplete")
<android.widget.AutoCompleteTextView: void setThreshold(int)> - @DSSafe(DSCat.GUI) - @DSComment("Autocomplete")
<android.widget.BaseAdapter: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.BaseAdapter: void notifyDataSetChanged()> - @DSSafe(DSCat.GUI) - @DSComment("Binding data, need modeling to be safe")
<android.widget.Button: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.CheckBox: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.CheckBox: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.CheckBox: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.CursorAdapter: void <init>(android.content.Context,android.database.Cursor)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.CursorAdapter: void <init>(android.content.Context,android.database.Cursor,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.CursorAdapter: void <init>(android.content.Context,android.database.Cursor,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.EdgeEffect: boolean draw(android.graphics.Canvas)> - @DSSafe(DSCat.GUI) - @DSComment("GUI/Edge Effect, check callbacks")
<android.widget.EdgeEffect: boolean isFinished()> - @DSSafe(DSCat.GUI) - @DSComment("GUI/Edge Effect, check callbacks")
<android.widget.EdgeEffect: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.EdgeEffect: void finish()> - @DSSafe(DSCat.GUI) - @DSComment("GUI/Edge Effect, check callbacks")
<android.widget.EdgeEffect: void onAbsorb(int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.EdgeEffect: void onPull(float)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.EdgeEffect: void onRelease()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.EdgeEffect: void setSize(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("GUI/Edge Effect, check callbacks")
<android.widget.EditText: android.text.Editable getText()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.widget.EditText: java.lang.CharSequence getText()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.widget.EditText: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.EditText: void setText(java.lang.CharSequence,android.widget.TextView$BufferType)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.widget.Filter$FilterResults: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.Filter: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.FilterQueryProvider: android.database.Cursor runQuery(java.lang.CharSequence)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.widget.FrameLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.FrameLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.FrameLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.FrameLayout$LayoutParams: void <init>(int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.FrameLayout$LayoutParams: void <init>(int,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.FrameLayout: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.FrameLayout: void draw(android.graphics.Canvas)> - @DSSafe(DSCat.GUI) - @DSComment("GUI/FrameLayout, check callbacks")
<android.widget.FrameLayout: void onSizeChanged(int,int,int,int)> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.HeaderViewListAdapter: android.widget.ListAdapter getWrappedAdapter()> - @DSSafe(DSCat.SAFE_OTHERS)
<android.widget.HeaderViewListAdapter: int getHeadersCount()> - @DSSafe(DSCat.SAFE_OTHERS)
<android.widget.ImageView: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.ImageView: void setAdjustViewBounds(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("Safe excetp setImageURI")
<android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI) - @DSComment("Safe excetp setImageURI")
<android.widget.ImageView: void setImageResource(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.widget.ImageView: void setImageURI(android.net.Uri)> - @DSSafe(DSCat.GUI) - @DSComment("Safe excetp setImageURI")
<android.widget.ImageView: void setVisibility(int)> - @DSSafe(DSCat.GUI) - @DSComment("Safe excetp setImageURI")
<android.widget.LinearLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.LinearLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.LinearLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.LinearLayout$LayoutParams: void <init>(int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.LinearLayout$LayoutParams: void <init>(int,int,float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.LinearLayout: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.LinearLayout: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.LinearLayout: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.LinearLayout: void setGravity(int)> - @DSSafe(DSCat.GUI) - @DSComment("Layout")
<android.widget.LinearLayout: void setOrientation(int)> - @DSSafe(DSCat.GUI) - @DSComment("Layout")
<android.widget.ListView: android.widget.Adapter getAdapter()> - @DSSafe(DSCat.GUI) - @DSComment("ListView")
<android.widget.ListView: android.widget.ListAdapter getAdapter()> - @DSSafe(DSCat.GUI) - @DSComment("ListView")
<android.widget.ListView: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.ListView: void setAdapter(android.widget.Adapter)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.widget.ListView: void setAdapter(android.widget.ListAdapter)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.widget.ListView: void setSelection(int)> - @DSSafe(DSCat.GUI) - @DSComment("ListView")
<android.widget.ListView: void setSelectionFromTop(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("ListView")
<android.widget.OverScroller: boolean computeScrollOffset()> - @DSSafe(DSCat.GUI)
<android.widget.OverScroller: boolean isFinished()> - @DSSafe(DSCat.GUI)
<android.widget.OverScroller: boolean isOverScrolled()> - @DSSafe(DSCat.GUI)
<android.widget.OverScroller: float getCurrVelocity()> - @DSSafe(DSCat.GUI)
<android.widget.OverScroller: int getCurrX()> - @DSSafe(DSCat.GUI)
<android.widget.OverScroller: int getCurrY()> - @DSSafe(DSCat.GUI)
<android.widget.OverScroller: int getFinalX()> - @DSSafe(DSCat.GUI)
<android.widget.OverScroller: int getFinalY()> - @DSSafe(DSCat.GUI)
<android.widget.OverScroller: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.OverScroller: void <init>(android.content.Context,android.view.animation.Interpolator)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.OverScroller: void <init>(android.content.Context,android.view.animation.Interpolator,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.OverScroller: void <init>(android.content.Context,android.view.animation.Interpolator,float,float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.OverScroller: void <init>(android.content.Context,android.view.animation.Interpolator,float,float,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.OverScroller: void abortAnimation()> - @DSSafe(DSCat.GUI)
<android.widget.OverScroller: void notifyHorizontalEdgeReached(int,int,int)> - @DSSafe(DSCat.GUI)
<android.widget.OverScroller: void notifyVerticalEdgeReached(int,int,int)> - @DSSafe(DSCat.GUI)
<android.widget.OverScroller: void startScroll(int,int,int,int)> - @DSSafe(DSCat.GUI)
<android.widget.OverScroller: void startScroll(int,int,int,int,int)> - @DSSafe(DSCat.GUI)
<android.widget.ProgressBar: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.ProgressBar: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.ProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.ProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.ProgressBar: void onAttachedToWindow()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.ProgressBar: void onDetachedFromWindow()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.RemoteViews: void <init>(android.os.Parcel)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.RemoteViews: void <init>(java.lang.String,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)> - @DSSafe(DSCat.GUI) - @DSComment("check setOnClickPendingIntent")
<android.widget.ScrollView: void smoothScrollTo(int,int)> - @DSSafe(DSCat.GUI) - @DSComment("ScrollView")
<android.widget.Scroller: boolean computeScrollOffset()> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: boolean isFinished()> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: int getCurrX()> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: int getCurrY()> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: int getDuration()> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: int getFinalX()> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: int getFinalY()> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: int timePassed()> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.Scroller: void abortAnimation()> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: void startScroll(int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.Scroller: void startScroll(int,int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("Scroller")
<android.widget.SearchView: boolean isIconified()> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: boolean isQueryRefinementEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: boolean isSubmitButtonEnabled()> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: java.lang.CharSequence getQuery()> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.SearchView: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.SearchView: void onActionViewCollapsed()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.SearchView: void setIconified(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: void setImeOptions(int)> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: void setInputType(int)> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: void setMaxWidth(int)> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: void setOnCloseListener(android.widget.SearchView$OnCloseListener)> - @DSSafe(DSCat.ANDROID_CALLBACK)
<android.widget.SearchView: void setOnQueryTextListener(android.widget.SearchView$OnQueryTextListener)> - @DSSafe(DSCat.ANDROID_CALLBACK)
<android.widget.SearchView: void setQuery(java.lang.CharSequence)> - @DSBan(DSCat.PRIVATE_METHOD) - @DSComment("Private Method")
<android.widget.SearchView: void setQuery(java.lang.CharSequence,boolean)> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: void setQueryHint(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: void setQueryRefinementEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: void setSearchableInfo(android.app.SearchableInfo)> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.SearchView: void setSubmitButtonEnabled(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("SearchView, check callback")
<android.widget.ShareActionProvider: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.ShareActionProvider: void setShareHistoryFileName(java.lang.String)> - @DSSpec(DSCat.SHARING) - @DSComment("Sharing request")
<android.widget.ShareActionProvider: void setShareIntent(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE) - @DSComment("Potential intent to trigger other processing")
<android.widget.SimpleAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.widget.SimpleCursorAdapter: android.database.Cursor swapCursor(android.database.Cursor)> - @DSSpec(DSCat.DATABASE) - @DSComment("returned DB object")
<android.widget.SimpleCursorAdapter: void setViewBinder(android.widget.SimpleCursorAdapter$ViewBinder)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.widget.Spinner: void setAdapter(android.widget.Adapter)> - @DSSafe(DSCat.GUI) - @DSComment("Spinner")
<android.widget.Spinner: void setAdapter(android.widget.SpinnerAdapter)> - @DSSafe(DSCat.GUI) - @DSComment("Spinner")
<android.widget.TabHost$OnTabChangeListener: void onTabChanged(java.lang.String)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)> - @DSSpec(DSCat.INTENT_EXCHANGE)
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(int)> - @DSSafe(DSCat.GUI)
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)> - @DSSafe(DSCat.GUI)
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)> - @DSSafe(DSCat.GUI)
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence,android.graphics.drawable.Drawable)> - @DSSafe(DSCat.GUI)
<android.widget.TabHost$TabSpec: java.lang.String getTag()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS)
<android.widget.TabHost: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.TabHost: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)> - @DSSafe(DSCat.GUI)
<android.widget.TabHost: void onAttachedToWindow()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TabHost: void onDetachedFromWindow()> - @DSSafe(DSCat.ANDROID_CALLBACK) - @DSComment("normal android callback")
<android.widget.TabHost: void setCurrentTabByTag(java.lang.String)> - @DSSafe(DSCat.GUI) - @DSComment("TabHost, check callbacks modeled")
<android.widget.TabHost: void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener)> - @DSSafe(DSCat.ANDROID_CALLBACK)
<android.widget.TabHost: void setup()> - @DSSafe(DSCat.GUI) - @DSComment("TabHost, check callbacks modeled")
<android.widget.TabHost: void setup(android.app.LocalActivityManager)> - @DSSafe(DSCat.GUI) - @DSComment("TabHost, check callbacks modeled")
<android.widget.TabWidget: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.TabWidget: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.TabWidget: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.TextView: android.content.res.ColorStateList getTextColors()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: android.content.res.ColorStateList getTextColors(android.content.Context,android.content.res.TypedArray)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: java.lang.CharSequence getText()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.TextView: void append(java.lang.CharSequence)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void append(java.lang.CharSequence,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setEllipsize(android.text.TextUtils$TruncateAt)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setGravity(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.widget.TextView: void setMinHeight(int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setMovementMethod(android.text.method.MovementMethod)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setPadding(int,int,int,int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setSingleLine()> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setSingleLine(boolean)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setText(char[],int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.widget.TextView: void setText(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.widget.TextView: void setText(int,android.widget.TextView$BufferType)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.widget.TextView: void setText(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.widget.TextView: void setText(java.lang.CharSequence,android.widget.TextView$BufferType)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.widget.TextView: void setText(java.lang.CharSequence,android.widget.TextView$BufferType,boolean,int)> - @DSBan(DSCat.PRIVATE_METHOD) - @DSComment("Private Method")
<android.widget.TextView: void setTextAppearance(android.content.Context,int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setTextColor(android.content.res.ColorStateList)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.widget.TextView: void setTextColor(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.widget.TextView: void setTextSize(float)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setTextSize(int,float)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setTransformationMethod(android.text.method.TransformationMethod)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setTypeface(android.graphics.Typeface)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TextView: void setTypeface(android.graphics.Typeface,int)> - @DSSafe(DSCat.GUI) - @DSComment("TextView, check callbacks modeled")
<android.widget.TimePicker: java.lang.Integer getCurrentHour()> - @DSSafe(DSCat.GUI) - @DSComment("TimePicker, check callbacks modeled")
<android.widget.TimePicker: java.lang.Integer getCurrentMinute()> - @DSSafe(DSCat.GUI) - @DSComment("TimePicker, check callbacks modeled")
<android.widget.TimePicker: void <init>(android.content.Context)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.TimePicker: void <init>(android.content.Context,android.util.AttributeSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.TimePicker: void <init>(android.content.Context,android.util.AttributeSet,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<android.widget.TimePicker: void setCurrentHour(java.lang.Integer)> - @DSSafe(DSCat.GUI) - @DSComment("TimePicker, check callbacks modeled")
<android.widget.TimePicker: void setCurrentMinute(java.lang.Integer)> - @DSSafe(DSCat.GUI) - @DSComment("TimePicker, check callbacks modeled")
<android.widget.TimePicker: void setIs24HourView(java.lang.Boolean)> - @DSSafe(DSCat.GUI) - @DSComment("TimePicker, check callbacks modeled")
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<android.widget.Toast: void show()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.io.BufferedInputStream: int read()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.BufferedInputStream: int read(byte[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.BufferedInputStream: void <init>(java.io.InputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.BufferedInputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.BufferedOutputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.BufferedOutputStream: void flush()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.BufferedOutputStream: void write(byte[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.BufferedOutputStream: void write(int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.BufferedReader: int read()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.BufferedReader: int read(char[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.BufferedReader: java.lang.String readLine()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.io.BufferedReader: void <init>(java.io.Reader)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.BufferedReader: void <init>(java.io.Reader,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.BufferedReader: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.BufferedWriter: void <init>(java.io.Writer)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.BufferedWriter: void <init>(java.io.Writer,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.BufferedWriter: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.BufferedWriter: void flush()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.BufferedWriter: void write(char[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.BufferedWriter: void write(int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.BufferedWriter: void write(java.lang.String,int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.ByteArrayInputStream: void <init>(byte[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.ByteArrayInputStream: void <init>(byte[],int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.ByteArrayOutputStream: byte[] toByteArray()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.ByteArrayOutputStream: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.ByteArrayOutputStream: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.ByteArrayOutputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.ByteArrayOutputStream: void reset()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.ByteArrayOutputStream: void write(byte[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.ByteArrayOutputStream: void write(int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.Closeable: void close()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.io.File: boolean canRead()> - @DSSpec(DSCat.IO) - @DSComment("File Information")
<java.io.File: boolean createNewFile()> - @DSSpec(DSCat.IO)
<java.io.File: boolean delete()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.File: boolean exists()> - @DSSpec(DSCat.IO)
<java.io.File: boolean isDirectory()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.io.File: boolean isFile()> - @DSSpec(DSCat.IO)
<java.io.File: boolean mkdir()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.File: boolean mkdirs()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.File: boolean renameTo(java.io.File)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.File: java.io.File getAbsoluteFile()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.File: java.io.File getCanonicalFile()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.File: java.io.File getParentFile()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.File: java.io.File[] listFiles()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.File: java.lang.String getAbsolutePath()> - @DSSpec(DSCat.IO) - @DSComment("File Information")
<java.io.File: java.lang.String getCanonicalPath()> - @DSSpec(DSCat.IO) - @DSComment("File Information")
<java.io.File: java.lang.String getName()> - @DSSpec(DSCat.IO) - @DSComment("File Information")
<java.io.File: java.lang.String getParent()> - @DSSpec(DSCat.IO) - @DSComment("File Information")
<java.io.File: java.lang.String getPath()> - @DSSpec(DSCat.IO) - @DSComment("File Information")
<java.io.File: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.io.File: java.lang.String[] list()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.File: long lastModified()> - @DSSpec(DSCat.IO) - @DSComment("File Information")
<java.io.File: long length()> - @DSSpec(DSCat.IO) - @DSComment("File Information")
<java.io.File: void <init>(java.io.File,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.File: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.File: void <init>(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.File: void <init>(java.net.URI)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.FileDescriptor: void sync()> - @DSSpec(DSCat.IO) - @DSComment("Syncing file with storage")
<java.io.FileInputStream: int available()> - @DSSpec(DSCat.IO) - @DSComment("File Input Stream")
<java.io.FileInputStream: int read()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.FileInputStream: int read(byte[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.FileInputStream: long skip(long)> - @DSSpec(DSCat.IO) - @DSComment("File Input Stream")
<java.io.FileInputStream: void <init>(java.io.File)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.FileInputStream: void <init>(java.io.FileDescriptor)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.FileInputStream: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.FileInputStream: void close()> - @DSSpec(DSCat.IO) - @DSComment("File Input Stream")
<java.io.FileOutputStream: java.io.FileDescriptor getFD()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.io.FileOutputStream: void <init>(java.io.File)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.FileOutputStream: void <init>(java.io.File,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.FileOutputStream: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.FileOutputStream: void <init>(java.lang.String,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.FileOutputStream: void close()> - @DSSpec(DSCat.IO) - @DSComment("File Output Stream")
<java.io.FileOutputStream: void write(byte[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.FileOutputStream: void write(int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.FileReader: void <init>(java.io.File)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.FileReader: void <init>(java.io.FileDescriptor)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.FileReader: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.FileWriter: void <init>(java.io.File)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.FileWriter: void <init>(java.io.File,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.FileWriter: void <init>(java.io.FileDescriptor)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.FileWriter: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.FileWriter: void <init>(java.lang.String,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.FilterInputStream: void <init>(java.io.InputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.FilterInputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.FilterOutputStream: void <init>(java.io.OutputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.FilterOutputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.IOException: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.IOException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.IOException: void <init>(java.lang.Throwable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.InputStream: int available()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.InputStream: int read()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.io.InputStream: int read(byte[])> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.InputStream: int read(byte[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.InputStream: long skip(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.io.InputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.InputStreamReader: void <init>(java.io.InputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.CharsetDecoder)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.InputStreamReader: void close()> - @DSSpec(DSCat.IO) - @DSComment("InputStreamReader class")
<java.io.ObjectInputStream: java.lang.Object readObject()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.ObjectInputStream: java.lang.Object readObject(boolean)> - @DSBan(DSCat.PRIVATE_METHOD) - @DSComment("Private Method")
<java.io.ObjectInputStream: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.ObjectInputStream: void <init>(java.io.InputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.ObjectInputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.ObjectOutputStream: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.ObjectOutputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive")
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.ObjectOutputStream: void writeObject(java.lang.Object,boolean)> - @DSBan(DSCat.PRIVATE_METHOD) - @DSComment("Private Method")
<java.io.OutputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.OutputStream: void flush()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.io.OutputStream: void write(byte[])> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.OutputStream: void write(byte[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.OutputStream: void write(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.CharsetEncoder)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.OutputStreamWriter: void close()> - @DSSpec(DSCat.IO) - @DSComment("OutputStreamWrite class")
<java.io.PrintStream: void print(boolean)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void print(char)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void print(char[])> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void print(double)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void print(float)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void print(int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void print(java.lang.Object)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void print(java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void print(long)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void println()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void println(boolean)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void println(char)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void println(char[])> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void println(double)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void println(float)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void println(int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void println(java.lang.Object)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void println(java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintStream: void println(long)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void <init>(java.io.File)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.PrintWriter: void <init>(java.io.File,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.PrintWriter: void <init>(java.io.OutputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.PrintWriter: void <init>(java.io.Writer)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.PrintWriter: void <init>(java.io.Writer,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.PrintWriter: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.PrintWriter: void <init>(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.PrintWriter: void flush()> - @DSSpec(DSCat.IO) - @DSComment("PrintWriter class")
<java.io.PrintWriter: void print(boolean)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void print(char)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void print(char[])> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void print(double)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void print(float)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void print(int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void print(java.lang.Object)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void print(java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void print(long)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void println()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void println(boolean)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void println(char)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void println(char[])> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void println(double)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void println(float)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void println(int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void println(java.lang.Object)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void println(java.lang.String)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PrintWriter: void println(long)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.io.PushbackInputStream: int read()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.PushbackInputStream: int read(byte[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.PushbackInputStream: void <init>(java.io.InputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.PushbackInputStream: void <init>(java.io.InputStream,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.PushbackReader: boolean ready()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.PushbackReader: int read()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.PushbackReader: int read(char[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.PushbackReader: void <init>(java.io.Reader)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.PushbackReader: void <init>(java.io.Reader,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.PushbackReader: void unread(char[])> - @DSSpec(DSCat.IO)
<java.io.PushbackReader: void unread(char[],int,int)> - @DSSpec(DSCat.IO)
<java.io.PushbackReader: void unread(int)> - @DSSpec(DSCat.IO)
<java.io.Reader: int read()> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.Reader: int read(char[])> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.Reader: int read(char[],int,int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.io.Reader: int read(java.nio.CharBuffer)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.Reader: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.Reader: void <init>(java.lang.Object)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.StringWriter: java.lang.String toString()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive, memory stream")
<java.io.StringWriter: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.StringWriter: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.StringWriter: void write(char[],int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.StringWriter: void write(int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.StringWriter: void write(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.StringWriter: void write(java.lang.String,int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.Writer: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.Writer: void <init>(java.lang.Object)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.io.Writer: void close()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.io.Writer: void flush()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.io.Writer: void write(char[])> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.Writer: void write(char[],int,int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.io.Writer: void write(int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.Writer: void write(java.lang.String)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.io.Writer: void write(java.lang.String,int,int)> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.lang.AssertionError: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.AssertionError: void <init>(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.AssertionError: void <init>(char)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.AssertionError: void <init>(double)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.AssertionError: void <init>(float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.AssertionError: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.AssertionError: void <init>(java.lang.Object)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.AssertionError: void <init>(java.lang.String,java.lang.Throwable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.AssertionError: void <init>(long)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Boolean: boolean booleanValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Boolean: boolean parseBoolean(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Boolean: java.lang.Boolean valueOf(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Boolean: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Boolean: java.lang.String toString(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Byte: byte byteValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Byte: java.lang.Byte valueOf(byte)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Byte: java.lang.Byte valueOf(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.CharSequence: char charAt(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.lang.CharSequence: int length()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.lang.Character: boolean isDigit(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: boolean isDigit(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: boolean isHighSurrogate(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: boolean isLetterOrDigit(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: boolean isLetterOrDigit(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: boolean isLowSurrogate(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: boolean isWhitespace(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: boolean isWhitespace(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: byte getDirectionality(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: byte getDirectionality(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: char charValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: char forDigit(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: char toLowerCase(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: char toUpperCase(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: int charCount(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: int codePointAt(char[],int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: int codePointAt(char[],int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: int codePointAt(java.lang.CharSequence,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: int codePointBefore(char[],int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: int codePointBefore(char[],int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: int codePointBefore(java.lang.CharSequence,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: int digit(char,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: int digit(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: int toLowerCase(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: int toUpperCase(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: java.lang.Character valueOf(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: java.lang.String toString(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Character: void <init>(char)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Class: boolean desiredAssertionStatus()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: boolean isAssignableFrom(java.lang.Class)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Class: boolean isMemberClass()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: int getModifiers()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: int getModifiers(java.lang.Class,boolean)> - @DSBan(DSCat.PRIVATE_METHOD) - @DSComment("Private Method")
<java.lang.Class: java.lang.Class forName(java.lang.String)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Class: java.lang.Class getComponentType()> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Class: java.lang.ClassLoader getClassLoader()> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Class: java.lang.ClassLoader getClassLoader(java.lang.Class)> - @DSBan(DSCat.PRIVATE_METHOD) - @DSComment("Private Method")
<java.lang.Class: java.lang.Object newInstance()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.String getName()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.String getSimpleName()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.String toString()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.Class,java.lang.String)> - @DSBan(DSCat.DEFAULT_MODIFIER) - @DSComment("Package priviledge")
<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Class: java.lang.reflect.Method[] getMethods()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.ClassCastException: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.ClassCastException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.Comparable: int compareTo(java.lang.Object)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.lang.Double: boolean isInfinite()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: boolean isInfinite(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: boolean isNaN()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: boolean isNaN(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: double doubleValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: double parseDouble(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: java.lang.Double valueOf(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: java.lang.Double valueOf(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: java.lang.String toString(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Double: void <init>(double)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Double: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Enum: void <init>(java.lang.String,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Error: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Error: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Error: void <init>(java.lang.Throwable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Exception: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Exception: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Exception: void <init>(java.lang.Throwable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Float: boolean isInfinite()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: boolean isInfinite(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: boolean isNaN()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: boolean isNaN(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: float floatValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: float parseFloat(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: int intValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: java.lang.Float valueOf(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Float: java.lang.Float valueOf(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.IllegalArgumentException: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.IllegalArgumentException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.IllegalStateException: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.IllegalStateException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.IllegalStateException: void <init>(java.lang.Throwable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.IndexOutOfBoundsException: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Integer: boolean equals(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: int compareTo(java.lang.Integer)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: int compareTo(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: int intValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: int numberOfTrailingZeros(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: int parseInt(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: int parseInt(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: java.lang.Integer valueOf(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: java.lang.Integer valueOf(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: java.lang.String toHexString(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: java.lang.String toString(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: java.lang.String toString(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Integer: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Integer: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.InterruptedException: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.InterruptedException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Iterable: java.util.Iterator iterator()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.lang.Long: java.lang.Long valueOf(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: java.lang.Long valueOf(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: java.lang.Long valueOf(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: java.lang.String toString(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: java.lang.String toString(long,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: long longValue()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: long parseLong(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: long parseLong(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Long: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Long: void <init>(long)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Math: double abs(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double cos(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double floor(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double log(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double max(double,double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double min(double,double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double pow(double,double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: double sin(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: float abs(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: float max(float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: float min(float,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: int abs(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: int max(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: int min(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: int round(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: long abs(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: long max(long,long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: long min(long,long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Math: long round(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.NullPointerException: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.NullPointerException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Number: double doubleValue()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.lang.Number: int intValue()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.lang.Number: long longValue()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.lang.Object: boolean equals(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Object: int hashCode()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Object: java.lang.Class getClass()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Object: java.lang.Object clone()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Object: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Object: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Object: void notify()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Object: void wait()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Object: void wait(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Object: void wait(long,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Process: int waitFor()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.lang.Process: java.io.InputStream getInputStream()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.lang.String[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action")
<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.util.List)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action")
<java.lang.ProcessBuilder: java.util.List command()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action")
<java.lang.Runnable: void run()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.lang.Runtime: java.lang.Process exec(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[],java.io.File)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Runtime: java.lang.Process exec(java.lang.String[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Runtime: java.lang.Runtime getRuntime()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.RuntimeException: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.RuntimeException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.RuntimeException: void <init>(java.lang.Throwable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.SecurityException: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.SecurityException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.SecurityException: void <init>(java.lang.Throwable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Short: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Short: java.lang.String toString(short)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: boolean contains(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: boolean contentEquals(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: boolean contentEquals(java.lang.StringBuffer)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: boolean endsWith(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: boolean equals(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: boolean equalsIgnoreCase(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: boolean startsWith(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: boolean startsWith(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: byte[] getBytes()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: byte[] getBytes(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: byte[] getBytes(java.nio.charset.Charset)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: char charAt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: char[] toCharArray()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int compareTo(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int compareTo(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int hashCode()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int indexOf(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int indexOf(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int indexOf(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int indexOf(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int indexOf(java.lang.String,java.lang.String,int,int,char)> - @DSBan(DSCat.PRIVATE_METHOD) - @DSComment("Private Method")
<java.lang.String: int lastIndexOf(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int lastIndexOf(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int lastIndexOf(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int lastIndexOf(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: int length()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String replace(char,char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String substring(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String substring(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String toLowerCase()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String toLowerCase(java.util.Locale)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String toUpperCase()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String toUpperCase(java.util.Locale)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String trim()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String valueOf(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String valueOf(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String valueOf(char[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String valueOf(char[],int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String valueOf(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String valueOf(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String valueOf(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String valueOf(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String valueOf(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String[] split(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: java.lang.String[] split(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.String: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.String: void <init>(byte[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.String: void <init>(byte[],int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.String: void <init>(byte[],int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.String: void <init>(byte[],int,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.String: void <init>(byte[],int,int,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.String: void <init>(byte[],java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.String: void <init>(byte[],java.nio.charset.Charset)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.String: void <init>(char[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.String: void <init>(char[],int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.String: void <init>(int,int,char[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.String: void <init>(int[],int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.String: void <init>(java.lang.AbstractStringBuilder)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.String: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.String: void <init>(java.lang.String,char)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.String: void <init>(java.lang.String,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.String: void <init>(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.String: void <init>(java.lang.String,java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.String: void <init>(java.lang.StringBuffer)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.String: void <init>(java.lang.StringBuilder)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.String: void getBytes(int,int,byte[],int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: char charAt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: int length()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.Appendable append(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(char[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: java.lang.StringBuffer append(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuffer: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.StringBuffer: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.StringBuffer: void <init>(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.StringBuffer: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.StringBuffer: void setLength(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: char charAt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: int length()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.Appendable append(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(char[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.StringBuffer)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder append(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.StringBuilder: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.StringBuilder: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.StringBuilder: void <init>(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.StringBuilder: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.StringBuilder: void setCharAt(int,char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.System: int identityHashCode(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.System: java.lang.String getProperty(java.lang.String)> - @DSSpec(DSCat.JAVA_SECURITY) - @DSComment("JVM/DVM parameters")
<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)> - @DSSpec(DSCat.SYSTEM) - @DSComment("System information")
<java.lang.System: long currentTimeMillis()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.System: long nanoTime()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.System: void exit(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.Thread: boolean isInterrupted()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("final method& no activity")
<java.lang.Thread: int getPriority()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action")
<java.lang.Thread: java.lang.Thread currentThread()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<java.lang.Thread: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Thread: void <init>(java.lang.Runnable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Thread: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String,int,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Thread: void interrupt()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("final method, no action")
<java.lang.Thread: void join()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("final method, no action")
<java.lang.Thread: void join(long)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("final method, no action")
<java.lang.Thread: void join(long,int)> - @DSSafe(DSCat.SAFE_OTHERS)
<java.lang.Thread: void setDaemon(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("final method, no action")
<java.lang.Thread: void setPriority(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("final method, no action")
<java.lang.Thread: void sleep(long)> - @DSSafe(DSCat.OS_GENERAL)
<java.lang.Thread: void sleep(long,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action")
<java.lang.Thread: void start()> - @DSSpec(DSCat.OS_LOW_LEVEL) - @DSComment("Thread starting")
<java.lang.ThreadLocal: java.lang.Object get()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("not sensitive/not an action")
<java.lang.ThreadLocal: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.Throwable: java.lang.String getMessage()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.lang.UnsupportedOperationException: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.UnsupportedOperationException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.UnsupportedOperationException: void <init>(java.lang.Throwable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.ref.WeakReference: void <init>(java.lang.Object)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Field: int getInt(java.lang.Object)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Method: java.lang.String getName()> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.lang.reflect.Modifier: boolean isStatic(int)> - @DSBan(DSCat.REFLECTION) - @DSComment("Java language reflection")
<java.net.DatagramPacket: byte[] getData()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.DatagramPacket: java.net.InetAddress getAddress()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.DatagramPacket: void <init>(byte[],int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.DatagramPacket: void <init>(byte[],int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.DatagramPacket: void <init>(byte[],int,int,java.net.InetAddress,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.DatagramPacket: void <init>(byte[],int,int,java.net.SocketAddress)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.DatagramSocket: boolean isBound()> - @DSSpec(DSCat.NETWORKING)
<java.net.DatagramSocket: int getLocalPort()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.net.DatagramSocket: int getSoTimeout()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.net.DatagramSocket: java.net.InetAddress getLocalAddress()> - @DSSpec(DSCat.NETWORK) - @DSComment("Could try to obtain device IP")
<java.net.DatagramSocket: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.DatagramSocket: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.DatagramSocket: void <init>(int,java.net.InetAddress)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.DatagramSocket: void <init>(java.net.DatagramSocketImpl)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.DatagramSocket: void <init>(java.net.SocketAddress)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.DatagramSocket: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no information leakage")
<java.net.DatagramSocket: void receive(java.net.DatagramPacket)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.net.DatagramSocket: void send(java.net.DatagramPacket)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.net.DatagramSocket: void setBroadcast(boolean)> - @DSSpec(DSCat.NETWORKING)
<java.net.DatagramSocket: void setReuseAddress(boolean)> - @DSSpec(DSCat.NETWORKING)
<java.net.DatagramSocket: void setSoTimeout(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no information leakage")
<java.net.HttpURLConnection: int getResponseCode()> - @DSSpec(DSCat.NETWORKING) - @DSComment("accessing network response data")
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.net.HttpURLConnection: java.lang.String getResponseMessage()> - @DSSpec(DSCat.INTERNET)
<java.net.HttpURLConnection: void disconnect()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just gets string")
<java.net.InetAddress: boolean equals(java.lang.Object)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.InetAddress: boolean isLoopbackAddress()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.InetAddress: boolean isReachable(int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.InetAddress: boolean isReachable(java.net.InetAddress,java.net.InetAddress,int)> - @DSBan(DSCat.PRIVATE_METHOD) - @DSComment("Private Method")
<java.net.InetAddress: boolean isReachable(java.net.NetworkInterface,int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.InetAddress: java.lang.String getCanonicalHostName()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.InetAddress: java.lang.String getHostAddress()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.InetAddress: java.lang.String getHostName()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.InetAddress: java.lang.String toString()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.InetAddress: java.net.InetAddress getByAddress(byte[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[],int)> - @DSBan(DSCat.PRIVATE_METHOD) - @DSComment("Private Method")
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Data structure only")
<java.net.InetSocketAddress: int getPort()> - @DSSpec(DSCat.NETWORKING)
<java.net.InetSocketAddress: java.lang.String getHostName()> - @DSSpec(DSCat.NETWORKING)
<java.net.InetSocketAddress: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.InetSocketAddress: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.InetSocketAddress: void <init>(java.lang.String,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.InetSocketAddress: void <init>(java.lang.String,int,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.NetworkInterface: java.lang.String getDisplayName()> - @DSSpec(DSCat.NETWORK) - @DSComment("Network interface accessing")
<java.net.NetworkInterface: java.lang.String getName()> - @DSSpec(DSCat.NETWORK) - @DSComment("Network interface accessing")
<java.net.NetworkInterface: java.net.NetworkInterface getByName(java.lang.String)> - @DSSpec(DSCat.NETWORK) - @DSComment("Network interface accessing")
<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()> - @DSSpec(DSCat.NETWORK) - @DSComment("Network interface accessing")
<java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()> - @DSSpec(DSCat.NETWORK) - @DSComment("Network interface accessing")
<java.net.ServerSocket: java.net.Socket accept()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.net.ServerSocket: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.ServerSocket: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.ServerSocket: void <init>(int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.ServerSocket: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action")
<java.net.Socket: boolean getTcpNoDelay()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action")
<java.net.Socket: boolean isConnected()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action")
<java.net.Socket: boolean isInputShutdown()> - @DSSafe(DSCat.SAFE_OTHERS)
<java.net.Socket: boolean isOutputShutdown()> - @DSSafe(DSCat.SAFE_OTHERS)
<java.net.Socket: int getLocalPort()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.net.Socket: int getPort()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no security concern")
<java.net.Socket: int getSoLinger()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action")
<java.net.Socket: int getSoTimeout()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no action")
<java.net.Socket: java.io.InputStream getInputStream()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.net.Socket: java.io.OutputStream getOutputStream()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.net.Socket: java.net.InetAddress getInetAddress()> - @DSSpec(DSCat.NETWORK) - @DSComment("potential info leak")
<java.net.Socket: java.net.InetAddress getLocalAddress()> - @DSSpec(DSCat.NETWORK) - @DSComment("potential info leak")
<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.net.Socket: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.Socket: void <init>(java.lang.String,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.Socket: void <init>(java.lang.String,int,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.Socket: void <init>(java.lang.String,int,java.net.InetAddress,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.Socket: void <init>(java.net.InetAddress,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.Socket: void <init>(java.net.InetAddress,int,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.Socket: void <init>(java.net.InetAddress,int,java.net.InetAddress,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.Socket: void <init>(java.net.Proxy)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.Socket: void <init>(java.net.SocketImpl)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.Socket: void bind(java.net.SocketAddress)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.net.Socket: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no info leak")
<java.net.Socket: void connect(java.net.SocketAddress)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.net.Socket: void connect(java.net.SocketAddress,int)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.net.Socket: void setReceiveBufferSize(int)> - @DSSafe(DSCat.SAFE_OTHERS)
<java.net.Socket: void setSendBufferSize(int)> - @DSSafe(DSCat.SAFE_OTHERS)
<java.net.Socket: void setSoLinger(boolean,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no info leak")
<java.net.Socket: void setSoTimeout(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no info leak")
<java.net.Socket: void setTcpNoDelay(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no info leak")
<java.net.Socket: void shutdownInput()> - @DSSafe(DSCat.SAFE_OTHERS)
<java.net.Socket: void shutdownOutput()> - @DSSafe(DSCat.SAFE_OTHERS)
<java.net.URI: java.lang.String normalize(java.lang.String,boolean)> - @DSBan(DSCat.PRIVATE_METHOD) - @DSComment("Private Method")
<java.net.URI: java.net.URI normalize()> - @DSSafe(DSCat.UTIL_FUNCTION )
<java.net.URI: java.net.URL toURL()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just creates object")
<java.net.URI: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.URI: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.URL: java.io.InputStream openStream()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.net.URL: java.lang.String getHost()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just gets string")
<java.net.URL: java.lang.String getPath()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action")
<java.net.URL: java.lang.String getProtocol()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just gets string")
<java.net.URL: java.lang.String toString()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just calls class function")
<java.net.URL: java.net.URLConnection openConnection()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.net.URL: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.URL: void <init>(java.net.URL,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.net.URLConnection: java.io.InputStream getInputStream()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.net.URLConnection: void connect()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.net.URLConnection: void setConnectTimeout(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.net.URLConnection: void setReadTimeout(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity")
<java.net.URLEncoder: java.lang.String encode(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility function")
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION) - @DSComment("Utility function")
<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer compact()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence,int,int)> - @DSSafe(DSCat.MEM_BUFFER) - @DSComment("memory buffer only")
<java.nio.channels.Channels: java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.nio.channels.Channels: java.nio.channels.WritableByteChannel newChannel(java.io.OutputStream)> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<java.nio.channels.FileChannel: long size()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.nio.channels.SelectionKey: boolean isConnectable()> - @DSSafe(DSCat.SAFE_OTHERS)
<java.nio.channels.SelectionKey: boolean isReadable()> - @DSSafe(DSCat.SAFE_OTHERS)
<java.nio.channels.SelectionKey: boolean isValid()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.nio.channels.SelectionKey: boolean isWritable()> - @DSSafe(DSCat.SAFE_OTHERS)
<java.nio.channels.SelectionKey: int interestOps()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.nio.channels.SelectionKey: java.lang.Object attach(java.lang.Object)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action")
<java.nio.channels.SelectionKey: java.lang.Object attachment()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action")
<java.nio.channels.SelectionKey: java.nio.channels.SelectableChannel channel()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.nio.channels.SelectionKey: java.nio.channels.SelectionKey interestOps(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.nio.channels.SelectionKey: void cancel()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.nio.channels.Selector: boolean isOpen()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.nio.channels.Selector: java.nio.channels.Selector open()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.nio.channels.Selector: java.util.Set keys()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.nio.channels.Selector: java.util.Set selectedKeys()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.nio.channels.Selector: void close()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.nio.channels.SocketChannel: boolean connect(java.net.SocketAddress)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.nio.channels.SocketChannel: boolean finishConnect()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.nio.channels.SocketChannel: int read(java.nio.ByteBuffer)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.nio.channels.SocketChannel: java.net.Socket socket()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open()> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open(java.net.SocketAddress)> - @DSSpec(DSCat.IO_ACTION_METHOD) - @DSComment("IO movement methodName")
<java.nio.channels.SocketChannel: long read(java.nio.ByteBuffer[])> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.nio.channels.SocketChannel: long read(java.nio.ByteBuffer[],int,int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[])> - @DSSpec(DSCat.IO) - @DSComment("Activity on IO class")
<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[],int,int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.security.MessageDigest: byte[] digest()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.security.MessageDigest: byte[] digest(byte[])> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.security.MessageDigest: int digest(byte[],int,int)> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity, just creates object")
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.security.Provider)> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.security.MessageDigest: void update(byte)> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.security.MessageDigest: void update(byte[])> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.security.MessageDigest: void update(byte[],int,int)> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("no suspicious activity")
<java.security.MessageDigest: void update(java.nio.ByteBuffer)> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.sql.Date: java.lang.String toString()> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.sql.Date: java.sql.Date valueOf(java.lang.String)> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.sql.Date: void <init>(int,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.sql.Date: void <init>(long)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.sql.Date: void setTime(long)> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.sql.Timestamp: void <init>(int,int,int,int,int,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.sql.Timestamp: void <init>(long)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.text.Collator: int compare(java.lang.Object,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.Collator: int compare(java.lang.String,java.lang.String)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.text.Collator: java.text.Collator getInstance()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.Collator: java.text.Collator getInstance(java.util.Locale)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.Collator: void setStrength(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormat: java.lang.String format(java.util.Date)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.text.DateFormat: java.text.DateFormat getDateInstance()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormat: java.text.DateFormat getDateInstance(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormat: java.text.DateFormat getDateTimeInstance()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.SimpleDateFormat: int parse(java.lang.String,int,char,int)> - @DSBan(DSCat.PRIVATE_METHOD) - @DSComment("Private Method")
<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.text.SimpleDateFormat: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.text.SimpleDateFormat: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.text.SimpleDateFormat: void <init>(java.lang.String,java.text.DateFormatSymbols)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.text.SimpleDateFormat: void <init>(java.util.Locale)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.ArrayDeque: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.ArrayDeque: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.ArrayDeque: void <init>(java.util.Collection)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.ArrayList: boolean isEmpty()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: java.lang.Object get(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.ArrayList: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.ArrayList: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.ArrayList: void <init>(java.util.Collection)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Arrays: boolean[] copyOf(boolean[],int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: byte[] copyOf(byte[],int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: char[] copyOf(char[],int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: double[] copyOf(double[],int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: float[] copyOf(float[],int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: int[] copyOf(int[],int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: java.lang.String toString(boolean[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: java.lang.String toString(byte[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: java.lang.String toString(char[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: java.lang.String toString(double[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: java.lang.String toString(float[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: java.lang.String toString(int[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: java.lang.String toString(java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: java.lang.String toString(long[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: java.lang.String toString(short[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: java.util.List asList(java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: long[] copyOf(long[],int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: short[] copyOf(short[],int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(boolean[],boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(boolean[],int,int,boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(byte[],byte)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(byte[],int,int,byte)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(char[],char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(char[],int,int,char)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(double[],double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(double[],int,int,double)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(float[],float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(float[],int,int,float)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(int[],int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(int[],int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(long[],int,int,long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(long[],long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(short[],int,int,short)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void fill(short[],short)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(byte[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(byte[],int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(char[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(char[],int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(double[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(double[],int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(float[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(float[],int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(int[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(int[],int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(java.lang.Object[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(java.lang.Object[],int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(java.lang.Object[],int,int,java.util.Comparator)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(long[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(long[],int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(short[])> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Arrays: void sort(short[],int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: int get(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: java.util.Calendar getInstance()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: java.util.Date getTime()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: long getTimeInMillis()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: void set(int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: void set(int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: void set(int,int,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: void set(int,int,int,int,int,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Calendar: void setTime(java.util.Date)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collection: boolean contains(java.lang.Object)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Collection: java.util.Iterator iterator()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Collections: java.util.List emptyList()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collections: java.util.List singletonList(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collections: void sort(java.util.List)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Collections: void sort(java.util.List,java.util.Comparator)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: boolean after(java.util.Date)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: boolean before(java.util.Date)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: int getHours()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: int getMinutes()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: long getTime()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Date: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Date: void <init>(int,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Date: void <init>(int,int,int,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Date: void <init>(int,int,int,int,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Date: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Date: void <init>(long)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Date: void setTime(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Deque: java.lang.Object peek()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Deque: java.lang.Object pop()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Deque: void push(java.lang.Object)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Enumeration: boolean hasMoreElements()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Enumeration: java.lang.Object nextElement()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.EventObject: void <init>(java.lang.Object)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.GregorianCalendar: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.GregorianCalendar: void <init>(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.GregorianCalendar: void <init>(int,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.GregorianCalendar: void <init>(int,int,int,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.GregorianCalendar: void <init>(int,int,int,int,int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.GregorianCalendar: void <init>(java.util.Locale)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.GregorianCalendar: void <init>(java.util.TimeZone)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.GregorianCalendar: void <init>(long)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.HashMap: java.util.Set entrySet()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.HashMap: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.HashMap: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.HashMap: void <init>(int,float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.HashMap: void <init>(java.util.Map)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.HashSet: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.HashSet: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.HashSet: void <init>(int,float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.HashSet: void <init>(java.util.Collection)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.HashSet: void <init>(java.util.HashMap)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Hashtable: java.lang.Object get(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Hashtable: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Hashtable: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Hashtable: void <init>(int,float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Hashtable: void <init>(java.util.Map)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Iterator: boolean hasNext()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Abstract Method")
<java.util.Iterator: java.lang.Object next()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Abstract Method")
<java.util.Iterator: void remove()> - @DSSafe(DSCat.DATA_STRUCTURE) - @DSComment("Abstract Method")
<java.util.LinkedHashMap: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.LinkedHashMap: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.LinkedHashMap: void <init>(int,float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.LinkedHashMap: void <init>(int,float,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.LinkedHashMap: void <init>(java.util.Map)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.LinkedList: java.util.ListIterator listIterator(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.LinkedList: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.LinkedList: void <init>(java.util.Collection)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.List: boolean add(java.lang.Object)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.List: boolean addAll(int,java.util.Collection)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.List: boolean addAll(java.util.Collection)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.List: boolean contains(java.lang.Object)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.List: boolean containsAll(java.util.Collection)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.List: boolean isEmpty()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.List: boolean remove(java.lang.Object)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.List: boolean removeAll(java.util.Collection)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.List: boolean retainAll(java.util.Collection)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.List: int indexOf(java.lang.Object)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.List: int lastIndexOf(java.lang.Object)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.List: int size()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.List: java.lang.Object get(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.List: java.lang.Object remove(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.List: java.lang.Object set(int,java.lang.Object)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.List: java.lang.Object[] toArray()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.List: java.lang.Object[] toArray(java.lang.Object[])> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.List: java.util.Iterator iterator()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.List: java.util.ListIterator listIterator()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.List: java.util.ListIterator listIterator(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.List: void add(int,java.lang.Object)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.List: void clear()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.ListIterator: boolean hasNext()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.ListIterator: java.lang.Object next()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Locale: boolean equals(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Locale: java.lang.String getDisplayName()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Locale: java.lang.String getDisplayName(java.util.Locale)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Locale: java.lang.String toString()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Locale: java.util.Locale getDefault()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Locale: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Locale: void <init>(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Map$Entry: java.lang.Object getKey()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Map$Entry: java.lang.Object getValue()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Map: boolean containsKey(java.lang.Object)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Map: boolean containsValue(java.lang.Object)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Map: boolean isEmpty()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Map: int size()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Map: java.lang.Object get(java.lang.Object)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Map: java.lang.Object remove(java.lang.Object)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Map: java.util.Collection values()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Map: java.util.Set entrySet()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Map: java.util.Set keySet()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Map: void clear()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Map: void putAll(java.util.Map)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Properties: java.lang.String getProperty(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Properties: java.util.Enumeration propertyNames()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Properties: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Properties: void <init>(java.util.Properties)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Random: int nextInt()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Random: int nextInt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Random: long nextLong()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Random: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Random: void <init>(long)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Random: void setSeed(long)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Set: boolean add(java.lang.Object)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Set: boolean containsAll(java.util.Collection)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Set: boolean isEmpty()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Set: int size()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Set: java.lang.Object[] toArray()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Set: java.util.Iterator iterator()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.Stack: java.lang.Object peek()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Stack: java.lang.Object pop()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Stack: java.lang.Object push(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Stack: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.StringTokenizer: boolean hasMoreTokens()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.StringTokenizer: java.lang.String nextToken()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.StringTokenizer: java.lang.String nextToken(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.StringTokenizer: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TreeMap: java.util.NavigableMap tailMap(java.lang.Object,boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TreeMap: java.util.SortedMap tailMap(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TreeMap: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.TreeMap: void <init>(java.util.Comparator)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.TreeMap: void <init>(java.util.Map)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.TreeMap: void <init>(java.util.SortedMap)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.TreeSet: boolean add(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TreeSet: java.util.Iterator iterator()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.TreeSet: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.TreeSet: void <init>(java.util.Collection)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.TreeSet: void <init>(java.util.Comparator)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.TreeSet: void <init>(java.util.NavigableMap)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.TreeSet: void <init>(java.util.SortedSet)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Vector: java.lang.Object elementAt(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: java.lang.Object get(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: java.util.Enumeration elements()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Vector: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Vector: void <init>(int,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Vector: void <init>(java.util.Collection)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.Vector: void addElement(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.Vector: void setSize(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.WeakHashMap: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.WeakHashMap: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.WeakHashMap: void <init>(int,float)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.WeakHashMap: void <init>(java.util.Map)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.concurrent.ArrayBlockingQueue: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.concurrent.BlockingQueue: java.lang.Object take()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.concurrent.BlockingQueue: void put(java.lang.Object)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.CopyOnWriteArrayList: int size()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object remove(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.CopyOnWriteArrayList: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.lang.Object[])> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.util.Collection)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.concurrent.CopyOnWriteArrayList: void add(int,java.lang.Object)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.CountDownLatch: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.concurrent.CountDownLatch: void await()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.CountDownLatch: void countDown()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.Executor: void execute(java.lang.Runnable)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.concurrent.ExecutorService: boolean isShutdown()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.concurrent.ExecutorService: java.util.List shutdownNow()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.concurrent.ExecutorService: void shutdown()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.FutureTask: boolean cancel(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action/impact")
<java.util.concurrent.FutureTask: boolean isCancelled()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action/impact")
<java.util.concurrent.FutureTask: java.lang.Object get()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action/impact")
<java.util.concurrent.FutureTask: java.lang.Object get(long,java.util.concurrent.TimeUnit)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("No action/impact")
<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.concurrent.LinkedBlockingQueue: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.concurrent.LinkedBlockingQueue: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.concurrent.LinkedBlockingQueue: void <init>(java.util.Collection)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.concurrent.Semaphore: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.concurrent.Semaphore: void <init>(int,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.concurrent.Semaphore: void acquire()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.Semaphore: void acquire(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.Semaphore: void release()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.Semaphore: void release(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.concurrent.ThreadPoolExecutor: boolean remove(java.lang.Runnable)> - @DSSafe(DSCat.OS_GENERAL)
<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)> - @DSSafe(DSCat.OS_GENERAL)
<java.util.concurrent.ThreadPoolExecutor: void setCorePoolSize(int)> - @DSSafe(DSCat.OS_GENERAL)
<java.util.concurrent.atomic.AtomicBoolean: boolean get()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.atomic.AtomicBoolean: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.atomic.AtomicInteger: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.concurrent.atomic.AtomicInteger: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.concurrent.locks.ReentrantLock: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.concurrent.locks.ReentrantLock: void lock()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.concurrent.locks.ReentrantLock: void unlock()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: boolean find()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: boolean find(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: boolean matches()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: int groupCount()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: int start()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: int start(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: java.lang.String group()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Matcher: java.lang.String group(int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.regex.Pattern: void compile()> - @DSBan(DSCat.PRIVATE_METHOD) - @DSComment("Private Method")
<java.util.regex.PatternSyntaxException: java.lang.String getMessage()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("From safe class list")
<java.util.zip.Deflater: boolean finished()> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.util.zip.Deflater: int deflate(byte[])> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.util.zip.Deflater: int deflate(byte[],int,int)> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.util.zip.Deflater: int deflate(byte[],int,int,int)> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.util.zip.Deflater: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.zip.Deflater: void <init>(int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.zip.Deflater: void <init>(int,boolean)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.zip.Deflater: void end()> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.util.zip.Deflater: void finish()> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.util.zip.Deflater: void setInput(byte[])> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.util.zip.Deflater: void setInput(byte[],int,int)> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream,int)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.zip.Inflater: int inflate(byte[])> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.util.zip.Inflater: int inflate(byte[],int,int)> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.util.zip.Inflater: void setInput(byte[])> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.util.zip.Inflater: void setInput(byte[],int,int)> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.util.zip.ZipEntry: java.lang.String getName()> - @DSSafe(DSCat.UTIL_FUNCTION)
<java.util.zip.ZipEntry: void <init>(byte[],java.io.InputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.zip.ZipEntry: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.zip.ZipEntry: void <init>(java.util.zip.ZipEntry)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.zip.ZipOutputStream: void <init>(java.io.OutputStream)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<java.util.zip.ZipOutputStream: void close()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no impacts")
<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)> - @DSSpec(DSCat.IO) - @DSComment("zip/io")
<java.util.zip.ZipOutputStream: void write(byte[],int,int)> - @DSSpec(DSCat.IO)
<javax.net.ServerSocketFactory: javax.net.ServerSocketFactory getDefault()> - @DSSafe(DSCat.SAFE_OTHERS)
<javax.net.SocketFactory: java.net.Socket createSocket()> - @DSSpec(DSCat.IO) - @DSComment("Method returns IO Object")
<javax.net.SocketFactory: java.net.Socket createSocket(java.lang.String,int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<javax.net.SocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<javax.net.SocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<javax.net.SocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<javax.net.SocketFactory: javax.net.SocketFactory getDefault()> - @DSSafe(DSCat.SAFE_OTHERS)
<javax.net.SocketFactory: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()> - @DSSafe(DSCat.SAFE_OTHERS)
<javax.xml.parsers.SAXParser: void parse(java.io.File,org.xml.sax.HandlerBase)> - @DSSpec(DSCat.IO)
<javax.xml.parsers.SAXParser: void parse(java.io.File,org.xml.sax.helpers.DefaultHandler)> - @DSSpec(DSCat.IO)
<javax.xml.parsers.SAXParser: void parse(java.io.InputStream,org.xml.sax.HandlerBase)> - @DSSpec(DSCat.IO)
<javax.xml.parsers.SAXParser: void parse(java.io.InputStream,org.xml.sax.HandlerBase,java.lang.String)> - @DSSpec(DSCat.IO)
<javax.xml.parsers.SAXParser: void parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler)> - @DSSpec(DSCat.IO) - @DSComment("input is io InputSource")
<javax.xml.parsers.SAXParser: void parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler,java.lang.String)> - @DSSpec(DSCat.IO)
<javax.xml.parsers.SAXParser: void parse(java.lang.String,org.xml.sax.HandlerBase)> - @DSSpec(DSCat.INTERNET)
<javax.xml.parsers.SAXParser: void parse(java.lang.String,org.xml.sax.helpers.DefaultHandler)> - @DSSpec(DSCat.INTERNET)
<javax.xml.parsers.SAXParser: void parse(org.xml.sax.InputSource,org.xml.sax.HandlerBase)> - @DSSpec(DSCat.IO)
<javax.xml.parsers.SAXParser: void parse(org.xml.sax.InputSource,org.xml.sax.helpers.DefaultHandler)> - @DSSpec(DSCat.IO) - @DSComment("input is io InputSource")
<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParser newSAXParser()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no suspicious activity, just creates objects")
<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance(java.lang.String,java.lang.ClassLoader)> - @DSBan(DSCat.REFLECTION) - @DSComment("Refelction/class loader")
<javax.xml.parsers.SAXParserFactory: void setFeature(java.lang.String,boolean)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<org.apache.commons.codec.Encoder: java.lang.Object encode(java.lang.Object)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])> - @DSSafe(DSCat.UTIL_FUNCTION)
<org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[])> - @DSSafe(DSCat.UTIL_FUNCTION)
<org.apache.commons.codec.binary.Hex: int toDigit(char,int)> - @DSSafe(DSCat.UTIL_FUNCTION)
<org.apache.http.HttpEntity: java.io.InputStream getContent()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<org.apache.http.client.HttpClient: org.apache.http.params.HttpParams getParams()> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<org.apache.http.client.methods.HttpGet: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<org.apache.http.client.methods.HttpGet: void <init>(java.net.URI)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<org.apache.http.client.methods.HttpPost: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<org.apache.http.client.methods.HttpPost: void <init>(java.net.URI)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<org.apache.http.entity.StringEntity: void <init>(java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<org.apache.http.entity.StringEntity: void <init>(java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<org.apache.http.entity.StringEntity: void <init>(java.lang.String,java.nio.charset.Charset)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<org.apache.http.entity.StringEntity: void <init>(java.lang.String,org.apache.http.entity.ContentType)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<org.apache.http.impl.client.DefaultHttpClient: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<org.xml.sax.Attributes: java.lang.String getValue(int)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String,java.lang.String)> - @DSSpec(DSCat.ABSTRACT_METHOD) - @DSComment("Abstract Method")
<org.xml.sax.SAXException: java.lang.String getMessage()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("no input, no suspicious activity and just exception")
<org.xml.sax.helpers.DefaultHandler: void <init>()> - @DSSafe(DSCat.SAFE_OTHERS) - @DSComment("constructor")
<org.xml.sax.helpers.DefaultHandler: void characters(char[],int,int)> - @DSSafe(DSCat.SAFE_OTHERS)
<org.xml.sax.helpers.DefaultHandler: void endDocument()> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("No op default handler")
<org.xml.sax.helpers.DefaultHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)> - @DSSafe(DSCat.SAFE_OTHERS)
<org.xml.sax.helpers.DefaultHandler: void error(org.xml.sax.SAXParseException)> - @DSSafe(DSCat.SAFE_LIST) - @DSComment("No op default handler")
<org.xml.sax.helpers.DefaultHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)> - @DSSafe(DSCat.SAFE_OTHERS)
