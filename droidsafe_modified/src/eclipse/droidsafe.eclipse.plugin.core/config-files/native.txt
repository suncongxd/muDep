<android.animation.PropertyValuesHolder: int nGetFloatMethod(java.lang.Class,java.lang.String)>
<android.animation.PropertyValuesHolder: int nGetIntMethod(java.lang.Class,java.lang.String)>
<android.animation.PropertyValuesHolder: void nCallFloatMethod(java.lang.Object,int,float)>
<android.animation.PropertyValuesHolder: void nCallIntMethod(java.lang.Object,int,int)>
<android.app.ActivityThread: void dumpGraphicsInfo(java.io.FileDescriptor)>
<android.app.backup.BackupDataInput: int ctor(java.io.FileDescriptor)>
<android.app.backup.BackupDataInput: int readEntityData_native(int,byte[],int,int)>
<android.app.backup.BackupDataInput: int readNextHeader_native(int,android.app.backup.BackupDataInput$EntityHeader)>
<android.app.backup.BackupDataInput: int skipEntityData_native(int)>
<android.app.backup.BackupDataInput: void dtor(int)>
<android.app.backup.BackupDataOutput: int ctor(java.io.FileDescriptor)>
<android.app.backup.BackupDataOutput: int writeEntityData_native(int,byte[],int)>
<android.app.backup.BackupDataOutput: int writeEntityHeader_native(int,java.lang.String,int)>
<android.app.backup.BackupDataOutput: void dtor(int)>
<android.app.backup.BackupDataOutput: void setKeyPrefix_native(int,java.lang.String)>
<android.app.backup.BackupHelperDispatcher: int allocateHeader_native(android.app.backup.BackupHelperDispatcher$Header,java.io.FileDescriptor)>
<android.app.backup.BackupHelperDispatcher: int readHeader_native(android.app.backup.BackupHelperDispatcher$Header,java.io.FileDescriptor)>
<android.app.backup.BackupHelperDispatcher: int skipChunk_native(java.io.FileDescriptor,int)>
<android.app.backup.BackupHelperDispatcher: int writeHeader_native(android.app.backup.BackupHelperDispatcher$Header,java.io.FileDescriptor,int)>
<android.app.backup.FileBackupHelperBase: int ctor()>
<android.app.backup.FileBackupHelperBase: int performBackup_native(java.io.FileDescriptor,int,java.io.FileDescriptor,java.lang.String[],java.lang.String[])>
<android.app.backup.FileBackupHelperBase: int writeFile_native(int,java.lang.String,int)>
<android.app.backup.FileBackupHelperBase: int writeSnapshot_native(int,java.io.FileDescriptor)>
<android.app.backup.FileBackupHelperBase: void dtor(int)>
<android.app.backup.FullBackup: int backupToTar(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.backup.BackupDataOutput)>
<android.app.NativeActivity: byte[] onSaveInstanceStateNative(int)>
<android.app.NativeActivity: int loadNativeCode(java.lang.String,java.lang.String,android.os.MessageQueue,java.lang.String,java.lang.String,java.lang.String,int,android.content.res.AssetManager,byte[])>
<android.app.NativeActivity: void dispatchKeyEventNative(int,android.view.KeyEvent)>
<android.app.NativeActivity: void finishPreDispatchKeyEventNative(int,int,boolean)>
<android.app.NativeActivity: void onConfigurationChangedNative(int)>
<android.app.NativeActivity: void onContentRectChangedNative(int,int,int,int,int)>
<android.app.NativeActivity: void onInputChannelCreatedNative(int,android.view.InputChannel)>
<android.app.NativeActivity: void onInputChannelDestroyedNative(int,android.view.InputChannel)>
<android.app.NativeActivity: void onLowMemoryNative(int)>
<android.app.NativeActivity: void onPauseNative(int)>
<android.app.NativeActivity: void onResumeNative(int)>
<android.app.NativeActivity: void onStartNative(int)>
<android.app.NativeActivity: void onStopNative(int)>
<android.app.NativeActivity: void onSurfaceChangedNative(int,android.view.Surface,int,int,int)>
<android.app.NativeActivity: void onSurfaceCreatedNative(int,android.view.Surface)>
<android.app.NativeActivity: void onSurfaceDestroyedNative(int)>
<android.app.NativeActivity: void onSurfaceRedrawNeededNative(int,android.view.Surface)>
<android.app.NativeActivity: void onWindowFocusChangedNative(int,boolean)>
<android.app.NativeActivity: void unloadNativeCode(int)>
<android.bluetooth.BluetoothAudioGateway: boolean setUpListeningSocketsNative()>
<android.bluetooth.BluetoothAudioGateway: boolean waitForHandsfreeConnectNative(int)>
<android.bluetooth.BluetoothAudioGateway: void classInitNative()>
<android.bluetooth.BluetoothAudioGateway: void cleanupNativeDataNative()>
<android.bluetooth.BluetoothAudioGateway: void initializeNativeDataNative()>
<android.bluetooth.BluetoothAudioGateway: void tearDownListeningSocketsNative()>
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothSocket acceptNative(int)>
<android.bluetooth.BluetoothSocket: int availableNative()>
<android.bluetooth.BluetoothSocket: int bindListenNative()>
<android.bluetooth.BluetoothSocket: int readNative(byte[],int,int)>
<android.bluetooth.BluetoothSocket: int writeNative(byte[],int,int)>
<android.bluetooth.BluetoothSocket: void abortNative()>
<android.bluetooth.BluetoothSocket: void connectNative()>
<android.bluetooth.BluetoothSocket: void destroyNative()>
<android.bluetooth.BluetoothSocket: void initSocketFromFdNative(int)>
<android.bluetooth.BluetoothSocket: void initSocketNative()>
<android.bluetooth.BluetoothSocket: void throwErrnoNative(int)>
<android.bluetooth.HeadsetBase: boolean connectNative()>
<android.bluetooth.HeadsetBase: boolean sendURCNative(java.lang.String)>
<android.bluetooth.HeadsetBase: int connectAsyncNative()>
<android.bluetooth.HeadsetBase: int getLastReadStatusNative()>
<android.bluetooth.HeadsetBase: int waitForAsyncConnectNative(int)>
<android.bluetooth.HeadsetBase: java.lang.String readNative(int)>
<android.bluetooth.HeadsetBase: void classInitNative()>
<android.bluetooth.HeadsetBase: void cleanupNativeDataNative()>
<android.bluetooth.HeadsetBase: void disconnectNative()>
<android.bluetooth.HeadsetBase: void initializeNativeDataNative(int)>
<android.content.res.AssetManager: android.os.ParcelFileDescriptor openAssetFd(java.lang.String,long[])>
<android.content.res.AssetManager: android.os.ParcelFileDescriptor openNonAssetFdNative(int,java.lang.String,long[])>
<android.content.res.AssetManager: boolean applyStyle(int,int,int,int,int[],int[],int[])>
<android.content.res.AssetManager: boolean isUpToDate()>
<android.content.res.AssetManager: boolean retrieveAttributes(int,int[],int[],int[])>
<android.content.res.AssetManager: int addAssetPath(java.lang.String)>
<android.content.res.AssetManager: int[] getArrayIntResource(int)>
<android.content.res.AssetManager: int getArraySize(int)>
<android.content.res.AssetManager: int[] getArrayStringInfo(int)>
<android.content.res.AssetManager: int getGlobalAssetCount()>
<android.content.res.AssetManager: int getGlobalAssetManagerCount()>
<android.content.res.AssetManager: int getNativeStringBlock(int)>
<android.content.res.AssetManager: int getResourceIdentifier(java.lang.String,java.lang.String,java.lang.String)>
<android.content.res.AssetManager: int getStringBlockCount()>
<android.content.res.AssetManager: int loadResourceBagValue(int,int,android.util.TypedValue,boolean)>
<android.content.res.AssetManager: int loadResourceValue(int,short,android.util.TypedValue,boolean)>
<android.content.res.AssetManager: int loadThemeAttributeValue(int,int,android.util.TypedValue,boolean)>
<android.content.res.AssetManager: int newTheme()>
<android.content.res.AssetManager: int openAsset(java.lang.String,int)>
<android.content.res.AssetManager: int openNonAssetNative(int,java.lang.String,int)>
<android.content.res.AssetManager: int openXmlAssetNative(int,java.lang.String)>
<android.content.res.AssetManager: int readAssetChar(int)>
<android.content.res.AssetManager: int readAsset(int,byte[],int,int)>
<android.content.res.AssetManager: int retrieveArray(int,int[])>
<android.content.res.AssetManager: java.lang.String[] getArrayStringResource(int)>
<android.content.res.AssetManager: java.lang.String getAssetAllocations()>
<android.content.res.AssetManager: java.lang.String getCookieName(int)>
<android.content.res.AssetManager: java.lang.String[] getLocales()>
<android.content.res.AssetManager: java.lang.String getResourceEntryName(int)>
<android.content.res.AssetManager: java.lang.String getResourceName(int)>
<android.content.res.AssetManager: java.lang.String getResourcePackageName(int)>
<android.content.res.AssetManager: java.lang.String getResourceTypeName(int)>
<android.content.res.AssetManager: java.lang.String[] list(java.lang.String)>
<android.content.res.AssetManager: long getAssetLength(int)>
<android.content.res.AssetManager: long getAssetRemainingLength(int)>
<android.content.res.AssetManager: long seekAsset(int,long,int)>
<android.content.res.AssetManager: void applyThemeStyle(int,int,boolean)>
<android.content.res.AssetManager: void copyTheme(int,int)>
<android.content.res.AssetManager: void deleteTheme(int)>
<android.content.res.AssetManager: void destroy()>
<android.content.res.AssetManager: void destroyAsset(int)>
<android.content.res.AssetManager: void dumpTheme(int,int,java.lang.String,java.lang.String)>
<android.content.res.AssetManager: void init()>
<android.content.res.AssetManager: void setConfiguration(int,int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int)>
<android.content.res.AssetManager: void setLocale(java.lang.String)>
<android.content.res.ObbScanner: void getObbInfo_native(java.lang.String,android.content.res.ObbInfo)>
<android.content.res.StringBlock: int nativeCreate(byte[],int,int)>
<android.content.res.StringBlock: int nativeGetSize(int)>
<android.content.res.StringBlock: int[] nativeGetStyle(int,int)>
<android.content.res.StringBlock: java.lang.String nativeGetString(int,int)>
<android.content.res.StringBlock: void nativeDestroy(int)>
<android.content.res.XmlBlock: int nativeCreate(byte[],int,int)>
<android.content.res.XmlBlock: int nativeCreateParseState(int)>
<android.content.res.XmlBlock: int nativeGetAttributeCount(int)>
<android.content.res.XmlBlock: int nativeGetAttributeData(int,int)>
<android.content.res.XmlBlock: int nativeGetAttributeDataType(int,int)>
<android.content.res.XmlBlock: int nativeGetAttributeIndex(int,java.lang.String,java.lang.String)>
<android.content.res.XmlBlock: int nativeGetAttributeName(int,int)>
<android.content.res.XmlBlock: int nativeGetAttributeNamespace(int,int)>
<android.content.res.XmlBlock: int nativeGetAttributeResource(int,int)>
<android.content.res.XmlBlock: int nativeGetAttributeStringValue(int,int)>
<android.content.res.XmlBlock: int nativeGetClassAttribute(int)>
<android.content.res.XmlBlock: int nativeGetIdAttribute(int)>
<android.content.res.XmlBlock: int nativeGetLineNumber(int)>
<android.content.res.XmlBlock: int nativeGetName(int)>
<android.content.res.XmlBlock: int nativeGetNamespace(int)>
<android.content.res.XmlBlock: int nativeGetStringBlock(int)>
<android.content.res.XmlBlock: int nativeGetStyleAttribute(int)>
<android.content.res.XmlBlock: int nativeGetText(int)>
<android.content.res.XmlBlock: int nativeNext(int)>
<android.content.res.XmlBlock: void nativeDestroy(int)>
<android.content.res.XmlBlock: void nativeDestroyParseState(int)>
<android.database.CursorWindow: boolean nativeAllocRow(int)>
<android.database.CursorWindow: boolean nativePutBlob(int,byte[],int,int)>
<android.database.CursorWindow: boolean nativePutDouble(int,double,int,int)>
<android.database.CursorWindow: boolean nativePutLong(int,long,int,int)>
<android.database.CursorWindow: boolean nativePutNull(int,int,int)>
<android.database.CursorWindow: boolean nativePutString(int,java.lang.String,int,int)>
<android.database.CursorWindow: boolean nativeSetNumColumns(int,int)>
<android.database.CursorWindow: byte[] nativeGetBlob(int,int,int)>
<android.database.CursorWindow: double nativeGetDouble(int,int,int)>
<android.database.CursorWindow: int nativeCreateFromParcel(android.os.Parcel)>
<android.database.CursorWindow: int nativeCreate(java.lang.String,int)>
<android.database.CursorWindow: int nativeGetNumRows(int)>
<android.database.CursorWindow: int nativeGetType(int,int,int)>
<android.database.CursorWindow: java.lang.String nativeGetName(int)>
<android.database.CursorWindow: java.lang.String nativeGetString(int,int,int)>
<android.database.CursorWindow: long nativeGetLong(int,int,int)>
<android.database.CursorWindow: void nativeClear(int)>
<android.database.CursorWindow: void nativeCopyStringToBuffer(int,int,int,android.database.CharArrayBuffer)>
<android.database.CursorWindow: void nativeDispose(int)>
<android.database.CursorWindow: void nativeFreeLastRow(int)>
<android.database.CursorWindow: void nativeWriteToParcel(int,android.os.Parcel)>
<android.database.sqlite.SQLiteCompiledSql: void native_compile(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: int native_addCustomFunction(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CustomFunction)>
<android.database.sqlite.SQLiteDatabase: int native_getDbLookaside()>
<android.database.sqlite.SQLiteDatabase: int releaseMemory()>
<android.database.sqlite.SQLiteDatabase: void dbclose()>
<android.database.sqlite.SQLiteDatabase: void dbopen(java.lang.String,int)>
<android.database.sqlite.SQLiteDatabase: void enableSqlProfiling(java.lang.String,short)>
<android.database.sqlite.SQLiteDatabase: void enableSqlTracing(java.lang.String,short)>
<android.database.sqlite.SQLiteDatabase: void native_finalize(int)>
<android.database.sqlite.SQLiteDatabase: void native_releaseCustomFunction(int)>
<android.database.sqlite.SQLiteDatabase: void native_setLocale(java.lang.String,int)>
<android.database.sqlite.SQLiteDatabase: void native_setSqliteSoftHeapLimit(int)>
<android.database.sqlite.SQLiteDebug: long getHeapAllocatedSize()>
<android.database.sqlite.SQLiteDebug: long getHeapFreeSize()>
<android.database.sqlite.SQLiteDebug: long getHeapSize()>
<android.database.sqlite.SQLiteDebug: void getHeapDirtyPages(int[])>
<android.database.sqlite.SQLiteDebug: void getPagerStats(android.database.sqlite.SQLiteDebug$PagerStats)>
<android.database.sqlite.SQLiteProgram: void native_bind_blob(int,byte[])>
<android.database.sqlite.SQLiteProgram: void native_bind_double(int,double)>
<android.database.sqlite.SQLiteProgram: void native_bind_long(int,long)>
<android.database.sqlite.SQLiteProgram: void native_bind_null(int)>
<android.database.sqlite.SQLiteProgram: void native_bind_string(int,java.lang.String)>
<android.database.sqlite.SQLiteProgram: void native_clear_bindings()>
<android.database.sqlite.SQLiteProgram: void native_compile(java.lang.String)>
<android.database.sqlite.SQLiteProgram: void native_finalize()>
<android.database.sqlite.SQLiteQuery: int nativeColumnCount(int)>
<android.database.sqlite.SQLiteQuery: int nativeFillWindow(int,int,int,int,int)>
<android.database.sqlite.SQLiteQuery: java.lang.String nativeColumnName(int,int)>
<android.database.sqlite.SQLiteStatement: android.os.ParcelFileDescriptor native_1x1_blob_ashmem()>
<android.database.sqlite.SQLiteStatement: int native_execute()>
<android.database.sqlite.SQLiteStatement: java.lang.String native_1x1_string()>
<android.database.sqlite.SQLiteStatement: long native_1x1_long()>
<android.database.sqlite.SQLiteStatement: long native_executeInsert()>
<android.database.sqlite.SQLiteStatement: void native_executeSql(java.lang.String)>
<android.ddm.DdmHandleNativeHeap: byte[] getLeakInfo()>
<android.debug.JNITest: int part1(int,double,java.lang.String,int[])>
<android.debug.JNITest: int part3(java.lang.String)>
<android.drm.DrmManagerClient: android.content.ContentValues _getConstraints(int,java.lang.String,int)>
<android.drm.DrmManagerClient: android.content.ContentValues _getMetadata(int,java.lang.String)>
<android.drm.DrmManagerClient: android.drm.DrmConvertedStatus _closeConvertSession(int,int)>
<android.drm.DrmManagerClient: android.drm.DrmConvertedStatus _convertData(int,int,byte[])>
<android.drm.DrmManagerClient: android.drm.DrmInfo _acquireDrmInfo(int,android.drm.DrmInfoRequest)>
<android.drm.DrmManagerClient: android.drm.DrmInfoStatus _processDrmInfo(int,android.drm.DrmInfo)>
<android.drm.DrmManagerClient: android.drm.DrmSupportInfo[] _getAllSupportInfo(int)>
<android.drm.DrmManagerClient: boolean _canHandle(int,java.lang.String,java.lang.String)>
<android.drm.DrmManagerClient: int _checkRightsStatus(int,java.lang.String,int)>
<android.drm.DrmManagerClient: int _getDrmObjectType(int,java.lang.String,java.lang.String)>
<android.drm.DrmManagerClient: int _initialize(java.lang.Object)>
<android.drm.DrmManagerClient: int _openConvertSession(int,java.lang.String)>
<android.drm.DrmManagerClient: int _removeAllRights(int)>
<android.drm.DrmManagerClient: int _removeRights(int,java.lang.String)>
<android.drm.DrmManagerClient: int _saveRights(int,android.drm.DrmRights,java.lang.String,java.lang.String)>
<android.drm.DrmManagerClient: java.lang.String _getOriginalMimeType(int,java.lang.String)>
<android.drm.DrmManagerClient: void _finalize(int)>
<android.drm.DrmManagerClient: void _installDrmEngine(int,java.lang.String)>
<android.drm.mobile1.DrmRawContent: int nativeConstructDrmContent(java.io.InputStream,int,int)>
<android.drm.mobile1.DrmRawContent: int nativeGetContentLength()>
<android.drm.mobile1.DrmRawContent: int nativeGetDeliveryMethod()>
<android.drm.mobile1.DrmRawContent: int nativeReadContent(byte[],int,int,int)>
<android.drm.mobile1.DrmRawContent: java.lang.String nativeGetContentType()>
<android.drm.mobile1.DrmRawContent: java.lang.String nativeGetRightsAddress()>
<android.drm.mobile1.DrmRawContent: void finalize()>
<android.drm.mobile1.DrmRights: int nativeConsumeRights(int)>
<android.drm.mobile1.DrmRights: int nativeGetConstraintInfo(int,android.drm.mobile1.DrmConstraintInfo)>
<android.drm.mobile1.DrmRightsManager: int nativeDeleteRights(android.drm.mobile1.DrmRights)>
<android.drm.mobile1.DrmRightsManager: int nativeGetNumOfRights()>
<android.drm.mobile1.DrmRightsManager: int nativeGetRightsList(android.drm.mobile1.DrmRights[],int)>
<android.drm.mobile1.DrmRightsManager: int nativeInstallDrmRights(java.io.InputStream,int,int,android.drm.mobile1.DrmRights)>
<android.drm.mobile1.DrmRightsManager: int nativeQueryRights(android.drm.mobile1.DrmRawContent,android.drm.mobile1.DrmRights)>
<android.emoji.EmojiFactory: android.emoji.EmojiFactory newAvailableInstance()>
<android.emoji.EmojiFactory: android.emoji.EmojiFactory newInstance(java.lang.String)>
<android.emoji.EmojiFactory: android.graphics.Bitmap nativeGetBitmapFromAndroidPua(int,int)>
<android.emoji.EmojiFactory: int nativeGetAndroidPuaFromVendorSpecificPua(int,int)>
<android.emoji.EmojiFactory: int nativeGetAndroidPuaFromVendorSpecificSjis(int,char)>
<android.emoji.EmojiFactory: int nativeGetMaximumAndroidPua(int)>
<android.emoji.EmojiFactory: int nativeGetMaximumVendorSpecificPua(int)>
<android.emoji.EmojiFactory: int nativeGetMinimumAndroidPua(int)>
<android.emoji.EmojiFactory: int nativeGetMinimumVendorSpecificPua(int)>
<android.emoji.EmojiFactory: int nativeGetVendorSpecificPuaFromAndroidPua(int,int)>
<android.emoji.EmojiFactory: int nativeGetVendorSpecificSjisFromAndroidPua(int,int)>
<android.emoji.EmojiFactory: void nativeDestructor(int)>
<android.filterfw.core.GLEnvironment: boolean nativeActivate()>
<android.filterfw.core.GLEnvironment: boolean nativeActivateSurfaceId(int)>
<android.filterfw.core.GLEnvironment: boolean nativeAllocate()>
<android.filterfw.core.GLEnvironment: boolean nativeDeactivate()>
<android.filterfw.core.GLEnvironment: boolean nativeDeallocate()>
<android.filterfw.core.GLEnvironment: boolean nativeDisconnectSurfaceMediaSource(android.media.MediaRecorder)>
<android.filterfw.core.GLEnvironment: boolean nativeInitWithCurrentContext()>
<android.filterfw.core.GLEnvironment: boolean nativeInitWithNewContext()>
<android.filterfw.core.GLEnvironment: boolean nativeIsActive()>
<android.filterfw.core.GLEnvironment: boolean nativeIsAnyContextActive()>
<android.filterfw.core.GLEnvironment: boolean nativeIsContextActive()>
<android.filterfw.core.GLEnvironment: boolean nativeRemoveSurfaceId(int)>
<android.filterfw.core.GLEnvironment: boolean nativeSetSurfaceTimestamp(long)>
<android.filterfw.core.GLEnvironment: boolean nativeSwapBuffers()>
<android.filterfw.core.GLEnvironment: int nativeAddSurface(android.view.Surface)>
<android.filterfw.core.GLEnvironment: int nativeAddSurfaceFromMediaRecorder(android.media.MediaRecorder)>
<android.filterfw.core.GLEnvironment: int nativeAddSurfaceTexture(android.graphics.SurfaceTexture,int,int)>
<android.filterfw.core.GLFrame: boolean generateNativeMipMap()>
<android.filterfw.core.GLFrame: boolean getNativeBitmap(android.graphics.Bitmap)>
<android.filterfw.core.GLFrame: boolean nativeAllocate(android.filterfw.core.GLEnvironment,int,int)>
<android.filterfw.core.GLFrame: boolean nativeAllocateExternal(android.filterfw.core.GLEnvironment)>
<android.filterfw.core.GLFrame: boolean nativeAllocateWithFbo(android.filterfw.core.GLEnvironment,int,int,int)>
<android.filterfw.core.GLFrame: boolean nativeAllocateWithTexture(android.filterfw.core.GLEnvironment,int,int,int)>
<android.filterfw.core.GLFrame: boolean nativeCopyFromGL(android.filterfw.core.GLFrame)>
<android.filterfw.core.GLFrame: boolean nativeCopyFromNative(android.filterfw.core.NativeFrame)>
<android.filterfw.core.GLFrame: boolean nativeDeallocate()>
<android.filterfw.core.GLFrame: boolean nativeDetachTexFromFbo()>
<android.filterfw.core.GLFrame: boolean nativeFocus()>
<android.filterfw.core.GLFrame: boolean nativeReattachTexToFbo()>
<android.filterfw.core.GLFrame: boolean nativeResetParams()>
<android.filterfw.core.GLFrame: boolean setNativeBitmap(android.graphics.Bitmap,int)>
<android.filterfw.core.GLFrame: boolean setNativeData(byte[],int,int)>
<android.filterfw.core.GLFrame: boolean setNativeFloats(float[])>
<android.filterfw.core.GLFrame: boolean setNativeInts(int[])>
<android.filterfw.core.GLFrame: boolean setNativeTextureParam(int,int)>
<android.filterfw.core.GLFrame: boolean setNativeViewport(int,int,int,int)>
<android.filterfw.core.GLFrame: byte[] getNativeData()>
<android.filterfw.core.GLFrame: float[] getNativeFloats()>
<android.filterfw.core.GLFrame: int getNativeFboId()>
<android.filterfw.core.GLFrame: int[] getNativeInts()>
<android.filterfw.core.GLFrame: int getNativeTextureId()>
<android.filterfw.core.NativeBuffer: boolean allocate(int)>
<android.filterfw.core.NativeBuffer: boolean deallocate(boolean)>
<android.filterfw.core.NativeBuffer: boolean nativeCopyTo(android.filterfw.core.NativeBuffer)>
<android.filterfw.core.NativeFrame: boolean getNativeBitmap(android.graphics.Bitmap,int,int)>
<android.filterfw.core.NativeFrame: boolean getNativeBuffer(android.filterfw.core.NativeBuffer)>
<android.filterfw.core.NativeFrame: boolean nativeAllocate(int)>
<android.filterfw.core.NativeFrame: boolean nativeCopyFromGL(android.filterfw.core.GLFrame)>
<android.filterfw.core.NativeFrame: boolean nativeCopyFromNative(android.filterfw.core.NativeFrame)>
<android.filterfw.core.NativeFrame: boolean nativeDeallocate()>
<android.filterfw.core.NativeFrame: boolean setNativeBitmap(android.graphics.Bitmap,int,int)>
<android.filterfw.core.NativeFrame: boolean setNativeData(byte[],int,int)>
<android.filterfw.core.NativeFrame: boolean setNativeFloats(float[])>
<android.filterfw.core.NativeFrame: boolean setNativeInts(int[])>
<android.filterfw.core.NativeFrame: byte[] getNativeData(int)>
<android.filterfw.core.NativeFrame: float[] getNativeFloats(int)>
<android.filterfw.core.NativeFrame: int getNativeCapacity()>
<android.filterfw.core.NativeFrame: int[] getNativeInts(int)>
<android.filterfw.core.NativeFrame: int nativeFloatSize()>
<android.filterfw.core.NativeFrame: int nativeIntSize()>
<android.filterfw.core.NativeProgram: boolean allocate()>
<android.filterfw.core.NativeProgram: boolean bindGetValueFunction(java.lang.String)>
<android.filterfw.core.NativeProgram: boolean bindInitFunction(java.lang.String)>
<android.filterfw.core.NativeProgram: boolean bindProcessFunction(java.lang.String)>
<android.filterfw.core.NativeProgram: boolean bindResetFunction(java.lang.String)>
<android.filterfw.core.NativeProgram: boolean bindSetValueFunction(java.lang.String)>
<android.filterfw.core.NativeProgram: boolean bindTeardownFunction(java.lang.String)>
<android.filterfw.core.NativeProgram: boolean callNativeInit()>
<android.filterfw.core.NativeProgram: boolean callNativeProcess(android.filterfw.core.NativeFrame[],android.filterfw.core.NativeFrame)>
<android.filterfw.core.NativeProgram: boolean callNativeReset()>
<android.filterfw.core.NativeProgram: boolean callNativeSetValue(java.lang.String,java.lang.String)>
<android.filterfw.core.NativeProgram: boolean callNativeTeardown()>
<android.filterfw.core.NativeProgram: boolean deallocate()>
<android.filterfw.core.NativeProgram: boolean nativeInit()>
<android.filterfw.core.NativeProgram: boolean openNativeLibrary(java.lang.String)>
<android.filterfw.core.NativeProgram: java.lang.String callNativeGetValue(java.lang.String)>
<android.filterfw.core.ShaderProgram: android.filterfw.core.ShaderProgram nativeCreateIdentity(android.filterfw.core.GLEnvironment)>
<android.filterfw.core.ShaderProgram: boolean allocate(android.filterfw.core.GLEnvironment,java.lang.String,java.lang.String)>
<android.filterfw.core.ShaderProgram: boolean beginShaderDrawing()>
<android.filterfw.core.ShaderProgram: boolean compileAndLink()>
<android.filterfw.core.ShaderProgram: boolean deallocate()>
<android.filterfw.core.ShaderProgram: boolean setShaderAttributeValues(java.lang.String,float[],int)>
<android.filterfw.core.ShaderProgram: boolean setShaderAttributeVertexFrame(java.lang.String,android.filterfw.core.VertexFrame,int,int,int,int,boolean)>
<android.filterfw.core.ShaderProgram: boolean setShaderBlendEnabled(boolean)>
<android.filterfw.core.ShaderProgram: boolean setShaderBlendFunc(int,int)>
<android.filterfw.core.ShaderProgram: boolean setShaderClearColor(float,float,float)>
<android.filterfw.core.ShaderProgram: boolean setShaderClearsOutput(boolean)>
<android.filterfw.core.ShaderProgram: boolean setShaderDrawMode(int)>
<android.filterfw.core.ShaderProgram: boolean setShaderTileCounts(int,int)>
<android.filterfw.core.ShaderProgram: boolean setShaderVertexCount(int)>
<android.filterfw.core.ShaderProgram: boolean setSourceRegion(float,float,float,float,float,float,float,float)>
<android.filterfw.core.ShaderProgram: boolean setTargetRegion(float,float,float,float,float,float,float,float)>
<android.filterfw.core.ShaderProgram: boolean setUniformValue(java.lang.String,java.lang.Object)>
<android.filterfw.core.ShaderProgram: boolean shaderProcess(android.filterfw.core.GLFrame[],android.filterfw.core.GLFrame)>
<android.filterfw.core.ShaderProgram: java.lang.Object getUniformValue(java.lang.String)>
<android.filterfw.core.VertexFrame: boolean nativeAllocate(int)>
<android.filterfw.core.VertexFrame: boolean nativeDeallocate()>
<android.filterfw.core.VertexFrame: boolean setNativeData(byte[],int,int)>
<android.filterfw.core.VertexFrame: boolean setNativeFloats(float[])>
<android.filterfw.core.VertexFrame: boolean setNativeInts(int[])>
<android.filterfw.core.VertexFrame: int getNativeVboId()>
<android.graphics.AvoidXfermode: int nativeCreate(int,int,int)>
<android.graphics.Bitmap: android.graphics.Bitmap nativeCopy(int,int,boolean)>
<android.graphics.Bitmap: android.graphics.Bitmap nativeCreateFromParcel(android.os.Parcel)>
<android.graphics.Bitmap: android.graphics.Bitmap nativeCreate(int[],int,int,int,int,int,boolean)>
<android.graphics.Bitmap: android.graphics.Bitmap nativeExtractAlpha(int,int,int[])>
<android.graphics.Bitmap: boolean nativeCompress(int,int,int,java.io.OutputStream,byte[])>
<android.graphics.Bitmap: boolean nativeHasAlpha(int)>
<android.graphics.Bitmap: boolean nativeSameAs(int,int)>
<android.graphics.Bitmap: boolean nativeWriteToParcel(int,boolean,int,android.os.Parcel)>
<android.graphics.BitmapFactory: android.graphics.Bitmap nativeDecodeAsset(int,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap nativeDecodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap nativeDecodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap nativeDecodeStream(java.io.InputStream,byte[],android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: boolean nativeIsSeekable(java.io.FileDescriptor)>
<android.graphics.BitmapFactory: byte[] nativeScaleNinePatch(byte[],float,android.graphics.Rect)>
<android.graphics.BitmapFactory$Options: void requestCancel()>
<android.graphics.BitmapFactory: void nativeSetDefaultConfig(int)>
<android.graphics.Bitmap: int nativeConfig(int)>
<android.graphics.Bitmap: int nativeGenerationId(int)>
<android.graphics.Bitmap: int nativeGetPixel(int,int,int)>
<android.graphics.Bitmap: int nativeHeight(int)>
<android.graphics.Bitmap: int nativeRowBytes(int)>
<android.graphics.Bitmap: int nativeWidth(int)>
<android.graphics.BitmapRegionDecoder: android.graphics.Bitmap nativeDecodeRegion(int,int,int,int,int,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder nativeNewInstance(byte[],int,int,boolean)>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder nativeNewInstance(int,boolean)>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder nativeNewInstance(java.io.FileDescriptor,boolean)>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder nativeNewInstance(java.io.InputStream,byte[],boolean)>
<android.graphics.BitmapRegionDecoder: int nativeGetHeight(int)>
<android.graphics.BitmapRegionDecoder: int nativeGetWidth(int)>
<android.graphics.BitmapRegionDecoder: void nativeClean(int)>
<android.graphics.BitmapShader: int nativeCreate(int,int,int)>
<android.graphics.BitmapShader: int nativePostCreate(int,int,int,int)>
<android.graphics.Bitmap: void nativeCopyPixelsFromBuffer(int,java.nio.Buffer)>
<android.graphics.Bitmap: void nativeCopyPixelsToBuffer(int,java.nio.Buffer)>
<android.graphics.Bitmap: void nativeDestructor(int)>
<android.graphics.Bitmap: void nativeErase(int,int)>
<android.graphics.Bitmap: void nativeGetPixels(int,int[],int,int,int,int,int,int)>
<android.graphics.Bitmap: void nativePrepareToDraw(int)>
<android.graphics.Bitmap: void nativeRecycle(int)>
<android.graphics.Bitmap: void nativeSetHasAlpha(int,boolean)>
<android.graphics.Bitmap: void nativeSetPixel(int,int,int,int)>
<android.graphics.Bitmap: void nativeSetPixels(int,int[],int,int,int,int,int,int)>
<android.graphics.BlurMaskFilter: int nativeConstructor(float,int)>
<android.graphics.Camera: float dotWithNormal(float,float,float)>
<android.graphics.Camera: void nativeApplyToCanvas(int)>
<android.graphics.Camera: void nativeConstructor()>
<android.graphics.Camera: void nativeDestructor()>
<android.graphics.Camera: void nativeGetMatrix(int)>
<android.graphics.Camera: void restore()>
<android.graphics.Camera: void rotate(float,float,float)>
<android.graphics.Camera: void rotateX(float)>
<android.graphics.Camera: void rotateY(float)>
<android.graphics.Camera: void rotateZ(float)>
<android.graphics.Camera: void save()>
<android.graphics.Camera: void setLocation(float,float,float)>
<android.graphics.Camera: void translate(float,float,float)>
<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>
<android.graphics.Canvas: boolean clipRect(android.graphics.RectF)>
<android.graphics.Canvas: boolean clipRect(float,float,float,float)>
<android.graphics.Canvas: boolean clipRect(int,int,int,int)>
<android.graphics.Canvas: boolean isOpaque()>
<android.graphics.Canvas: boolean native_clipPath(int,int,int)>
<android.graphics.Canvas: boolean native_clipRect(int,float,float,float,float,int)>
<android.graphics.Canvas: boolean native_clipRegion(int,int,int)>
<android.graphics.Canvas: boolean native_getClipBounds(int,android.graphics.Rect)>
<android.graphics.Canvas: boolean native_quickReject(int,android.graphics.RectF,int)>
<android.graphics.Canvas: boolean native_quickReject(int,float,float,float,float,int)>
<android.graphics.Canvas: boolean native_quickReject(int,int,int)>
<android.graphics.Canvas: int getHeight()>
<android.graphics.Canvas: int getSaveCount()>
<android.graphics.Canvas: int getWidth()>
<android.graphics.Canvas: int initRaster(int)>
<android.graphics.Canvas: int native_saveLayerAlpha(int,android.graphics.RectF,int,int)>
<android.graphics.Canvas: int native_saveLayerAlpha(int,float,float,float,float,int,int)>
<android.graphics.Canvas: int native_saveLayer(int,android.graphics.RectF,int,int)>
<android.graphics.Canvas: int native_saveLayer(int,float,float,float,float,int,int)>
<android.graphics.Canvas: int save()>
<android.graphics.Canvas: int save(int)>
<android.graphics.Canvas: void drawLines(float[],int,int,android.graphics.Paint)>
<android.graphics.Canvas: void drawPoint(float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawPoints(float[],int,int,android.graphics.Paint)>
<android.graphics.Canvas: void finalizer(int)>
<android.graphics.Canvas: void freeCaches()>
<android.graphics.Canvas: void native_concat(int,int)>
<android.graphics.Canvas: void native_drawArc(int,android.graphics.RectF,float,float,boolean,int)>
<android.graphics.Canvas: void native_drawARGB(int,int,int,int,int)>
<android.graphics.Canvas: void native_drawBitmap(int,int,android.graphics.Rect,android.graphics.RectF,int,int,int)>
<android.graphics.Canvas: void native_drawBitmap(int,int,android.graphics.Rect,android.graphics.Rect,int,int,int)>
<android.graphics.Canvas: void native_drawBitmap(int,int,float,float,int,int,int,int)>
<android.graphics.Canvas: void native_drawBitmap(int,int[],int,int,float,float,int,int,boolean,int)>
<android.graphics.Canvas: void nativeDrawBitmapMatrix(int,int,int,int)>
<android.graphics.Canvas: void nativeDrawBitmapMesh(int,int,int,int,float[],int,int[],int,int)>
<android.graphics.Canvas: void native_drawCircle(int,float,float,float,int)>
<android.graphics.Canvas: void native_drawColor(int,int)>
<android.graphics.Canvas: void native_drawColor(int,int,int)>
<android.graphics.Canvas: void native_drawLine(int,float,float,float,float,int)>
<android.graphics.Canvas: void native_drawOval(int,android.graphics.RectF,int)>
<android.graphics.Canvas: void native_drawPaint(int,int)>
<android.graphics.Canvas: void native_drawPath(int,int,int)>
<android.graphics.Canvas: void native_drawPicture(int,int)>
<android.graphics.Canvas: void native_drawPosText(int,char[],int,int,float[],int)>
<android.graphics.Canvas: void native_drawPosText(int,java.lang.String,float[],int)>
<android.graphics.Canvas: void native_drawRect(int,android.graphics.RectF,int)>
<android.graphics.Canvas: void native_drawRect(int,float,float,float,float,int)>
<android.graphics.Canvas: void native_drawRGB(int,int,int,int)>
<android.graphics.Canvas: void native_drawRoundRect(int,android.graphics.RectF,float,float,int)>
<android.graphics.Canvas: void native_drawText(int,char[],int,int,float,float,int,int)>
<android.graphics.Canvas: void native_drawText(int,java.lang.String,int,int,float,float,int,int)>
<android.graphics.Canvas: void native_drawTextOnPath(int,char[],int,int,int,float,float,int,int)>
<android.graphics.Canvas: void native_drawTextOnPath(int,java.lang.String,int,float,float,int,int)>
<android.graphics.Canvas: void native_drawTextRun(int,char[],int,int,int,int,float,float,int,int)>
<android.graphics.Canvas: void native_drawTextRun(int,java.lang.String,int,int,int,int,float,float,int,int)>
<android.graphics.Canvas: void nativeDrawVertices(int,int,int,float[],int,float[],int,int[],int,short[],int,int,int)>
<android.graphics.Canvas: void native_getCTM(int,int)>
<android.graphics.Canvas: void native_setBitmap(int,int)>
<android.graphics.Canvas: void nativeSetDrawFilter(int,int)>
<android.graphics.Canvas: void native_setMatrix(int,int)>
<android.graphics.Canvas: void restore()>
<android.graphics.Canvas: void restoreToCount(int)>
<android.graphics.Canvas: void rotate(float)>
<android.graphics.Canvas: void scale(float,float)>
<android.graphics.Canvas: void skew(float,float)>
<android.graphics.Canvas: void translate(float,float)>
<android.graphics.ColorFilter: void finalizer(int,int)>
<android.graphics.Color: int nativeHSVToColor(int,float[])>
<android.graphics.ColorMatrixColorFilter: int nativeColorMatrixFilter(float[])>
<android.graphics.ColorMatrixColorFilter: int nColorMatrixFilter(int,float[])>
<android.graphics.Color: void nativeRGBToHSV(int,int,int,float[])>
<android.graphics.ComposePathEffect: int nativeCreate(int,int)>
<android.graphics.ComposeShader: int nativeCreate1(int,int,int)>
<android.graphics.ComposeShader: int nativeCreate2(int,int,int)>
<android.graphics.ComposeShader: int nativePostCreate1(int,int,int,int)>
<android.graphics.ComposeShader: int nativePostCreate2(int,int,int,int)>
<android.graphics.CornerPathEffect: int nativeCreate(float)>
<android.graphics.DashPathEffect: int nativeCreate(float[],float)>
<android.graphics.DiscretePathEffect: int nativeCreate(float,float)>
<android.graphics.DrawFilter: void nativeDestructor(int)>
<android.graphics.EmbossMaskFilter: int nativeConstructor(float[],float,float,float)>
<android.graphics.Interpolator: int nativeConstructor(int,int)>
<android.graphics.Interpolator: int nativeTimeToValues(int,int,float[])>
<android.graphics.Interpolator: void nativeDestructor(int)>
<android.graphics.Interpolator: void nativeReset(int,int,int)>
<android.graphics.Interpolator: void nativeSetKeyFrame(int,int,int,float[],float[])>
<android.graphics.Interpolator: void nativeSetRepeatMirror(int,float,boolean)>
<android.graphics.LargeBitmap: android.graphics.Bitmap nativeDecodeRegion(int,int,int,int,int,android.graphics.BitmapFactory$Options)>
<android.graphics.LargeBitmap: int nativeGetHeight(int)>
<android.graphics.LargeBitmap: int nativeGetWidth(int)>
<android.graphics.LargeBitmap: void nativeClean(int)>
<android.graphics.LayerRasterizer: int nativeConstructor()>
<android.graphics.LayerRasterizer: void nativeAddLayer(int,int,float,float)>
<android.graphics.LightingColorFilter: int native_CreateLightingFilter(int,int)>
<android.graphics.LightingColorFilter: int nCreateLightingFilter(int,int,int)>
<android.graphics.LinearGradient: int nativeCreate1(float,float,float,float,int[],float[],int)>
<android.graphics.LinearGradient: int nativeCreate2(float,float,float,float,int,int,int)>
<android.graphics.LinearGradient: int nativePostCreate1(int,float,float,float,float,int[],float[],int)>
<android.graphics.LinearGradient: int nativePostCreate2(int,float,float,float,float,int,int,int)>
<android.graphics.MaskFilter: void nativeDestructor(int)>
<android.graphics.Matrix: boolean native_equals(int,int)>
<android.graphics.Matrix: boolean native_invert(int,int)>
<android.graphics.Matrix: boolean native_isIdentity(int)>
<android.graphics.Matrix: boolean native_mapRect(int,android.graphics.RectF,android.graphics.RectF)>
<android.graphics.Matrix: boolean native_postConcat(int,int)>
<android.graphics.Matrix: boolean native_postRotate(int,float)>
<android.graphics.Matrix: boolean native_postRotate(int,float,float,float)>
<android.graphics.Matrix: boolean native_postScale(int,float,float)>
<android.graphics.Matrix: boolean native_postScale(int,float,float,float,float)>
<android.graphics.Matrix: boolean native_postSkew(int,float,float)>
<android.graphics.Matrix: boolean native_postSkew(int,float,float,float,float)>
<android.graphics.Matrix: boolean native_postTranslate(int,float,float)>
<android.graphics.Matrix: boolean native_preConcat(int,int)>
<android.graphics.Matrix: boolean native_preRotate(int,float)>
<android.graphics.Matrix: boolean native_preRotate(int,float,float,float)>
<android.graphics.Matrix: boolean native_preScale(int,float,float)>
<android.graphics.Matrix: boolean native_preScale(int,float,float,float,float)>
<android.graphics.Matrix: boolean native_preSkew(int,float,float)>
<android.graphics.Matrix: boolean native_preSkew(int,float,float,float,float)>
<android.graphics.Matrix: boolean native_preTranslate(int,float,float)>
<android.graphics.Matrix: boolean native_rectStaysRect(int)>
<android.graphics.Matrix: boolean native_setConcat(int,int,int)>
<android.graphics.Matrix: boolean native_setPolyToPoly(int,float[],int,float[],int,int)>
<android.graphics.Matrix: boolean native_setRectToRect(int,android.graphics.RectF,android.graphics.RectF,int)>
<android.graphics.Matrix: float native_mapRadius(int,float)>
<android.graphics.Matrix: int native_create(int)>
<android.graphics.Matrix: void finalizer(int)>
<android.graphics.Matrix: void native_getValues(int,float[])>
<android.graphics.Matrix: void native_mapPoints(int,float[],int,float[],int,int,boolean)>
<android.graphics.Matrix: void native_reset(int)>
<android.graphics.Matrix: void native_set(int,int)>
<android.graphics.Matrix: void native_setRotate(int,float)>
<android.graphics.Matrix: void native_setRotate(int,float,float,float)>
<android.graphics.Matrix: void native_setScale(int,float,float)>
<android.graphics.Matrix: void native_setScale(int,float,float,float,float)>
<android.graphics.Matrix: void native_setSinCos(int,float,float)>
<android.graphics.Matrix: void native_setSinCos(int,float,float,float,float)>
<android.graphics.Matrix: void native_setSkew(int,float,float)>
<android.graphics.Matrix: void native_setSkew(int,float,float,float,float)>
<android.graphics.Matrix: void native_setTranslate(int,float,float)>
<android.graphics.Matrix: void native_setValues(int,float[])>
<android.graphics.Movie: android.graphics.Movie decodeByteArray(byte[],int,int)>
<android.graphics.Movie: android.graphics.Movie decodeStream(java.io.InputStream)>
<android.graphics.Movie: boolean isOpaque()>
<android.graphics.Movie: boolean setTime(int)>
<android.graphics.Movie: int duration()>
<android.graphics.Movie: int height()>
<android.graphics.Movie: int width()>
<android.graphics.Movie: void draw(android.graphics.Canvas,float,float,android.graphics.Paint)>
<android.graphics.Movie: void nativeDestructor(int)>
<android.graphics.NinePatch: boolean isNinePatchChunk(byte[])>
<android.graphics.NinePatch: int nativeGetTransparentRegion(int,byte[],android.graphics.Rect)>
<android.graphics.NinePatch: void nativeDraw(int,android.graphics.RectF,int,byte[],int,int,int)>
<android.graphics.NinePatch: void nativeDraw(int,android.graphics.Rect,int,byte[],int,int,int)>
<android.graphics.NinePatch: void validateNinePatchChunk(int,byte[])>
<android.graphics.Paint: boolean native_getFillPath(int,int,int)>
<android.graphics.PaintFlagsDrawFilter: int nativeConstructor(int,int)>
<android.graphics.Paint: float ascent()>
<android.graphics.Paint: float descent()>
<android.graphics.Paint: float getFontMetrics(android.graphics.Paint$FontMetrics)>
<android.graphics.Paint: float getStrokeMiter()>
<android.graphics.Paint: float getStrokeWidth()>
<android.graphics.Paint: float getTextScaleX()>
<android.graphics.Paint: float getTextSize()>
<android.graphics.Paint: float getTextSkewX()>
<android.graphics.Paint: float native_getFontMetrics(int,android.graphics.Paint$FontMetrics)>
<android.graphics.Paint: float native_getTextRunAdvances(int,char[],int,int,int,int,int,float[],int,int)>
<android.graphics.Paint: float native_getTextRunAdvances(int,java.lang.String,int,int,int,int,int,float[],int,int)>
<android.graphics.Paint: float native_measureText(char[],int,int)>
<android.graphics.Paint: float native_measureText(java.lang.String)>
<android.graphics.Paint: float native_measureText(java.lang.String,int,int)>
<android.graphics.Paint: int getAlpha()>
<android.graphics.Paint: int getColor()>
<android.graphics.Paint: int getFlags()>
<android.graphics.Paint: int getFontMetricsInt(android.graphics.Paint$FontMetricsInt)>
<android.graphics.Paint: int getHinting()>
<android.graphics.Paint: int native_breakText(char[],int,int,float,float[])>
<android.graphics.Paint: int native_breakText(java.lang.String,boolean,float,float[])>
<android.graphics.Paint: int native_getStrokeCap(int)>
<android.graphics.Paint: int native_getStrokeJoin(int)>
<android.graphics.Paint: int native_getStyle(int)>
<android.graphics.Paint: int native_getTextAlign(int)>
<android.graphics.Paint: int native_getTextGlyphs(int,java.lang.String,int,int,int,int,int,char[])>
<android.graphics.Paint: int native_getTextRunCursor(int,char[],int,int,int,int,int)>
<android.graphics.Paint: int native_getTextRunCursor(int,java.lang.String,int,int,int,int,int)>
<android.graphics.Paint: int native_getTextWidths(int,char[],int,int,float[])>
<android.graphics.Paint: int native_getTextWidths(int,java.lang.String,int,int,float[])>
<android.graphics.Paint: int native_init()>
<android.graphics.Paint: int native_initWithPaint(int)>
<android.graphics.Paint: int native_setColorFilter(int,int)>
<android.graphics.Paint: int native_setMaskFilter(int,int)>
<android.graphics.Paint: int native_setPathEffect(int,int)>
<android.graphics.Paint: int native_setRasterizer(int,int)>
<android.graphics.Paint: int native_setShader(int,int)>
<android.graphics.Paint: int native_setTypeface(int,int)>
<android.graphics.Paint: int native_setXfermode(int,int)>
<android.graphics.Paint: void finalizer(int)>
<android.graphics.Paint: void nativeGetCharArrayBounds(int,char[],int,int,android.graphics.Rect)>
<android.graphics.Paint: void nativeGetStringBounds(int,java.lang.String,int,int,android.graphics.Rect)>
<android.graphics.Paint: void native_getTextPath(int,int,char[],int,int,float,float,int)>
<android.graphics.Paint: void native_getTextPath(int,int,java.lang.String,int,int,float,float,int)>
<android.graphics.Paint: void native_reset(int)>
<android.graphics.Paint: void native_set(int,int)>
<android.graphics.Paint: void native_setStrokeCap(int,int)>
<android.graphics.Paint: void native_setStrokeJoin(int,int)>
<android.graphics.Paint: void native_setStyle(int,int)>
<android.graphics.Paint: void native_setTextAlign(int,int)>
<android.graphics.Paint: void nSetShadowLayer(float,float,float,int)>
<android.graphics.Paint: void setAlpha(int)>
<android.graphics.Paint: void setAntiAlias(boolean)>
<android.graphics.Paint: void setColor(int)>
<android.graphics.Paint: void setDither(boolean)>
<android.graphics.Paint: void setFakeBoldText(boolean)>
<android.graphics.Paint: void setFilterBitmap(boolean)>
<android.graphics.Paint: void setFlags(int)>
<android.graphics.Paint: void setHinting(int)>
<android.graphics.Paint: void setLinearText(boolean)>
<android.graphics.Paint: void setStrikeThruText(boolean)>
<android.graphics.Paint: void setStrokeMiter(float)>
<android.graphics.Paint: void setStrokeWidth(float)>
<android.graphics.Paint: void setSubpixelText(boolean)>
<android.graphics.Paint: void setTextScaleX(float)>
<android.graphics.Paint: void setTextSize(float)>
<android.graphics.Paint: void setTextSkewX(float)>
<android.graphics.Paint: void setUnderlineText(boolean)>
<android.graphics.Path: boolean native_isEmpty(int)>
<android.graphics.Path: boolean native_isRect(int,android.graphics.RectF)>
<android.graphics.PathDashPathEffect: int nativeCreate(int,float,float,int)>
<android.graphics.PathEffect: void nativeDestructor(int)>
<android.graphics.Path: int init1()>
<android.graphics.Path: int init2(int)>
<android.graphics.Path: int native_getFillType(int)>
<android.graphics.PathMeasure: boolean native_getMatrix(int,float,int,int)>
<android.graphics.PathMeasure: boolean native_getPosTan(int,float,float[],float[])>
<android.graphics.PathMeasure: boolean native_getSegment(int,float,float,int,boolean)>
<android.graphics.PathMeasure: boolean native_isClosed(int)>
<android.graphics.PathMeasure: boolean native_nextContour(int)>
<android.graphics.PathMeasure: float native_getLength(int)>
<android.graphics.PathMeasure: int native_create(int,boolean)>
<android.graphics.PathMeasure: void native_destroy(int)>
<android.graphics.PathMeasure: void native_setPath(int,int,boolean)>
<android.graphics.Path: void finalizer(int)>
<android.graphics.Path: void native_addArc(int,android.graphics.RectF,float,float)>
<android.graphics.Path: void native_addCircle(int,float,float,float,int)>
<android.graphics.Path: void native_addOval(int,android.graphics.RectF,int)>
<android.graphics.Path: void native_addPath(int,int)>
<android.graphics.Path: void native_addPath(int,int,float,float)>
<android.graphics.Path: void native_addPath(int,int,int)>
<android.graphics.Path: void native_addRect(int,android.graphics.RectF,int)>
<android.graphics.Path: void native_addRect(int,float,float,float,float,int)>
<android.graphics.Path: void native_addRoundRect(int,android.graphics.RectF,float,float,int)>
<android.graphics.Path: void native_addRoundRect(int,android.graphics.RectF,float[],int)>
<android.graphics.Path: void native_arcTo(int,android.graphics.RectF,float,float,boolean)>
<android.graphics.Path: void native_close(int)>
<android.graphics.Path: void native_computeBounds(int,android.graphics.RectF)>
<android.graphics.Path: void native_cubicTo(int,float,float,float,float,float,float)>
<android.graphics.Path: void native_incReserve(int,int)>
<android.graphics.Path: void native_lineTo(int,float,float)>
<android.graphics.Path: void native_moveTo(int,float,float)>
<android.graphics.Path: void native_offset(int,float,float)>
<android.graphics.Path: void native_offset(int,float,float,int)>
<android.graphics.Path: void native_quadTo(int,float,float,float,float)>
<android.graphics.Path: void native_rCubicTo(int,float,float,float,float,float,float)>
<android.graphics.Path: void native_reset(int)>
<android.graphics.Path: void native_rewind(int)>
<android.graphics.Path: void native_rLineTo(int,float,float)>
<android.graphics.Path: void native_rMoveTo(int,float,float)>
<android.graphics.Path: void native_rQuadTo(int,float,float,float,float)>
<android.graphics.Path: void native_setFillType(int,int)>
<android.graphics.Path: void native_set(int,int)>
<android.graphics.Path: void native_setLastPoint(int,float,float)>
<android.graphics.Path: void native_transform(int,int)>
<android.graphics.Path: void native_transform(int,int,int)>
<android.graphics.Picture: boolean nativeWriteToStream(int,java.io.OutputStream,byte[])>
<android.graphics.Picture: int getHeight()>
<android.graphics.Picture: int getWidth()>
<android.graphics.Picture: int nativeBeginRecording(int,int,int)>
<android.graphics.Picture: int nativeConstructor(int)>
<android.graphics.Picture: int nativeCreateFromStream(java.io.InputStream,byte[])>
<android.graphics.Picture: void nativeDestructor(int)>
<android.graphics.Picture: void nativeDraw(int,int)>
<android.graphics.Picture: void nativeEndRecording(int)>
<android.graphics.PixelFormat: void getPixelFormatInfo(int,android.graphics.PixelFormat)>
<android.graphics.PixelFormat: void nativeClassInit()>
<android.graphics.PixelXorXfermode: int nativeCreate(int)>
<android.graphics.PorterDuffColorFilter: int native_CreatePorterDuffFilter(int,int)>
<android.graphics.PorterDuffColorFilter: int nCreatePorterDuffFilter(int,int,int)>
<android.graphics.PorterDuffXfermode: int nativeCreateXfermode(int)>
<android.graphics.RadialGradient: int nativeCreate1(float,float,float,int[],float[],int)>
<android.graphics.RadialGradient: int nativeCreate2(float,float,float,int,int,int)>
<android.graphics.RadialGradient: int nativePostCreate1(int,float,float,float,int[],float[],int)>
<android.graphics.RadialGradient: int nativePostCreate2(int,float,float,float,int,int,int)>
<android.graphics.Rasterizer: void finalizer(int)>
<android.graphics.Region: boolean contains(int,int)>
<android.graphics.Region: boolean isComplex()>
<android.graphics.Region: boolean isEmpty()>
<android.graphics.Region: boolean isRect()>
<android.graphics.Region: boolean nativeEquals(int,int)>
<android.graphics.Region: boolean nativeGetBoundaryPath(int,int)>
<android.graphics.Region: boolean nativeGetBounds(int,android.graphics.Rect)>
<android.graphics.Region: boolean nativeOp(int,android.graphics.Rect,int,int)>
<android.graphics.Region: boolean nativeOp(int,int,int,int)>
<android.graphics.Region: boolean nativeOp(int,int,int,int,int,int)>
<android.graphics.Region: boolean nativeSetPath(int,int,int)>
<android.graphics.Region: boolean nativeSetRect(int,int,int,int,int)>
<android.graphics.Region: boolean nativeSetRegion(int,int)>
<android.graphics.Region: boolean nativeWriteToParcel(int,android.os.Parcel)>
<android.graphics.Region: boolean quickContains(int,int,int,int)>
<android.graphics.Region: boolean quickReject(android.graphics.Region)>
<android.graphics.Region: boolean quickReject(int,int,int,int)>
<android.graphics.Region: int nativeConstructor()>
<android.graphics.Region: int nativeCreateFromParcel(android.os.Parcel)>
<android.graphics.RegionIterator: boolean nativeNext(int,android.graphics.Rect)>
<android.graphics.RegionIterator: int nativeConstructor(int)>
<android.graphics.RegionIterator: void nativeDestructor(int)>
<android.graphics.Region: java.lang.String nativeToString(int)>
<android.graphics.Region: void nativeDestructor(int)>
<android.graphics.Region: void scale(float,android.graphics.Region)>
<android.graphics.Region: void translate(int,int,android.graphics.Region)>
<android.graphics.Shader: void nativeDestructor(int,int)>
<android.graphics.Shader: void nativeSetLocalMatrix(int,int,int)>
<android.graphics.SumPathEffect: int nativeCreate(int,int)>
<android.graphics.SurfaceTexture: int nativeGetQueuedCount()>
<android.graphics.SurfaceTexture: int nativeUpdateTexImage()>
<android.graphics.SurfaceTexture: long nativeGetTimestamp()>
<android.graphics.SurfaceTexture: void nativeClassInit()>
<android.graphics.SurfaceTexture: void nativeFinalize()>
<android.graphics.SurfaceTexture: void nativeGetTransformMatrix(float[])>
<android.graphics.SurfaceTexture: void nativeInit(int,java.lang.Object,boolean)>
<android.graphics.SurfaceTexture: void nativeRelease()>
<android.graphics.SurfaceTexture: void nativeSetDefaultBufferSize(int,int)>
<android.graphics.SweepGradient: int nativeCreate1(float,float,int[],float[])>
<android.graphics.SweepGradient: int nativeCreate2(float,float,int,int)>
<android.graphics.SweepGradient: int nativePostCreate1(int,float,float,int[],float[])>
<android.graphics.SweepGradient: int nativePostCreate2(int,float,float,int,int)>
<android.graphics.TableMaskFilter: int nativeNewClip(int,int)>
<android.graphics.TableMaskFilter: int nativeNewGamma(float)>
<android.graphics.TableMaskFilter: int nativeNewTable(byte[])>
<android.graphics.Typeface: int nativeCreateFromAsset(android.content.res.AssetManager,java.lang.String)>
<android.graphics.Typeface: int nativeCreateFromFile(java.lang.String)>
<android.graphics.Typeface: int nativeCreateFromTypeface(int,int)>
<android.graphics.Typeface: int nativeCreate(java.lang.String,int)>
<android.graphics.Typeface: int nativeGetStyle(int)>
<android.graphics.Typeface: void nativeUnref(int)>
<android.graphics.Typeface: void setGammaForText(float,float)>
<android.graphics.Xfermode: void finalizer(int)>
<android.graphics.YuvImage: boolean nativeCompressToJpeg(byte[],int,int,int,int[],int[],int,java.io.OutputStream,byte[])>
<android.hardware.Camera: boolean previewEnabled()>
<android.hardware.Camera: int getNumberOfCameras()>
<android.hardware.Camera: java.lang.String native_getParameters()>
<android.hardware.Camera: void _addCallbackBuffer(byte[],int)>
<android.hardware.Camera: void getCameraInfo(int,android.hardware.Camera$CameraInfo)>
<android.hardware.Camera: void lock()>
<android.hardware.Camera: void native_autoFocus()>
<android.hardware.Camera: void native_cancelAutoFocus()>
<android.hardware.Camera: void native_release()>
<android.hardware.Camera: void native_setParameters(java.lang.String)>
<android.hardware.Camera: void native_setup(java.lang.Object,int)>
<android.hardware.Camera: void native_takePicture(int)>
<android.hardware.Camera: void reconnect()>
<android.hardware.Camera: void setDisplayOrientation(int)>
<android.hardware.Camera: void setHasPreviewCallback(boolean,boolean)>
<android.hardware.Camera: void setPreviewDisplay(android.view.Surface)>
<android.hardware.Camera: void setPreviewTexture(android.graphics.SurfaceTexture)>
<android.hardware.Camera: void _startFaceDetection(int)>
<android.hardware.Camera: void startPreview()>
<android.hardware.Camera: void startSmoothZoom(int)>
<android.hardware.Camera: void _stopFaceDetection()>
<android.hardware.Camera: void _stopPreview()>
<android.hardware.Camera: void stopSmoothZoom()>
<android.hardware.Camera: void unlock()>
<android.hardware.SensorManager: boolean sensors_enable_sensor(int,java.lang.String,int,int)>
<android.hardware.SensorManager: int sensors_create_queue()>
<android.hardware.SensorManager: int sensors_data_poll(int,float[],int[],long[])>
<android.hardware.SensorManager: int sensors_module_get_next_sensor(android.hardware.Sensor,int)>
<android.hardware.SensorManager: int sensors_module_init()>
<android.hardware.SensorManager: void nativeClassInit()>
<android.hardware.SensorManager: void sensors_destroy_queue(int)>
<android.hardware.usb.UsbDeviceConnection: android.hardware.usb.UsbRequest native_request_wait()>
<android.hardware.usb.UsbDeviceConnection: boolean native_claim_interface(int,boolean)>
<android.hardware.usb.UsbDeviceConnection: boolean native_open(java.lang.String,java.io.FileDescriptor)>
<android.hardware.usb.UsbDeviceConnection: boolean native_release_interface(int)>
<android.hardware.usb.UsbDeviceConnection: byte[] native_get_desc()>
<android.hardware.usb.UsbDeviceConnection: int native_bulk_request(int,byte[],int,int)>
<android.hardware.usb.UsbDeviceConnection: int native_control_request(int,int,int,int,byte[],int,int)>
<android.hardware.usb.UsbDeviceConnection: int native_get_fd()>
<android.hardware.usb.UsbDeviceConnection: java.lang.String native_get_serial()>
<android.hardware.usb.UsbDeviceConnection: void native_close()>
<android.hardware.usb.UsbDevice: int native_get_device_id(java.lang.String)>
<android.hardware.usb.UsbDevice: java.lang.String native_get_device_name(int)>
<android.hardware.usb.UsbRequest: boolean native_cancel()>
<android.hardware.usb.UsbRequest: boolean native_init(android.hardware.usb.UsbDeviceConnection,int,int,int,int)>
<android.hardware.usb.UsbRequest: boolean native_queue_array(byte[],int,boolean)>
<android.hardware.usb.UsbRequest: boolean native_queue_direct(java.nio.ByteBuffer,int,boolean)>
<android.hardware.usb.UsbRequest: void native_close()>
<android.hardware.usb.UsbRequest: void native_dequeue_array(byte[],int,boolean)>
<android.hardware.usb.UsbRequest: void native_dequeue_direct()>
<android.media.AmrInputStream: int GsmAmrEncoderEncode(int,byte[],int,byte[],int)>
<android.media.AmrInputStream: int GsmAmrEncoderNew()>
<android.media.AmrInputStream: void GsmAmrEncoderCleanup(int)>
<android.media.AmrInputStream: void GsmAmrEncoderDelete(int)>
<android.media.AmrInputStream: void GsmAmrEncoderInitialize(int)>
<android.media.audiofx.AudioEffect: boolean native_getEnabled()>
<android.media.audiofx.AudioEffect: boolean native_hasControl()>
<android.media.audiofx.AudioEffect: int native_command(int,int,byte[],int,byte[])>
<android.media.audiofx.AudioEffect: int native_getParameter(int,byte[],int,byte[])>
<android.media.audiofx.AudioEffect: int native_setEnabled(boolean)>
<android.media.audiofx.AudioEffect: int native_setParameter(int,byte[],int,byte[])>
<android.media.audiofx.AudioEffect: int native_setup(java.lang.Object,java.lang.String,java.lang.String,int,int,int[],java.lang.Object[])>
<android.media.audiofx.AudioEffect: java.lang.Object[] native_query_effects()>
<android.media.audiofx.AudioEffect: java.lang.Object[] native_query_pre_processing(int)>
<android.media.audiofx.AudioEffect: void native_finalize()>
<android.media.audiofx.AudioEffect: void native_init()>
<android.media.audiofx.AudioEffect: void native_release()>
<android.media.audiofx.Visualizer: boolean native_getEnabled()>
<android.media.audiofx.Visualizer: int[] getCaptureSizeRange()>
<android.media.audiofx.Visualizer: int getMaxCaptureRate()>
<android.media.audiofx.Visualizer: int native_getCaptureSize()>
<android.media.audiofx.Visualizer: int native_getFft(byte[])>
<android.media.audiofx.Visualizer: int native_getSamplingRate()>
<android.media.audiofx.Visualizer: int native_getWaveForm(byte[])>
<android.media.audiofx.Visualizer: int native_setCaptureSize(int)>
<android.media.audiofx.Visualizer: int native_setEnabled(boolean)>
<android.media.audiofx.Visualizer: int native_setPeriodicCapture(int,boolean,boolean)>
<android.media.audiofx.Visualizer: int native_setup(java.lang.Object,int,int[])>
<android.media.audiofx.Visualizer: void native_finalize()>
<android.media.audiofx.Visualizer: void native_init()>
<android.media.audiofx.Visualizer: void native_release()>
<android.media.AudioRecord: int native_get_marker_pos()>
<android.media.AudioRecord: int native_get_min_buff_size(int,int,int)>
<android.media.AudioRecord: int native_get_pos_update_period()>
<android.media.AudioRecord: int native_read_in_byte_array(byte[],int,int)>
<android.media.AudioRecord: int native_read_in_direct_buffer(java.lang.Object,int)>
<android.media.AudioRecord: int native_read_in_short_array(short[],int,int)>
<android.media.AudioRecord: int native_set_marker_pos(int)>
<android.media.AudioRecord: int native_set_pos_update_period(int)>
<android.media.AudioRecord: int native_setup(java.lang.Object,int,int,int,int,int,int[])>
<android.media.AudioRecord: int native_start()>
<android.media.AudioRecord: void native_finalize()>
<android.media.AudioRecord: void native_release()>
<android.media.AudioRecord: void native_stop()>
<android.media.AudioSystem: boolean isMicrophoneMuted()>
<android.media.AudioSystem: boolean isStreamActive(int,int)>
<android.media.AudioSystem: int getDeviceConnectionState(int,java.lang.String)>
<android.media.AudioSystem: int getDevicesForStream(int)>
<android.media.AudioSystem: int getForceUse(int)>
<android.media.AudioSystem: int getStreamVolumeIndex(int)>
<android.media.AudioSystem: int initStreamVolume(int,int,int)>
<android.media.AudioSystem: int muteMicrophone(boolean)>
<android.media.AudioSystem: int setDeviceConnectionState(int,int,java.lang.String)>
<android.media.AudioSystem: int setForceUse(int,int)>
<android.media.AudioSystem: int setParameters(java.lang.String)>
<android.media.AudioSystem: int setPhoneState(int)>
<android.media.AudioSystem: int setRingerMode(int,int)>
<android.media.AudioSystem: int setStreamVolumeIndex(int,int)>
<android.media.AudioSystem: java.lang.String getParameters(java.lang.String)>
<android.media.AudioTrack: int native_attachAuxEffect(int)>
<android.media.AudioTrack: int native_get_marker_pos()>
<android.media.AudioTrack: int native_get_min_buff_size(int,int,int)>
<android.media.AudioTrack: int native_get_native_frame_count()>
<android.media.AudioTrack: int native_get_output_sample_rate(int)>
<android.media.AudioTrack: int native_get_playback_rate()>
<android.media.AudioTrack: int native_get_position()>
<android.media.AudioTrack: int native_get_pos_update_period()>
<android.media.AudioTrack: int native_get_session_id()>
<android.media.AudioTrack: int native_reload_static()>
<android.media.AudioTrack: int native_set_loop(int,int,int)>
<android.media.AudioTrack: int native_set_marker_pos(int)>
<android.media.AudioTrack: int native_set_playback_rate(int)>
<android.media.AudioTrack: int native_set_position(int)>
<android.media.AudioTrack: int native_set_pos_update_period(int)>
<android.media.AudioTrack: int native_setup(java.lang.Object,int,int,int,int,int,int,int[])>
<android.media.AudioTrack: int native_write_byte(byte[],int,int,int)>
<android.media.AudioTrack: int native_write_short(short[],int,int,int)>
<android.media.AudioTrack: void native_finalize()>
<android.media.AudioTrack: void native_flush()>
<android.media.AudioTrack: void native_pause()>
<android.media.AudioTrack: void native_release()>
<android.media.AudioTrack: void native_setAuxEffectSendLevel(float)>
<android.media.AudioTrack: void native_setVolume(float,float)>
<android.media.AudioTrack: void native_start()>
<android.media.AudioTrack: void native_stop()>
<android.media.CamcorderProfile: android.media.CamcorderProfile native_get_camcorder_profile(int,int)>
<android.media.CamcorderProfile: boolean native_has_camcorder_profile(int,int)>
<android.media.CamcorderProfile: void native_init()>
<android.media.CameraProfile: int native_get_image_encoding_quality_level(int,int)>
<android.media.CameraProfile: int native_get_num_image_encoding_quality_levels(int)>
<android.media.CameraProfile: void native_init()>
<android.media.DecoderCapabilities: int native_get_audio_decoder_type(int)>
<android.media.DecoderCapabilities: int native_get_num_audio_decoders()>
<android.media.DecoderCapabilities: int native_get_num_video_decoders()>
<android.media.DecoderCapabilities: int native_get_video_decoder_type(int)>
<android.media.DecoderCapabilities: void native_init()>
<android.media.EncoderCapabilities: android.media.EncoderCapabilities$AudioEncoderCap native_get_audio_encoder_cap(int)>
<android.media.EncoderCapabilities: android.media.EncoderCapabilities$VideoEncoderCap native_get_video_encoder_cap(int)>
<android.media.EncoderCapabilities: int native_get_file_format(int)>
<android.media.EncoderCapabilities: int native_get_num_audio_encoders()>
<android.media.EncoderCapabilities: int native_get_num_file_formats()>
<android.media.EncoderCapabilities: int native_get_num_video_encoders()>
<android.media.EncoderCapabilities: void native_init()>
<android.media.ExifInterface: boolean appendThumbnailNative(java.lang.String,java.lang.String)>
<android.media.ExifInterface: byte[] getThumbnailNative(java.lang.String)>
<android.media.ExifInterface: java.lang.String getAttributesNative(java.lang.String)>
<android.media.ExifInterface: void commitChangesNative(java.lang.String)>
<android.media.ExifInterface: void saveAttributesNative(java.lang.String,java.lang.String)>
<android.media.FaceDetector: int fft_detect(android.graphics.Bitmap)>
<android.media.FaceDetector: int fft_initialize(int,int,int)>
<android.media.FaceDetector: void fft_destroy()>
<android.media.FaceDetector: void fft_get_face(android.media.FaceDetector$Face,int)>
<android.media.FaceDetector: void nativeClassInit()>
<android.media.JetPlayer: boolean native_clearQueue()>
<android.media.JetPlayer: boolean native_closeJetFile()>
<android.media.JetPlayer: boolean native_loadJetFromFileD(java.io.FileDescriptor,long,long)>
<android.media.JetPlayer: boolean native_loadJetFromFile(java.lang.String)>
<android.media.JetPlayer: boolean native_pauseJet()>
<android.media.JetPlayer: boolean native_playJet()>
<android.media.JetPlayer: boolean native_queueJetSegment(int,int,int,int,int,byte)>
<android.media.JetPlayer: boolean native_queueJetSegmentMuteArray(int,int,int,int,boolean[],byte)>
<android.media.JetPlayer: boolean native_setMuteArray(boolean[],boolean)>
<android.media.JetPlayer: boolean native_setMuteFlag(int,boolean,boolean)>
<android.media.JetPlayer: boolean native_setMuteFlags(int,boolean)>
<android.media.JetPlayer: boolean native_setup(java.lang.Object,int,int)>
<android.media.JetPlayer: boolean native_triggerClip(int)>
<android.media.JetPlayer: void native_finalize()>
<android.media.JetPlayer: void native_release()>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap _getFrameAtTime(long,int)>
<android.media.MediaMetadataRetriever: byte[] getEmbeddedPicture(int)>
<android.media.MediaMetadataRetriever: java.lang.String extractMetadata(int)>
<android.media.MediaMetadataRetriever: void native_finalize()>
<android.media.MediaMetadataRetriever: void native_init()>
<android.media.MediaMetadataRetriever: void native_setup()>
<android.media.MediaMetadataRetriever: void release()>
<android.media.MediaMetadataRetriever: void setDataSource(java.io.FileDescriptor,long,long)>
<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String)>
<android.media.MediaMetadataRetriever: void _setDataSource(java.lang.String,java.lang.String[],java.lang.String[])>
<android.media.MediaPlayer: android.graphics.Bitmap getFrameAt(int)>
<android.media.MediaPlayer: boolean isLooping()>
<android.media.MediaPlayer: boolean isPlaying()>
<android.media.MediaPlayer: boolean native_getMetadata(boolean,boolean,android.os.Parcel)>
<android.media.MediaPlayer: boolean setParameter(int,android.os.Parcel)>
<android.media.MediaPlayer: int getAudioSessionId()>
<android.media.MediaPlayer: int getCurrentPosition()>
<android.media.MediaPlayer: int getDuration()>
<android.media.MediaPlayer: int getVideoHeight()>
<android.media.MediaPlayer: int getVideoWidth()>
<android.media.MediaPlayer: int native_invoke(android.os.Parcel,android.os.Parcel)>
<android.media.MediaPlayer: int native_pullBatteryData(android.os.Parcel)>
<android.media.MediaPlayer: int native_setMetadataFilter(android.os.Parcel)>
<android.media.MediaPlayer: void attachAuxEffect(int)>
<android.media.MediaPlayer: void getParameter(int,android.os.Parcel)>
<android.media.MediaPlayer: void native_finalize()>
<android.media.MediaPlayer: void native_init()>
<android.media.MediaPlayer: void native_setup(java.lang.Object)>
<android.media.MediaPlayer: void _pause()>
<android.media.MediaPlayer: void prepare()>
<android.media.MediaPlayer: void prepareAsync()>
<android.media.MediaPlayer: void _release()>
<android.media.MediaPlayer: void _reset()>
<android.media.MediaPlayer: void seekTo(int)>
<android.media.MediaPlayer: void setAudioSessionId(int)>
<android.media.MediaPlayer: void setAudioStreamType(int)>
<android.media.MediaPlayer: void setAuxEffectSendLevel(float)>
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>
<android.media.MediaPlayer: void setDataSource(java.lang.String)>
<android.media.MediaPlayer: void _setDataSource(java.lang.String,java.lang.String[],java.lang.String[])>
<android.media.MediaPlayer: void setLooping(boolean)>
<android.media.MediaPlayer: void _setVideoSurface(android.view.Surface)>
<android.media.MediaPlayer: void setVolume(float,float)>
<android.media.MediaPlayer: void _start()>
<android.media.MediaPlayer: void _stop()>
<android.media.MediaRecorder: int getMaxAmplitude()>
<android.media.MediaRecorder: void native_finalize()>
<android.media.MediaRecorder: void native_init()>
<android.media.MediaRecorder: void native_reset()>
<android.media.MediaRecorder: void native_setup(java.lang.Object)>
<android.media.MediaRecorder: void _prepare()>
<android.media.MediaRecorder: void release()>
<android.media.MediaRecorder: void setAudioEncoder(int)>
<android.media.MediaRecorder: void setAudioSource(int)>
<android.media.MediaRecorder: void setCamera(android.hardware.Camera)>
<android.media.MediaRecorder: void setMaxDuration(int)>
<android.media.MediaRecorder: void setMaxFileSize(long)>
<android.media.MediaRecorder: void _setOutputFile(java.io.FileDescriptor,long,long)>
<android.media.MediaRecorder: void setOutputFormat(int)>
<android.media.MediaRecorder: void setParameter(java.lang.String)>
<android.media.MediaRecorder: void setVideoEncoder(int)>
<android.media.MediaRecorder: void setVideoFrameRate(int)>
<android.media.MediaRecorder: void setVideoSize(int,int)>
<android.media.MediaRecorder: void setVideoSource(int)>
<android.media.MediaRecorder: void start()>
<android.media.MediaRecorder: void stop()>
<android.media.MediaScanner: byte[] extractAlbumArt(java.io.FileDescriptor)>
<android.media.MediaScanner: void native_finalize()>
<android.media.MediaScanner: void native_init()>
<android.media.MediaScanner: void native_setup()>
<android.media.MediaScanner: void processDirectory(java.lang.String,android.media.MediaScannerClient)>
<android.media.MediaScanner: void processFile(java.lang.String,java.lang.String,android.media.MediaScannerClient)>
<android.media.MediaScanner: void setLocale(java.lang.String)>
<android.media.ResampleInputStream: void fir21(byte[],int,byte[],int,int)>
<android.media.SoundPool: boolean unload(int)>
<android.media.SoundPool: int _load(java.io.FileDescriptor,long,long,int)>
<android.media.SoundPool: int _load(java.lang.String,int)>
<android.media.SoundPool: int native_setup(java.lang.Object,int,int,int)>
<android.media.SoundPool: int play(int,float,float,int,int,float)>
<android.media.SoundPool: void autoPause()>
<android.media.SoundPool: void autoResume()>
<android.media.SoundPool: void pause(int)>
<android.media.SoundPool: void release()>
<android.media.SoundPool: void resume(int)>
<android.media.SoundPool: void setLoop(int,int)>
<android.media.SoundPool: void setPriority(int,int)>
<android.media.SoundPool: void setRate(int,float)>
<android.media.SoundPool: void setVolume(int,float,float)>
<android.media.SoundPool: void stop(int)>
<android.media.ToneGenerator: boolean startTone(int,int)>
<android.media.ToneGenerator: void native_finalize()>
<android.media.ToneGenerator: void native_setup(int,int)>
<android.media.ToneGenerator: void release()>
<android.media.ToneGenerator: void stopTone()>
<android.media.videoeditor.MediaArtistNativeHelper: android.media.videoeditor.MediaArtistNativeHelper$Properties getMediaProperties(java.lang.String)>
<android.media.videoeditor.MediaArtistNativeHelper: android.media.videoeditor.MediaArtistNativeHelper$Version getVersion()>
<android.media.videoeditor.MediaArtistNativeHelper: int nativeGenerateAudioGraph(java.lang.String,java.lang.String,int,int,int)>
<android.media.videoeditor.MediaArtistNativeHelper: int nativeGenerateClip(android.media.videoeditor.MediaArtistNativeHelper$EditSettings)>
<android.media.videoeditor.MediaArtistNativeHelper: int nativeGenerateRawAudio(java.lang.String,java.lang.String)>
<android.media.videoeditor.MediaArtistNativeHelper: int nativeGetPixels(java.lang.String,int[],int,int,long)>
<android.media.videoeditor.MediaArtistNativeHelper: int nativeGetPixelsList(java.lang.String,int[],int,int,int,long,long,int[],android.media.videoeditor.MediaArtistNativeHelper$NativeGetPixelsListCallback)>
<android.media.videoeditor.MediaArtistNativeHelper: int nativeRenderMediaItemPreviewFrame(android.view.Surface,java.lang.String,int,int,int,int,long)>
<android.media.videoeditor.MediaArtistNativeHelper: int nativeRenderPreviewFrame(android.view.Surface,long,int,int)>
<android.media.videoeditor.MediaArtistNativeHelper: int nativeStopPreview()>
<android.media.videoeditor.MediaArtistNativeHelper: void _init(java.lang.String,java.lang.String)>
<android.media.videoeditor.MediaArtistNativeHelper: void nativeClearSurface(android.view.Surface)>
<android.media.videoeditor.MediaArtistNativeHelper: void nativePopulateSettings(android.media.videoeditor.MediaArtistNativeHelper$EditSettings,android.media.videoeditor.MediaArtistNativeHelper$PreviewClipProperties,android.media.videoeditor.MediaArtistNativeHelper$AudioSettings)>
<android.media.videoeditor.MediaArtistNativeHelper: void nativeStartPreview(android.view.Surface,long,long,int,boolean)>
<android.media.videoeditor.MediaArtistNativeHelper: void release()>
<android.media.videoeditor.MediaArtistNativeHelper: void stopEncoding()>
<android.media.videoeditor.VideoEditorProfile: android.media.videoeditor.VideoEditorProfile native_get_videoeditor_profile()>
<android.media.videoeditor.VideoEditorProfile: int native_get_videoeditor_export_level(int)>
<android.media.videoeditor.VideoEditorProfile: int native_get_videoeditor_export_profile(int)>
<android.media.videoeditor.VideoEditorProfile: void native_init()>
<android.mtp.MtpDatabase: void native_finalize()>
<android.mtp.MtpDatabase: void native_setup()>
<android.mtp.MtpDevice: android.mtp.MtpDeviceInfo native_get_device_info()>
<android.mtp.MtpDevice: android.mtp.MtpObjectInfo native_get_object_info(int)>
<android.mtp.MtpDevice: android.mtp.MtpStorageInfo native_get_storage_info(int)>
<android.mtp.MtpDevice: boolean native_delete_object(int)>
<android.mtp.MtpDevice: boolean native_import_file(int,java.lang.String)>
<android.mtp.MtpDevice: boolean native_open(java.lang.String,int)>
<android.mtp.MtpDevice: byte[] native_get_object(int,int)>
<android.mtp.MtpDevice: byte[] native_get_thumbnail(int)>
<android.mtp.MtpDevice: int[] native_get_object_handles(int,int,int)>
<android.mtp.MtpDevice: int[] native_get_storage_ids()>
<android.mtp.MtpDevice: long native_get_parent(int)>
<android.mtp.MtpDevice: long native_get_storage_id(int)>
<android.mtp.MtpDevice: void native_close()>
<android.mtp.MtpPropertyGroup: java.lang.String format_date_time(long)>
<android.mtp.MtpServer: void native_add_storage(android.mtp.MtpStorage)>
<android.mtp.MtpServer: void native_cleanup()>
<android.mtp.MtpServer: void native_remove_storage(int)>
<android.mtp.MtpServer: void native_run()>
<android.mtp.MtpServer: void native_send_object_added(int)>
<android.mtp.MtpServer: void native_send_object_removed(int)>
<android.mtp.MtpServer: void native_setup(android.mtp.MtpDatabase,boolean)>
<android.net.LocalSocketImpl: android.net.Credentials getPeerCredentials_native(java.io.FileDescriptor)>
<android.net.LocalSocketImpl: int available_native(java.io.FileDescriptor)>
<android.net.LocalSocketImpl: int getOption_native(java.io.FileDescriptor,int)>
<android.net.LocalSocketImpl: int readba_native(byte[],int,int,java.io.FileDescriptor)>
<android.net.LocalSocketImpl: int read_native(java.io.FileDescriptor)>
<android.net.LocalSocketImpl: java.io.FileDescriptor accept(java.io.FileDescriptor,android.net.LocalSocketImpl)>
<android.net.LocalSocketImpl: java.io.FileDescriptor create_native(boolean)>
<android.net.LocalSocketImpl: void bindLocal(java.io.FileDescriptor,java.lang.String,int)>
<android.net.LocalSocketImpl: void close_native(java.io.FileDescriptor)>
<android.net.LocalSocketImpl: void connectLocal(java.io.FileDescriptor,java.lang.String,int)>
<android.net.LocalSocketImpl: void listen_native(java.io.FileDescriptor,int)>
<android.net.LocalSocketImpl: void setOption_native(java.io.FileDescriptor,int,int,int)>
<android.net.LocalSocketImpl: void shutdown(java.io.FileDescriptor,boolean)>
<android.net.LocalSocketImpl: void writeba_native(byte[],int,int,java.io.FileDescriptor)>
<android.net.LocalSocketImpl: void write_native(int,java.io.FileDescriptor)>
<android.net.NetworkUtils: boolean releaseDhcpLease(java.lang.String)>
<android.net.NetworkUtils: boolean runDhcp(java.lang.String,android.net.DhcpInfoInternal)>
<android.net.NetworkUtils: boolean runDhcpRenew(java.lang.String,android.net.DhcpInfoInternal)>
<android.net.NetworkUtils: boolean stopDhcp(java.lang.String)>
<android.net.NetworkUtils: int disableInterface(java.lang.String)>
<android.net.NetworkUtils: int enableInterface(java.lang.String)>
<android.net.NetworkUtils: int resetConnections(java.lang.String,int)>
<android.net.NetworkUtils: java.lang.String getDhcpError()>
<android.net.rtp.AudioGroup: void nativeAdd(int,int,java.lang.String,int,java.lang.String,int)>
<android.net.rtp.AudioGroup: void nativeRemove(int)>
<android.net.rtp.AudioGroup: void nativeSendDtmf(int)>
<android.net.rtp.AudioGroup: void nativeSetMode(int)>
<android.net.rtp.RtpStream: int create(java.lang.String)>
<android.net.rtp.RtpStream: int dup()>
<android.net.rtp.RtpStream: void close()>
<android.net.TrafficStats: long getMobileRxBytes()>
<android.net.TrafficStats: long getMobileRxPackets()>
<android.net.TrafficStats: long getMobileTxBytes()>
<android.net.TrafficStats: long getMobileTxPackets()>
<android.net.TrafficStats: long getRxBytes(java.lang.String)>
<android.net.TrafficStats: long getRxPackets(java.lang.String)>
<android.net.TrafficStats: long getTotalRxBytes()>
<android.net.TrafficStats: long getTotalRxPackets()>
<android.net.TrafficStats: long getTotalTxBytes()>
<android.net.TrafficStats: long getTotalTxPackets()>
<android.net.TrafficStats: long getTxBytes(java.lang.String)>
<android.net.TrafficStats: long getTxPackets(java.lang.String)>
<android.net.TrafficStats: long getUidRxBytes(int)>
<android.net.TrafficStats: long getUidRxPackets(int)>
<android.net.TrafficStats: long getUidTcpRxBytes(int)>
<android.net.TrafficStats: long getUidTcpRxSegments(int)>
<android.net.TrafficStats: long getUidTcpTxBytes(int)>
<android.net.TrafficStats: long getUidTcpTxSegments(int)>
<android.net.TrafficStats: long getUidTxBytes(int)>
<android.net.TrafficStats: long getUidTxPackets(int)>
<android.net.TrafficStats: long getUidUdpRxBytes(int)>
<android.net.TrafficStats: long getUidUdpRxPackets(int)>
<android.net.TrafficStats: long getUidUdpTxBytes(int)>
<android.net.TrafficStats: long getUidUdpTxPackets(int)>
<android.net.wifi.WifiNative: boolean addToBlacklistCommand(java.lang.String)>
<android.net.wifi.WifiNative: boolean clearBlacklistCommand()>
<android.net.wifi.WifiNative: boolean connectToSupplicant()>
<android.net.wifi.WifiNative: boolean disableNetworkCommand(int)>
<android.net.wifi.WifiNative: boolean disconnectCommand()>
<android.net.wifi.WifiNative: boolean doBooleanCommand(java.lang.String)>
<android.net.wifi.WifiNative: boolean enableNetworkCommand(int,boolean)>
<android.net.wifi.WifiNative: boolean isDriverLoaded()>
<android.net.wifi.WifiNative: boolean killSupplicant()>
<android.net.wifi.WifiNative: boolean loadDriver()>
<android.net.wifi.WifiNative: boolean pingCommand()>
<android.net.wifi.WifiNative: boolean reassociateCommand()>
<android.net.wifi.WifiNative: boolean reconnectCommand()>
<android.net.wifi.WifiNative: boolean reloadConfigCommand()>
<android.net.wifi.WifiNative: boolean removeNetworkCommand(int)>
<android.net.wifi.WifiNative: boolean saveConfigCommand()>
<android.net.wifi.WifiNative: boolean scanCommand(boolean)>
<android.net.wifi.WifiNative: boolean setBandCommand(int)>
<android.net.wifi.WifiNative: boolean setBluetoothCoexistenceModeCommand(int)>
<android.net.wifi.WifiNative: boolean setBluetoothCoexistenceScanModeCommand(boolean)>
<android.net.wifi.WifiNative: boolean setCountryCodeCommand(java.lang.String)>
<android.net.wifi.WifiNative: boolean setNetworkVariableCommand(int,java.lang.String,java.lang.String)>
<android.net.wifi.WifiNative: boolean setPowerModeCommand(int)>
<android.net.wifi.WifiNative: boolean setScanModeCommand(boolean)>
<android.net.wifi.WifiNative: boolean setScanResultHandlingCommand(int)>
<android.net.wifi.WifiNative: boolean setSuspendOptimizationsCommand(boolean)>
<android.net.wifi.WifiNative: boolean startDriverCommand()>
<android.net.wifi.WifiNative: boolean startFilteringMulticastV4Packets()>
<android.net.wifi.WifiNative: boolean startFilteringMulticastV6Packets()>
<android.net.wifi.WifiNative: boolean startP2pSupplicant()>
<android.net.wifi.WifiNative: boolean startSupplicant()>
<android.net.wifi.WifiNative: boolean startWpsPbcCommand(java.lang.String)>
<android.net.wifi.WifiNative: boolean startWpsWithPinFromAccessPointCommand(java.lang.String,java.lang.String)>
<android.net.wifi.WifiNative: boolean stopDriverCommand()>
<android.net.wifi.WifiNative: boolean stopFilteringMulticastV4Packets()>
<android.net.wifi.WifiNative: boolean stopFilteringMulticastV6Packets()>
<android.net.wifi.WifiNative: boolean stopSupplicant()>
<android.net.wifi.WifiNative: boolean unloadDriver()>
<android.net.wifi.WifiNative: int addNetworkCommand()>
<android.net.wifi.WifiNative: int doIntCommand(java.lang.String)>
<android.net.wifi.WifiNative: int getBandCommand()>
<android.net.wifi.WifiNative: int getPowerModeCommand()>
<android.net.wifi.WifiNative: java.lang.String doStringCommand(java.lang.String)>
<android.net.wifi.WifiNative: java.lang.String getErrorString(int)>
<android.net.wifi.WifiNative: java.lang.String getMacAddressCommand()>
<android.net.wifi.WifiNative: java.lang.String getNetworkVariableCommand(int,java.lang.String)>
<android.net.wifi.WifiNative: java.lang.String listNetworksCommand()>
<android.net.wifi.WifiNative: java.lang.String scanResultsCommand()>
<android.net.wifi.WifiNative: java.lang.String startWpsWithPinFromDeviceCommand(java.lang.String)>
<android.net.wifi.WifiNative: java.lang.String statusCommand()>
<android.net.wifi.WifiNative: java.lang.String waitForEvent()>
<android.net.wifi.WifiNative: void closeSupplicantConnection()>
<android.net.wifi.WifiNative: void enableBackgroundScanCommand(boolean)>
<android.net.wifi.WifiNative: void setScanIntervalCommand(int)>
<android.nfc.NdefMessage: int parseNdefMessage(byte[])>
<android.nfc.NdefRecord: byte[] generate(short,short,byte[],byte[],byte[])>
<android.nfc.NdefRecord: int parseNdefRecord(byte[])>
<android.opengl.ETC1: boolean isValid(java.nio.Buffer)>
<android.opengl.ETC1: int getEncodedDataSize(int,int)>
<android.opengl.ETC1: int getHeight(java.nio.Buffer)>
<android.opengl.ETC1: int getWidth(java.nio.Buffer)>
<android.opengl.ETC1: void decodeBlock(java.nio.Buffer,java.nio.Buffer)>
<android.opengl.ETC1: void decodeImage(java.nio.Buffer,java.nio.Buffer,int,int,int,int)>
<android.opengl.ETC1: void encodeBlock(java.nio.Buffer,int,java.nio.Buffer)>
<android.opengl.ETC1: void encodeImage(java.nio.Buffer,int,int,int,int,java.nio.Buffer)>
<android.opengl.ETC1: void formatHeader(java.nio.Buffer,int,int)>
<android.opengl.GLES10Ext: int glQueryMatrixxOES(int[],int,int[],int)>
<android.opengl.GLES10Ext: int glQueryMatrixxOES(java.nio.IntBuffer,java.nio.IntBuffer)>
<android.opengl.GLES10Ext: void _nativeClassInit()>
<android.opengl.GLES10: int glGetError()>
<android.opengl.GLES10: java.lang.String glGetString(int)>
<android.opengl.GLES10: void glActiveTexture(int)>
<android.opengl.GLES10: void glAlphaFunc(int,float)>
<android.opengl.GLES10: void glAlphaFuncx(int,int)>
<android.opengl.GLES10: void glBindTexture(int,int)>
<android.opengl.GLES10: void glBlendFunc(int,int)>
<android.opengl.GLES10: void glClearColor(float,float,float,float)>
<android.opengl.GLES10: void glClearColorx(int,int,int,int)>
<android.opengl.GLES10: void glClearDepthf(float)>
<android.opengl.GLES10: void glClearDepthx(int)>
<android.opengl.GLES10: void glClear(int)>
<android.opengl.GLES10: void glClearStencil(int)>
<android.opengl.GLES10: void glClientActiveTexture(int)>
<android.opengl.GLES10: void glColor4f(float,float,float,float)>
<android.opengl.GLES10: void glColor4x(int,int,int,int)>
<android.opengl.GLES10: void glColorMask(boolean,boolean,boolean,boolean)>
<android.opengl.GLES10: void glColorPointerBounds(int,int,int,java.nio.Buffer,int)>
<android.opengl.GLES10: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glCopyTexImage2D(int,int,int,int,int,int,int,int)>
<android.opengl.GLES10: void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)>
<android.opengl.GLES10: void glCullFace(int)>
<android.opengl.GLES10: void glDeleteTextures(int,int[],int)>
<android.opengl.GLES10: void glDeleteTextures(int,java.nio.IntBuffer)>
<android.opengl.GLES10: void glDepthFunc(int)>
<android.opengl.GLES10: void glDepthMask(boolean)>
<android.opengl.GLES10: void glDepthRangef(float,float)>
<android.opengl.GLES10: void glDepthRangex(int,int)>
<android.opengl.GLES10: void glDisableClientState(int)>
<android.opengl.GLES10: void glDisable(int)>
<android.opengl.GLES10: void glDrawArrays(int,int,int)>
<android.opengl.GLES10: void glDrawElements(int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glEnableClientState(int)>
<android.opengl.GLES10: void glEnable(int)>
<android.opengl.GLES10: void glFinish()>
<android.opengl.GLES10: void glFlush()>
<android.opengl.GLES10: void glFogf(int,float)>
<android.opengl.GLES10: void glFogfv(int,float[],int)>
<android.opengl.GLES10: void glFogfv(int,java.nio.FloatBuffer)>
<android.opengl.GLES10: void glFogx(int,int)>
<android.opengl.GLES10: void glFogxv(int,int[],int)>
<android.opengl.GLES10: void glFogxv(int,java.nio.IntBuffer)>
<android.opengl.GLES10: void glFrontFace(int)>
<android.opengl.GLES10: void glFrustumf(float,float,float,float,float,float)>
<android.opengl.GLES10: void glFrustumx(int,int,int,int,int,int)>
<android.opengl.GLES10: void glGenTextures(int,int[],int)>
<android.opengl.GLES10: void glGenTextures(int,java.nio.IntBuffer)>
<android.opengl.GLES10: void glGetIntegerv(int,int[],int)>
<android.opengl.GLES10: void glGetIntegerv(int,java.nio.IntBuffer)>
<android.opengl.GLES10: void glHint(int,int)>
<android.opengl.GLES10: void glLightf(int,int,float)>
<android.opengl.GLES10: void glLightfv(int,int,float[],int)>
<android.opengl.GLES10: void glLightfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES10: void glLightModelf(int,float)>
<android.opengl.GLES10: void glLightModelfv(int,float[],int)>
<android.opengl.GLES10: void glLightModelfv(int,java.nio.FloatBuffer)>
<android.opengl.GLES10: void glLightModelx(int,int)>
<android.opengl.GLES10: void glLightModelxv(int,int[],int)>
<android.opengl.GLES10: void glLightModelxv(int,java.nio.IntBuffer)>
<android.opengl.GLES10: void glLightx(int,int,int)>
<android.opengl.GLES10: void glLightxv(int,int,int[],int)>
<android.opengl.GLES10: void glLightxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES10: void glLineWidth(float)>
<android.opengl.GLES10: void glLineWidthx(int)>
<android.opengl.GLES10: void glLoadIdentity()>
<android.opengl.GLES10: void glLoadMatrixf(float[],int)>
<android.opengl.GLES10: void glLoadMatrixf(java.nio.FloatBuffer)>
<android.opengl.GLES10: void glLoadMatrixx(int[],int)>
<android.opengl.GLES10: void glLoadMatrixx(java.nio.IntBuffer)>
<android.opengl.GLES10: void glLogicOp(int)>
<android.opengl.GLES10: void glMaterialf(int,int,float)>
<android.opengl.GLES10: void glMaterialfv(int,int,float[],int)>
<android.opengl.GLES10: void glMaterialfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES10: void glMaterialx(int,int,int)>
<android.opengl.GLES10: void glMaterialxv(int,int,int[],int)>
<android.opengl.GLES10: void glMaterialxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES10: void glMatrixMode(int)>
<android.opengl.GLES10: void glMultiTexCoord4f(int,float,float,float,float)>
<android.opengl.GLES10: void glMultiTexCoord4x(int,int,int,int,int)>
<android.opengl.GLES10: void glMultMatrixf(float[],int)>
<android.opengl.GLES10: void glMultMatrixf(java.nio.FloatBuffer)>
<android.opengl.GLES10: void glMultMatrixx(int[],int)>
<android.opengl.GLES10: void glMultMatrixx(java.nio.IntBuffer)>
<android.opengl.GLES10: void glNormal3f(float,float,float)>
<android.opengl.GLES10: void glNormal3x(int,int,int)>
<android.opengl.GLES10: void glNormalPointerBounds(int,int,java.nio.Buffer,int)>
<android.opengl.GLES10: void glOrthof(float,float,float,float,float,float)>
<android.opengl.GLES10: void glOrthox(int,int,int,int,int,int)>
<android.opengl.GLES10: void glPixelStorei(int,int)>
<android.opengl.GLES10: void glPointSize(float)>
<android.opengl.GLES10: void glPointSizex(int)>
<android.opengl.GLES10: void glPolygonOffset(float,float)>
<android.opengl.GLES10: void glPolygonOffsetx(int,int)>
<android.opengl.GLES10: void glPopMatrix()>
<android.opengl.GLES10: void glPushMatrix()>
<android.opengl.GLES10: void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glRotatef(float,float,float,float)>
<android.opengl.GLES10: void glRotatex(int,int,int,int)>
<android.opengl.GLES10: void glSampleCoverage(float,boolean)>
<android.opengl.GLES10: void glSampleCoveragex(int,boolean)>
<android.opengl.GLES10: void glScalef(float,float,float)>
<android.opengl.GLES10: void glScalex(int,int,int)>
<android.opengl.GLES10: void glScissor(int,int,int,int)>
<android.opengl.GLES10: void glShadeModel(int)>
<android.opengl.GLES10: void glStencilFunc(int,int,int)>
<android.opengl.GLES10: void glStencilMask(int)>
<android.opengl.GLES10: void glStencilOp(int,int,int)>
<android.opengl.GLES10: void glTexCoordPointerBounds(int,int,int,java.nio.Buffer,int)>
<android.opengl.GLES10: void glTexEnvf(int,int,float)>
<android.opengl.GLES10: void glTexEnvfv(int,int,float[],int)>
<android.opengl.GLES10: void glTexEnvfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES10: void glTexEnvx(int,int,int)>
<android.opengl.GLES10: void glTexEnvxv(int,int,int[],int)>
<android.opengl.GLES10: void glTexEnvxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES10: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glTexParameterf(int,int,float)>
<android.opengl.GLES10: void glTexParameterx(int,int,int)>
<android.opengl.GLES10: void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glTranslatef(float,float,float)>
<android.opengl.GLES10: void glTranslatex(int,int,int)>
<android.opengl.GLES10: void glVertexPointerBounds(int,int,int,java.nio.Buffer,int)>
<android.opengl.GLES10: void glViewport(int,int,int,int)>
<android.opengl.GLES10: void _nativeClassInit()>
<android.opengl.GLES11: boolean glIsBuffer(int)>
<android.opengl.GLES11: boolean glIsEnabled(int)>
<android.opengl.GLES11: boolean glIsTexture(int)>
<android.opengl.GLES11Ext: boolean glIsFramebufferOES(int)>
<android.opengl.GLES11Ext: boolean glIsRenderbufferOES(int)>
<android.opengl.GLES11Ext: int glCheckFramebufferStatusOES(int)>
<android.opengl.GLES11Ext: void glAlphaFuncxOES(int,int)>
<android.opengl.GLES11Ext: void glBindFramebufferOES(int,int)>
<android.opengl.GLES11Ext: void glBindRenderbufferOES(int,int)>
<android.opengl.GLES11Ext: void glBlendEquationOES(int)>
<android.opengl.GLES11Ext: void glBlendEquationSeparateOES(int,int)>
<android.opengl.GLES11Ext: void glBlendFuncSeparateOES(int,int,int,int)>
<android.opengl.GLES11Ext: void glClearColorxOES(int,int,int,int)>
<android.opengl.GLES11Ext: void glClearDepthfOES(float)>
<android.opengl.GLES11Ext: void glClearDepthxOES(int)>
<android.opengl.GLES11Ext: void glClipPlanefOES(int,float[],int)>
<android.opengl.GLES11Ext: void glClipPlanefOES(int,java.nio.FloatBuffer)>
<android.opengl.GLES11Ext: void glClipPlanexOES(int,int[],int)>
<android.opengl.GLES11Ext: void glClipPlanexOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glColor4xOES(int,int,int,int)>
<android.opengl.GLES11Ext: void glCurrentPaletteMatrixOES(int)>
<android.opengl.GLES11Ext: void glDeleteFramebuffersOES(int,int[],int)>
<android.opengl.GLES11Ext: void glDeleteFramebuffersOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glDeleteRenderbuffersOES(int,int[],int)>
<android.opengl.GLES11Ext: void glDeleteRenderbuffersOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glDepthRangefOES(float,float)>
<android.opengl.GLES11Ext: void glDepthRangexOES(int,int)>
<android.opengl.GLES11Ext: void glDrawTexfOES(float,float,float,float,float)>
<android.opengl.GLES11Ext: void glDrawTexfvOES(float[],int)>
<android.opengl.GLES11Ext: void glDrawTexfvOES(java.nio.FloatBuffer)>
<android.opengl.GLES11Ext: void glDrawTexiOES(int,int,int,int,int)>
<android.opengl.GLES11Ext: void glDrawTexivOES(int[],int)>
<android.opengl.GLES11Ext: void glDrawTexivOES(java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glDrawTexsOES(short,short,short,short,short)>
<android.opengl.GLES11Ext: void glDrawTexsvOES(java.nio.ShortBuffer)>
<android.opengl.GLES11Ext: void glDrawTexsvOES(short[],int)>
<android.opengl.GLES11Ext: void glDrawTexxOES(int,int,int,int,int)>
<android.opengl.GLES11Ext: void glDrawTexxvOES(int[],int)>
<android.opengl.GLES11Ext: void glDrawTexxvOES(java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glEGLImageTargetRenderbufferStorageOES(int,java.nio.Buffer)>
<android.opengl.GLES11Ext: void glEGLImageTargetTexture2DOES(int,java.nio.Buffer)>
<android.opengl.GLES11Ext: void glFogxOES(int,int)>
<android.opengl.GLES11Ext: void glFogxvOES(int,int[],int)>
<android.opengl.GLES11Ext: void glFogxvOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glFramebufferRenderbufferOES(int,int,int,int)>
<android.opengl.GLES11Ext: void glFramebufferTexture2DOES(int,int,int,int,int)>
<android.opengl.GLES11Ext: void glFrustumfOES(float,float,float,float,float,float)>
<android.opengl.GLES11Ext: void glFrustumxOES(int,int,int,int,int,int)>
<android.opengl.GLES11Ext: void glGenerateMipmapOES(int)>
<android.opengl.GLES11Ext: void glGenFramebuffersOES(int,int[],int)>
<android.opengl.GLES11Ext: void glGenFramebuffersOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGenRenderbuffersOES(int,int[],int)>
<android.opengl.GLES11Ext: void glGenRenderbuffersOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetClipPlanefOES(int,float[],int)>
<android.opengl.GLES11Ext: void glGetClipPlanefOES(int,java.nio.FloatBuffer)>
<android.opengl.GLES11Ext: void glGetClipPlanexOES(int,int[],int)>
<android.opengl.GLES11Ext: void glGetClipPlanexOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetFixedvOES(int,int[],int)>
<android.opengl.GLES11Ext: void glGetFixedvOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetFramebufferAttachmentParameterivOES(int,int,int,int[],int)>
<android.opengl.GLES11Ext: void glGetFramebufferAttachmentParameterivOES(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetLightxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glGetLightxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetMaterialxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glGetMaterialxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetRenderbufferParameterivOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glGetRenderbufferParameterivOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetTexEnvxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glGetTexEnvxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetTexGenfvOES(int,int,float[],int)>
<android.opengl.GLES11Ext: void glGetTexGenfvOES(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES11Ext: void glGetTexGenivOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glGetTexGenivOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetTexGenxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glGetTexGenxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetTexParameterxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glGetTexParameterxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glLightModelxOES(int,int)>
<android.opengl.GLES11Ext: void glLightModelxvOES(int,int[],int)>
<android.opengl.GLES11Ext: void glLightModelxvOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glLightxOES(int,int,int)>
<android.opengl.GLES11Ext: void glLightxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glLightxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glLineWidthxOES(int)>
<android.opengl.GLES11Ext: void glLoadMatrixxOES(int[],int)>
<android.opengl.GLES11Ext: void glLoadMatrixxOES(java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glLoadPaletteFromModelViewMatrixOES()>
<android.opengl.GLES11Ext: void glMaterialxOES(int,int,int)>
<android.opengl.GLES11Ext: void glMaterialxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glMaterialxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glMatrixIndexPointerOESBounds(int,int,int,java.nio.Buffer,int)>
<android.opengl.GLES11Ext: void glMultiTexCoord4xOES(int,int,int,int,int)>
<android.opengl.GLES11Ext: void glMultMatrixxOES(int[],int)>
<android.opengl.GLES11Ext: void glMultMatrixxOES(java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glNormal3xOES(int,int,int)>
<android.opengl.GLES11Ext: void glOrthofOES(float,float,float,float,float,float)>
<android.opengl.GLES11Ext: void glOrthoxOES(int,int,int,int,int,int)>
<android.opengl.GLES11Ext: void glPointParameterxOES(int,int)>
<android.opengl.GLES11Ext: void glPointParameterxvOES(int,int[],int)>
<android.opengl.GLES11Ext: void glPointParameterxvOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glPointSizexOES(int)>
<android.opengl.GLES11Ext: void glPolygonOffsetxOES(int,int)>
<android.opengl.GLES11Ext: void glRenderbufferStorageOES(int,int,int,int)>
<android.opengl.GLES11Ext: void glRotatexOES(int,int,int,int)>
<android.opengl.GLES11Ext: void glSampleCoveragexOES(int,boolean)>
<android.opengl.GLES11Ext: void glScalexOES(int,int,int)>
<android.opengl.GLES11Ext: void glTexEnvxOES(int,int,int)>
<android.opengl.GLES11Ext: void glTexEnvxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glTexEnvxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glTexGenfOES(int,int,float)>
<android.opengl.GLES11Ext: void glTexGenfvOES(int,int,float[],int)>
<android.opengl.GLES11Ext: void glTexGenfvOES(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES11Ext: void glTexGeniOES(int,int,int)>
<android.opengl.GLES11Ext: void glTexGenivOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glTexGenivOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glTexGenxOES(int,int,int)>
<android.opengl.GLES11Ext: void glTexGenxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glTexGenxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glTexParameterxOES(int,int,int)>
<android.opengl.GLES11Ext: void glTexParameterxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glTexParameterxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glTranslatexOES(int,int,int)>
<android.opengl.GLES11Ext: void glWeightPointerOESBounds(int,int,int,java.nio.Buffer,int)>
<android.opengl.GLES11Ext: void _nativeClassInit()>
<android.opengl.GLES11: void glBindBuffer(int,int)>
<android.opengl.GLES11: void glBufferData(int,int,java.nio.Buffer,int)>
<android.opengl.GLES11: void glBufferSubData(int,int,int,java.nio.Buffer)>
<android.opengl.GLES11: void glClipPlanef(int,float[],int)>
<android.opengl.GLES11: void glClipPlanef(int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glClipPlanex(int,int[],int)>
<android.opengl.GLES11: void glClipPlanex(int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glColor4ub(byte,byte,byte,byte)>
<android.opengl.GLES11: void glColorPointer(int,int,int,int)>
<android.opengl.GLES11: void glDeleteBuffers(int,int[],int)>
<android.opengl.GLES11: void glDeleteBuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glDrawElements(int,int,int,int)>
<android.opengl.GLES11: void glGenBuffers(int,int[],int)>
<android.opengl.GLES11: void glGenBuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetBooleanv(int,boolean[],int)>
<android.opengl.GLES11: void glGetBooleanv(int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetBufferParameteriv(int,int,int[],int)>
<android.opengl.GLES11: void glGetBufferParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetClipPlanef(int,float[],int)>
<android.opengl.GLES11: void glGetClipPlanef(int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glGetClipPlanex(int,int[],int)>
<android.opengl.GLES11: void glGetClipPlanex(int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetFixedv(int,int[],int)>
<android.opengl.GLES11: void glGetFixedv(int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetFloatv(int,float[],int)>
<android.opengl.GLES11: void glGetFloatv(int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glGetLightfv(int,int,float[],int)>
<android.opengl.GLES11: void glGetLightfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glGetLightxv(int,int,int[],int)>
<android.opengl.GLES11: void glGetLightxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetMaterialfv(int,int,float[],int)>
<android.opengl.GLES11: void glGetMaterialfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glGetMaterialxv(int,int,int[],int)>
<android.opengl.GLES11: void glGetMaterialxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetTexEnvfv(int,int,float[],int)>
<android.opengl.GLES11: void glGetTexEnvfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glGetTexEnviv(int,int,int[],int)>
<android.opengl.GLES11: void glGetTexEnviv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetTexEnvxv(int,int,int[],int)>
<android.opengl.GLES11: void glGetTexEnvxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetTexParameterfv(int,int,float[],int)>
<android.opengl.GLES11: void glGetTexParameterfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glGetTexParameteriv(int,int,int[],int)>
<android.opengl.GLES11: void glGetTexParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetTexParameterxv(int,int,int[],int)>
<android.opengl.GLES11: void glGetTexParameterxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glNormalPointer(int,int,int)>
<android.opengl.GLES11: void glPointParameterf(int,float)>
<android.opengl.GLES11: void glPointParameterfv(int,float[],int)>
<android.opengl.GLES11: void glPointParameterfv(int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glPointParameterx(int,int)>
<android.opengl.GLES11: void glPointParameterxv(int,int[],int)>
<android.opengl.GLES11: void glPointParameterxv(int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glPointSizePointerOESBounds(int,int,java.nio.Buffer,int)>
<android.opengl.GLES11: void glTexCoordPointer(int,int,int,int)>
<android.opengl.GLES11: void glTexEnvi(int,int,int)>
<android.opengl.GLES11: void glTexEnviv(int,int,int[],int)>
<android.opengl.GLES11: void glTexEnviv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glTexParameterfv(int,int,float[],int)>
<android.opengl.GLES11: void glTexParameterfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glTexParameteri(int,int,int)>
<android.opengl.GLES11: void glTexParameteriv(int,int,int[],int)>
<android.opengl.GLES11: void glTexParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glTexParameterxv(int,int,int[],int)>
<android.opengl.GLES11: void glTexParameterxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glVertexPointer(int,int,int,int)>
<android.opengl.GLES11: void _nativeClassInit()>
<android.opengl.GLES20: boolean glIsBuffer(int)>
<android.opengl.GLES20: boolean glIsEnabled(int)>
<android.opengl.GLES20: boolean glIsFramebuffer(int)>
<android.opengl.GLES20: boolean glIsProgram(int)>
<android.opengl.GLES20: boolean glIsRenderbuffer(int)>
<android.opengl.GLES20: boolean glIsShader(int)>
<android.opengl.GLES20: boolean glIsTexture(int)>
<android.opengl.GLES20: int glCheckFramebufferStatus(int)>
<android.opengl.GLES20: int glCreateProgram()>
<android.opengl.GLES20: int glCreateShader(int)>
<android.opengl.GLES20: int glGetAttribLocation(int,java.lang.String)>
<android.opengl.GLES20: int glGetError()>
<android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>
<android.opengl.GLES20: java.lang.String glGetProgramInfoLog(int)>
<android.opengl.GLES20: java.lang.String glGetShaderInfoLog(int)>
<android.opengl.GLES20: java.lang.String glGetString(int)>
<android.opengl.GLES20: void glActiveTexture(int)>
<android.opengl.GLES20: void glAttachShader(int,int)>
<android.opengl.GLES20: void glBindAttribLocation(int,int,java.lang.String)>
<android.opengl.GLES20: void glBindBuffer(int,int)>
<android.opengl.GLES20: void glBindFramebuffer(int,int)>
<android.opengl.GLES20: void glBindRenderbuffer(int,int)>
<android.opengl.GLES20: void glBindTexture(int,int)>
<android.opengl.GLES20: void glBlendColor(float,float,float,float)>
<android.opengl.GLES20: void glBlendEquation(int)>
<android.opengl.GLES20: void glBlendEquationSeparate(int,int)>
<android.opengl.GLES20: void glBlendFunc(int,int)>
<android.opengl.GLES20: void glBlendFuncSeparate(int,int,int,int)>
<android.opengl.GLES20: void glBufferData(int,int,java.nio.Buffer,int)>
<android.opengl.GLES20: void glBufferSubData(int,int,int,java.nio.Buffer)>
<android.opengl.GLES20: void glClearColor(float,float,float,float)>
<android.opengl.GLES20: void glClearDepthf(float)>
<android.opengl.GLES20: void glClear(int)>
<android.opengl.GLES20: void glClearStencil(int)>
<android.opengl.GLES20: void glColorMask(boolean,boolean,boolean,boolean)>
<android.opengl.GLES20: void glCompileShader(int)>
<android.opengl.GLES20: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES20: void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES20: void glCopyTexImage2D(int,int,int,int,int,int,int,int)>
<android.opengl.GLES20: void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)>
<android.opengl.GLES20: void glCullFace(int)>
<android.opengl.GLES20: void glDeleteBuffers(int,int[],int)>
<android.opengl.GLES20: void glDeleteBuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glDeleteFramebuffers(int,int[],int)>
<android.opengl.GLES20: void glDeleteFramebuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glDeleteProgram(int)>
<android.opengl.GLES20: void glDeleteRenderbuffers(int,int[],int)>
<android.opengl.GLES20: void glDeleteRenderbuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glDeleteShader(int)>
<android.opengl.GLES20: void glDeleteTextures(int,int[],int)>
<android.opengl.GLES20: void glDeleteTextures(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glDepthFunc(int)>
<android.opengl.GLES20: void glDepthMask(boolean)>
<android.opengl.GLES20: void glDepthRangef(float,float)>
<android.opengl.GLES20: void glDetachShader(int,int)>
<android.opengl.GLES20: void glDisable(int)>
<android.opengl.GLES20: void glDisableVertexAttribArray(int)>
<android.opengl.GLES20: void glDrawArrays(int,int,int)>
<android.opengl.GLES20: void glDrawElements(int,int,int,int)>
<android.opengl.GLES20: void glDrawElements(int,int,int,java.nio.Buffer)>
<android.opengl.GLES20: void glEnable(int)>
<android.opengl.GLES20: void glEnableVertexAttribArray(int)>
<android.opengl.GLES20: void glFinish()>
<android.opengl.GLES20: void glFlush()>
<android.opengl.GLES20: void glFramebufferRenderbuffer(int,int,int,int)>
<android.opengl.GLES20: void glFramebufferTexture2D(int,int,int,int,int)>
<android.opengl.GLES20: void glFrontFace(int)>
<android.opengl.GLES20: void glGenBuffers(int,int[],int)>
<android.opengl.GLES20: void glGenBuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGenerateMipmap(int)>
<android.opengl.GLES20: void glGenFramebuffers(int,int[],int)>
<android.opengl.GLES20: void glGenFramebuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGenRenderbuffers(int,int[],int)>
<android.opengl.GLES20: void glGenRenderbuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGenTextures(int,int[],int)>
<android.opengl.GLES20: void glGenTextures(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetActiveAttrib(int,int,int,int[],int,int[],int,int[],int,byte[],int)>
<android.opengl.GLES20: void glGetActiveAttrib(int,int,int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,byte)>
<android.opengl.GLES20: void glGetActiveUniform(int,int,int,int[],int,int[],int,int[],int,byte[],int)>
<android.opengl.GLES20: void glGetActiveUniform(int,int,int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,byte)>
<android.opengl.GLES20: void glGetAttachedShaders(int,int,int[],int,int[],int)>
<android.opengl.GLES20: void glGetAttachedShaders(int,int,java.nio.IntBuffer,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetBooleanv(int,boolean[],int)>
<android.opengl.GLES20: void glGetBooleanv(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetBufferParameteriv(int,int,int[],int)>
<android.opengl.GLES20: void glGetBufferParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetFloatv(int,float[],int)>
<android.opengl.GLES20: void glGetFloatv(int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glGetFramebufferAttachmentParameteriv(int,int,int,int[],int)>
<android.opengl.GLES20: void glGetFramebufferAttachmentParameteriv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetIntegerv(int,int[],int)>
<android.opengl.GLES20: void glGetIntegerv(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetProgramiv(int,int,int[],int)>
<android.opengl.GLES20: void glGetProgramiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetRenderbufferParameteriv(int,int,int[],int)>
<android.opengl.GLES20: void glGetRenderbufferParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetShaderiv(int,int,int[],int)>
<android.opengl.GLES20: void glGetShaderiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetShaderPrecisionFormat(int,int,int[],int,int[],int)>
<android.opengl.GLES20: void glGetShaderPrecisionFormat(int,int,java.nio.IntBuffer,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetShaderSource(int,int,int[],int,byte[],int)>
<android.opengl.GLES20: void glGetShaderSource(int,int,java.nio.IntBuffer,byte)>
<android.opengl.GLES20: void glGetTexParameterfv(int,int,float[],int)>
<android.opengl.GLES20: void glGetTexParameterfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glGetTexParameteriv(int,int,int[],int)>
<android.opengl.GLES20: void glGetTexParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetUniformfv(int,int,float[],int)>
<android.opengl.GLES20: void glGetUniformfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glGetUniformiv(int,int,int[],int)>
<android.opengl.GLES20: void glGetUniformiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetVertexAttribfv(int,int,float[],int)>
<android.opengl.GLES20: void glGetVertexAttribfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glGetVertexAttribiv(int,int,int[],int)>
<android.opengl.GLES20: void glGetVertexAttribiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glHint(int,int)>
<android.opengl.GLES20: void glLineWidth(float)>
<android.opengl.GLES20: void glLinkProgram(int)>
<android.opengl.GLES20: void glPixelStorei(int,int)>
<android.opengl.GLES20: void glPolygonOffset(float,float)>
<android.opengl.GLES20: void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES20: void glReleaseShaderCompiler()>
<android.opengl.GLES20: void glRenderbufferStorage(int,int,int,int)>
<android.opengl.GLES20: void glSampleCoverage(float,boolean)>
<android.opengl.GLES20: void glScissor(int,int,int,int)>
<android.opengl.GLES20: void glShaderBinary(int,int[],int,int,java.nio.Buffer,int)>
<android.opengl.GLES20: void glShaderBinary(int,java.nio.IntBuffer,int,java.nio.Buffer,int)>
<android.opengl.GLES20: void glShaderSource(int,java.lang.String)>
<android.opengl.GLES20: void glStencilFunc(int,int,int)>
<android.opengl.GLES20: void glStencilFuncSeparate(int,int,int,int)>
<android.opengl.GLES20: void glStencilMask(int)>
<android.opengl.GLES20: void glStencilMaskSeparate(int,int)>
<android.opengl.GLES20: void glStencilOp(int,int,int)>
<android.opengl.GLES20: void glStencilOpSeparate(int,int,int,int)>
<android.opengl.GLES20: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES20: void glTexParameterf(int,int,float)>
<android.opengl.GLES20: void glTexParameterfv(int,int,float[],int)>
<android.opengl.GLES20: void glTexParameterfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glTexParameteri(int,int,int)>
<android.opengl.GLES20: void glTexParameteriv(int,int,int[],int)>
<android.opengl.GLES20: void glTexParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES20: void glUniform1f(int,float)>
<android.opengl.GLES20: void glUniform1fv(int,int,float[],int)>
<android.opengl.GLES20: void glUniform1fv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glUniform1i(int,int)>
<android.opengl.GLES20: void glUniform1iv(int,int,int[],int)>
<android.opengl.GLES20: void glUniform1iv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glUniform2f(int,float,float)>
<android.opengl.GLES20: void glUniform2fv(int,int,float[],int)>
<android.opengl.GLES20: void glUniform2fv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glUniform2i(int,int,int)>
<android.opengl.GLES20: void glUniform2iv(int,int,int[],int)>
<android.opengl.GLES20: void glUniform2iv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glUniform3f(int,float,float,float)>
<android.opengl.GLES20: void glUniform3fv(int,int,float[],int)>
<android.opengl.GLES20: void glUniform3fv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glUniform3i(int,int,int,int)>
<android.opengl.GLES20: void glUniform3iv(int,int,int[],int)>
<android.opengl.GLES20: void glUniform3iv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glUniform4f(int,float,float,float,float)>
<android.opengl.GLES20: void glUniform4fv(int,int,float[],int)>
<android.opengl.GLES20: void glUniform4fv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glUniform4i(int,int,int,int,int)>
<android.opengl.GLES20: void glUniform4iv(int,int,int[],int)>
<android.opengl.GLES20: void glUniform4iv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glUniformMatrix2fv(int,int,boolean,float[],int)>
<android.opengl.GLES20: void glUniformMatrix2fv(int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glUniformMatrix3fv(int,int,boolean,float[],int)>
<android.opengl.GLES20: void glUniformMatrix3fv(int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glUniformMatrix4fv(int,int,boolean,float[],int)>
<android.opengl.GLES20: void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glUseProgram(int)>
<android.opengl.GLES20: void glValidateProgram(int)>
<android.opengl.GLES20: void glVertexAttrib1f(int,float)>
<android.opengl.GLES20: void glVertexAttrib1fv(int,float[],int)>
<android.opengl.GLES20: void glVertexAttrib1fv(int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glVertexAttrib2f(int,float,float)>
<android.opengl.GLES20: void glVertexAttrib2fv(int,float[],int)>
<android.opengl.GLES20: void glVertexAttrib2fv(int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glVertexAttrib3f(int,float,float,float)>
<android.opengl.GLES20: void glVertexAttrib3fv(int,float[],int)>
<android.opengl.GLES20: void glVertexAttrib3fv(int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glVertexAttrib4f(int,float,float,float,float)>
<android.opengl.GLES20: void glVertexAttrib4fv(int,float[],int)>
<android.opengl.GLES20: void glVertexAttrib4fv(int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glVertexAttribPointerBounds(int,int,int,boolean,int,java.nio.Buffer,int)>
<android.opengl.GLES20: void glVertexAttribPointer(int,int,int,boolean,int,int)>
<android.opengl.GLES20: void glViewport(int,int,int,int)>
<android.opengl.GLES20: void _nativeClassInit()>
<android.opengl.GLUtils: int native_getInternalFormat(android.graphics.Bitmap)>
<android.opengl.GLUtils: int native_getType(android.graphics.Bitmap)>
<android.opengl.GLUtils: int native_texImage2D(int,int,int,android.graphics.Bitmap,int,int)>
<android.opengl.GLUtils: int native_texSubImage2D(int,int,int,int,android.graphics.Bitmap,int,int)>
<android.opengl.GLUtils: void nativeClassInit()>
<android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>
<android.opengl.Matrix: void multiplyMV(float[],int,float[],int,float[],int)>
<android.opengl.Visibility: int frustumCullSpheres(float[],int,float[],int,int,int[],int,int)>
<android.opengl.Visibility: int visibilityTest(float[],int,float[],int,char[],int,int)>
<android.opengl.Visibility: void computeBoundingSphere(float[],int,int,float[],int)>
<android.os.Binder: int getCallingPid()>
<android.os.Binder: int getCallingUid()>
<android.os.Binder: int getThreadStrictModePolicy()>
<android.os.Binder: long clearCallingIdentity()>
<android.os.BinderProxy: boolean isBinderAlive()>
<android.os.BinderProxy: boolean pingBinder()>
<android.os.BinderProxy: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>
<android.os.BinderProxy: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>
<android.os.BinderProxy: java.lang.String getInterfaceDescriptor()>
<android.os.BinderProxy: void destroy()>
<android.os.BinderProxy: void linkToDeath(android.os.IBinder$DeathRecipient,int)>
<android.os.Binder: void destroy()>
<android.os.Binder: void flushPendingCommands()>
<android.os.Binder: void init()>
<android.os.Binder: void joinThreadPool()>
<android.os.Binder: void restoreCallingIdentity(long)>
<android.os.Binder: void setThreadStrictModePolicy(int)>
<android.os.Debug: int getBinderDeathObjectCount()>
<android.os.Debug: int getBinderLocalObjectCount()>
<android.os.Debug: int getBinderProxyObjectCount()>
<android.os.Debug: int getBinderReceivedTransactions()>
<android.os.Debug: int getBinderSentTransactions()>
<android.os.Debug: long getNativeHeapAllocatedSize()>
<android.os.Debug: long getNativeHeapFreeSize()>
<android.os.Debug: long getNativeHeapSize()>
<android.os.Debug: long getPss()>
<android.os.Debug: long getPss(int)>
<android.os.Debug: void dumpNativeHeap(java.io.FileDescriptor)>
<android.os.Debug: void getMemoryInfo(android.os.Debug$MemoryInfo)>
<android.os.Debug: void getMemoryInfo(int,android.os.Debug$MemoryInfo)>
<android.os.FileObserver$ObserverThread: int init()>
<android.os.FileObserver$ObserverThread: int startWatching(int,java.lang.String,int)>
<android.os.FileObserver$ObserverThread: void observe(int)>
<android.os.FileObserver$ObserverThread: void stopWatching(int,int)>
<android.os.FileUtils: boolean getFileStatusNative(java.lang.String,android.os.FileUtils$FileStatus)>
<android.os.FileUtils: int getFatVolumeId(java.lang.String)>
<android.os.FileUtils: int getPermissions(java.lang.String,int[])>
<android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>
<android.os.FileUtils: int setUMask(int)>
<android.os.MemoryFile: int native_get_size(java.io.FileDescriptor)>
<android.os.MemoryFile: int native_mmap(java.io.FileDescriptor,int,int)>
<android.os.MemoryFile: int native_read(java.io.FileDescriptor,int,byte[],int,int,int,boolean)>
<android.os.MemoryFile: java.io.FileDescriptor native_open(java.lang.String,int)>
<android.os.MemoryFile: void native_close(java.io.FileDescriptor)>
<android.os.MemoryFile: void native_munmap(int,int)>
<android.os.MemoryFile: void native_pin(java.io.FileDescriptor,boolean)>
<android.os.MemoryFile: void native_write(java.io.FileDescriptor,int,byte[],int,int,int,boolean)>
<android.os.MessageQueue: void nativeDestroy()>
<android.os.MessageQueue: void nativeInit()>
<android.os.MessageQueue: void nativePollOnce(int,int)>
<android.os.MessageQueue: void nativeWake(int)>
<android.os.Parcel: android.os.IBinder readStrongBinder()>
<android.os.Parcel: boolean hasFileDescriptors()>
<android.os.Parcel: boolean pushAllowFds(boolean)>
<android.os.Parcel: byte[] createByteArray()>
<android.os.Parcel: byte[] marshall()>
<android.os.Parcel: double readDouble()>
<android.os.ParcelFileDescriptor: int getFdNative()>
<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptorFromFd(int)>
<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptorFromFdNoDup(int)>
<android.os.ParcelFileDescriptor: long getStatSize()>
<android.os.ParcelFileDescriptor: long seekTo(long)>
<android.os.ParcelFileDescriptor: void createPipeNative(java.io.FileDescriptor[])>
<android.os.Parcel: float readFloat()>
<android.os.Parcel: int dataAvail()>
<android.os.Parcel: int dataCapacity()>
<android.os.Parcel: int dataPosition()>
<android.os.Parcel: int dataSize()>
<android.os.Parcel: int readInt()>
<android.os.Parcel: java.io.FileDescriptor dupFileDescriptor(java.io.FileDescriptor)>
<android.os.Parcel: java.io.FileDescriptor internalReadFileDescriptor()>
<android.os.Parcel: java.io.FileDescriptor openFileDescriptor(java.lang.String,int)>
<android.os.Parcel: java.lang.String readString()>
<android.os.Parcel: long readLong()>
<android.os.Parcel: void appendFrom(android.os.Parcel,int,int)>
<android.os.Parcel: void clearFileDescriptor(java.io.FileDescriptor)>
<android.os.Parcel: void closeFileDescriptor(java.io.FileDescriptor)>
<android.os.Parcel: void destroy()>
<android.os.Parcel: void enforceInterface(java.lang.String)>
<android.os.Parcel: void freeBuffer()>
<android.os.Parcel: void init(int)>
<android.os.Parcel: void restoreAllowFds(boolean)>
<android.os.Parcel: void setDataCapacity(int)>
<android.os.Parcel: void setDataPosition(int)>
<android.os.Parcel: void setDataSize(int)>
<android.os.Parcel: void unmarshall(byte[],int,int)>
<android.os.Parcel: void writeDouble(double)>
<android.os.Parcel: void writeFileDescriptor(java.io.FileDescriptor)>
<android.os.Parcel: void writeFloat(float)>
<android.os.Parcel: void writeInterfaceToken(java.lang.String)>
<android.os.Parcel: void writeInt(int)>
<android.os.Parcel: void writeLong(long)>
<android.os.Parcel: void writeNative(byte[],int,int)>
<android.os.Parcel: void writeString(java.lang.String)>
<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>
<android.os.Power: int setLastUserActivityTimeout(long)>
<android.os.Power: int setScreenState(boolean)>
<android.os.Power: void acquireWakeLock(int,java.lang.String)>
<android.os.Power: void rebootNative(java.lang.String)>
<android.os.Power: void releaseWakeLock(java.lang.String)>
<android.os.Power: void shutdown()>
<android.os.Process: boolean parseProcLine(byte[],int,int,int[],java.lang.String[],long[],float[])>
<android.os.Process: boolean readProcFile(java.lang.String,int[],java.lang.String[],long[],float[])>
<android.os.Process: boolean setOomAdj(int,int)>
<android.os.Process: int getGidForName(java.lang.String)>
<android.os.Process: int[] getPids(java.lang.String,int[])>
<android.os.Process: int getThreadPriority(int)>
<android.os.Process: int getUidForName(java.lang.String)>
<android.os.Process: int myPid()>
<android.os.Process: int myTid()>
<android.os.Process: int myUid()>
<android.os.Process: int setGid(int)>
<android.os.Process: int setUid(int)>
<android.os.Process: long getElapsedCpuTime()>
<android.os.Process: long getFreeMemory()>
<android.os.Process: long getPss(int)>
<android.os.Process: void readProcLines(java.lang.String,java.lang.String[],long[])>
<android.os.Process: void sendSignal(int,int)>
<android.os.Process: void sendSignalQuiet(int,int)>
<android.os.Process: void setArgV0(java.lang.String)>
<android.os.Process: void setCanSelfBackground(boolean)>
<android.os.Process: void setProcessGroup(int,int)>
<android.os.Process: void setThreadGroup(int,int)>
<android.os.Process: void setThreadPriority(int)>
<android.os.Process: void setThreadPriority(int,int)>
<android.os.StatFs: int getAvailableBlocks()>
<android.os.StatFs: int getBlockCount()>
<android.os.StatFs: int getBlockSize()>
<android.os.StatFs: int getFreeBlocks()>
<android.os.StatFs: void native_finalize()>
<android.os.StatFs: void native_restat(java.lang.String)>
<android.os.StatFs: void native_setup(java.lang.String)>
<android.os.SystemClock: boolean setCurrentTimeMillis(long)>
<android.os.SystemClock: long currentThreadTimeMicro()>
<android.os.SystemClock: long currentThreadTimeMillis()>
<android.os.SystemClock: long currentTimeMicro()>
<android.os.SystemClock: long elapsedRealtime()>
<android.os.SystemClock: long uptimeMillis()>
<android.os.SystemProperties: boolean native_get_boolean(java.lang.String,boolean)>
<android.os.SystemProperties: int native_get_int(java.lang.String,int)>
<android.os.SystemProperties: java.lang.String native_get(java.lang.String)>
<android.os.SystemProperties: java.lang.String native_get(java.lang.String,java.lang.String)>
<android.os.SystemProperties: long native_get_long(java.lang.String,long)>
<android.os.SystemProperties: void native_set(java.lang.String,java.lang.String)>
<android.os.UEventObserver: int next_event(byte[])>
<android.os.UEventObserver: void native_setup()>
<android.renderscript.RenderScript: int nContextGetUserMessage(int,int[])>
<android.renderscript.RenderScript: int nContextPeekMessage(int,int[])>
<android.renderscript.RenderScript: int nDeviceCreate()>
<android.renderscript.RenderScript: int rsnAllocationCreateBitmapRef(int,int,android.graphics.Bitmap)>
<android.renderscript.RenderScript: int rsnAllocationCreateFromAssetStream(int,int,int,int)>
<android.renderscript.RenderScript: int rsnAllocationCreateFromBitmap(int,int,int,android.graphics.Bitmap,int)>
<android.renderscript.RenderScript: int rsnAllocationCreateTyped(int,int,int,int)>
<android.renderscript.RenderScript: int rsnAllocationCubeCreateFromBitmap(int,int,int,android.graphics.Bitmap,int)>
<android.renderscript.RenderScript: int rsnAllocationGetType(int,int)>
<android.renderscript.RenderScript: int rsnContextCreateGL(int,int,int,int,int,int,int,int,int,int,int,int,int,float,int)>
<android.renderscript.RenderScript: int rsnContextCreate(int,int,int)>
<android.renderscript.RenderScript: int rsnElementCreate2(int,int[],java.lang.String[],int[])>
<android.renderscript.RenderScript: int rsnElementCreate(int,int,int,boolean,int)>
<android.renderscript.RenderScript: int rsnFileA3DCreateFromAsset(int,android.content.res.AssetManager,java.lang.String)>
<android.renderscript.RenderScript: int rsnFileA3DCreateFromAssetStream(int,int)>
<android.renderscript.RenderScript: int rsnFileA3DCreateFromFile(int,java.lang.String)>
<android.renderscript.RenderScript: int rsnFileA3DGetEntryByIndex(int,int,int)>
<android.renderscript.RenderScript: int rsnFileA3DGetNumIndexEntries(int,int)>
<android.renderscript.RenderScript: int rsnFontCreateFromAsset(int,android.content.res.AssetManager,java.lang.String,float,int)>
<android.renderscript.RenderScript: int rsnFontCreateFromAssetStream(int,java.lang.String,float,int,int)>
<android.renderscript.RenderScript: int rsnFontCreateFromFile(int,java.lang.String,float,int)>
<android.renderscript.RenderScript: int rsnMeshCreate(int,int[],int[],int[])>
<android.renderscript.RenderScript: int rsnMeshGetIndexCount(int,int)>
<android.renderscript.RenderScript: int rsnMeshGetVertexBufferCount(int,int)>
<android.renderscript.RenderScript: int rsnProgramFragmentCreate(int,java.lang.String,int[])>
<android.renderscript.RenderScript: int rsnProgramRasterCreate(int,boolean,int)>
<android.renderscript.RenderScript: int rsnProgramStoreCreate(int,boolean,boolean,boolean,boolean,boolean,boolean,int,int,int)>
<android.renderscript.RenderScript: int rsnProgramVertexCreate(int,java.lang.String,int[])>
<android.renderscript.RenderScript: int rsnSamplerCreate(int,int,int,int,int,int,float)>
<android.renderscript.RenderScript: int rsnScriptCCreate(int,java.lang.String,java.lang.String,byte[],int)>
<android.renderscript.RenderScript: int rsnTypeCreate(int,int,int,int,int,boolean,boolean)>
<android.renderscript.RenderScript: java.lang.String nContextGetErrorMessage(int)>
<android.renderscript.RenderScript: java.lang.String rsnGetName(int,int)>
<android.renderscript.RenderScript: void nContextDeinitToClient(int)>
<android.renderscript.RenderScript: void nContextInitToClient(int)>
<android.renderscript.RenderScript: void nDeviceDestroy(int)>
<android.renderscript.RenderScript: void nDeviceSetConfig(int,int,int)>
<android.renderscript.RenderScript: void _nInit()>
<android.renderscript.RenderScript: void rsnAllocationCopyFromBitmap(int,int,android.graphics.Bitmap)>
<android.renderscript.RenderScript: void rsnAllocationCopyToBitmap(int,int,android.graphics.Bitmap)>
<android.renderscript.RenderScript: void rsnAllocationData1D(int,int,int,int,int,byte[],int)>
<android.renderscript.RenderScript: void rsnAllocationData1D(int,int,int,int,int,float[],int)>
<android.renderscript.RenderScript: void rsnAllocationData1D(int,int,int,int,int,int[],int)>
<android.renderscript.RenderScript: void rsnAllocationData1D(int,int,int,int,int,short[],int)>
<android.renderscript.RenderScript: void rsnAllocationData2D(int,int,int,int,int,int,android.graphics.Bitmap)>
<android.renderscript.RenderScript: void rsnAllocationData2D(int,int,int,int,int,int,int,int,byte[],int)>
<android.renderscript.RenderScript: void rsnAllocationData2D(int,int,int,int,int,int,int,int,float[],int)>
<android.renderscript.RenderScript: void rsnAllocationData2D(int,int,int,int,int,int,int,int,int[],int)>
<android.renderscript.RenderScript: void rsnAllocationData2D(int,int,int,int,int,int,int,int,int,int,int,int,int)>
<android.renderscript.RenderScript: void rsnAllocationData2D(int,int,int,int,int,int,int,int,short[],int)>
<android.renderscript.RenderScript: void rsnAllocationElementData1D(int,int,int,int,int,byte[],int)>
<android.renderscript.RenderScript: void rsnAllocationGenerateMipmaps(int,int)>
<android.renderscript.RenderScript: void rsnAllocationRead(int,int,byte[])>
<android.renderscript.RenderScript: void rsnAllocationRead(int,int,float[])>
<android.renderscript.RenderScript: void rsnAllocationRead(int,int,int[])>
<android.renderscript.RenderScript: void rsnAllocationRead(int,int,short[])>
<android.renderscript.RenderScript: void rsnAllocationResize1D(int,int,int)>
<android.renderscript.RenderScript: void rsnAllocationResize2D(int,int,int,int)>
<android.renderscript.RenderScript: void rsnAllocationSyncAll(int,int,int)>
<android.renderscript.RenderScript: void rsnAssignName(int,int,byte[])>
<android.renderscript.RenderScript: void rsnContextBindProgramFragment(int,int)>
<android.renderscript.RenderScript: void rsnContextBindProgramRaster(int,int)>
<android.renderscript.RenderScript: void rsnContextBindProgramStore(int,int)>
<android.renderscript.RenderScript: void rsnContextBindProgramVertex(int,int)>
<android.renderscript.RenderScript: void rsnContextBindRootScript(int,int)>
<android.renderscript.RenderScript: void rsnContextBindSampler(int,int,int)>
<android.renderscript.RenderScript: void rsnContextDestroy(int)>
<android.renderscript.RenderScript: void rsnContextDump(int,int)>
<android.renderscript.RenderScript: void rsnContextFinish(int)>
<android.renderscript.RenderScript: void rsnContextPause(int)>
<android.renderscript.RenderScript: void rsnContextResume(int)>
<android.renderscript.RenderScript: void rsnContextSetPriority(int,int)>
<android.renderscript.RenderScript: void rsnContextSetSurface(int,int,int,android.view.Surface)>
<android.renderscript.RenderScript: void rsnContextSetSurfaceTexture(int,int,int,android.graphics.SurfaceTexture)>
<android.renderscript.RenderScript: void rsnElementGetNativeData(int,int,int[])>
<android.renderscript.RenderScript: void rsnElementGetSubElements(int,int,int[],java.lang.String[],int[])>
<android.renderscript.RenderScript: void rsnFileA3DGetIndexEntries(int,int,int,int[],java.lang.String[])>
<android.renderscript.RenderScript: void rsnMeshGetIndices(int,int,int[],int[],int)>
<android.renderscript.RenderScript: void rsnMeshGetVertices(int,int,int[],int)>
<android.renderscript.RenderScript: void rsnObjDestroy(int,int)>
<android.renderscript.RenderScript: void rsnProgramBindConstants(int,int,int,int)>
<android.renderscript.RenderScript: void rsnProgramBindSampler(int,int,int,int)>
<android.renderscript.RenderScript: void rsnProgramBindTexture(int,int,int,int)>
<android.renderscript.RenderScript: void rsnScriptBindAllocation(int,int,int,int)>
<android.renderscript.RenderScript: void rsnScriptForEach(int,int,int,int,int)>
<android.renderscript.RenderScript: void rsnScriptForEach(int,int,int,int,int,byte[])>
<android.renderscript.RenderScript: void rsnScriptInvoke(int,int,int)>
<android.renderscript.RenderScript: void rsnScriptInvokeV(int,int,int,byte[])>
<android.renderscript.RenderScript: void rsnScriptSetTimeZone(int,int,byte[])>
<android.renderscript.RenderScript: void rsnScriptSetVarD(int,int,int,double)>
<android.renderscript.RenderScript: void rsnScriptSetVarF(int,int,int,float)>
<android.renderscript.RenderScript: void rsnScriptSetVarI(int,int,int,int)>
<android.renderscript.RenderScript: void rsnScriptSetVarJ(int,int,int,long)>
<android.renderscript.RenderScript: void rsnScriptSetVarObj(int,int,int,int)>
<android.renderscript.RenderScript: void rsnScriptSetVarV(int,int,int,byte[])>
<android.renderscript.RenderScript: void rsnTypeGetNativeData(int,int,int[])>
<android.server.BluetoothA2dpService: boolean avrcpVolumeDownNative(java.lang.String)>
<android.server.BluetoothA2dpService: boolean avrcpVolumeUpNative(java.lang.String)>
<android.server.BluetoothA2dpService: boolean connectSinkNative(java.lang.String)>
<android.server.BluetoothA2dpService: boolean disconnectSinkNative(java.lang.String)>
<android.server.BluetoothA2dpService: boolean initNative()>
<android.server.BluetoothA2dpService: boolean resumeSinkNative(java.lang.String)>
<android.server.BluetoothA2dpService: boolean suspendSinkNative(java.lang.String)>
<android.server.BluetoothA2dpService: java.lang.Object[] getSinkPropertiesNative(java.lang.String)>
<android.server.BluetoothA2dpService: void cleanupNative()>
<android.server.BluetoothEventLoop: boolean isEventLoopRunningNative()>
<android.server.BluetoothEventLoop: void classInitNative()>
<android.server.BluetoothEventLoop: void cleanupNativeDataNative()>
<android.server.BluetoothEventLoop: void initializeNativeDataNative()>
<android.server.BluetoothEventLoop: void startEventLoopNative()>
<android.server.BluetoothEventLoop: void stopEventLoopNative()>
<android.server.BluetoothService: android.os.ParcelFileDescriptor getChannelFdNative(java.lang.String)>
<android.server.BluetoothService: boolean cancelDeviceCreationNative(java.lang.String)>
<android.server.BluetoothService: boolean cancelPairingUserInputNative(java.lang.String,int)>
<android.server.BluetoothService: boolean connectInputDeviceNative(java.lang.String)>
<android.server.BluetoothService: boolean connectPanDeviceNative(java.lang.String,java.lang.String)>
<android.server.BluetoothService: boolean createChannelNative(java.lang.String,java.lang.String,java.lang.String,int)>
<android.server.BluetoothService: boolean createDeviceNative(java.lang.String)>
<android.server.BluetoothService: boolean createPairedDeviceNative(java.lang.String,int)>
<android.server.BluetoothService: boolean createPairedDeviceOutOfBandNative(java.lang.String,int)>
<android.server.BluetoothService: boolean destroyChannelNative(java.lang.String,java.lang.String,int)>
<android.server.BluetoothService: boolean disconnectInputDeviceNative(java.lang.String)>
<android.server.BluetoothService: boolean disconnectPanDeviceNative(java.lang.String)>
<android.server.BluetoothService: boolean disconnectPanServerDeviceNative(java.lang.String,java.lang.String,java.lang.String)>
<android.server.BluetoothService: boolean discoverServicesNative(java.lang.String,java.lang.String)>
<android.server.BluetoothService: boolean releaseChannelFdNative(java.lang.String)>
<android.server.BluetoothService: boolean removeDeviceNative(java.lang.String)>
<android.server.BluetoothService: boolean removeReservedServiceRecordsNative(int[])>
<android.server.BluetoothService: boolean removeServiceRecordNative(int)>
<android.server.BluetoothService: boolean setAdapterPropertyBooleanNative(java.lang.String,int)>
<android.server.BluetoothService: boolean setAdapterPropertyIntegerNative(java.lang.String,int)>
<android.server.BluetoothService: boolean setAdapterPropertyStringNative(java.lang.String,java.lang.String)>
<android.server.BluetoothService: boolean setAuthorizationNative(java.lang.String,boolean,int)>
<android.server.BluetoothService: boolean setBluetoothTetheringNative(boolean,java.lang.String,java.lang.String)>
<android.server.BluetoothService: boolean setDevicePropertyBooleanNative(java.lang.String,java.lang.String,int)>
<android.server.BluetoothService: boolean setDevicePropertyStringNative(java.lang.String,java.lang.String,java.lang.String)>
<android.server.BluetoothService: boolean setLinkTimeoutNative(java.lang.String,int)>
<android.server.BluetoothService: boolean setPairingConfirmationNative(java.lang.String,boolean,int)>
<android.server.BluetoothService: boolean setPasskeyNative(java.lang.String,int,int)>
<android.server.BluetoothService: boolean setPinNative(java.lang.String,java.lang.String,int)>
<android.server.BluetoothService: boolean setRemoteOutOfBandDataNative(java.lang.String,byte[],byte[],int)>
<android.server.BluetoothService: boolean setupNativeDataNative()>
<android.server.BluetoothService: boolean startDiscoveryNative()>
<android.server.BluetoothService: boolean stopDiscoveryNative()>
<android.server.BluetoothService: boolean tearDownNativeDataNative()>
<android.server.BluetoothService: boolean unregisterHealthApplicationNative(java.lang.String)>
<android.server.BluetoothService: byte[] readAdapterOutOfBandDataNative()>
<android.server.BluetoothService: int[] addReservedServiceRecordsNative(int[])>
<android.server.BluetoothService: int addRfcommServiceRecordNative(java.lang.String,long,long,short)>
<android.server.BluetoothService: int disableNative()>
<android.server.BluetoothService: int enableNative()>
<android.server.BluetoothService: int getDeviceServiceChannelNative(java.lang.String,java.lang.String,int)>
<android.server.BluetoothService: int isEnabledNative()>
<android.server.BluetoothService: java.lang.Object[] getAdapterPropertiesNative()>
<android.server.BluetoothService: java.lang.Object[] getDevicePropertiesNative(java.lang.String)>
<android.server.BluetoothService: java.lang.String getAdapterPathNative()>
<android.server.BluetoothService: java.lang.String getChannelApplicationNative(java.lang.String)>
<android.server.BluetoothService: java.lang.String getMainChannelNative(java.lang.String)>
<android.server.BluetoothService: java.lang.String registerHealthApplicationNative(int,java.lang.String,java.lang.String)>
<android.server.BluetoothService: java.lang.String registerHealthApplicationNative(int,java.lang.String,java.lang.String,java.lang.String)>
<android.server.BluetoothService: void classInitNative()>
<android.server.BluetoothService: void cleanupNativeDataNative()>
<android.server.BluetoothService: void initializeNativeDataNative()>
<android.speech.srec.MicrophoneInputStream: int AudioRecordNew(int,int)>
<android.speech.srec.MicrophoneInputStream: int AudioRecordRead(int,byte[],int,int)>
<android.speech.srec.MicrophoneInputStream: int AudioRecordStart(int)>
<android.speech.srec.MicrophoneInputStream: void AudioRecordDelete(int)>
<android.speech.srec.MicrophoneInputStream: void AudioRecordStop(int)>
<android.speech.srec.Recognizer: boolean SR_RecognizerCheckGrammarConsistency(int,int)>
<android.speech.srec.Recognizer: boolean SR_RecognizerGetBoolParameter(int,java.lang.String)>
<android.speech.srec.Recognizer: boolean SR_RecognizerHasSetupRules(int)>
<android.speech.srec.Recognizer: boolean SR_RecognizerIsActiveRule(int,int,java.lang.String)>
<android.speech.srec.Recognizer: boolean SR_RecognizerIsSetup(int)>
<android.speech.srec.Recognizer: boolean SR_RecognizerIsSignalClipping(int)>
<android.speech.srec.Recognizer: boolean SR_RecognizerIsSignalDCOffset(int)>
<android.speech.srec.Recognizer: boolean SR_RecognizerIsSignalNoisy(int)>
<android.speech.srec.Recognizer: boolean SR_RecognizerIsSignalTooFewSamples(int)>
<android.speech.srec.Recognizer: boolean SR_RecognizerIsSignalTooManySamples(int)>
<android.speech.srec.Recognizer: boolean SR_RecognizerIsSignalTooQuiet(int)>
<android.speech.srec.Recognizer: byte[] SR_RecognizerResultGetWaveform(int)>
<android.speech.srec.Recognizer: int SR_GrammarCreate()>
<android.speech.srec.Recognizer: int SR_GrammarLoad(java.lang.String)>
<android.speech.srec.Recognizer: int SR_RecognizerAdvance(int)>
<android.speech.srec.Recognizer: int SR_RecognizerCreate()>
<android.speech.srec.Recognizer: int SR_RecognizerGetSize_tParameter(int,java.lang.String)>
<android.speech.srec.Recognizer: int SR_RecognizerPutAudio(int,byte[],int,int,boolean)>
<android.speech.srec.Recognizer: int SR_RecognizerResultGetKeyCount(int,int)>
<android.speech.srec.Recognizer: int SR_RecognizerResultGetSize(int)>
<android.speech.srec.Recognizer: int SR_VocabularyLoad()>
<android.speech.srec.Recognizer: java.lang.String SR_AcousticStateGet(int)>
<android.speech.srec.Recognizer: java.lang.String SR_RecognizerGetParameter(int,java.lang.String)>
<android.speech.srec.Recognizer: java.lang.String[] SR_RecognizerResultGetKeyList(int,int)>
<android.speech.srec.Recognizer: java.lang.String SR_RecognizerResultGetValue(int,int,java.lang.String)>
<android.speech.srec.Recognizer: java.lang.String SR_VocabularyGetPronunciation(int,java.lang.String)>
<android.speech.srec.Recognizer: void PMemInit()>
<android.speech.srec.Recognizer: void PMemShutdown()>
<android.speech.srec.Recognizer: void SR_AcousticStateReset(int)>
<android.speech.srec.Recognizer: void SR_AcousticStateSet(int,java.lang.String)>
<android.speech.srec.Recognizer: void SR_GrammarAddWordToSlot(int,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>
<android.speech.srec.Recognizer: void SR_GrammarAllowAll(int)>
<android.speech.srec.Recognizer: void SR_GrammarAllowOnly(int,java.lang.String)>
<android.speech.srec.Recognizer: void SR_GrammarCompile(int)>
<android.speech.srec.Recognizer: void SR_GrammarDestroy(int)>
<android.speech.srec.Recognizer: void SR_GrammarResetAllSlots(int)>
<android.speech.srec.Recognizer: void SR_GrammarSave(int,java.lang.String)>
<android.speech.srec.Recognizer: void SR_GrammarSetupRecognizer(int,int)>
<android.speech.srec.Recognizer: void SR_GrammarSetupVocabulary(int,int)>
<android.speech.srec.Recognizer: void SR_GrammarUnsetupRecognizer(int)>
<android.speech.srec.Recognizer: void SR_RecognizerActivateRule(int,int,java.lang.String,int)>
<android.speech.srec.Recognizer: void SR_RecognizerDeactivateAllRules(int)>
<android.speech.srec.Recognizer: void SR_RecognizerDeactivateRule(int,int,java.lang.String)>
<android.speech.srec.Recognizer: void SR_RecognizerDestroy(int)>
<android.speech.srec.Recognizer: void SR_RecognizerSetBoolParameter(int,java.lang.String,boolean)>
<android.speech.srec.Recognizer: void SR_RecognizerSetParameter(int,java.lang.String,java.lang.String)>
<android.speech.srec.Recognizer: void SR_RecognizerSetSize_tParameter(int,java.lang.String,int)>
<android.speech.srec.Recognizer: void SR_RecognizerSetup(int)>
<android.speech.srec.Recognizer: void SR_RecognizerSetupRule(int,int,java.lang.String)>
<android.speech.srec.Recognizer: void SR_RecognizerStart(int)>
<android.speech.srec.Recognizer: void SR_RecognizerStop(int)>
<android.speech.srec.Recognizer: void SR_RecognizerUnsetup(int)>
<android.speech.srec.Recognizer: void SR_SessionCreate(java.lang.String)>
<android.speech.srec.Recognizer: void SR_SessionDestroy()>
<android.speech.srec.Recognizer: void SR_VocabularyDestroy(int)>
<android.text.AndroidBidi: int runBidi(int,char[],byte[],int,boolean)>
<android.text.AndroidCharacter: boolean mirror(char[],int,int)>
<android.text.AndroidCharacter: char getMirror(char)>
<android.text.AndroidCharacter: int getEastAsianWidth(char)>
<android.text.AndroidCharacter: void getDirectionalities(char[],byte[],int)>
<android.text.AndroidCharacter: void getEastAsianWidths(char[],int,int,byte[])>
<android.text.format.Time: boolean nativeParse3339(java.lang.String)>
<android.text.format.Time: boolean nativeParse(java.lang.String)>
<android.text.format.Time: int nativeCompare(android.text.format.Time,android.text.format.Time)>
<android.text.format.Time: java.lang.String format1(java.lang.String)>
<android.text.format.Time: java.lang.String format2445()>
<android.text.format.Time: java.lang.String toString()>
<android.text.format.Time: long normalize(boolean)>
<android.text.format.Time: long toMillis(boolean)>
<android.text.format.Time: void set(long)>
<android.text.format.Time: void setToNow()>
<android.text.format.Time: void switchTimezone(java.lang.String)>
<android.util.EventLog: int writeEvent(int,int)>
<android.util.EventLog: int writeEvent(int,java.lang.Object)>
<android.util.EventLog: int writeEvent(int,java.lang.String)>
<android.util.EventLog: int writeEvent(int,long)>
<android.util.EventLog: void readEvents(int[],java.util.Collection)>
<android.util.FloatMath: float ceil(float)>
<android.util.FloatMath: float cos(float)>
<android.util.FloatMath: float floor(float)>
<android.util.FloatMath: float sin(float)>
<android.util.FloatMath: float sqrt(float)>
<android.util.Log: boolean isLoggable(java.lang.String,int)>
<android.util.Log: int println_native(int,int,java.lang.String,java.lang.String)>
<android.view.Display: int getDisplayCount()>
<android.view.Display: int getOrientation()>
<android.view.Display: int getRawHeightNative()>
<android.view.Display: int getRawWidthNative()>
<android.view.Display: void init(int)>
<android.view.Display: void nativeClassInit()>
<android.view.GLES20Canvas: boolean nCallDrawGLFunction(int,int)>
<android.view.GLES20Canvas: boolean nClipRect(int,float,float,float,float,int)>
<android.view.GLES20Canvas: boolean nClipRect(int,int,int,int,int,int)>
<android.view.GLES20Canvas: boolean nCopyLayer(int,int)>
<android.view.GLES20Canvas: boolean nDrawDisplayList(int,int,int,int,android.graphics.Rect)>
<android.view.GLES20Canvas: boolean nGetClipBounds(int,android.graphics.Rect)>
<android.view.GLES20Canvas: boolean nIsAvailable()>
<android.view.GLES20Canvas: boolean nIsBackBufferPreserved()>
<android.view.GLES20Canvas: boolean nPreserveBackBuffer()>
<android.view.GLES20Canvas: boolean nQuickReject(int,float,float,float,float,int)>
<android.view.GLES20Canvas: int nCreateDisplayListRenderer()>
<android.view.GLES20Canvas: int nCreateLayer(int,int,boolean,int[])>
<android.view.GLES20Canvas: int nCreateLayerRenderer(int)>
<android.view.GLES20Canvas: int nCreateRenderer()>
<android.view.GLES20Canvas: int nCreateTextureLayer(boolean,int[])>
<android.view.GLES20Canvas: int nGetDisplayList(int,int)>
<android.view.GLES20Canvas: int nGetDisplayListSize(int)>
<android.view.GLES20Canvas: int nGetMaximumTextureHeight()>
<android.view.GLES20Canvas: int nGetMaximumTextureWidth()>
<android.view.GLES20Canvas: int nGetSaveCount(int)>
<android.view.GLES20Canvas: int nSave(int,int)>
<android.view.GLES20Canvas: int nSaveLayerAlpha(int,float,float,float,float,int,int)>
<android.view.GLES20Canvas: int nSaveLayerAlpha(int,int,int)>
<android.view.GLES20Canvas: int nSaveLayer(int,float,float,float,float,int,int)>
<android.view.GLES20Canvas: int nSaveLayer(int,int,int)>
<android.view.GLES20Canvas: void nConcatMatrix(int,int)>
<android.view.GLES20Canvas: void nDestroyDisplayList(int)>
<android.view.GLES20Canvas: void nDestroyLayerDeferred(int)>
<android.view.GLES20Canvas: void nDestroyLayer(int)>
<android.view.GLES20Canvas: void nDestroyRenderer(int)>
<android.view.GLES20Canvas: void nDisableVsync()>
<android.view.GLES20Canvas: void nDrawArc(int,float,float,float,float,float,float,boolean,int)>
<android.view.GLES20Canvas: void nDrawBitmap(int,int,byte[],float,float,float,float,float,float,float,float,int)>
<android.view.GLES20Canvas: void nDrawBitmap(int,int,byte[],float,float,int)>
<android.view.GLES20Canvas: void nDrawBitmap(int,int,byte[],int,int)>
<android.view.GLES20Canvas: void nDrawBitmapMesh(int,int,byte[],int,int,float[],int,int[],int,int)>
<android.view.GLES20Canvas: void nDrawCircle(int,float,float,float,int)>
<android.view.GLES20Canvas: void nDrawColor(int,int,int)>
<android.view.GLES20Canvas: void nDrawLayer(int,int,float,float,int)>
<android.view.GLES20Canvas: void nDrawLines(int,float[],int,int,int)>
<android.view.GLES20Canvas: void nDrawOval(int,float,float,float,float,int)>
<android.view.GLES20Canvas: void nDrawPatch(int,int,byte[],byte[],float,float,float,float,int)>
<android.view.GLES20Canvas: void nDrawPath(int,int,int)>
<android.view.GLES20Canvas: void nDrawPoints(int,float[],int,int,int)>
<android.view.GLES20Canvas: void nDrawRect(int,float,float,float,float,int)>
<android.view.GLES20Canvas: void nDrawRects(int,int,int)>
<android.view.GLES20Canvas: void nDrawRoundRect(int,float,float,float,float,float,float,int)>
<android.view.GLES20Canvas: void nDrawText(int,char[],int,int,float,float,int,int)>
<android.view.GLES20Canvas: void nDrawText(int,java.lang.String,int,int,float,float,int,int)>
<android.view.GLES20Canvas: void nDrawTextRun(int,char[],int,int,int,int,float,float,int,int)>
<android.view.GLES20Canvas: void nDrawTextRun(int,java.lang.String,int,int,int,int,float,float,int,int)>
<android.view.GLES20Canvas: void nFinish(int)>
<android.view.GLES20Canvas: void nFlushCaches(int)>
<android.view.GLES20Canvas: void nGetMatrix(int,int)>
<android.view.GLES20Canvas: void nInitCaches()>
<android.view.GLES20Canvas: void nInterrupt(int)>
<android.view.GLES20Canvas: void nOutputDisplayList(int,int)>
<android.view.GLES20Canvas: void nPrepareDirty(int,int,int,int,int,boolean)>
<android.view.GLES20Canvas: void nPrepare(int,boolean)>
<android.view.GLES20Canvas: void nResetDisplayListRenderer(int)>
<android.view.GLES20Canvas: void nResetModifiers(int,int)>
<android.view.GLES20Canvas: void nResizeLayer(int,int,int,int[])>
<android.view.GLES20Canvas: void nRestore(int)>
<android.view.GLES20Canvas: void nRestoreToCount(int,int)>
<android.view.GLES20Canvas: void nResume(int)>
<android.view.GLES20Canvas: void nRotate(int,float)>
<android.view.GLES20Canvas: void nScale(int,float,float)>
<android.view.GLES20Canvas: void nSetMatrix(int,int)>
<android.view.GLES20Canvas: void nSetTextureLayerTransform(int,int)>
<android.view.GLES20Canvas: void nSetupColorFilter(int,int)>
<android.view.GLES20Canvas: void nSetupShader(int,int)>
<android.view.GLES20Canvas: void nSetupShadow(int,float,float,float,int)>
<android.view.GLES20Canvas: void nSetViewport(int,int,int)>
<android.view.GLES20Canvas: void nSkew(int,float,float)>
<android.view.GLES20Canvas: void nTerminateCaches()>
<android.view.GLES20Canvas: void nTranslate(int,float,float)>
<android.view.GLES20Canvas: void nUpdateTextureLayer(int,int,int,boolean,android.graphics.SurfaceTexture)>
<android.view.HardwareRenderer: void nSetupShadersDiskCache(java.lang.String)>
<android.view.InputChannel: android.view.InputChannel[] nativeOpenInputChannelPair(java.lang.String)>
<android.view.InputChannel: java.lang.String nativeGetName()>
<android.view.InputChannel: void nativeDispose(boolean)>
<android.view.InputChannel: void nativeReadFromParcel(android.os.Parcel)>
<android.view.InputChannel: void nativeTransferTo(android.view.InputChannel)>
<android.view.InputChannel: void nativeWriteToParcel(android.os.Parcel)>
<android.view.InputQueue: void nativeFinished(long,boolean)>
<android.view.InputQueue: void nativeRegisterInputChannel(android.view.InputChannel,android.view.InputHandler,android.os.MessageQueue)>
<android.view.InputQueue: void nativeUnregisterInputChannel(android.view.InputChannel)>
<android.view.KeyCharacterMap: android.view.KeyEvent[] nativeGetEvents(int,int,char[])>
<android.view.KeyCharacterMap: boolean nativeGetFallbackAction(int,int,int,android.view.KeyCharacterMap$FallbackAction)>
<android.view.KeyCharacterMap: char nativeGetCharacter(int,int,int)>
<android.view.KeyCharacterMap: char nativeGetDisplayLabel(int,int)>
<android.view.KeyCharacterMap: char nativeGetMatch(int,int,char[],int)>
<android.view.KeyCharacterMap: char nativeGetNumber(int,int)>
<android.view.KeyCharacterMap: int nativeGetKeyboardType(int)>
<android.view.KeyCharacterMap: int nativeLoad(java.lang.String)>
<android.view.KeyCharacterMap: void nativeDispose(int)>
<android.view.KeyEvent: boolean native_hasDefaultAction(int)>
<android.view.KeyEvent: boolean native_isSystemKey(int)>
<android.view.MotionEvent: boolean nativeIsTouchEvent(int)>
<android.view.MotionEvent: float nativeGetAxisValue(int,int,int,int)>
<android.view.MotionEvent: float nativeGetRawAxisValue(int,int,int,int)>
<android.view.MotionEvent: float nativeGetXOffset(int)>
<android.view.MotionEvent: float nativeGetXPrecision(int)>
<android.view.MotionEvent: float nativeGetYOffset(int)>
<android.view.MotionEvent: float nativeGetYPrecision(int)>
<android.view.MotionEvent: int nativeCopy(int,int,boolean)>
<android.view.MotionEvent: int nativeFindPointerIndex(int,int)>
<android.view.MotionEvent: int nativeGetAction(int)>
<android.view.MotionEvent: int nativeGetButtonState(int)>
<android.view.MotionEvent: int nativeGetDeviceId(int)>
<android.view.MotionEvent: int nativeGetEdgeFlags(int)>
<android.view.MotionEvent: int nativeGetFlags(int)>
<android.view.MotionEvent: int nativeGetHistorySize(int)>
<android.view.MotionEvent: int nativeGetMetaState(int)>
<android.view.MotionEvent: int nativeGetPointerCount(int)>
<android.view.MotionEvent: int nativeGetPointerId(int,int)>
<android.view.MotionEvent: int nativeGetSource(int)>
<android.view.MotionEvent: int nativeGetToolType(int,int)>
<android.view.MotionEvent: int nativeInitialize(int,int,int,int,int,int,int,int,float,float,float,float,long,long,int,android.view.MotionEvent$PointerProperties[],android.view.MotionEvent$PointerCoords[])>
<android.view.MotionEvent: int nativeReadFromParcel(int,android.os.Parcel)>
<android.view.MotionEvent: int nativeSetSource(int,int)>
<android.view.MotionEvent: long nativeGetDownTimeNanos(int)>
<android.view.MotionEvent: long nativeGetEventTimeNanos(int,int)>
<android.view.MotionEvent: void nativeAddBatch(int,long,android.view.MotionEvent$PointerCoords[],int)>
<android.view.MotionEvent: void nativeDispose(int)>
<android.view.MotionEvent: void nativeGetPointerCoords(int,int,int,android.view.MotionEvent$PointerCoords)>
<android.view.MotionEvent: void nativeGetPointerProperties(int,int,android.view.MotionEvent$PointerProperties)>
<android.view.MotionEvent: void nativeOffsetLocation(int,float,float)>
<android.view.MotionEvent: void nativeScale(int,float)>
<android.view.MotionEvent: void nativeSetAction(int,int)>
<android.view.MotionEvent: void nativeSetDownTimeNanos(int,long)>
<android.view.MotionEvent: void nativeSetEdgeFlags(int,int)>
<android.view.MotionEvent: void nativeSetFlags(int,int)>
<android.view.MotionEvent: void nativeTransform(int,android.graphics.Matrix)>
<android.view.MotionEvent: void nativeWriteToParcel(int,android.os.Parcel)>
<android.view.Surface: android.graphics.Bitmap screenshot(int,int)>
<android.view.Surface: android.graphics.Bitmap screenshot(int,int,int,int)>
<android.view.Surface: android.graphics.Canvas lockCanvasNative(android.graphics.Rect)>
<android.view.Surface: boolean isValid()>
<android.view.Surface: int getIdentity()>
<android.view.SurfaceSession: void destroy()>
<android.view.SurfaceSession: void init()>
<android.view.SurfaceSession: void kill()>
<android.view.Surface: void closeTransaction()>
<android.view.Surface: void copyFrom(android.view.Surface)>
<android.view.Surface: void destroy()>
<android.view.Surface: void freeze()>
<android.view.Surface: void freezeDisplay(int)>
<android.view.Surface: void hide()>
<android.view.Surface: void init(android.os.Parcel)>
<android.view.Surface: void init(android.view.SurfaceSession,int,java.lang.String,int,int,int,int,int)>
<android.view.Surface: void initFromSurfaceTexture(android.graphics.SurfaceTexture)>
<android.view.Surface: void nativeClassInit()>
<android.view.Surface: void openTransaction()>
<android.view.Surface: void readFromParcel(android.os.Parcel)>
<android.view.Surface: void release()>
<android.view.Surface: void setAlpha(float)>
<android.view.Surface: void setFlags(int,int)>
<android.view.Surface: void setFreezeTint(int)>
<android.view.Surface: void setLayer(int)>
<android.view.Surface: void setMatrix(float,float,float,float)>
<android.view.Surface: void setOrientation(int,int,int)>
<android.view.Surface: void setPosition(float,float)>
<android.view.Surface: void setSize(int,int)>
<android.view.Surface: void setTransparentRegionHint(android.graphics.Region)>
<android.view.Surface: void show()>
<android.view.Surface: void transferFrom(android.view.Surface)>
<android.view.Surface: void unfreeze()>
<android.view.Surface: void unfreezeDisplay(int)>
<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)>
<android.view.Surface: void unlockCanvas(android.graphics.Canvas)>
<android.view.Surface: void writeToParcel(android.os.Parcel,int)>
<android.view.TextureView: void nCreateNativeWindow(android.graphics.SurfaceTexture)>
<android.view.TextureView: void nDestroyNativeWindow()>
<android.view.TextureView: void nLockCanvas(int,android.graphics.Canvas,android.graphics.Rect)>
<android.view.TextureView: void nSetDefaultBufferSize(android.graphics.SurfaceTexture,int,int)>
<android.view.TextureView: void nUnlockCanvasAndPost(int,android.graphics.Canvas)>
<android.view.VelocityTracker: boolean nativeGetEstimator(int,int,int,int,android.view.VelocityTracker$Estimator)>
<android.view.VelocityTracker: float nativeGetXVelocity(int,int)>
<android.view.VelocityTracker: float nativeGetYVelocity(int,int)>
<android.view.VelocityTracker: int nativeInitialize()>
<android.view.VelocityTracker: void nativeAddMovement(int,android.view.MotionEvent)>
<android.view.VelocityTracker: void nativeClear(int)>
<android.view.VelocityTracker: void nativeComputeCurrentVelocity(int,int,float)>
<android.view.VelocityTracker: void nativeDispose(int)>
<android.webkit.BrowserFrame: boolean cacheDisabled()>
<android.webkit.BrowserFrame: boolean documentHasImages()>
<android.webkit.BrowserFrame: boolean hasPasswordField()>
<android.webkit.BrowserFrame: boolean nativeGetShouldStartScrolledRight(int)>
<android.webkit.BrowserFrame: java.lang.String childFramesAsText()>
<android.webkit.BrowserFrame: java.lang.String documentAsText()>
<android.webkit.BrowserFrame: java.lang.String externalRepresentation()>
<android.webkit.BrowserFrame: java.lang.String[] getUsernamePassword()>
<android.webkit.BrowserFrame: java.lang.String nativeSaveWebArchive(java.lang.String,boolean)>
<android.webkit.BrowserFrame: java.lang.String stringByEvaluatingJavaScriptFromString(java.lang.String)>
<android.webkit.BrowserFrame: void clearCache()>
<android.webkit.BrowserFrame: void nativeAddJavascriptInterface(int,java.lang.Object,java.lang.String)>
<android.webkit.BrowserFrame: void nativeAuthenticationCancel(int)>
<android.webkit.BrowserFrame: void nativeAuthenticationProceed(int,java.lang.String,java.lang.String)>
<android.webkit.BrowserFrame: void nativeCallPolicyFunction(int,int)>
<android.webkit.BrowserFrame: void nativeCreateFrame(android.webkit.WebViewCore,android.content.res.AssetManager,android.webkit.WebBackForwardList)>
<android.webkit.BrowserFrame: void nativeDestroyFrame()>
<android.webkit.BrowserFrame: void nativeGoBackOrForward(int)>
<android.webkit.BrowserFrame: void nativeLoadData(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.BrowserFrame: void nativeLoadUrl(java.lang.String,java.util.Map)>
<android.webkit.BrowserFrame: void nativeOrientationChanged(int)>
<android.webkit.BrowserFrame: void nativePostUrl(java.lang.String,byte[])>
<android.webkit.BrowserFrame: void nativeSslCertErrorCancel(int,int)>
<android.webkit.BrowserFrame: void nativeSslCertErrorProceed(int)>
<android.webkit.BrowserFrame: void nativeSslClientCert(int,byte[],byte[][])>
<android.webkit.BrowserFrame: void nativeStopLoading()>
<android.webkit.BrowserFrame: void reload(boolean)>
<android.webkit.BrowserFrame: void setCacheDisabled(boolean)>
<android.webkit.BrowserFrame: void setUsernamePassword(java.lang.String,java.lang.String)>
<android.webkit.CacheManager: android.webkit.CacheManager$CacheResult nativeGetCacheResult(java.lang.String)>
<android.webkit.CookieManager: boolean nativeAcceptCookie()>
<android.webkit.CookieManager: boolean nativeAcceptFileSchemeCookies()>
<android.webkit.CookieManager: boolean nativeHasCookies(boolean)>
<android.webkit.CookieManager: java.lang.String nativeGetCookie(java.lang.String,boolean)>
<android.webkit.CookieManager: void nativeFlushCookieStore()>
<android.webkit.CookieManager: void nativeRemoveAllCookie()>
<android.webkit.CookieManager: void nativeRemoveExpiredCookie()>
<android.webkit.CookieManager: void nativeRemoveSessionCookie()>
<android.webkit.CookieManager: void nativeSetAcceptCookie(boolean)>
<android.webkit.CookieManager: void nativeSetAcceptFileSchemeCookies(boolean)>
<android.webkit.CookieManager: void nativeSetCookie(java.lang.String,java.lang.String,boolean)>
<android.webkit.DeviceMotionAndOrientationManager: void nativeOnMotionChange(android.webkit.WebViewCore,boolean,double,boolean,double,boolean,double,double)>
<android.webkit.DeviceMotionAndOrientationManager: void nativeOnOrientationChange(android.webkit.WebViewCore,boolean,double,boolean,double,boolean,double)>
<android.webkit.DeviceMotionAndOrientationManager: void nativeSetMockOrientation(android.webkit.WebViewCore,boolean,double,boolean,double,boolean,double)>
<android.webkit.DeviceMotionAndOrientationManager: void nativeUseMock(android.webkit.WebViewCore)>
<android.webkit.GeolocationPermissions: boolean nativeGetAllowed(java.lang.String)>
<android.webkit.GeolocationPermissions: java.util.Set nativeGetOrigins()>
<android.webkit.GeolocationPermissions: void nativeAllow(java.lang.String)>
<android.webkit.GeolocationPermissions: void nativeClearAll()>
<android.webkit.GeolocationPermissions: void nativeClear(java.lang.String)>
<android.webkit.GeolocationService: void nativeNewErrorAvailable(long,java.lang.String)>
<android.webkit.GeolocationService: void nativeNewLocationAvailable(long,android.location.Location)>
<android.webkit.HTML5Audio: void nativeOnBuffering(int,int)>
<android.webkit.HTML5Audio: void nativeOnEnded(int)>
<android.webkit.HTML5Audio: void nativeOnPrepared(int,int,int,int)>
<android.webkit.HTML5Audio: void nativeOnTimeupdate(int,int)>
<android.webkit.HTML5VideoViewProxy: boolean nativeSendSurfaceTexture(android.graphics.SurfaceTexture,int,int,int,int)>
<android.webkit.HTML5VideoViewProxy: void nativeOnEnded(int)>
<android.webkit.HTML5VideoViewProxy: void nativeOnPaused(int)>
<android.webkit.HTML5VideoViewProxy: void nativeOnPosterFetched(android.graphics.Bitmap,int)>
<android.webkit.HTML5VideoViewProxy: void nativeOnPrepared(int,int,int,int)>
<android.webkit.HTML5VideoViewProxy: void nativeOnStopFullscreen(int)>
<android.webkit.HTML5VideoViewProxy: void nativeOnTimeupdate(int,int)>
<android.webkit.JniUtil: boolean nativeUseChromiumHttpStack()>
<android.webkit.JWebCoreJavaBridge: void addPackageName(java.lang.String)>
<android.webkit.JWebCoreJavaBridge: void addPackageNames(java.util.Set)>
<android.webkit.JWebCoreJavaBridge: void nativeConstructor()>
<android.webkit.JWebCoreJavaBridge: void nativeFinalize()>
<android.webkit.JWebCoreJavaBridge: void nativeServiceFuncPtrQueue()>
<android.webkit.JWebCoreJavaBridge: void nativeUpdatePluginDirectories(java.lang.String[],boolean)>
<android.webkit.JWebCoreJavaBridge: void nativeUpdateProxy(java.lang.String,java.lang.String)>
<android.webkit.JWebCoreJavaBridge: void removePackageName(java.lang.String)>
<android.webkit.JWebCoreJavaBridge: void setCacheSize(int)>
<android.webkit.JWebCoreJavaBridge: void setNetworkOnLine(boolean)>
<android.webkit.JWebCoreJavaBridge: void setNetworkType(java.lang.String,java.lang.String)>
<android.webkit.JWebCoreJavaBridge: void sharedTimerFired()>
<android.webkit.LoadListener: int nativeCreateResponse(java.lang.String,int,java.lang.String,java.lang.String,long,java.lang.String)>
<android.webkit.LoadListener: java.lang.String nativeRedirectedToUrl(java.lang.String,java.lang.String,int)>
<android.webkit.LoadListener: void nativeAddData(byte[],int)>
<android.webkit.LoadListener: void nativeError(int,java.lang.String,java.lang.String)>
<android.webkit.LoadListener: void nativeFinished()>
<android.webkit.LoadListener: void nativeReceivedResponse(int)>
<android.webkit.LoadListener: void nativeSetResponseHeader(int,java.lang.String,java.lang.String)>
<android.webkit.MockGeolocation: void nativeSetError(int,java.lang.String)>
<android.webkit.MockGeolocation: void nativeSetPosition(double,double,double)>
<android.webkit.ViewStateSerializer: boolean nativeSerializeViewState(int,java.io.OutputStream,byte[])>
<android.webkit.ViewStateSerializer: int nativeDeserializeViewState(java.io.InputStream,byte[])>
<android.webkit.WebBackForwardList: void nativeClose(int)>
<android.webkit.WebBackForwardList: void restoreIndex(int,int)>
<android.webkit.WebHistoryItem: void inflate(int,byte[])>
<android.webkit.WebIconDatabase: android.graphics.Bitmap nativeIconForPageUrl(java.lang.String)>
<android.webkit.WebIconDatabase: void nativeClose()>
<android.webkit.WebIconDatabase: void nativeOpen(java.lang.String)>
<android.webkit.WebIconDatabase: void nativeReleaseIconForPageUrl(java.lang.String)>
<android.webkit.WebIconDatabase: void nativeRemoveAllIcons()>
<android.webkit.WebIconDatabase: void nativeRetainIconForPageUrl(java.lang.String)>
<android.webkit.WebSettings: void nativeSync(int)>
<android.webkit.WebStorage: java.util.Set nativeGetOrigins()>
<android.webkit.WebStorage: long nativeGetQuotaForOrigin(java.lang.String)>
<android.webkit.WebStorage: long nativeGetUsageForOrigin(java.lang.String)>
<android.webkit.WebStorage: void nativeDeleteAllData()>
<android.webkit.WebStorage: void nativeDeleteOrigin(java.lang.String)>
<android.webkit.WebStorage: void nativeSetAppCacheMaximumSize(long)>
<android.webkit.WebStorage: void nativeSetQuotaForOrigin(java.lang.String,long)>
<android.webkit.WebView: android.graphics.Point nativeCursorPosition()>
<android.webkit.WebView: android.graphics.Point nativeSelectableText()>
<android.webkit.WebView: android.graphics.Rect nativeCacheHitNodeBounds()>
<android.webkit.WebView: android.graphics.Rect nativeCursorNodeBounds()>
<android.webkit.WebView: android.graphics.Rect nativeFocusCandidateNodeBounds()>
<android.webkit.WebView: android.graphics.Rect nativeFocusCandidatePaddingRect()>
<android.webkit.WebView: android.graphics.Rect nativeFocusNodeBounds()>
<android.webkit.WebView: android.graphics.Rect nativeGetCursorRingBounds()>
<android.webkit.WebView: android.graphics.Rect nativeLayerBounds(int)>
<android.webkit.WebView: android.graphics.Rect nativeSubtractLayers(android.graphics.Rect)>
<android.webkit.WebView: boolean nativeCacheHitIsPlugin()>
<android.webkit.WebView: boolean nativeCursorIntersects(android.graphics.Rect)>
<android.webkit.WebView: boolean nativeCursorIsAnchor()>
<android.webkit.WebView: boolean nativeCursorIsTextInput()>
<android.webkit.WebView: boolean nativeCursorWantsKeyEvents()>
<android.webkit.WebView: boolean nativeEvaluateLayersAnimations(int)>
<android.webkit.WebView: boolean nativeFocusCandidateHasNextTextfield()>
<android.webkit.WebView: boolean nativeFocusCandidateIsAutoComplete()>
<android.webkit.WebView: boolean nativeFocusCandidateIsPassword()>
<android.webkit.WebView: boolean nativeFocusCandidateIsRtlText()>
<android.webkit.WebView: boolean nativeFocusCandidateIsSpellcheck()>
<android.webkit.WebView: boolean nativeFocusCandidateIsTextInput()>
<android.webkit.WebView: boolean nativeFocusIsPlugin()>
<android.webkit.WebView: boolean nativeHasContent()>
<android.webkit.WebView: boolean nativeHasCursorNode()>
<android.webkit.WebView: boolean nativeHasFocusNode()>
<android.webkit.WebView: boolean nativeHitSelection(int,int)>
<android.webkit.WebView: boolean nativeMotionUp(int,int,int)>
<android.webkit.WebView: boolean nativeMoveCursor(int,int,boolean)>
<android.webkit.WebView: boolean nativeMoveCursorToNextTextInput()>
<android.webkit.WebView: boolean nativePageShouldHandleShiftAndArrows()>
<android.webkit.WebView: boolean nativePointInNavCache(int,int,int)>
<android.webkit.WebView: boolean nativeScrollLayer(int,int,int)>
<android.webkit.WebView: boolean nativeSetProperty(java.lang.String,java.lang.String)>
<android.webkit.WebView: boolean nativeStartSelection(int,int)>
<android.webkit.WebView: boolean nativeWordSelection(int,int)>
<android.webkit.WebViewCore: boolean nativeFocusBoundsChanged()>
<android.webkit.WebViewCore: boolean nativeHandleTouchEvent(int,int[],int[],int[],int,int,int)>
<android.webkit.WebViewCore: boolean nativeKey(int,int,int,boolean,boolean,boolean,boolean)>
<android.webkit.WebViewCore: boolean nativeUpdateLayers(int,int)>
<android.webkit.WebViewCore: boolean nativeValidNodeAndBounds(int,int,android.graphics.Rect)>
<android.webkit.WebViewCore: int nativeGetContentMinPrefWidth()>
<android.webkit.WebViewCore: int nativeRecordContent(android.graphics.Region,android.graphics.Point)>
<android.webkit.WebViewCore: java.lang.String nativeFindAddress(java.lang.String,boolean)>
<android.webkit.WebViewCore: java.lang.String nativeModifySelection(int,int)>
<android.webkit.WebViewCore: java.lang.String nativeRequestLabel(int,int)>
<android.webkit.WebViewCore: java.lang.String nativeRetrieveAnchorText(int,int)>
<android.webkit.WebViewCore: java.lang.String nativeRetrieveHref(int,int)>
<android.webkit.WebViewCore: java.lang.String nativeRetrieveImageSource(int,int)>
<android.webkit.WebViewCore: java.util.ArrayList nativeGetTouchHighlightRects(int,int,int)>
<android.webkit.WebViewCore: void nativeAutoFillForm(int)>
<android.webkit.WebViewCore: void nativeClearContent()>
<android.webkit.WebViewCore: void nativeClick(int,int,boolean)>
<android.webkit.WebViewCore: void nativeCloseIdleConnections()>
<android.webkit.WebViewCore: void nativeContentInvalidateAll()>
<android.webkit.WebViewCore: void nativeDeleteSelection(int,int,int)>
<android.webkit.WebViewCore: void nativeDumpDomTree(boolean)>
<android.webkit.WebViewCore: void nativeDumpNavTree()>
<android.webkit.WebViewCore: void nativeDumpRenderTree(boolean)>
<android.webkit.WebViewCore: void nativeDumpV8Counters()>
<android.webkit.WebViewCore: void nativeFreeMemory()>
<android.webkit.WebViewCore: void nativeFullScreenPluginHidden(int)>
<android.webkit.WebViewCore: void nativeGeolocationPermissionsProvide(java.lang.String,boolean,boolean)>
<android.webkit.WebViewCore: void nativeMoveFocus(int,int)>
<android.webkit.WebViewCore: void nativeMoveMouseIfLatest(int,int,int,int)>
<android.webkit.WebViewCore: void nativeMoveMouse(int,int,int)>
<android.webkit.WebViewCore: void nativeNotifyAnimationStarted(int)>
<android.webkit.WebViewCore: void nativePause()>
<android.webkit.WebViewCore: void nativePluginSurfaceReady()>
<android.webkit.WebViewCore: void nativeProvideVisitedHistory(java.lang.String[])>
<android.webkit.WebViewCore: void nativeRegisterURLSchemeAsLocal(java.lang.String)>
<android.webkit.WebViewCore: void nativeReplaceTextfieldText(int,int,java.lang.String,int,int,int)>
<android.webkit.WebViewCore: void nativeResume()>
<android.webkit.WebViewCore: void nativeRevealSelection()>
<android.webkit.WebViewCore: void nativeSaveDocumentState(int)>
<android.webkit.WebViewCore: void nativeScrollFocusedTextInput(float,int)>
<android.webkit.WebViewCore: void nativeScrollLayer(int,android.graphics.Rect)>
<android.webkit.WebViewCore: void nativeSendListBoxChoice(int)>
<android.webkit.WebViewCore: void nativeSendListBoxChoices(boolean[],int)>
<android.webkit.WebViewCore: void nativeSetBackgroundColor(int)>
<android.webkit.WebViewCore: void nativeSetFocusControllerActive(boolean)>
<android.webkit.WebViewCore: void nativeSetGlobalBounds(int,int,int,int)>
<android.webkit.WebViewCore: void nativeSetIsPaused(boolean)>
<android.webkit.WebViewCore: void nativeSetJsFlags(java.lang.String)>
<android.webkit.WebViewCore: void nativeSetNewStorageLimit(long)>
<android.webkit.WebViewCore: void nativeSetScrollOffset(int,boolean,int,int)>
<android.webkit.WebViewCore: void nativeSetSelection(int,int)>
<android.webkit.WebViewCore: void nativeSetSize(int,int,int,float,int,int,int,int,boolean)>
<android.webkit.WebViewCore: void nativeSplitContent(int)>
<android.webkit.WebViewCore: void nativeStopPaintingCaret()>
<android.webkit.WebViewCore: void nativeTouchUp(int,int,int,int,int)>
<android.webkit.WebViewCore: void nativeUpdateFrameCache()>
<android.webkit.WebViewCore: void nativeUpdateFrameCacheIfLoading()>
<android.webkit.WebViewCore: void passToJs(int,java.lang.String,int,int,boolean,boolean,boolean,boolean)>
<android.webkit.WebViewCore: void setViewportSettingsFromNative()>
<android.webkit.WebView: float nativeFocusCandidateTextSize()>
<android.webkit.WebView: float nativeTileProfilingGetFloat(int,int,java.lang.String)>
<android.webkit.WebView: float nativeTileProfilingStop()>
<android.webkit.WebView: int nativeCacheHitFramePointer()>
<android.webkit.WebView: int nativeCacheHitNodePointer()>
<android.webkit.WebView: int nativeCursorFramePointer()>
<android.webkit.WebView: int nativeCursorNodePointer()>
<android.webkit.WebView: int nativeDraw(android.graphics.Canvas,android.graphics.RectF,int,int,boolean)>
<android.webkit.WebView: int nativeFindAll(java.lang.String,java.lang.String,boolean)>
<android.webkit.WebView: int nativeFindIndex()>
<android.webkit.WebView: int nativeFocusCandidateFramePointer()>
<android.webkit.WebView: int nativeFocusCandidateLayerId()>
<android.webkit.WebView: int nativeFocusCandidateLineHeight()>
<android.webkit.WebView: int nativeFocusCandidateMaxLength()>
<android.webkit.WebView: int nativeFocusCandidatePointer()>
<android.webkit.WebView: int nativeFocusCandidateType()>
<android.webkit.WebView: int nativeFocusNodePointer()>
<android.webkit.WebView: int nativeGetBackgroundColor()>
<android.webkit.WebView: int nativeGetBaseLayer()>
<android.webkit.WebView: int nativeGetBlockLeftEdge(int,int,float)>
<android.webkit.WebView: int nativeGetDrawGLFunction(int,android.graphics.Rect,android.graphics.Rect,android.graphics.RectF,float,int)>
<android.webkit.WebView: int nativeMoveGeneration()>
<android.webkit.WebView: int nativeScrollableLayer(int,int,android.graphics.Rect,android.graphics.Rect)>
<android.webkit.WebView: int nativeSelectionX()>
<android.webkit.WebView: int nativeSelectionY()>
<android.webkit.WebView: int nativeTextGeneration()>
<android.webkit.WebView: int nativeTileProfilingGetInt(int,int,java.lang.String)>
<android.webkit.WebView: int nativeTileProfilingNumFrames()>
<android.webkit.WebView: int nativeTileProfilingNumTilesInFrame(int)>
<android.webkit.WebView: java.lang.String nativeCursorText()>
<android.webkit.WebView: java.lang.String nativeFocusCandidateName()>
<android.webkit.WebView: java.lang.String nativeFocusCandidateText()>
<android.webkit.WebView: java.lang.String nativeGetProperty(java.lang.String)>
<android.webkit.WebView: java.lang.String nativeGetSelection()>
<android.webkit.WebView: java.lang.String nativeImageURI(int,int)>
<android.webkit.WebView: void nativeClearCursor()>
<android.webkit.WebView: void nativeCopyBaseContentToPicture(android.graphics.Picture)>
<android.webkit.WebView: void nativeCreate(int,java.lang.String,boolean)>
<android.webkit.WebView: void nativeDebugDump()>
<android.webkit.WebView: void nativeDestroy()>
<android.webkit.WebView: void nativeDumpDisplayTree(java.lang.String)>
<android.webkit.WebView: void nativeExtendSelection(int,int)>
<android.webkit.WebView: void nativeFindNext(boolean)>
<android.webkit.WebView: void nativeGetSelectionHandles(int,int[])>
<android.webkit.WebView: void nativeGetTextSelectionRegion(int,android.graphics.Region)>
<android.webkit.WebView: void nativeHideCursor()>
<android.webkit.WebView: void nativeInstrumentReport()>
<android.webkit.WebView: void nativeMoveSelection(int,int)>
<android.webkit.WebView: void nativeOnTrimMemory(int)>
<android.webkit.WebView: void nativeRegisterPageSwapCallback()>
<android.webkit.WebView: void nativeReplaceBaseContent(int)>
<android.webkit.WebView: void nativeResetSelection()>
<android.webkit.WebView: void nativeSelectAll()>
<android.webkit.WebView: void nativeSelectAt(int,int)>
<android.webkit.WebView: void nativeSelectBestAt(android.graphics.Rect)>
<android.webkit.WebView: void nativeSetBaseLayer(int,android.graphics.Region,boolean,boolean,boolean)>
<android.webkit.WebView: void nativeSetExtendSelection()>
<android.webkit.WebView: void nativeSetFindIsEmpty()>
<android.webkit.WebView: void nativeSetFindIsUp(boolean)>
<android.webkit.WebView: void nativeSetHeightCanMeasure(boolean)>
<android.webkit.WebView: void nativeSetIsScrolling(boolean)>
<android.webkit.WebView: void nativeSetPauseDrawing(int,boolean)>
<android.webkit.WebView: void nativeSetSelectionPointer(int,boolean,float,int,int)>
<android.webkit.WebView: void nativeShowCursorTimed()>
<android.webkit.WebView: void nativeStopGL()>
<android.webkit.WebView: void nativeTileProfilingClear()>
<android.webkit.WebView: void nativeTileProfilingStart()>
<android.webkit.WebView: void nativeUpdateCachedTextfield(java.lang.String,int)>
<android.webkit.WebView: void nativeUpdateDrawGLFunction(android.graphics.Rect,android.graphics.Rect,android.graphics.RectF)>
<android.webkit.WebView: void nativeUseHardwareAccelSkia(boolean)>
<com.android.internal.content.NativeLibraryHelper: int nativeCopyNativeBinaries(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.android.internal.content.NativeLibraryHelper: long nativeSumNativeBinaries(java.lang.String,java.lang.String,java.lang.String)>
<com.android.internal.os.BinderInternal: android.os.IBinder getContextObject()>
<com.android.internal.os.BinderInternal: void disableBackgroundScheduling(boolean)>
<com.android.internal.os.BinderInternal: void handleGc()>
<com.android.internal.os.BinderInternal: void joinThreadPool()>
<com.android.internal.os.RuntimeInit: int getQwertyKeyboard()>
<com.android.internal.os.RuntimeInit: int isComputerOn()>
<com.android.internal.os.RuntimeInit: void finishInit()>
<com.android.internal.os.RuntimeInit: void turnComputerOn()>
<com.android.internal.os.RuntimeInit: void zygoteInitNative()>
<com.android.internal.os.ZygoteInit: int getpgid(int)>
<com.android.internal.os.ZygoteInit: int selectReadable(java.io.FileDescriptor[])>
<com.android.internal.os.ZygoteInit: int setpgid(int,int)>
<com.android.internal.os.ZygoteInit: int setregid(int,int)>
<com.android.internal.os.ZygoteInit: int setreuid(int,int)>
<com.android.internal.os.ZygoteInit: java.io.FileDescriptor createFileDescriptor(int)>
<com.android.internal.os.ZygoteInit: long capgetPermitted(int)>
<com.android.internal.os.ZygoteInit: void reopenStdio(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor)>
<com.android.internal.os.ZygoteInit: void setCapabilities(long,long)>
<com.android.internal.os.ZygoteInit: void setCloseOnExec(java.io.FileDescriptor,boolean)>
<com.android.internal.util.WithFramework: int registerNatives()>
<com.android.server.NetworkManagementSocketTagger: int native_deleteTagData(int,int)>
<com.android.server.NetworkManagementSocketTagger: int native_setCounterSet(int,int)>
<com.android.server.NetworkManagementSocketTagger: int native_tagSocketFd(java.io.FileDescriptor,int,int)>
<com.android.server.NetworkManagementSocketTagger: int native_untagSocketFd(java.io.FileDescriptor)>
<com.google.android.gles_jni.EGLImpl: boolean eglChooseConfig(javax.microedition.khronos.egl.EGLDisplay,int[],javax.microedition.khronos.egl.EGLConfig[],int,int[])>
<com.google.android.gles_jni.EGLImpl: boolean eglCopyBuffers(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,java.lang.Object)>
<com.google.android.gles_jni.EGLImpl: boolean eglDestroyContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext)>
<com.google.android.gles_jni.EGLImpl: boolean eglDestroySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)>
<com.google.android.gles_jni.EGLImpl: boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[])>
<com.google.android.gles_jni.EGLImpl: boolean eglGetConfigs(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[],int,int[])>
<com.google.android.gles_jni.EGLImpl: boolean eglInitialize(javax.microedition.khronos.egl.EGLDisplay,int[])>
<com.google.android.gles_jni.EGLImpl: boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext)>
<com.google.android.gles_jni.EGLImpl: boolean eglQueryContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext,int,int[])>
<com.google.android.gles_jni.EGLImpl: boolean eglQuerySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,int,int[])>
<com.google.android.gles_jni.EGLImpl: boolean eglReleaseThread()>
<com.google.android.gles_jni.EGLImpl: boolean eglSwapBuffers(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)>
<com.google.android.gles_jni.EGLImpl: boolean eglTerminate(javax.microedition.khronos.egl.EGLDisplay)>
<com.google.android.gles_jni.EGLImpl: boolean eglWaitGL()>
<com.google.android.gles_jni.EGLImpl: boolean eglWaitNative(int,java.lang.Object)>
<com.google.android.gles_jni.EGLImpl: int _eglCreateContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,javax.microedition.khronos.egl.EGLContext,int[])>
<com.google.android.gles_jni.EGLImpl: int _eglCreatePbufferSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int[])>
<com.google.android.gles_jni.EGLImpl: int _eglCreateWindowSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])>
<com.google.android.gles_jni.EGLImpl: int _eglCreateWindowSurfaceTexture(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])>
<com.google.android.gles_jni.EGLImpl: int _eglGetCurrentContext()>
<com.google.android.gles_jni.EGLImpl: int _eglGetCurrentDisplay()>
<com.google.android.gles_jni.EGLImpl: int _eglGetCurrentSurface(int)>
<com.google.android.gles_jni.EGLImpl: int _eglGetDisplay(java.lang.Object)>
<com.google.android.gles_jni.EGLImpl: int eglGetError()>
<com.google.android.gles_jni.EGLImpl: int getInitCount(javax.microedition.khronos.egl.EGLDisplay)>
<com.google.android.gles_jni.EGLImpl: java.lang.String eglQueryString(javax.microedition.khronos.egl.EGLDisplay,int)>
<com.google.android.gles_jni.EGLImpl: void _eglCreatePixmapSurface(javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])>
<com.google.android.gles_jni.EGLImpl: void _nativeClassInit()>
<com.google.android.gles_jni.GLImpl: boolean glIsBuffer(int)>
<com.google.android.gles_jni.GLImpl: boolean glIsEnabled(int)>
<com.google.android.gles_jni.GLImpl: boolean glIsFramebufferOES(int)>
<com.google.android.gles_jni.GLImpl: boolean glIsRenderbufferOES(int)>
<com.google.android.gles_jni.GLImpl: boolean glIsTexture(int)>
<com.google.android.gles_jni.GLImpl: int glCheckFramebufferStatusOES(int)>
<com.google.android.gles_jni.GLImpl: int glGetError()>
<com.google.android.gles_jni.GLImpl: int glQueryMatrixxOES(int[],int,int[],int)>
<com.google.android.gles_jni.GLImpl: int glQueryMatrixxOES(java.nio.IntBuffer,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: java.lang.String _glGetString(int)>
<com.google.android.gles_jni.GLImpl: void glActiveTexture(int)>
<com.google.android.gles_jni.GLImpl: void glAlphaFunc(int,float)>
<com.google.android.gles_jni.GLImpl: void glAlphaFuncx(int,int)>
<com.google.android.gles_jni.GLImpl: void glBindBuffer(int,int)>
<com.google.android.gles_jni.GLImpl: void glBindFramebufferOES(int,int)>
<com.google.android.gles_jni.GLImpl: void glBindRenderbufferOES(int,int)>
<com.google.android.gles_jni.GLImpl: void glBindTexture(int,int)>
<com.google.android.gles_jni.GLImpl: void glBlendEquation(int)>
<com.google.android.gles_jni.GLImpl: void glBlendEquationSeparate(int,int)>
<com.google.android.gles_jni.GLImpl: void glBlendFunc(int,int)>
<com.google.android.gles_jni.GLImpl: void glBlendFuncSeparate(int,int,int,int)>
<com.google.android.gles_jni.GLImpl: void glBufferData(int,int,java.nio.Buffer,int)>
<com.google.android.gles_jni.GLImpl: void glBufferSubData(int,int,int,java.nio.Buffer)>
<com.google.android.gles_jni.GLImpl: void glClearColor(float,float,float,float)>
<com.google.android.gles_jni.GLImpl: void glClearColorx(int,int,int,int)>
<com.google.android.gles_jni.GLImpl: void glClearDepthf(float)>
<com.google.android.gles_jni.GLImpl: void glClearDepthx(int)>
<com.google.android.gles_jni.GLImpl: void glClear(int)>
<com.google.android.gles_jni.GLImpl: void glClearStencil(int)>
<com.google.android.gles_jni.GLImpl: void glClientActiveTexture(int)>
<com.google.android.gles_jni.GLImpl: void glClipPlanef(int,float[],int)>
<com.google.android.gles_jni.GLImpl: void glClipPlanef(int,java.nio.FloatBuffer)>
<com.google.android.gles_jni.GLImpl: void glClipPlanex(int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glClipPlanex(int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glColor4f(float,float,float,float)>
<com.google.android.gles_jni.GLImpl: void glColor4ub(byte,byte,byte,byte)>
<com.google.android.gles_jni.GLImpl: void glColor4x(int,int,int,int)>
<com.google.android.gles_jni.GLImpl: void glColorMask(boolean,boolean,boolean,boolean)>
<com.google.android.gles_jni.GLImpl: void glColorPointerBounds(int,int,int,java.nio.Buffer,int)>
<com.google.android.gles_jni.GLImpl: void glColorPointer(int,int,int,int)>
<com.google.android.gles_jni.GLImpl: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)>
<com.google.android.gles_jni.GLImpl: void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<com.google.android.gles_jni.GLImpl: void glCopyTexImage2D(int,int,int,int,int,int,int,int)>
<com.google.android.gles_jni.GLImpl: void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)>
<com.google.android.gles_jni.GLImpl: void glCullFace(int)>
<com.google.android.gles_jni.GLImpl: void glCurrentPaletteMatrixOES(int)>
<com.google.android.gles_jni.GLImpl: void glDeleteBuffers(int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glDeleteBuffers(int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glDeleteFramebuffersOES(int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glDeleteFramebuffersOES(int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glDeleteRenderbuffersOES(int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glDeleteRenderbuffersOES(int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glDeleteTextures(int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glDeleteTextures(int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glDepthFunc(int)>
<com.google.android.gles_jni.GLImpl: void glDepthMask(boolean)>
<com.google.android.gles_jni.GLImpl: void glDepthRangef(float,float)>
<com.google.android.gles_jni.GLImpl: void glDepthRangex(int,int)>
<com.google.android.gles_jni.GLImpl: void glDisableClientState(int)>
<com.google.android.gles_jni.GLImpl: void glDisable(int)>
<com.google.android.gles_jni.GLImpl: void glDrawArrays(int,int,int)>
<com.google.android.gles_jni.GLImpl: void glDrawElements(int,int,int,int)>
<com.google.android.gles_jni.GLImpl: void glDrawElements(int,int,int,java.nio.Buffer)>
<com.google.android.gles_jni.GLImpl: void glDrawTexfOES(float,float,float,float,float)>
<com.google.android.gles_jni.GLImpl: void glDrawTexfvOES(float[],int)>
<com.google.android.gles_jni.GLImpl: void glDrawTexfvOES(java.nio.FloatBuffer)>
<com.google.android.gles_jni.GLImpl: void glDrawTexiOES(int,int,int,int,int)>
<com.google.android.gles_jni.GLImpl: void glDrawTexivOES(int[],int)>
<com.google.android.gles_jni.GLImpl: void glDrawTexivOES(java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glDrawTexsOES(short,short,short,short,short)>
<com.google.android.gles_jni.GLImpl: void glDrawTexsvOES(java.nio.ShortBuffer)>
<com.google.android.gles_jni.GLImpl: void glDrawTexsvOES(short[],int)>
<com.google.android.gles_jni.GLImpl: void glDrawTexxOES(int,int,int,int,int)>
<com.google.android.gles_jni.GLImpl: void glDrawTexxvOES(int[],int)>
<com.google.android.gles_jni.GLImpl: void glDrawTexxvOES(java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glEnableClientState(int)>
<com.google.android.gles_jni.GLImpl: void glEnable(int)>
<com.google.android.gles_jni.GLImpl: void glFinish()>
<com.google.android.gles_jni.GLImpl: void glFlush()>
<com.google.android.gles_jni.GLImpl: void glFogf(int,float)>
<com.google.android.gles_jni.GLImpl: void glFogfv(int,float[],int)>
<com.google.android.gles_jni.GLImpl: void glFogfv(int,java.nio.FloatBuffer)>
<com.google.android.gles_jni.GLImpl: void glFogx(int,int)>
<com.google.android.gles_jni.GLImpl: void glFogxv(int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glFogxv(int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glFramebufferRenderbufferOES(int,int,int,int)>
<com.google.android.gles_jni.GLImpl: void glFramebufferTexture2DOES(int,int,int,int,int)>
<com.google.android.gles_jni.GLImpl: void glFrontFace(int)>
<com.google.android.gles_jni.GLImpl: void glFrustumf(float,float,float,float,float,float)>
<com.google.android.gles_jni.GLImpl: void glFrustumx(int,int,int,int,int,int)>
<com.google.android.gles_jni.GLImpl: void glGenBuffers(int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glGenBuffers(int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glGenerateMipmapOES(int)>
<com.google.android.gles_jni.GLImpl: void glGenFramebuffersOES(int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glGenFramebuffersOES(int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glGenRenderbuffersOES(int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glGenRenderbuffersOES(int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glGenTextures(int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glGenTextures(int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glGetBooleanv(int,boolean[],int)>
<com.google.android.gles_jni.GLImpl: void glGetBooleanv(int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glGetBufferParameteriv(int,int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glGetBufferParameteriv(int,int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glGetClipPlanef(int,float[],int)>
<com.google.android.gles_jni.GLImpl: void glGetClipPlanef(int,java.nio.FloatBuffer)>
<com.google.android.gles_jni.GLImpl: void glGetClipPlanex(int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glGetClipPlanex(int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glGetFixedv(int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glGetFixedv(int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glGetFloatv(int,float[],int)>
<com.google.android.gles_jni.GLImpl: void glGetFloatv(int,java.nio.FloatBuffer)>
<com.google.android.gles_jni.GLImpl: void glGetFramebufferAttachmentParameterivOES(int,int,int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glGetFramebufferAttachmentParameterivOES(int,int,int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glGetIntegerv(int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glGetIntegerv(int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glGetLightfv(int,int,float[],int)>
<com.google.android.gles_jni.GLImpl: void glGetLightfv(int,int,java.nio.FloatBuffer)>
<com.google.android.gles_jni.GLImpl: void glGetLightxv(int,int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glGetLightxv(int,int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glGetMaterialfv(int,int,float[],int)>
<com.google.android.gles_jni.GLImpl: void glGetMaterialfv(int,int,java.nio.FloatBuffer)>
<com.google.android.gles_jni.GLImpl: void glGetMaterialxv(int,int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glGetMaterialxv(int,int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glGetRenderbufferParameterivOES(int,int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glGetRenderbufferParameterivOES(int,int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glGetTexEnviv(int,int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glGetTexEnviv(int,int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glGetTexEnvxv(int,int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glGetTexEnvxv(int,int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glGetTexGenfv(int,int,float[],int)>
<com.google.android.gles_jni.GLImpl: void glGetTexGenfv(int,int,java.nio.FloatBuffer)>
<com.google.android.gles_jni.GLImpl: void glGetTexGeniv(int,int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glGetTexGeniv(int,int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glGetTexGenxv(int,int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glGetTexGenxv(int,int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glGetTexParameterfv(int,int,float[],int)>
<com.google.android.gles_jni.GLImpl: void glGetTexParameterfv(int,int,java.nio.FloatBuffer)>
<com.google.android.gles_jni.GLImpl: void glGetTexParameteriv(int,int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glGetTexParameteriv(int,int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glGetTexParameterxv(int,int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glGetTexParameterxv(int,int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glHint(int,int)>
<com.google.android.gles_jni.GLImpl: void glLightf(int,int,float)>
<com.google.android.gles_jni.GLImpl: void glLightfv(int,int,float[],int)>
<com.google.android.gles_jni.GLImpl: void glLightfv(int,int,java.nio.FloatBuffer)>
<com.google.android.gles_jni.GLImpl: void glLightModelf(int,float)>
<com.google.android.gles_jni.GLImpl: void glLightModelfv(int,float[],int)>
<com.google.android.gles_jni.GLImpl: void glLightModelfv(int,java.nio.FloatBuffer)>
<com.google.android.gles_jni.GLImpl: void glLightModelx(int,int)>
<com.google.android.gles_jni.GLImpl: void glLightModelxv(int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glLightModelxv(int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glLightx(int,int,int)>
<com.google.android.gles_jni.GLImpl: void glLightxv(int,int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glLightxv(int,int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glLineWidth(float)>
<com.google.android.gles_jni.GLImpl: void glLineWidthx(int)>
<com.google.android.gles_jni.GLImpl: void glLoadIdentity()>
<com.google.android.gles_jni.GLImpl: void glLoadMatrixf(float[],int)>
<com.google.android.gles_jni.GLImpl: void glLoadMatrixf(java.nio.FloatBuffer)>
<com.google.android.gles_jni.GLImpl: void glLoadMatrixx(int[],int)>
<com.google.android.gles_jni.GLImpl: void glLoadMatrixx(java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glLoadPaletteFromModelViewMatrixOES()>
<com.google.android.gles_jni.GLImpl: void glLogicOp(int)>
<com.google.android.gles_jni.GLImpl: void glMaterialf(int,int,float)>
<com.google.android.gles_jni.GLImpl: void glMaterialfv(int,int,float[],int)>
<com.google.android.gles_jni.GLImpl: void glMaterialfv(int,int,java.nio.FloatBuffer)>
<com.google.android.gles_jni.GLImpl: void glMaterialx(int,int,int)>
<com.google.android.gles_jni.GLImpl: void glMaterialxv(int,int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glMaterialxv(int,int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glMatrixIndexPointerOESBounds(int,int,int,java.nio.Buffer,int)>
<com.google.android.gles_jni.GLImpl: void glMatrixIndexPointerOES(int,int,int,int)>
<com.google.android.gles_jni.GLImpl: void glMatrixMode(int)>
<com.google.android.gles_jni.GLImpl: void glMultiTexCoord4f(int,float,float,float,float)>
<com.google.android.gles_jni.GLImpl: void glMultiTexCoord4x(int,int,int,int,int)>
<com.google.android.gles_jni.GLImpl: void glMultMatrixf(float[],int)>
<com.google.android.gles_jni.GLImpl: void glMultMatrixf(java.nio.FloatBuffer)>
<com.google.android.gles_jni.GLImpl: void glMultMatrixx(int[],int)>
<com.google.android.gles_jni.GLImpl: void glMultMatrixx(java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glNormal3f(float,float,float)>
<com.google.android.gles_jni.GLImpl: void glNormal3x(int,int,int)>
<com.google.android.gles_jni.GLImpl: void glNormalPointerBounds(int,int,java.nio.Buffer,int)>
<com.google.android.gles_jni.GLImpl: void glNormalPointer(int,int,int)>
<com.google.android.gles_jni.GLImpl: void glOrthof(float,float,float,float,float,float)>
<com.google.android.gles_jni.GLImpl: void glOrthox(int,int,int,int,int,int)>
<com.google.android.gles_jni.GLImpl: void glPixelStorei(int,int)>
<com.google.android.gles_jni.GLImpl: void glPointParameterf(int,float)>
<com.google.android.gles_jni.GLImpl: void glPointParameterfv(int,float[],int)>
<com.google.android.gles_jni.GLImpl: void glPointParameterfv(int,java.nio.FloatBuffer)>
<com.google.android.gles_jni.GLImpl: void glPointParameterx(int,int)>
<com.google.android.gles_jni.GLImpl: void glPointParameterxv(int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glPointParameterxv(int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glPointSize(float)>
<com.google.android.gles_jni.GLImpl: void glPointSizePointerOESBounds(int,int,java.nio.Buffer,int)>
<com.google.android.gles_jni.GLImpl: void glPointSizex(int)>
<com.google.android.gles_jni.GLImpl: void glPolygonOffset(float,float)>
<com.google.android.gles_jni.GLImpl: void glPolygonOffsetx(int,int)>
<com.google.android.gles_jni.GLImpl: void glPopMatrix()>
<com.google.android.gles_jni.GLImpl: void glPushMatrix()>
<com.google.android.gles_jni.GLImpl: void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)>
<com.google.android.gles_jni.GLImpl: void glRenderbufferStorageOES(int,int,int,int)>
<com.google.android.gles_jni.GLImpl: void glRotatef(float,float,float,float)>
<com.google.android.gles_jni.GLImpl: void glRotatex(int,int,int,int)>
<com.google.android.gles_jni.GLImpl: void glSampleCoverage(float,boolean)>
<com.google.android.gles_jni.GLImpl: void glSampleCoveragex(int,boolean)>
<com.google.android.gles_jni.GLImpl: void glScalef(float,float,float)>
<com.google.android.gles_jni.GLImpl: void glScalex(int,int,int)>
<com.google.android.gles_jni.GLImpl: void glScissor(int,int,int,int)>
<com.google.android.gles_jni.GLImpl: void glShadeModel(int)>
<com.google.android.gles_jni.GLImpl: void glStencilFunc(int,int,int)>
<com.google.android.gles_jni.GLImpl: void glStencilMask(int)>
<com.google.android.gles_jni.GLImpl: void glStencilOp(int,int,int)>
<com.google.android.gles_jni.GLImpl: void glTexCoordPointerBounds(int,int,int,java.nio.Buffer,int)>
<com.google.android.gles_jni.GLImpl: void glTexCoordPointer(int,int,int,int)>
<com.google.android.gles_jni.GLImpl: void glTexEnvf(int,int,float)>
<com.google.android.gles_jni.GLImpl: void glTexEnvfv(int,int,float[],int)>
<com.google.android.gles_jni.GLImpl: void glTexEnvfv(int,int,java.nio.FloatBuffer)>
<com.google.android.gles_jni.GLImpl: void glTexEnvi(int,int,int)>
<com.google.android.gles_jni.GLImpl: void glTexEnviv(int,int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glTexEnviv(int,int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glTexEnvx(int,int,int)>
<com.google.android.gles_jni.GLImpl: void glTexEnvxv(int,int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glTexEnvxv(int,int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glTexGenf(int,int,float)>
<com.google.android.gles_jni.GLImpl: void glTexGenfv(int,int,float[],int)>
<com.google.android.gles_jni.GLImpl: void glTexGenfv(int,int,java.nio.FloatBuffer)>
<com.google.android.gles_jni.GLImpl: void glTexGeni(int,int,int)>
<com.google.android.gles_jni.GLImpl: void glTexGeniv(int,int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glTexGeniv(int,int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glTexGenx(int,int,int)>
<com.google.android.gles_jni.GLImpl: void glTexGenxv(int,int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glTexGenxv(int,int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<com.google.android.gles_jni.GLImpl: void glTexParameterf(int,int,float)>
<com.google.android.gles_jni.GLImpl: void glTexParameterfv(int,int,float[],int)>
<com.google.android.gles_jni.GLImpl: void glTexParameterfv(int,int,java.nio.FloatBuffer)>
<com.google.android.gles_jni.GLImpl: void glTexParameteri(int,int,int)>
<com.google.android.gles_jni.GLImpl: void glTexParameteriv(int,int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glTexParameteriv(int,int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glTexParameterx(int,int,int)>
<com.google.android.gles_jni.GLImpl: void glTexParameterxv(int,int,int[],int)>
<com.google.android.gles_jni.GLImpl: void glTexParameterxv(int,int,java.nio.IntBuffer)>
<com.google.android.gles_jni.GLImpl: void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<com.google.android.gles_jni.GLImpl: void glTranslatef(float,float,float)>
<com.google.android.gles_jni.GLImpl: void glTranslatex(int,int,int)>
<com.google.android.gles_jni.GLImpl: void glVertexPointerBounds(int,int,int,java.nio.Buffer,int)>
<com.google.android.gles_jni.GLImpl: void glVertexPointer(int,int,int,int)>
<com.google.android.gles_jni.GLImpl: void glViewport(int,int,int,int)>
<com.google.android.gles_jni.GLImpl: void glWeightPointerOESBounds(int,int,int,java.nio.Buffer,int)>
<com.google.android.gles_jni.GLImpl: void glWeightPointerOES(int,int,int,int)>
<com.google.android.gles_jni.GLImpl: void _nativeClassInit()>
<dalvik.bytecode.OpcodeInfo: boolean isInvoke(int)>
<dalvik.system.DexFile: boolean isDexOptNeeded(java.lang.String)>
<dalvik.system.DexFile: int openDexFile(byte[])>
<dalvik.system.DexFile: int openDexFile(java.lang.String,java.lang.String,int)>
<dalvik.system.DexFile: java.lang.Class defineClass(java.lang.String,java.lang.ClassLoader,int)>
<dalvik.system.DexFile: java.lang.String[] getClassNameList(int)>
<dalvik.system.DexFile: void closeDexFile(int)>
<dalvik.system.NativeStart: void main(java.lang.String[])>
<dalvik.system.NativeStart: void run()>
<dalvik.system.VMDebug: boolean cacheRegisterMap(java.lang.String)>
<dalvik.system.VMDebug: boolean isDebuggerConnected()>
<dalvik.system.VMDebug: boolean isDebuggingEnabled()>
<dalvik.system.VMDebug: boolean isMethodTracingActive()>
<dalvik.system.VMDebug: int getAllocCount(int)>
<dalvik.system.VMDebug: int getLoadedClassCount()>
<dalvik.system.VMDebug: java.lang.String[] getVmFeatureList()>
<dalvik.system.VMDebug: long countInstancesOfClass(java.lang.Class,boolean)>
<dalvik.system.VMDebug: long lastDebuggerActivity()>
<dalvik.system.VMDebug: long threadCpuTimeNanos()>
<dalvik.system.VMDebug: void crash()>
<dalvik.system.VMDebug: void dumpHprofDataDdms()>
<dalvik.system.VMDebug: void dumpHprofData(java.lang.String,java.io.FileDescriptor)>
<dalvik.system.VMDebug: void dumpReferenceTables()>
<dalvik.system.VMDebug: void getInstructionCount(int[])>
<dalvik.system.VMDebug: void infopoint(int)>
<dalvik.system.VMDebug: void printLoadedClasses(int)>
<dalvik.system.VMDebug: void resetAllocCount(int)>
<dalvik.system.VMDebug: void resetInstructionCount()>
<dalvik.system.VMDebug: void startAllocCounting()>
<dalvik.system.VMDebug: void startEmulatorTracing()>
<dalvik.system.VMDebug: void startInstructionCounting()>
<dalvik.system.VMDebug: void startMethodTracingNative(java.lang.String,java.io.FileDescriptor,int,int)>
<dalvik.system.VMDebug: void stopAllocCounting()>
<dalvik.system.VMDebug: void stopEmulatorTracing()>
<dalvik.system.VMDebug: void stopInstructionCounting()>
<dalvik.system.VMDebug: void stopMethodTracing()>
<dalvik.system.VMRuntime: boolean isDebuggerActive()>
<dalvik.system.VMRuntime: float getTargetHeapUtilization()>
<dalvik.system.VMRuntime: java.lang.Object newNonMovableArray(java.lang.Class,int)>
<dalvik.system.VMRuntime: java.lang.String bootClassPath()>
<dalvik.system.VMRuntime: java.lang.String classPath()>
<dalvik.system.VMRuntime: java.lang.String[] properties()>
<dalvik.system.VMRuntime: java.lang.String vmVersion()>
<dalvik.system.VMRuntime: long addressOf(java.lang.Object)>
<dalvik.system.VMRuntime: void clearGrowthLimit()>
<dalvik.system.VMRuntime: void disableJitCompilation()>
<dalvik.system.VMRuntime: void nativeSetTargetHeapUtilization(float)>
<dalvik.system.VMRuntime: void setTargetSdkVersion(int)>
<dalvik.system.VMRuntime: void startJitCompilation()>
<dalvik.system.VMStack: int fillStackTraceElements(java.lang.Thread,java.lang.StackTraceElement[])>
<dalvik.system.VMStack: java.lang.Class getClasses(int)>
<dalvik.system.VMStack: java.lang.Class getStackClass2()>
<dalvik.system.VMStack: java.lang.ClassLoader getCallingClassLoader()>
<dalvik.system.VMStack: java.lang.StackTraceElement[] getThreadStackTrace(java.lang.Thread)>
<dalvik.system.Zygote: int nativeFork()>
<dalvik.system.Zygote: int nativeForkAndSpecialize(int,int,int[],int,int[][])>
<dalvik.system.Zygote: int nativeForkSystemServer(int,int,int[],int,int[][],long,long)>
<dalvik.system.Zygote: void nativeExecShell(java.lang.String)>
<java.io.Console: int setEchoImpl(boolean,int)>
<java.io.File: boolean setLastModifiedImpl(java.lang.String,long)>
<java.io.File: java.lang.String[] listImpl(java.lang.String)>
<java.io.File: java.lang.String readlink(java.lang.String)>
<java.io.File: java.lang.String realpath(java.lang.String)>
<java.io.ObjectOutputStream: java.lang.Object getFieldL(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String)>
<java.io.ObjectStreamClass: boolean hasClinit(java.lang.Class)>
<java.io.ObjectStreamClass: int getConstructorId(java.lang.Class)>
<java.io.ObjectStreamClass: java.lang.Object newInstance(java.lang.Class,int)>
<java.io.ObjectStreamClass: java.lang.String getConstructorSignature(java.lang.reflect.Constructor)>
<java.io.ObjectStreamClass: java.lang.String getFieldSignature(java.lang.reflect.Field)>
<java.io.ObjectStreamClass: java.lang.String getMethodSignature(java.lang.reflect.Method)>
<java.lang.Character: boolean isDefinedImpl(int)>
<java.lang.Character: boolean isDigitImpl(int)>
<java.lang.Character: boolean isIdentifierIgnorableImpl(int)>
<java.lang.Character: boolean isLetterImpl(int)>
<java.lang.Character: boolean isLetterOrDigitImpl(int)>
<java.lang.Character: boolean isLowerCaseImpl(int)>
<java.lang.Character: boolean isMirroredImpl(int)>
<java.lang.Character: boolean isSpaceCharImpl(int)>
<java.lang.Character: boolean isTitleCaseImpl(int)>
<java.lang.Character: boolean isUnicodeIdentifierPartImpl(int)>
<java.lang.Character: boolean isUnicodeIdentifierStartImpl(int)>
<java.lang.Character: boolean isUpperCaseImpl(int)>
<java.lang.Character: boolean isWhitespaceImpl(int)>
<java.lang.Character: byte getDirectionalityImpl(int)>
<java.lang.Character: int digitImpl(int,int)>
<java.lang.Character: int forNameImpl(java.lang.String)>
<java.lang.Character: int getNumericValueImpl(int)>
<java.lang.Character: int getTypeImpl(int)>
<java.lang.Character: int ofImpl(int)>
<java.lang.Character: int toLowerCaseImpl(int)>
<java.lang.Character: int toTitleCaseImpl(int)>
<java.lang.Character: int toUpperCaseImpl(int)>
<java.lang.Character: java.lang.String getNameImpl(int)>
<java.lang.Class: A getDeclaredAnnotation(java.lang.Class)>
<java.lang.Class: boolean desiredAssertionStatus()>
<java.lang.Class: boolean isAnonymousClass()>
<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<java.lang.Class: boolean isDeclaredAnnotationPresent(java.lang.Class)>
<java.lang.Class: boolean isInstance(java.lang.Object)>
<java.lang.Class: boolean isInterface()>
<java.lang.Class: boolean isPrimitive()>
<java.lang.Class: int getModifiers(java.lang.Class,boolean)>
<java.lang.Class: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.lang.Class: java.lang.Class classForName(java.lang.String,boolean,java.lang.ClassLoader)>
<java.lang.Class: java.lang.Class getComponentType()>
<java.lang.Class: java.lang.Class getDeclaredClasses(java.lang.Class,boolean)>
<java.lang.Class: java.lang.Class getDeclaringClass()>
<java.lang.Class: java.lang.Class getEnclosingClass()>
<java.lang.Class: java.lang.Class getInterfaces()>
<java.lang.Class: java.lang.Class getSuperclass()>
<java.lang.Class: java.lang.ClassLoader getClassLoader(java.lang.Class)>
<java.lang.Class: java.lang.Object[] getSignatureAnnotation()>
<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructors(java.lang.Class,boolean)>
<java.lang.Class: java.lang.reflect.Constructor getEnclosingConstructor()>
<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.Class,java.lang.String)>
<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields(java.lang.Class,boolean)>
<java.lang.Class: java.lang.reflect.Member getDeclaredConstructorOrMethod(java.lang.Class,java.lang.String,java.lang.Class[])>
<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class,boolean)>
<java.lang.Class: java.lang.reflect.Method getEnclosingMethod()>
<java.lang.Class: java.lang.String getInnerClassName()>
<java.lang.Class: java.lang.String getNameNative()>
<java.lang.Class: T newInstanceImpl()>
<java.lang.Double: double longBitsToDouble(long)>
<java.lang.Double: long doubleToLongBits(double)>
<java.lang.Double: long doubleToRawLongBits(double)>
<java.lang.Float: float intBitsToFloat(int)>
<java.lang.Float: int floatToIntBits(float)>
<java.lang.Float: int floatToRawIntBits(float)>
<java.lang.Math: double abs(double)>
<java.lang.Math: double acos(double)>
<java.lang.Math: double asin(double)>
<java.lang.Math: double atan2(double,double)>
<java.lang.Math: double atan(double)>
<java.lang.Math: double cbrt(double)>
<java.lang.Math: double ceil(double)>
<java.lang.Math: double cos(double)>
<java.lang.Math: double cosh(double)>
<java.lang.Math: double exp(double)>
<java.lang.Math: double expm1(double)>
<java.lang.Math: double floor(double)>
<java.lang.Math: double hypot(double,double)>
<java.lang.Math: double IEEEremainder(double,double)>
<java.lang.Math: double log10(double)>
<java.lang.Math: double log1p(double)>
<java.lang.Math: double log(double)>
<java.lang.Math: double nextafter(double,double)>
<java.lang.Math: double pow(double,double)>
<java.lang.Math: double rint(double)>
<java.lang.Math: double sin(double)>
<java.lang.Math: double sinh(double)>
<java.lang.Math: double sqrt(double)>
<java.lang.Math: double tan(double)>
<java.lang.Math: double tanh(double)>
<java.lang.Math: float abs(float)>
<java.lang.Math: int abs(int)>
<java.lang.Math: int max(int,int)>
<java.lang.Math: int min(int,int)>
<java.lang.Math: long abs(long)>
<java.lang.Object: int hashCode()>
<java.lang.Object: java.lang.Class getClass()>
<java.lang.Object: java.lang.Object internalClone(java.lang.Cloneable)>
<java.lang.Object: void notify()>
<java.lang.Object: void notifyAll()>
<java.lang.Object: void wait(long,int)>
<java.lang.ProcessManager: int exec(java.lang.String[],java.lang.String[],java.lang.String,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,boolean)>
<java.lang.RealToString: void bigIntDigitGenerator(long,int,boolean,int)>
<java.lang.reflect.AccessibleObject: java.lang.Object[] getClassSignatureAnnotation(java.lang.Class)>
<java.lang.reflect.Array: java.lang.Object createMultiArray(java.lang.Class,int[])>
<java.lang.reflect.Array: java.lang.Object createObjectArray(java.lang.Class,int)>
<java.lang.reflect.Constructor: T constructNative(java.lang.Object[],java.lang.Class,java.lang.Class,int,boolean)>
<java.lang.reflect.Field: A getAnnotation(java.lang.Class,int,java.lang.Class)>
<java.lang.reflect.Field: boolean getZField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char)>
<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class,int,java.lang.Class)>
<java.lang.reflect.Field: byte getBField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char)>
<java.lang.reflect.Field: char getCField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char)>
<java.lang.reflect.Field: double getDField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char)>
<java.lang.reflect.Field: float getFField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char)>
<java.lang.reflect.Field: int getFieldModifiers(java.lang.Class,int)>
<java.lang.reflect.Field: int getIField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char)>
<java.lang.reflect.Field: java.lang.annotation.Annotation[] getDeclaredAnnotations(java.lang.Class,int)>
<java.lang.reflect.Field: java.lang.Object getField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean)>
<java.lang.reflect.Field: java.lang.Object[] getSignatureAnnotation(java.lang.Class,int)>
<java.lang.reflect.Field: long getJField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char)>
<java.lang.reflect.Field: short getSField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char)>
<java.lang.reflect.Field: void setBField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char,byte)>
<java.lang.reflect.Field: void setCField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char,char)>
<java.lang.reflect.Field: void setDField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char,double)>
<java.lang.reflect.Field: void setFField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char,float)>
<java.lang.reflect.Field: void setField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,java.lang.Object)>
<java.lang.reflect.Field: void setIField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char,int)>
<java.lang.reflect.Field: void setJField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char,long)>
<java.lang.reflect.Field: void setSField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char,short)>
<java.lang.reflect.Field: void setZField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char,boolean)>
<java.lang.reflect.Method: A getAnnotation(java.lang.Class,int,java.lang.Class)>
<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class,int,java.lang.Class)>
<java.lang.reflect.Method: int getMethodModifiers(java.lang.Class,int)>
<java.lang.reflect.Method: java.lang.annotation.Annotation[] getDeclaredAnnotations(java.lang.Class,int)>
<java.lang.reflect.Method: java.lang.annotation.Annotation[][] getParameterAnnotations(java.lang.Class,int)>
<java.lang.reflect.Method: java.lang.Object getDefaultValue(java.lang.Class,int)>
<java.lang.reflect.Method: java.lang.Object[] getSignatureAnnotation(java.lang.Class,int)>
<java.lang.reflect.Method: java.lang.Object invokeNative(java.lang.Object,java.lang.Object[],java.lang.Class,java.lang.Class,java.lang.Class,int,boolean)>
<java.lang.reflect.Proxy: java.lang.Class generateProxy(java.lang.String,java.lang.Class[],java.lang.ClassLoader)>
<java.lang.reflect.Proxy: void constructorPrototype(java.lang.reflect.InvocationHandler)>
<java.lang.Runtime: java.lang.String nativeLoad(java.lang.String,java.lang.ClassLoader)>
<java.lang.Runtime: long freeMemory()>
<java.lang.Runtime: long maxMemory()>
<java.lang.Runtime: long totalMemory()>
<java.lang.Runtime: void gc()>
<java.lang.Runtime: void nativeExit(int,boolean)>
<java.lang.StrictMath: double acos(double)>
<java.lang.StrictMath: double asin(double)>
<java.lang.StrictMath: double atan2(double,double)>
<java.lang.StrictMath: double atan(double)>
<java.lang.StrictMath: double cbrt(double)>
<java.lang.StrictMath: double ceil(double)>
<java.lang.StrictMath: double cos(double)>
<java.lang.StrictMath: double cosh(double)>
<java.lang.StrictMath: double exp(double)>
<java.lang.StrictMath: double expm1(double)>
<java.lang.StrictMath: double floor(double)>
<java.lang.StrictMath: double hypot(double,double)>
<java.lang.StrictMath: double IEEEremainder(double,double)>
<java.lang.StrictMath: double log10(double)>
<java.lang.StrictMath: double log1p(double)>
<java.lang.StrictMath: double log(double)>
<java.lang.StrictMath: double nextafter(double,double)>
<java.lang.StrictMath: double pow(double,double)>
<java.lang.StrictMath: double rint(double)>
<java.lang.StrictMath: double sin(double)>
<java.lang.StrictMath: double sinh(double)>
<java.lang.StrictMath: double sqrt(double)>
<java.lang.StrictMath: double tan(double)>
<java.lang.StrictMath: double tanh(double)>
<java.lang.String: boolean equals(java.lang.Object)>
<java.lang.String: boolean isEmpty()>
<java.lang.String: char charAt(int)>
<java.lang.String: int compareTo(java.lang.String)>
<java.lang.String: int fastIndexOf(int,int)>
<java.lang.String: int length()>
<java.lang.String: java.lang.String intern()>
<java.lang.StringToReal: double parseDblImpl(java.lang.String,int)>
<java.lang.StringToReal: float parseFltImpl(java.lang.String,int)>
<java.lang.System: int identityHashCode(java.lang.Object)>
<java.lang.System: java.lang.String getEnvByName(java.lang.String)>
<java.lang.System: java.lang.String mapLibraryName(java.lang.String)>
<java.lang.System: java.lang.String[] specialProperties()>
<java.lang.System: long currentTimeMillis()>
<java.lang.System: long nanoTime()>
<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.lang.System: void log(char,java.lang.String,java.lang.Throwable)>
<java.lang.System: void setFieldImpl(java.lang.String,java.lang.String,java.lang.Object)>
<java.lang.Throwable: java.lang.Object nativeFillInStackTrace()>
<java.lang.Throwable: java.lang.StackTraceElement[] nativeGetStackTrace(java.lang.Object)>
<java.lang.VMClassLoader: int getBootClassPathSize()>
<java.lang.VMClassLoader: java.lang.Class defineClass(java.lang.ClassLoader,byte[],int,int)>
<java.lang.VMClassLoader: java.lang.Class defineClass(java.lang.ClassLoader,java.lang.String,byte[],int,int)>
<java.lang.VMClassLoader: java.lang.Class findLoadedClass(java.lang.ClassLoader,java.lang.String)>
<java.lang.VMClassLoader: java.lang.Class getPrimitiveClass(char)>
<java.lang.VMClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>
<java.lang.VMClassLoader: java.lang.String getBootClassPathResource(java.lang.String,int)>
<java.lang.VMThread: boolean holdsLock(java.lang.Object)>
<java.lang.VMThread: boolean interrupted()>
<java.lang.VMThread: boolean isInterrupted()>
<java.lang.VMThread: int getStatus()>
<java.lang.VMThread: java.lang.Thread currentThread()>
<java.lang.VMThread: void create(java.lang.Thread,long)>
<java.lang.VMThread: void interrupt()>
<java.lang.VMThread: void nameChanged(java.lang.String)>
<java.lang.VMThread: void setPriority(int)>
<java.lang.VMThread: void sleep(long,int)>
<java.lang.VMThread: void yield()>
<java.math.NativeBN: boolean BN_add(int,int,int)>
<java.math.NativeBN: boolean BN_add_word(int,int)>
<java.math.NativeBN: boolean BN_bin2bn(byte[],int,boolean,int)>
<java.math.NativeBN: boolean BN_copy(int,int)>
<java.math.NativeBN: boolean BN_div(int,int,int,int)>
<java.math.NativeBN: boolean BN_exp(int,int,int)>
<java.math.NativeBN: boolean BN_gcd(int,int,int)>
<java.math.NativeBN: boolean BN_generate_prime_ex(int,int,boolean,int,int,int)>
<java.math.NativeBN: boolean BN_is_bit_set(int,int)>
<java.math.NativeBN: boolean BN_is_prime_ex(int,int,int)>
<java.math.NativeBN: boolean BN_mod_exp(int,int,int,int)>
<java.math.NativeBN: boolean BN_mod_inverse(int,int,int)>
<java.math.NativeBN: boolean BN_mul(int,int,int)>
<java.math.NativeBN: boolean BN_mul_word(int,int)>
<java.math.NativeBN: boolean BN_nnmod(int,int,int)>
<java.math.NativeBN: boolean BN_shift(int,int,int)>
<java.math.NativeBN: boolean BN_sub(int,int,int)>
<java.math.NativeBN: boolean BN_sub_word(int,int)>
<java.math.NativeBN: boolean litEndInts2bn(int[],int,boolean,int)>
<java.math.NativeBN: boolean modifyBit(int,int,int)>
<java.math.NativeBN: boolean putLongInt(int,long)>
<java.math.NativeBN: boolean putULongInt(int,long,boolean)>
<java.math.NativeBN: boolean twosComp2bn(byte[],int,int)>
<java.math.NativeBN: byte[] BN_bn2bin(int)>
<java.math.NativeBN: int bitLength(int)>
<java.math.NativeBN: int[] bn2litEndInts(int)>
<java.math.NativeBN: int BN_cmp(int,int)>
<java.math.NativeBN: int BN_dec2bn(int,java.lang.String)>
<java.math.NativeBN: int BN_div_word(int,int)>
<java.math.NativeBN: int BN_hex2bn(int,java.lang.String)>
<java.math.NativeBN: int BN_mod_word(int,int)>
<java.math.NativeBN: int BN_new()>
<java.math.NativeBN: int ERR_get_error()>
<java.math.NativeBN: int sign(int)>
<java.math.NativeBN: java.lang.String BN_bn2dec(int)>
<java.math.NativeBN: java.lang.String BN_bn2hex(int)>
<java.math.NativeBN: java.lang.String ERR_error_string(int)>
<java.math.NativeBN: long longInt(int)>
<java.math.NativeBN: void BN_free(int)>
<java.math.NativeBN: void BN_set_negative(int,int)>
<java.nio.ByteOrder: boolean isLittleEndian()>
<java.nio.charset.Charsets: byte[] toAsciiBytes(char[],int,int)>
<java.nio.charset.Charsets: byte[] toIsoLatin1Bytes(char[],int,int)>
<java.nio.charset.Charsets: byte[] toUtf8Bytes(char[],int,int)>
<java.nio.charset.Charsets: void asciiBytesToChars(byte[],int,int,char[])>
<java.nio.charset.Charsets: void isoLatin1BytesToChars(byte[],int,int,char[])>
<java.text.Bidi: byte[] ubidi_getLevels(long)>
<java.text.Bidi: byte ubidi_getParaLevel(long)>
<java.text.Bidi: int ubidi_countRuns(long)>
<java.text.Bidi: int ubidi_getDirection(long)>
<java.text.Bidi: int ubidi_getLength(long)>
<java.text.Bidi: int[] ubidi_reorderVisual(byte[],int)>
<java.text.Bidi: java.text.Bidi$Run[] ubidi_getRuns(long)>
<java.text.Bidi: long ubidi_open()>
<java.text.Bidi: long ubidi_setLine(long,int,int)>
<java.text.Bidi: void ubidi_close(long)>
<java.text.Bidi: void ubidi_setPara(long,char[],int,int,byte[])>
<java.util.concurrent.atomic.AtomicLong: boolean VMSupportsCS8()>
<java.util.regex.Matcher: boolean findImpl(int,java.lang.String,int,int[])>
<java.util.regex.Matcher: boolean findNextImpl(int,java.lang.String,int[])>
<java.util.regex.Matcher: boolean hitEndImpl(int)>
<java.util.regex.Matcher: boolean lookingAtImpl(int,java.lang.String,int[])>
<java.util.regex.Matcher: boolean matchesImpl(int,java.lang.String,int[])>
<java.util.regex.Matcher: boolean requireEndImpl(int)>
<java.util.regex.Matcher: int groupCountImpl(int)>
<java.util.regex.Matcher: int openImpl(int)>
<java.util.regex.Matcher: void closeImpl(int)>
<java.util.regex.Matcher: void setInputImpl(int,java.lang.String,int,int)>
<java.util.regex.Matcher: void useAnchoringBoundsImpl(int,boolean)>
<java.util.regex.Matcher: void useTransparentBoundsImpl(int,boolean)>
<java.util.regex.Pattern: int compileImpl(java.lang.String,int)>
<java.util.regex.Pattern: void closeImpl(int)>
<java.util.zip.Adler32: long updateByteImpl(int,long)>
<java.util.zip.Adler32: long updateImpl(byte[],int,int,long)>
<java.util.zip.CRC32: long updateByteImpl(byte,long)>
<java.util.zip.CRC32: long updateImpl(byte[],int,int,long)>
<java.util.zip.Deflater: int deflateImpl(byte[],int,int,long,int)>
<java.util.zip.Deflater: int getAdlerImpl(long)>
<java.util.zip.Deflater: long createStream(int,int,boolean)>
<java.util.zip.Deflater: long getTotalInImpl(long)>
<java.util.zip.Deflater: long getTotalOutImpl(long)>
<java.util.zip.Deflater: void endImpl(long)>
<java.util.zip.Deflater: void resetImpl(long)>
<java.util.zip.Deflater: void setDictionaryImpl(byte[],int,int,long)>
<java.util.zip.Deflater: void setInputImpl(byte[],int,int,long)>
<java.util.zip.Deflater: void setLevelsImpl(int,int,long)>
<java.util.zip.Inflater: int getAdlerImpl(long)>
<java.util.zip.Inflater: int inflateImpl(byte[],int,int,long)>
<java.util.zip.Inflater: int setFileInputImpl(java.io.FileDescriptor,long,int,long)>
<java.util.zip.Inflater: long createStream(boolean)>
<java.util.zip.Inflater: long getTotalInImpl(long)>
<java.util.zip.Inflater: long getTotalOutImpl(long)>
<java.util.zip.Inflater: void endImpl(long)>
<java.util.zip.Inflater: void resetImpl(long)>
<java.util.zip.Inflater: void setDictionaryImpl(byte[],int,int,long)>
<java.util.zip.Inflater: void setInputImpl(byte[],int,int,long)>
<libcore.icu.ICU: boolean initLocaleDataImpl(java.lang.String,libcore.icu.LocaleData)>
<libcore.icu.ICU: int getCurrencyFractionDigits(java.lang.String)>
<libcore.icu.ICU: java.lang.String addLikelySubtags(java.lang.String)>
<libcore.icu.ICU: java.lang.String[] getAvailableBreakIteratorLocalesNative()>
<libcore.icu.ICU: java.lang.String[] getAvailableCalendarLocalesNative()>
<libcore.icu.ICU: java.lang.String[] getAvailableCollatorLocalesNative()>
<libcore.icu.ICU: java.lang.String[] getAvailableCurrencyCodes()>
<libcore.icu.ICU: java.lang.String[] getAvailableDateFormatLocalesNative()>
<libcore.icu.ICU: java.lang.String[] getAvailableLocalesNative()>
<libcore.icu.ICU: java.lang.String[] getAvailableNumberFormatLocalesNative()>
<libcore.icu.ICU: java.lang.String getCurrencyCode(java.lang.String)>
<libcore.icu.ICU: java.lang.String getCurrencyDisplayName(java.lang.String,java.lang.String)>
<libcore.icu.ICU: java.lang.String getCurrencySymbol(java.lang.String,java.lang.String)>
<libcore.icu.ICU: java.lang.String getDisplayCountryNative(java.lang.String,java.lang.String)>
<libcore.icu.ICU: java.lang.String getDisplayLanguageNative(java.lang.String,java.lang.String)>
<libcore.icu.ICU: java.lang.String getDisplayVariantNative(java.lang.String,java.lang.String)>
<libcore.icu.ICU: java.lang.String getIcuVersion()>
<libcore.icu.ICU: java.lang.String getISO3CountryNative(java.lang.String)>
<libcore.icu.ICU: java.lang.String getISO3LanguageNative(java.lang.String)>
<libcore.icu.ICU: java.lang.String[] getISOCountriesNative()>
<libcore.icu.ICU: java.lang.String[] getISOLanguagesNative()>
<libcore.icu.ICU: java.lang.String getScript(java.lang.String)>
<libcore.icu.ICU: java.lang.String getUnicodeVersion()>
<libcore.icu.ICU: java.lang.String toLowerCase(java.lang.String,java.lang.String)>
<libcore.icu.ICU: java.lang.String toUpperCase(java.lang.String,java.lang.String)>
<libcore.icu.NativeBreakIterator: boolean isBoundaryImpl(int,int)>
<libcore.icu.NativeBreakIterator: int cloneImpl(int)>
<libcore.icu.NativeBreakIterator: int currentImpl(int)>
<libcore.icu.NativeBreakIterator: int firstImpl(int)>
<libcore.icu.NativeBreakIterator: int followingImpl(int,int)>
<libcore.icu.NativeBreakIterator: int getCharacterInstanceImpl(java.lang.String)>
<libcore.icu.NativeBreakIterator: int getLineInstanceImpl(java.lang.String)>
<libcore.icu.NativeBreakIterator: int getSentenceInstanceImpl(java.lang.String)>
<libcore.icu.NativeBreakIterator: int getWordInstanceImpl(java.lang.String)>
<libcore.icu.NativeBreakIterator: int lastImpl(int)>
<libcore.icu.NativeBreakIterator: int nextImpl(int,int)>
<libcore.icu.NativeBreakIterator: int precedingImpl(int,int)>
<libcore.icu.NativeBreakIterator: int previousImpl(int)>
<libcore.icu.NativeBreakIterator: void closeBreakIteratorImpl(int)>
<libcore.icu.NativeBreakIterator: void setTextImpl(int,java.lang.String)>
<libcore.icu.NativeCollation: byte[] getSortKey(int,java.lang.String)>
<libcore.icu.NativeCollation: int compare(int,java.lang.String,java.lang.String)>
<libcore.icu.NativeCollation: int getAttribute(int,int)>
<libcore.icu.NativeCollation: int getCollationElementIterator(int,java.lang.String)>
<libcore.icu.NativeCollation: int getMaxExpansion(int,int)>
<libcore.icu.NativeCollation: int getOffset(int)>
<libcore.icu.NativeCollation: int next(int)>
<libcore.icu.NativeCollation: int openCollatorFromRules(java.lang.String,int,int)>
<libcore.icu.NativeCollation: int openCollator(java.lang.String)>
<libcore.icu.NativeCollation: int previous(int)>
<libcore.icu.NativeCollation: int safeClone(int)>
<libcore.icu.NativeCollation: java.lang.String getRules(int)>
<libcore.icu.NativeCollation: void closeCollator(int)>
<libcore.icu.NativeCollation: void closeElements(int)>
<libcore.icu.NativeCollation: void reset(int)>
<libcore.icu.NativeCollation: void setAttribute(int,int,int)>
<libcore.icu.NativeCollation: void setOffset(int,int)>
<libcore.icu.NativeCollation: void setText(int,java.lang.String)>
<libcore.icu.NativeConverter: boolean canEncode(long,int)>
<libcore.icu.NativeConverter: boolean contains(java.lang.String,java.lang.String)>
<libcore.icu.NativeConverter: byte[] getSubstitutionBytes(long)>
<libcore.icu.NativeConverter: float getAveBytesPerChar(long)>
<libcore.icu.NativeConverter: float getAveCharsPerByte(long)>
<libcore.icu.NativeConverter: int decode(long,byte[],int,char[],int,int[],boolean)>
<libcore.icu.NativeConverter: int encode(long,char[],int,byte[],int,int[],boolean)>
<libcore.icu.NativeConverter: int getMaxBytesPerChar(long)>
<libcore.icu.NativeConverter: int getMinBytesPerChar(long)>
<libcore.icu.NativeConverter: int setCallbackDecode(long,int,int,java.lang.String)>
<libcore.icu.NativeConverter: int setCallbackEncode(long,int,int,byte[])>
<libcore.icu.NativeConverter: java.lang.String[] getAvailableCharsetNames()>
<libcore.icu.NativeConverter: java.nio.charset.Charset charsetForName(java.lang.String)>
<libcore.icu.NativeConverter: long openConverter(java.lang.String)>
<libcore.icu.NativeConverter: void closeConverter(long)>
<libcore.icu.NativeConverter: void resetByteToChar(long)>
<libcore.icu.NativeConverter: void resetCharToByte(long)>
<libcore.icu.NativeDecimalFormat: char[] formatDigitList(int,java.lang.String,libcore.icu.NativeDecimalFormat$FieldPositionIterator)>
<libcore.icu.NativeDecimalFormat: char[] formatDouble(int,double,libcore.icu.NativeDecimalFormat$FieldPositionIterator)>
<libcore.icu.NativeDecimalFormat: char[] formatLong(int,long,libcore.icu.NativeDecimalFormat$FieldPositionIterator)>
<libcore.icu.NativeDecimalFormat: int cloneImpl(int)>
<libcore.icu.NativeDecimalFormat: int getAttribute(int,int)>
<libcore.icu.NativeDecimalFormat: int open(java.lang.String,java.lang.String,char,char,java.lang.String,char,java.lang.String,java.lang.String,char,char,java.lang.String,char,char,char,char)>
<libcore.icu.NativeDecimalFormat: java.lang.Number parse(int,java.lang.String,java.text.ParsePosition,boolean)>
<libcore.icu.NativeDecimalFormat: java.lang.String getTextAttribute(int,int)>
<libcore.icu.NativeDecimalFormat: java.lang.String toPatternImpl(int,boolean)>
<libcore.icu.NativeDecimalFormat: void applyPatternImpl(int,boolean,java.lang.String)>
<libcore.icu.NativeDecimalFormat: void close(int)>
<libcore.icu.NativeDecimalFormat: void setAttribute(int,int,int)>
<libcore.icu.NativeDecimalFormat: void setDecimalFormatSymbols(int,java.lang.String,char,char,java.lang.String,char,java.lang.String,java.lang.String,char,char,java.lang.String,char,char,char,char)>
<libcore.icu.NativeDecimalFormat: void setRoundingMode(int,int,double)>
<libcore.icu.NativeDecimalFormat: void setSymbol(int,int,java.lang.String)>
<libcore.icu.NativeDecimalFormat: void setTextAttribute(int,int,java.lang.String)>
<libcore.icu.NativeIDN: java.lang.String convertImpl(java.lang.String,int,boolean)>
<libcore.icu.NativeNormalizer: boolean isNormalizedImpl(java.lang.String,int)>
<libcore.icu.NativeNormalizer: java.lang.String normalizeImpl(java.lang.String,int)>
<libcore.icu.NativePluralRules: int forLocaleImpl(java.lang.String)>
<libcore.icu.NativePluralRules: int quantityForIntImpl(int,int)>
<libcore.icu.NativePluralRules: void finalizeImpl(int)>
<libcore.icu.TimeZones: java.lang.String[] forCountryCode(java.lang.String)>
<libcore.icu.TimeZones: java.lang.String[][] getZoneStringsImpl(java.lang.String,java.lang.String[])>
<libcore.io.AsynchronousCloseMonitor: void signalBlockedThreads(java.io.FileDescriptor)>
<libcore.io.Memory: byte peekByte(int)>
<libcore.io.Memory: int peekInt(int,boolean)>
<libcore.io.Memory: long peekLong(int,boolean)>
<libcore.io.Memory: short peekShort(int,boolean)>
<libcore.io.Memory: void memmove(java.lang.Object,int,java.lang.Object,int,long)>
<libcore.io.Memory: void peekByteArray(int,byte[],int,int)>
<libcore.io.Memory: void peekCharArray(int,char[],int,int,boolean)>
<libcore.io.Memory: void peekDoubleArray(int,double[],int,int,boolean)>
<libcore.io.Memory: void peekFloatArray(int,float[],int,int,boolean)>
<libcore.io.Memory: void peekIntArray(int,int[],int,int,boolean)>
<libcore.io.Memory: void peekLongArray(int,long[],int,int,boolean)>
<libcore.io.Memory: void peekShortArray(int,short[],int,int,boolean)>
<libcore.io.Memory: void pokeByteArray(int,byte[],int,int)>
<libcore.io.Memory: void pokeByte(int,byte)>
<libcore.io.Memory: void pokeCharArray(int,char[],int,int,boolean)>
<libcore.io.Memory: void pokeDoubleArray(int,double[],int,int,boolean)>
<libcore.io.Memory: void pokeFloatArray(int,float[],int,int,boolean)>
<libcore.io.Memory: void pokeIntArray(int,int[],int,int,boolean)>
<libcore.io.Memory: void pokeInt(int,int,boolean)>
<libcore.io.Memory: void pokeLongArray(int,long[],int,int,boolean)>
<libcore.io.Memory: void pokeLong(int,long,boolean)>
<libcore.io.Memory: void pokeShortArray(int,short[],int,int,boolean)>
<libcore.io.Memory: void pokeShort(int,short,boolean)>
<libcore.io.Memory: void unsafeBulkGet(java.lang.Object,int,int,byte[],int,int,boolean)>
<libcore.io.Memory: void unsafeBulkPut(byte[],int,int,java.lang.Object,int,int,boolean)>
<libcore.io.OsConstants: void initConstants()>
<libcore.io.Posix: boolean access(java.lang.String,int)>
<libcore.io.Posix: boolean isatty(java.io.FileDescriptor)>
<libcore.io.Posix: int fcntlFlock(java.io.FileDescriptor,int,libcore.io.StructFlock)>
<libcore.io.Posix: int fcntlLong(java.io.FileDescriptor,int,long)>
<libcore.io.Posix: int fcntlVoid(java.io.FileDescriptor,int)>
<libcore.io.Posix: int getegid()>
<libcore.io.Posix: int geteuid()>
<libcore.io.Posix: int getgid()>
<libcore.io.Posix: int getpid()>
<libcore.io.Posix: int getppid()>
<libcore.io.Posix: int getsockoptByte(java.io.FileDescriptor,int,int)>
<libcore.io.Posix: int getsockoptInt(java.io.FileDescriptor,int,int)>
<libcore.io.Posix: int getuid()>
<libcore.io.Posix: int ioctlInt(java.io.FileDescriptor,int,libcore.util.MutableInt)>
<libcore.io.Posix: int poll(libcore.io.StructPollfd[],int)>
<libcore.io.Posix: int preadBytes(java.io.FileDescriptor,java.lang.Object,int,int,long)>
<libcore.io.Posix: int pwriteBytes(java.io.FileDescriptor,java.lang.Object,int,int,long)>
<libcore.io.Posix: int readBytes(java.io.FileDescriptor,java.lang.Object,int,int)>
<libcore.io.Posix: int readv(java.io.FileDescriptor,java.lang.Object[],int[],int[])>
<libcore.io.Posix: int recvfromBytes(java.io.FileDescriptor,java.lang.Object,int,int,int,java.net.InetSocketAddress)>
<libcore.io.Posix: int sendtoBytes(java.io.FileDescriptor,java.lang.Object,int,int,int,java.net.InetAddress,int)>
<libcore.io.Posix: int waitpid(int,libcore.util.MutableInt,int)>
<libcore.io.Posix: int writeBytes(java.io.FileDescriptor,java.lang.Object,int,int)>
<libcore.io.Posix: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>
<libcore.io.Posix: java.io.FileDescriptor accept(java.io.FileDescriptor,java.net.InetSocketAddress)>
<libcore.io.Posix: java.io.FileDescriptor dup2(java.io.FileDescriptor,int)>
<libcore.io.Posix: java.io.FileDescriptor dup(java.io.FileDescriptor)>
<libcore.io.Posix: java.io.FileDescriptor open(java.lang.String,int,int)>
<libcore.io.Posix: java.io.FileDescriptor[] pipe()>
<libcore.io.Posix: java.io.FileDescriptor socket(int,int,int)>
<libcore.io.Posix: java.lang.String[] environ()>
<libcore.io.Posix: java.lang.String gai_strerror(int)>
<libcore.io.Posix: java.lang.String getenv(java.lang.String)>
<libcore.io.Posix: java.lang.String getnameinfo(java.net.InetAddress,int)>
<libcore.io.Posix: java.lang.String if_indextoname(int)>
<libcore.io.Posix: java.lang.String strerror(int)>
<libcore.io.Posix: java.net.InetAddress[] getaddrinfo(java.lang.String,libcore.io.StructAddrinfo)>
<libcore.io.Posix: java.net.InetAddress getsockoptInAddr(java.io.FileDescriptor,int,int)>
<libcore.io.Posix: java.net.InetAddress inet_pton(int,java.lang.String)>
<libcore.io.Posix: java.net.InetAddress ioctlInetAddress(java.io.FileDescriptor,int,java.lang.String)>
<libcore.io.Posix: java.net.SocketAddress getsockname(java.io.FileDescriptor)>
<libcore.io.Posix: libcore.io.StructLinger getsockoptLinger(java.io.FileDescriptor,int,int)>
<libcore.io.Posix: libcore.io.StructPasswd getpwnam(java.lang.String)>
<libcore.io.Posix: libcore.io.StructPasswd getpwuid(int)>
<libcore.io.Posix: libcore.io.StructStatFs fstatfs(java.io.FileDescriptor)>
<libcore.io.Posix: libcore.io.StructStatFs statfs(java.lang.String)>
<libcore.io.Posix: libcore.io.StructStat fstat(java.io.FileDescriptor)>
<libcore.io.Posix: libcore.io.StructStat lstat(java.lang.String)>
<libcore.io.Posix: libcore.io.StructStat stat(java.lang.String)>
<libcore.io.Posix: libcore.io.StructTimeval getsockoptTimeval(java.io.FileDescriptor,int,int)>
<libcore.io.Posix: libcore.io.StructUtsname uname()>
<libcore.io.Posix: long lseek(java.io.FileDescriptor,long,int)>
<libcore.io.Posix: long mmap(long,long,int,int,java.io.FileDescriptor,long)>
<libcore.io.Posix: long sendfile(java.io.FileDescriptor,java.io.FileDescriptor,libcore.util.MutableLong,long)>
<libcore.io.Posix: long sysconf(int)>
<libcore.io.Posix: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>
<libcore.io.Posix: void chmod(java.lang.String,int)>
<libcore.io.Posix: void close(java.io.FileDescriptor)>
<libcore.io.Posix: void connect(java.io.FileDescriptor,java.net.InetAddress,int)>
<libcore.io.Posix: void fdatasync(java.io.FileDescriptor)>
<libcore.io.Posix: void fsync(java.io.FileDescriptor)>
<libcore.io.Posix: void ftruncate(java.io.FileDescriptor,long)>
<libcore.io.Posix: void kill(int,int)>
<libcore.io.Posix: void listen(java.io.FileDescriptor,int)>
<libcore.io.Posix: void mincore(long,long,byte[])>
<libcore.io.Posix: void mkdir(java.lang.String,int)>
<libcore.io.Posix: void mlock(long,long)>
<libcore.io.Posix: void msync(long,long,int)>
<libcore.io.Posix: void munlock(long,long)>
<libcore.io.Posix: void munmap(long,long)>
<libcore.io.Posix: void remove(java.lang.String)>
<libcore.io.Posix: void rename(java.lang.String,java.lang.String)>
<libcore.io.Posix: void setegid(int)>
<libcore.io.Posix: void seteuid(int)>
<libcore.io.Posix: void setgid(int)>
<libcore.io.Posix: void setsockoptByte(java.io.FileDescriptor,int,int,int)>
<libcore.io.Posix: void setsockoptGroupReq(java.io.FileDescriptor,int,int,libcore.io.StructGroupReq)>
<libcore.io.Posix: void setsockoptIfreq(java.io.FileDescriptor,int,int,java.lang.String)>
<libcore.io.Posix: void setsockoptInt(java.io.FileDescriptor,int,int,int)>
<libcore.io.Posix: void setsockoptIpMreqn(java.io.FileDescriptor,int,int,int)>
<libcore.io.Posix: void setsockoptLinger(java.io.FileDescriptor,int,int,libcore.io.StructLinger)>
<libcore.io.Posix: void setsockoptTimeval(java.io.FileDescriptor,int,int,libcore.io.StructTimeval)>
<libcore.io.Posix: void setuid(int)>
<libcore.io.Posix: void shutdown(java.io.FileDescriptor,int)>
<libcore.io.Posix: void symlink(java.lang.String,java.lang.String)>
<libcore.net.RawSocket: int recvPacket(java.io.FileDescriptor,byte[],int,int,int,int)>
<libcore.net.RawSocket: int sendPacket(java.io.FileDescriptor,java.lang.String,byte[],byte[],int,int)>
<libcore.net.RawSocket: void create(java.io.FileDescriptor,java.lang.String)>
<org.apache.harmony.dalvik.ddmc.DdmServer: void nativeSendChunk(int,byte[],int,int)>
<org.apache.harmony.dalvik.ddmc.DdmVmInternal: boolean getRecentAllocationStatus()>
<org.apache.harmony.dalvik.ddmc.DdmVmInternal: boolean heapInfoNotify(int)>
<org.apache.harmony.dalvik.ddmc.DdmVmInternal: boolean heapSegmentNotify(int,int,boolean)>
<org.apache.harmony.dalvik.ddmc.DdmVmInternal: byte[] getRecentAllocations()>
<org.apache.harmony.dalvik.ddmc.DdmVmInternal: byte[] getThreadStats()>
<org.apache.harmony.dalvik.ddmc.DdmVmInternal: java.lang.StackTraceElement[] getStackTraceById(int)>
<org.apache.harmony.dalvik.ddmc.DdmVmInternal: void enableRecentAllocations(boolean)>
<org.apache.harmony.dalvik.ddmc.DdmVmInternal: void threadNotify(boolean)>
<org.apache.harmony.dalvik.NativeTestTarget: void emptyInternalStaticMethod()>
<org.apache.harmony.dalvik.NativeTestTarget: void emptyJniStaticMethod0()>
<org.apache.harmony.dalvik.NativeTestTarget: void emptyJniStaticMethod6(int,int,int,int,int,int)>
<org.apache.harmony.dalvik.NativeTestTarget: void emptyJniStaticMethod6L(java.lang.String,java.lang.String[],int[][],java.lang.Object,java.lang.Object[],java.lang.Object[][][][])>
<org.apache.harmony.xml.ExpatAttributes: int getIndexForQName(int,java.lang.String)>
<org.apache.harmony.xml.ExpatAttributes: int getIndex(int,java.lang.String,java.lang.String)>
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getLocalName(int,int,int)>
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getQName(int,int,int)>
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getURI(int,int,int)>
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getValueByIndex(int,int)>
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getValueForQName(int,java.lang.String)>
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getValue(int,java.lang.String,java.lang.String)>
<org.apache.harmony.xml.ExpatAttributes: void freeAttributes(int)>
<org.apache.harmony.xml.ExpatParser: int cloneAttributes(int,int)>
<org.apache.harmony.xml.ExpatParser: int column(int)>
<org.apache.harmony.xml.ExpatParser: int createEntityParser(int,java.lang.String)>
<org.apache.harmony.xml.ExpatParser: int initialize(java.lang.String,boolean)>
<org.apache.harmony.xml.ExpatParser: int line(int)>
<org.apache.harmony.xml.ExpatParser: void appendBytes(int,byte[],int,int)>
<org.apache.harmony.xml.ExpatParser: void appendChars(int,char[],int,int)>
<org.apache.harmony.xml.ExpatParser: void appendString(int,java.lang.String,boolean)>
<org.apache.harmony.xml.ExpatParser: void release(int)>
<org.apache.harmony.xml.ExpatParser: void releaseParser(int)>
<org.apache.harmony.xml.ExpatParser: void staticInitialize(java.lang.String)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: byte[] i2d_SSL_SESSION(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: byte[][] SSL_get_certificate(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: byte[][] SSL_get_peer_cert_chain(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: byte[] SSL_SESSION_session_id(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: int d2i_SSL_SESSION(byte[])>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: int EVP_DigestFinal(int,byte[],int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: int EVP_DigestInit(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: int EVP_get_digestbyname(java.lang.String)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: int EVP_MD_block_size(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: int EVP_MD_CTX_copy(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: int EVP_MD_size(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: int EVP_PKEY_new_DSA(byte[],byte[],byte[],byte[],byte[])>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: int EVP_PKEY_new_RSA(byte[],byte[],byte[],byte[],byte[])>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: int EVP_VerifyFinal(int,byte[],int,int,int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: int EVP_VerifyInit(java.lang.String)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: int RAND_load_file(java.lang.String,long)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: int SSL_CTX_new()>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: int SSL_do_handshake(int,java.io.FileDescriptor,org.apache.harmony.xnet.provider.jsse.NativeCrypto$SSLHandshakeCallbacks,int,boolean)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: int SSL_new(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: int SSL_read(int,java.io.FileDescriptor,org.apache.harmony.xnet.provider.jsse.NativeCrypto$SSLHandshakeCallbacks,byte[],int,int,int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: java.lang.String SSL_get_servername(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: java.lang.String SSL_SESSION_cipher(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: java.lang.String SSL_SESSION_compress_meth(int,int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: java.lang.String SSL_SESSION_get_version(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: long SSL_clear_mode(int,long)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: long SSL_clear_options(int,long)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: long SSL_get_mode(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: long SSL_get_options(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: long SSL_SESSION_get_time(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: long SSL_set_mode(int,long)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: long SSL_set_options(int,long)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void clinit()>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void EVP_DigestUpdate(int,byte[],int,int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void EVP_MD_CTX_destroy(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void EVP_PKEY_free(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void EVP_VerifyUpdate(int,byte[],int,int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void RAND_seed(byte[])>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void SSL_check_private_key(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void SSL_CTX_free(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void SSL_free(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void SSL_interrupt(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void SSL_renegotiate(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void SSL_SESSION_free(int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void SSL_set_cipher_lists(int,java.lang.String[])>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void SSL_set_client_CA_list(int,byte[][])>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void SSL_set_session_creation_enabled(int,boolean)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void SSL_set_session(int,int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void SSL_set_tlsext_host_name(int,java.lang.String)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void SSL_set_verify(int,int)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void SSL_shutdown(int,java.io.FileDescriptor,org.apache.harmony.xnet.provider.jsse.NativeCrypto$SSLHandshakeCallbacks)>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void SSL_use_certificate(int,byte[][])>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void SSL_use_PrivateKey(int,byte[])>
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void SSL_write(int,java.io.FileDescriptor,org.apache.harmony.xnet.provider.jsse.NativeCrypto$SSLHandshakeCallbacks,byte[],int,int)>
<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>
<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>
<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>
<sun.misc.Unsafe: int arrayBaseOffset0(java.lang.Class)>
<sun.misc.Unsafe: int arrayIndexScale0(java.lang.Class)>
<sun.misc.Unsafe: int getInt(java.lang.Object,long)>
<sun.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>
<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>
<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>
<sun.misc.Unsafe: long getLong(java.lang.Object,long)>
<sun.misc.Unsafe: long getLongVolatile(java.lang.Object,long)>
<sun.misc.Unsafe: long objectFieldOffset0(java.lang.reflect.Field)>
<sun.misc.Unsafe: void putInt(java.lang.Object,long,int)>
<sun.misc.Unsafe: void putIntVolatile(java.lang.Object,long,int)>
<sun.misc.Unsafe: void putLong(java.lang.Object,long,long)>
<sun.misc.Unsafe: void putLongVolatile(java.lang.Object,long,long)>
<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>
<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>
<sun.misc.Unsafe: void putOrderedInt(java.lang.Object,long,int)>
<sun.misc.Unsafe: void putOrderedLong(java.lang.Object,long,long)>
<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>
