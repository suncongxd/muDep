#
# This file details all of the supported system calls that can be made
# by an Android Program.  Each call can be labeled as one of:
#
#   safe     - The call is always safe and can be made anywhere in the program.
#   spec     - The call is supported but has security implications.  It can
#              be made only if explicitly allowed in the spec.
#   ban      - This call is banned, applications cannot use this call under
#              any circumstances.  Calls not identified in this file are 
#              'ban' by default.
#
# Other flags can be specified in addition to the basic labels above.  This
# list will probably be expanded over time.  Most of these flags are
# simply for documentation purposes and not explicitly used by the system.
# Flags are separated from the label by vertical bars (|)
#
#   model    - The call needs to be modeled by the system.  A call needs to
#              be modeled if it affects the PEG. If used with safe or
#              spec, the call is presumably modeled by the system now.
#              If used with ban, it implies that it isn't modeled (and
#              that is why it is banned).
#

#
# Issues:
#
#   - Should we allow any programmatic changes to the GUI?
#   - Can automatically treat calls to super().xxx (from the same routine) as safe
#   - We really need to think about what our position should be on non-XML UIs
#   - Should the clipboard be spec or safe?  Perhaps if there is a simple action
#     to support this, spec would make sense.


# this can only be called from the subclass's constructor.  
# Standard and seemingly safe
safe        android.app.Activity: void <init>()
safe        android.app.Activity: android.content.Intent getIntent()
spec        android.app.Activity: void setIntent(android.content.Intent)
safe        android.app.Activity: android.app.Application getApplication()
spec        android.app.Activity: boolean isChild()
spec        android.app.Activity: android.app.Activity getParent()
spec        android.app.Activity: android.view.WindowManager getWindowManager()
spec        android.app.Activity: android.view.Window getWindow()
spec        android.app.Activity: android.app.LoaderManager getLoaderManager()
spec        android.app.Activity: android.view.View getCurrentFocus()
spec        android.app.Activity: android.database.Cursor managedQuery(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)


# These are protected, so they can only be called from subclass;
# not clear what would be the harm of calling these from methods other
# than the subclasses honomymous methods (or even whether that is
# possible).
safe        android.app.Activity: void onCreate(android.os.Bundle)
safe        android.app.Activity: void onDestroy()
safe        android.app.Activity: void onPause()
safe        android.app.Activity: void onResume()

# These are not protected?:
safe        android.app.Activity: boolean onContextItemSelected(android.view.MenuItem)
safe        android.app.Activity: boolean onCreateOptionsMenu(android.view.Menu)
safe        android.app.Activity: boolean onOptionsItemSelected(android.view.MenuItem)
safe        android.app.Activity: boolean onPrepareOptionsMenu(android.view.Menu)

spec        android.app.Activity: void onRestoreInstanceState(android.os.Bundle)
spec        android.app.Activity: void onPostCreate(android.os.Bundle)
spec        android.app.Activity: void onStart()
spec        android.app.Activity: void onRestart()
spec        android.app.Activity: void onStop()
spec        android.app.Activity: void onPostResume()
spec        android.app.Activity: void onNewIntent(android.content.Intent)
spec        android.app.Activity: void onSaveInstanceState(android.os.Bundle)
spec        android.app.Activity: void onUserLeaveHint()
safe        android.app.Activity: boolean onCreateThumbnail(android.graphics.Bitmap, android.graphics.Canvas)
safe        android.app.Activity: java.lang.CharSequence onCreateDescription()


spec        android.app.Activity: void onConfigurationChanged(android.content.res.Configuration)
safe        android.app.Activity: int getChangingConfigurations()
safe        android.app.Activity: java.lang.Object getLastNonConfigurationInstance()
spec        android.app.Activity: java.lang.Object onRetainNonConfigurationInstance()
spec        android.app.Activity: void onLowMemory()
spec        android.app.Activity: void onTrimMemory(int)
safe        android.app.Activity: android.app.FragmentManager getFragmentManager()
spec        android.app.Activity: void onAttachFragment(android.app.Fragment)
safe        android.app.Activity: void startManagingCursor(android.database.Cursor)
safe        android.app.Activity: void stopManagingCursor(android.database.Cursor)
safe        android.app.Activity: android.view.View findViewById(int)
safe        android.app.Activity: android.app.ActionBar getActionBar()

# Putting this back to safe, because I think the MIT folks have thought it through. (Perhaps the ones below should be safe too.):
spec|model  android.app.Activity: void setContentView(int)

spec        android.app.Activity: void setContentView(android.view.View)
spec        android.app.Activity: void setContentView(android.view.View, android.view.ViewGroup$LayoutParams)
spec        android.app.Activity: void addContentView(android.view.View, android.view.ViewGroup$LayoutParams)
spec        android.app.Activity: void setFinishOnTouchOutside(boolean)

#could this be used to fool a user into doing something unexpected?
spec        android.app.Activity: void setDefaultKeyMode(int)

spec        android.app.Activity: boolean onKeyDown(int, android.view.KeyEvent)
spec        android.app.Activity: boolean onKeyLongPress(int, android.view.KeyEvent)
spec        android.app.Activity: boolean onKeyUp(int, android.view.KeyEvent)
spec        android.app.Activity: boolean onKeyMultiple(int, int, android.view.KeyEvent)
spec        android.app.Activity: void onBackPressed()
spec        android.app.Activity: boolean onKeyShortcut(int, android.view.KeyEvent)
spec        android.app.Activity: boolean onTouchEvent(android.view.MotionEvent)
spec        android.app.Activity: boolean onTrackballEvent(android.view.MotionEvent)
spec        android.app.Activity: boolean onGenericMotionEvent(android.view.MotionEvent)
spec        android.app.Activity: void onUserInteraction()
spec        android.app.Activity: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)
spec        android.app.Activity: void onContentChanged()
spec        android.app.Activity: void onWindowFocusChanged(boolean)
spec        android.app.Activity: void onAttachedToWindow()
spec        android.app.Activity: void onDetachedFromWindow()
safe        android.app.Activity: boolean hasWindowFocus()
spec        android.app.Activity: boolean dispatchKeyEvent(android.view.KeyEvent)
spec        android.app.Activity: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)
spec        android.app.Activity: boolean dispatchTouchEvent(android.view.MotionEvent)
spec        android.app.Activity: boolean dispatchTrackballEvent(android.view.MotionEvent)
spec        android.app.Activity: boolean dispatchGenericMotionEvent(android.view.MotionEvent)
spec        android.app.Activity: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
spec        android.app.Activity: android.view.View onCreatePanelView(int)
spec        android.app.Activity: boolean onCreatePanelMenu(int, android.view.Menu)
spec        android.app.Activity: boolean onPreparePanel(int, android.view.View, android.view.Menu)
spec        android.app.Activity: boolean onMenuOpened(int, android.view.Menu)
spec        android.app.Activity: boolean onMenuItemSelected(int, android.view.MenuItem)
spec        android.app.Activity: void onPanelClosed(int, android.view.Menu)
spec        android.app.Activity: void invalidateOptionsMenu()
spec        android.app.Activity: void onOptionsMenuClosed(android.view.Menu)
safe        android.app.Activity: void openOptionsMenu()
safe        android.app.Activity: void closeOptionsMenu()
spec        android.app.Activity: void onCreateContextMenu(android.view.ContextMenu, android.view.View, android.view.ContextMenu$ContextMenuInfo)
spec        android.app.Activity: void registerForContextMenu(android.view.View)
spec        android.app.Activity: void unregisterForContextMenu(android.view.View)
safe        android.app.Activity: void openContextMenu(android.view.View)
safe        android.app.Activity: void closeContextMenu()
spec        android.app.Activity: void onContextMenuClosed(android.view.Menu)
spec        android.app.Activity: android.app.Dialog onCreateDialog(int)
spec        android.app.Activity: android.app.Dialog onCreateDialog(int, android.os.Bundle)
spec        android.app.Activity: void onPrepareDialog(int, android.app.Dialog)
spec        android.app.Activity: void onPrepareDialog(int, android.app.Dialog, android.os.Bundle)
safe        android.app.Activity: void showDialog(int)
safe        android.app.Activity: boolean showDialog(int, android.os.Bundle)
safe        android.app.Activity: void dismissDialog(int)
safe        android.app.Activity: void removeDialog(int)
spec        android.app.Activity: boolean onSearchRequested()
safe        android.app.Activity: void startSearch(java.lang.String, boolean, android.os.Bundle, boolean)
safe        android.app.Activity: void triggerSearch(java.lang.String, android.os.Bundle)
spec        android.app.Activity: void takeKeyEvents(boolean)
spec        android.app.Activity: boolean requestWindowFeature(int)
spec        android.app.Activity: void setFeatureDrawableResource(int, int)
spec        android.app.Activity: void setFeatureDrawableUri(int, android.net.Uri)
spec        android.app.Activity: void setFeatureDrawable(int, android.graphics.drawable.Drawable)
spec        android.app.Activity: void setFeatureDrawableAlpha(int, int)
safe        android.app.Activity: android.view.LayoutInflater getLayoutInflater()
safe        android.app.Activity: android.view.MenuInflater getMenuInflater()
spec        android.app.Activity: void onApplyThemeResource(android.content.res.Resources$Theme, int, boolean)
spec        android.app.Activity: void startActivityForResult(android.content.Intent, int)
spec        android.app.Activity: void startIntentSenderForResult(android.content.IntentSender, int, android.content.Intent, int, int, int)
spec        android.app.Activity: void startActivity(android.content.Intent)
spec        android.app.Activity: void startActivities(android.content.Intent[])
spec        android.app.Activity: void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int)
spec        android.app.Activity: boolean startActivityIfNeeded(android.content.Intent, int)
spec        android.app.Activity: boolean startNextMatchingActivity(android.content.Intent)
spec        android.app.Activity: void startActivityFromChild(android.app.Activity, android.content.Intent, int)
spec        android.app.Activity: void startActivityFromFragment(android.app.Fragment, android.content.Intent, int)
spec        android.app.Activity: void startIntentSenderFromChild(android.app.Activity, android.content.IntentSender, int, android.content.Intent, int, int, int)
spec        android.app.Activity: void overridePendingTransition(int, int)

# this call returns a result from the activity to the caller of the activity, probably want to track it.
spec        android.app.Activity: void setResult(int)
spec        android.app.Activity: void setResult(int, android.content.Intent)

safe        android.app.Activity: java.lang.String getCallingPackage()
safe        android.app.Activity: android.content.ComponentName getCallingActivity()
safe        android.app.Activity: void setVisible(boolean)
safe        android.app.Activity: boolean isFinishing()
spec        android.app.Activity: boolean isChangingConfigurations()
spec        android.app.Activity: void recreate()
spec        android.app.Activity: void finish()
spec        android.app.Activity: void finishFromChild(android.app.Activity)
spec        android.app.Activity: void finishActivity(int)
spec        android.app.Activity: void finishActivityFromChild(android.app.Activity, int)
spec        android.app.Activity: void onActivityResult(int, int, android.content.Intent)
spec        android.app.Activity: android.app.PendingIntent createPendingResult(int, android.content.Intent, int)
spec        android.app.Activity: void setRequestedOrientation(int)
safe        android.app.Activity: int getRequestedOrientation()
safe        android.app.Activity: int getTaskId()
spec        android.app.Activity: boolean isTaskRoot()
spec        android.app.Activity: boolean moveTaskToBack(boolean)
safe        android.app.Activity: java.lang.String getLocalClassName()
spec        android.app.Activity: android.content.ComponentName getComponentName()
spec        android.app.Activity: android.content.SharedPreferences getPreferences(int)

safe        android.app.Application: void onCreate()
safe        android.app.Application: void <init>()
safe        android.app.Application: void onTerminate()

# Not defined in droidsafe modeling
#spec        android.app.Activity: java.lang.Object getSystemService(java.lang.String)

# similar to setting a buttons text, should be in XML
spec        android.app.Activity: void setTitle(java.lang.CharSequence)
spec        android.app.Activity: void setTitle(int)
spec        android.app.Activity: void setTitleColor(int)
safe        android.app.Activity: java.lang.CharSequence getTitle()
safe        android.app.Activity: int getTitleColor()
spec        android.app.Activity: void onTitleChanged(java.lang.CharSequence, int)
spec        android.app.Activity: void onChildTitleChanged(android.app.Activity, java.lang.CharSequence)
spec        android.app.Activity: void setProgressBarVisibility(boolean)
spec        android.app.Activity: void setProgressBarIndeterminateVisibility(boolean)
spec        android.app.Activity: void setProgressBarIndeterminate(boolean)
spec        android.app.Activity: void setProgress(int)
spec        android.app.Activity: void setSecondaryProgress(int)
spec        android.app.Activity: void setVolumeControlStream(int)
safe        android.app.Activity: int getVolumeControlStream()
spec        android.app.Activity: void runOnUiThread(java.lang.Runnable)
spec        android.app.Activity: android.view.View onCreateView(java.lang.String, android.content.Context, android.util.AttributeSet)
spec        android.app.Activity: android.view.View onCreateView(android.view.View, java.lang.String, android.content.Context, android.util.AttributeSet)
spec        android.app.Activity: void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
spec        android.app.Activity: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)
spec        android.app.Activity: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)
spec        android.app.Activity: void onActionModeStarted(android.view.ActionMode)
spec        android.app.Activity: void onActionModeFinished(android.view.ActionMode)
spec        android.app.Activity: void <clinit>()


#spec        android.app.AlarmManager: void <init>()
spec        android.app.AlarmManager: void set(int, long, android.app.PendingIntent)
spec        android.app.AlarmManager: void setRepeating(int, long, long, android.app.PendingIntent)
spec        android.app.AlarmManager: void setInexactRepeating(int, long, long, android.app.PendingIntent)
spec        android.app.AlarmManager: void cancel(android.app.PendingIntent)
spec        android.app.AlarmManager: void setTime(long)
spec        android.app.AlarmManager: void setTimeZone(java.lang.String)

safe        android.app.IntentService: void <init>(java.lang.String)


safe        android.app.AlertDialog$Builder: void <init>(android.content.Context)
safe        android.app.AlertDialog$Builder: void <init>(android.content.Context,int)
safe        android.app.AlertDialog$Builder: android.content.Context getContext()
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(int)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCustomTitle(android.view.View)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(int)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(int)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(android.graphics.drawable.Drawable)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIconAttribute(int)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(int,android.content.DialogInterface$OnClickListener)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCancelable(boolean)
spec        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)
spec        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnKeyListener(android.content.DialogInterface$OnKeyListener)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setItems(int,android.content.DialogInterface$OnClickListener)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setItems(java.lang.CharSequence[],android.content.DialogInterface$OnClickListener)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setAdapter(android.widget.ListAdapter,android.content.DialogInterface$OnClickListener)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCursor(android.database.Cursor,android.content.DialogInterface$OnClickListener,java.lang.String)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(int,boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(android.database.Cursor,java.lang.String,java.lang.String,android.content.DialogInterface$OnMultiChoiceClickListener)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(int,int,android.content.DialogInterface$OnClickListener)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.database.Cursor,int,java.lang.String,android.content.DialogInterface$OnClickListener)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface$OnClickListener)
spec        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setView(android.view.View)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setInverseBackgroundForced(boolean)
safe        android.app.AlertDialog$Builder: android.app.AlertDialog create()
safe        android.app.AlertDialog$Builder: android.app.AlertDialog show()



safe        android.app.ListActivity: void <init>()
safe        android.app.ListActivity: android.widget.ListAdapter getListAdapter()
safe        android.app.ListActivity: android.widget.ListView getListView()
safe        android.app.ListActivity: long getSelectedItemId()
safe        android.app.ListActivity: void setListAdapter(android.widget.ListAdapter)
spec        android.app.ListActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)
spec        android.app.ListActivity: void onRestoreInstanceState(android.os.Bundle)
spec        android.app.ListActivity: void onDestroy()
spec        android.app.ListActivity: void onContentChanged()
spec        android.app.ListActivity: void setSelection(int)
safe        android.app.ListActivity: int getSelectedItemPosition()

safe        android.app.Notification: void <init>(int,java.lang.CharSequence,long)
spec        android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)
spec        android.app.NotificationManager: void notify(int,android.app.Notification)

# starts a service to execute the specified intent.  Optimally we could specify information
# about the intent here.
spec        android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context, int, android.content.Intent, int)
# just retrieves a pending intent, doesn't actually do anything
safe        android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context, int, android.content.Intent, int)

safe        android.app.Service: void <init>()
safe        android.app.Service: android.app.Application getApplication()

safe        android.appwidget.AppWidgetManager: android.appwidget.AppWidgetManager getInstance(android.content.Context)
safe        android.appwidget.AppWidgetManager: int[] getAppWidgetIds(android.content.ComponentName)
spec        android.appwidget.AppWidgetManager: void updateAppWidget(int, android.widget.RemoteViews)
safe        android.appwidget.AppWidgetProvider: void onReceive(android.content.Context, android.content.Intent)
safe        android.appwidget.AppWidgetProvider: void <init>()

safe        android.content.BroadcastReceiver: void <init>()

safe        android.content.ClipboardManager: android.content.ClipData getPrimaryClip()
safe        android.content.ClipboardManager: boolean hasPrimaryClip()
safe        android.content.ClipboardManager: void setPrimaryClip(android.content.ClipData)

safe        android.content.ClipData: android.content.ClipData$Item getItemAt(int)
safe        android.content.ClipData: android.content.ClipData newUri(android.content.ContentResolver, java.lang.CharSequence, android.net.Uri)

safe        android.content.ClipDescription: java.lang.String[] filterMimeTypes(java.lang.String)

safe        android.content.ComponentName: void <init>(android.content.Context, java.lang.Class)

safe        android.content.ContentProvider: void <init>()
spec        android.content.ContentProvider: android.os.ParcelFileDescriptor openPipeHelper(android.net.Uri, java.lang.String, android.os.Bundle, java.lang.Object, android.content.ContentProvider$PipeDataWriter)
spec        android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri, java.lang.String, android.os.Bundle)
safe        android.content.ContentProvider: android.content.Context getContext()

spec        android.content.ContentResolver: int delete(android.net.Uri, java.lang.String, java.lang.String[])
spec        android.content.ContentResolver: int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])
safe        android.content.ContentResolver: java.lang.String getType(android.net.Uri)
spec        android.content.ContentResolver: android.net.Uri insert(android.net.Uri, android.content.ContentValues)
spec        android.content.ContentResolver: android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)
spec        android.content.ContentResolver: void notifyChange(android.net.Uri, android.database.ContentObserver)
spec        android.content.ContentResolver: void notifyChange(android.net.Uri, android.database.ContentObserver, boolean)

safe        android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri, long)

# Since this class is a data container, it seems safe in itself:
safe        android.content.ContentValues: void <init>()
safe        android.content.ContentValues: void <init>(int)
safe        android.content.ContentValues: void <init>(android.content.ContentValues)
safe        android.content.ContentValues: boolean equals(java.lang.Object)
safe        android.content.ContentValues: int hashCode()
safe        android.content.ContentValues: void put(java.lang.String, java.lang.String)
safe        android.content.ContentValues: void putAll(android.content.ContentValues)
safe        android.content.ContentValues: void put(java.lang.String, java.lang.Byte)
safe        android.content.ContentValues: void put(java.lang.String, java.lang.Short)
safe        android.content.ContentValues: void put(java.lang.String, java.lang.Integer)
safe        android.content.ContentValues: void put(java.lang.String, java.lang.Long)
safe        android.content.ContentValues: void put(java.lang.String, java.lang.Float)
safe        android.content.ContentValues: void put(java.lang.String, java.lang.Double)
safe        android.content.ContentValues: void put(java.lang.String, java.lang.Boolean)
safe        android.content.ContentValues: void put(java.lang.String, byte[])
safe        android.content.ContentValues: void putNull(java.lang.String)
safe        android.content.ContentValues: int size()
safe        android.content.ContentValues: void remove(java.lang.String)
safe        android.content.ContentValues: void clear()
safe        android.content.ContentValues: boolean containsKey(java.lang.String)
safe        android.content.ContentValues: java.lang.Object get(java.lang.String)
safe        android.content.ContentValues: java.lang.String getAsString(java.lang.String)
safe        android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)
safe        android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)
safe        android.content.ContentValues: java.lang.Short getAsShort(java.lang.String)
safe        android.content.ContentValues: java.lang.Byte getAsByte(java.lang.String)
safe        android.content.ContentValues: java.lang.Double getAsDouble(java.lang.String)
safe        android.content.ContentValues: java.lang.Float getAsFloat(java.lang.String)
safe        android.content.ContentValues: java.lang.Boolean getAsBoolean(java.lang.String)
safe        android.content.ContentValues: byte[] getAsByteArray(java.lang.String)
safe        android.content.ContentValues: java.util.Set valueSet()
safe        android.content.ContentValues: java.util.Set keySet()
safe        android.content.ContentValues: int describeContents()
safe        android.content.ContentValues: void writeToParcel(android.os.Parcel, int)
safe        android.content.ContentValues: java.lang.String toString()

# Conservative:
spec        android.content.Context: android.content.res.AssetManager getAssets()
spec        android.content.Context: android.content.res.Resources getResources()
spec        android.content.Context: android.content.pm.PackageManager getPackageManager()

# This was marked safe before:
safe        android.content.Context: android.content.ContentResolver getContentResolver()

# Conservative:
spec        android.content.Context: android.os.Looper getMainLooper()
spec        android.content.Context: android.content.Context getApplicationContext()
spec        android.content.Context: void registerComponentCallbacks(android.content.ComponentCallbacks)
spec        android.content.Context: void unregisterComponentCallbacks(android.content.ComponentCallbacks)
spec        android.content.Context: java.lang.CharSequence getText(int)
spec        android.content.Context: java.lang.String getString(int)
spec        android.content.Context: java.lang.String getString(int, java.lang.Object[])
spec        android.content.Context: void setTheme(int)
spec        android.content.Context: android.content.res.Resources$Theme getTheme()
spec        android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])
spec        android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int, int[])
spec        android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet, int[])
spec        android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet, int[], int, int)
spec        android.content.Context: java.lang.ClassLoader getClassLoader()
spec        android.content.Context: java.lang.String getPackageName()
spec        android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()
spec        android.content.Context: java.lang.String getPackageResourcePath()
spec        android.content.Context: java.lang.String getPackageCodePath()
spec        android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String, int)
spec        android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)
spec        android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String, int)
spec        android.content.Context: boolean deleteFile(java.lang.String)
spec        android.content.Context: java.io.File getFileStreamPath(java.lang.String)
spec        android.content.Context: java.io.File getFilesDir()
spec        android.content.Context: java.io.File getExternalFilesDir(java.lang.String)
spec        android.content.Context: java.io.File getObbDir()
spec        android.content.Context: java.io.File getCacheDir()
spec        android.content.Context: java.io.File getExternalCacheDir()
spec        android.content.Context: java.lang.String[] fileList()
spec        android.content.Context: java.io.File getDir(java.lang.String, int)
spec        android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory)
spec        android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler)
spec        android.content.Context: boolean deleteDatabase(java.lang.String)
spec        android.content.Context: java.io.File getDatabasePath(java.lang.String)
spec        android.content.Context: java.lang.String[] databaseList()
spec        android.content.Context: android.graphics.drawable.Drawable getWallpaper()
spec        android.content.Context: android.graphics.drawable.Drawable peekWallpaper()
spec        android.content.Context: int getWallpaperDesiredMinimumWidth()
spec        android.content.Context: int getWallpaperDesiredMinimumHeight()
spec        android.content.Context: void setWallpaper(android.graphics.Bitmap)
spec        android.content.Context: void setWallpaper(java.io.InputStream)
spec        android.content.Context: void clearWallpaper()
spec        android.content.Context: void startActivity(android.content.Intent)
spec        android.content.Context: void startActivities(android.content.Intent[])
spec        android.content.Context: void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int)
spec        android.content.Context: void sendBroadcast(android.content.Intent)
spec        android.content.Context: void sendBroadcast(android.content.Intent, java.lang.String)
spec        android.content.Context: void sendOrderedBroadcast(android.content.Intent, java.lang.String)
spec        android.content.Context: void sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
spec        android.content.Context: void sendStickyBroadcast(android.content.Intent)
spec        android.content.Context: void sendStickyOrderedBroadcast(android.content.Intent, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
spec        android.content.Context: void removeStickyBroadcast(android.content.Intent)
spec        android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)
spec        android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter, java.lang.String, android.os.Handler)
spec        android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)
spec        android.content.Context: android.content.ComponentName startService(android.content.Intent)
spec        android.content.Context: boolean stopService(android.content.Intent)
spec        android.content.Context: boolean bindService(android.content.Intent, android.content.ServiceConnection, int)
spec        android.content.Context: void unbindService(android.content.ServiceConnection)
spec        android.content.Context: boolean startInstrumentation(android.content.ComponentName, java.lang.String, android.os.Bundle)
spec        android.content.Context: java.lang.Object getSystemService(java.lang.String)
spec        android.content.Context: int checkPermission(java.lang.String, int, int)
spec        android.content.Context: int checkCallingPermission(java.lang.String)
spec        android.content.Context: int checkCallingOrSelfPermission(java.lang.String)
spec        android.content.Context: void enforcePermission(java.lang.String, int, int, java.lang.String)
spec        android.content.Context: void enforceCallingPermission(java.lang.String, java.lang.String)
spec        android.content.Context: void enforceCallingOrSelfPermission(java.lang.String, java.lang.String)
spec        android.content.Context: void grantUriPermission(java.lang.String, android.net.Uri, int)
spec        android.content.Context: void revokeUriPermission(android.net.Uri, int)
spec        android.content.Context: int checkUriPermission(android.net.Uri, int, int, int)
spec        android.content.Context: int checkCallingUriPermission(android.net.Uri, int)
spec        android.content.Context: int checkCallingOrSelfUriPermission(android.net.Uri, int)
spec        android.content.Context: int checkUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int)
spec        android.content.Context: void enforceUriPermission(android.net.Uri, int, int, int, java.lang.String)
spec        android.content.Context: void enforceCallingUriPermission(android.net.Uri, int, java.lang.String)
spec        android.content.Context: void enforceCallingOrSelfUriPermission(android.net.Uri, int, java.lang.String)
spec        android.content.Context: void enforceUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int, java.lang.String)
spec        android.content.Context: android.content.Context createPackageContext(java.lang.String, int)
spec        android.content.Context: boolean isRestricted()

safe        android.content.ContextWrapper: android.content.ContentResolver getContentResolver()
safe        android.content.ContextWrapper: android.content.res.Resources getResources()
spec        android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)
spec        android.content.ContextWrapper: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)
spec        android.content.ContextWrapper: void unbindService(android.content.ServiceConnection)
spec        android.content.ContextWrapper: void sendBroadcast(android.content.Intent)
# removing a receiver could change functionality (by missing things)
spec        android.content.ContextWrapper: void unregisterReceiver(android.content.BroadcastReceiver)
spec        android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)
safe        android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)
spec        android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String)

# An intent is essentially a description of an operations that can be carried out by another activity,
# so we regard it as security-critical:
spec        android.content.Intent: void <init>()
spec        android.content.Intent: void <init>(android.content.Intent)
spec        android.content.Intent: void <init>(java.lang.String)
spec        android.content.Intent: void <init>(java.lang.String, android.net.Uri)
spec        android.content.Intent: void <init>(android.content.Context, java.lang.Class)
spec        android.content.Intent: void <init>(java.lang.String, android.net.Uri, android.content.Context, java.lang.Class)
spec        android.content.Intent: void <clinit>()
spec        android.content.Intent: android.content.Intent createChooser(android.content.Intent, java.lang.CharSequence)
spec        android.content.Intent: java.lang.Object clone()
spec        android.content.Intent: android.content.Intent cloneFilter()
spec        android.content.Intent: android.content.Intent makeMainActivity(android.content.ComponentName)
spec        android.content.Intent: android.content.Intent makeMainSelectorActivity(java.lang.String, java.lang.String)
spec        android.content.Intent: android.content.Intent makeRestartActivityTask(android.content.ComponentName)
spec        android.content.Intent: android.content.Intent getIntent(java.lang.String)
spec        android.content.Intent: android.content.Intent parseUri(java.lang.String, int)
spec        android.content.Intent: android.content.Intent getIntentOld(java.lang.String)
# jhp: this does not need to be spec, it just gets data our of the intent
safe        android.content.Intent: java.lang.String getAction()
spec        android.content.Intent: android.net.Uri getData()
spec        android.content.Intent: java.lang.String getDataString()
spec        android.content.Intent: java.lang.String getScheme()
spec        android.content.Intent: java.lang.String getType()
spec        android.content.Intent: java.lang.String resolveType(android.content.Context)
spec        android.content.Intent: java.lang.String resolveType(android.content.ContentResolver)
spec        android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)
spec        android.content.Intent: boolean hasCategory(java.lang.String)
spec        android.content.Intent: java.util.Set getCategories()
spec        android.content.Intent: android.content.Intent getSelector()
spec        android.content.Intent: void setExtrasClassLoader(java.lang.ClassLoader)
spec        android.content.Intent: boolean hasExtra(java.lang.String)
spec        android.content.Intent: boolean hasFileDescriptors()
spec        android.content.Intent: boolean getBooleanExtra(java.lang.String, boolean)
spec        android.content.Intent: byte getByteExtra(java.lang.String, byte)
spec        android.content.Intent: short getShortExtra(java.lang.String, short)
spec        android.content.Intent: char getCharExtra(java.lang.String, char)
spec        android.content.Intent: int getIntExtra(java.lang.String, int)
spec        android.content.Intent: long getLongExtra(java.lang.String, long)
spec        android.content.Intent: float getFloatExtra(java.lang.String, float)
spec        android.content.Intent: double getDoubleExtra(java.lang.String, double)
spec        android.content.Intent: java.lang.String getStringExtra(java.lang.String)
spec        android.content.Intent: java.lang.CharSequence getCharSequenceExtra(java.lang.String)
spec        android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)
spec        android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)
spec        android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)
spec        android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)
spec        android.content.Intent: java.util.ArrayList getIntegerArrayListExtra(java.lang.String)
spec        android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)
spec        android.content.Intent: java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String)
spec        android.content.Intent: boolean[] getBooleanArrayExtra(java.lang.String)
spec        android.content.Intent: byte[] getByteArrayExtra(java.lang.String)
spec        android.content.Intent: short[] getShortArrayExtra(java.lang.String)
spec        android.content.Intent: char[] getCharArrayExtra(java.lang.String)
spec        android.content.Intent: int[] getIntArrayExtra(java.lang.String)
spec        android.content.Intent: long[] getLongArrayExtra(java.lang.String)
spec        android.content.Intent: float[] getFloatArrayExtra(java.lang.String)
spec        android.content.Intent: double[] getDoubleArrayExtra(java.lang.String)
spec        android.content.Intent: java.lang.String[] getStringArrayExtra(java.lang.String)
spec        android.content.Intent: java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String)
spec        android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)
spec        android.content.Intent: android.os.Bundle getExtras()
spec        android.content.Intent: int getFlags()
spec        android.content.Intent: java.lang.String getPackage()
spec        android.content.Intent: android.content.ComponentName getComponent()
spec        android.content.Intent: android.graphics.Rect getSourceBounds()
spec        android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)
spec        android.content.Intent: android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager, int)
spec        android.content.Intent: android.content.Intent setAction(java.lang.String)
spec        android.content.Intent: android.content.Intent setData(android.net.Uri)
spec        android.content.Intent: android.content.Intent setType(java.lang.String)
spec        android.content.Intent: android.content.Intent setDataAndType(android.net.Uri, java.lang.String)
spec        android.content.Intent: android.content.Intent addCategory(java.lang.String)
spec        android.content.Intent: void removeCategory(java.lang.String)
spec        android.content.Intent: void setSelector(android.content.Intent)
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, boolean)
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, byte)
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, char)
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, short)
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, int)
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, long)
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, float)
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, double)
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, java.lang.String)
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, java.lang.CharSequence)
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, android.os.Parcelable)
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, android.os.Parcelable[])
spec        android.content.Intent: android.content.Intent putParcelableArrayListExtra(java.lang.String, java.util.ArrayList)
spec        android.content.Intent: android.content.Intent putIntegerArrayListExtra(java.lang.String, java.util.ArrayList)
spec        android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String, java.util.ArrayList)
spec        android.content.Intent: android.content.Intent putCharSequenceArrayListExtra(java.lang.String, java.util.ArrayList)
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, java.io.Serializable)
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, boolean[])
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, byte[])
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, short[])
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, char[])
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, int[])
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, long[])
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, float[])
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, double[])
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, java.lang.String[])
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, java.lang.CharSequence[])
spec        android.content.Intent: android.content.Intent putExtra(java.lang.String, android.os.Bundle)
spec        android.content.Intent: android.content.Intent putExtras(android.content.Intent)
spec        android.content.Intent: android.content.Intent putExtras(android.os.Bundle)
spec        android.content.Intent: android.content.Intent replaceExtras(android.content.Intent)
spec        android.content.Intent: android.content.Intent replaceExtras(android.os.Bundle)
spec        android.content.Intent: void removeExtra(java.lang.String)
spec        android.content.Intent: android.content.Intent setFlags(int)
spec        android.content.Intent: android.content.Intent addFlags(int)
spec        android.content.Intent: android.content.Intent setPackage(java.lang.String)
spec        android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)
spec        android.content.Intent: android.content.Intent setClassName(android.content.Context, java.lang.String)
spec        android.content.Intent: android.content.Intent setClassName(java.lang.String, java.lang.String)
spec        android.content.Intent: android.content.Intent setClass(android.content.Context, java.lang.Class)
spec        android.content.Intent: void setSourceBounds(android.graphics.Rect)
spec        android.content.Intent: int fillIn(android.content.Intent, int)
spec        android.content.Intent: boolean filterEquals(android.content.Intent)
spec        android.content.Intent: int filterHashCode()
safe        android.content.Intent: java.lang.String toString()
spec        android.content.Intent: java.lang.String toURI()
spec        android.content.Intent: java.lang.String toUri(int)
spec        android.content.Intent: int describeContents()
spec        android.content.Intent: void writeToParcel(android.os.Parcel, int)
spec        android.content.Intent: void readFromParcel(android.os.Parcel)
spec        android.content.Intent: android.content.Intent parseIntent(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet)

spec        android.content.IntentFilter: void <init>(java.lang.String)

spec        android.content.Intent$ShortcutIconResource: void <init>()
spec        android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)
spec        android.content.Intent$ShortcutIconResource: int describeContents()
spec        android.content.Intent$ShortcutIconResource: void writeToParcel(android.os.Parcel,int)
spec        android.content.Intent$ShortcutIconResource: java.lang.String toString()
spec        android.content.Intent$ShortcutIconResource: void <clinit>()

spec        android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor, long, long)

# It should be always OK for an app to access its own resources:
safe        android.content.res.Resources: void <init>(android.content.res.AssetManager, android.util.DisplayMetrics, android.content.res.Configuration)
safe        android.content.res.Resources: android.content.res.Resources getSystem()
safe        android.content.res.Resources: java.lang.CharSequence getText(int)
safe        android.content.res.Resources: java.lang.CharSequence getQuantityText(int, int)
safe        android.content.res.Resources: java.lang.String getString(int)
safe        android.content.res.Resources: java.lang.String getString(int, java.lang.Object[])
safe        android.content.res.Resources: java.lang.String getQuantityString(int, int, java.lang.Object[])
safe        android.content.res.Resources: java.lang.String getQuantityString(int, int)
safe        android.content.res.Resources: java.lang.CharSequence getText(int, java.lang.CharSequence)
safe        android.content.res.Resources: java.lang.CharSequence[] getTextArray(int)
safe        android.content.res.Resources: java.lang.String[] getStringArray(int)
safe        android.content.res.Resources: int[] getIntArray(int)
safe        android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)
safe        android.content.res.Resources: float getDimension(int)
safe        android.content.res.Resources: int getDimensionPixelOffset(int)
safe        android.content.res.Resources: int getDimensionPixelSize(int)
safe        android.content.res.Resources: float getFraction(int, int, int)
safe        android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)
safe        android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int, int)
safe        android.content.res.Resources: android.graphics.Movie getMovie(int)
safe        android.content.res.Resources: int getColor(int)
safe        android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int)
safe        android.content.res.Resources: boolean getBoolean(int)
safe        android.content.res.Resources: int getInteger(int)
safe        android.content.res.Resources: android.content.res.XmlResourceParser getLayout(int)
safe        android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(int)
safe        android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)
safe        android.content.res.Resources: java.io.InputStream openRawResource(int)
safe        android.content.res.Resources: java.io.InputStream openRawResource(int, android.util.TypedValue)
safe        android.content.res.Resources: android.content.res.AssetFileDescriptor openRawResourceFd(int)
safe        android.content.res.Resources: void getValue(int, android.util.TypedValue, boolean)
safe        android.content.res.Resources: void getValueForDensity(int, int, android.util.TypedValue, boolean)
safe        android.content.res.Resources: void getValue(java.lang.String, android.util.TypedValue, boolean)
safe        android.content.res.Resources: android.content.res.Resources$Theme newTheme()
safe        android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet, int[])
safe        android.content.res.Resources: void updateConfiguration(android.content.res.Configuration, android.util.DisplayMetrics)
safe        android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()
safe        android.content.res.Resources: android.content.res.Configuration getConfiguration()
safe        android.content.res.Resources: int getIdentifier(java.lang.String, java.lang.String, java.lang.String)
safe        android.content.res.Resources: java.lang.String getResourceName(int)
safe        android.content.res.Resources: java.lang.String getResourcePackageName(int)
safe        android.content.res.Resources: java.lang.String getResourceTypeName(int)
safe        android.content.res.Resources: java.lang.String getResourceEntryName(int)
safe        android.content.res.Resources: void parseBundleExtras(android.content.res.XmlResourceParser, android.os.Bundle)
safe        android.content.res.Resources: void parseBundleExtra(java.lang.String, android.util.AttributeSet, android.os.Bundle)
safe        android.content.res.Resources: android.content.res.AssetManager getAssets()
safe        android.content.res.Resources: void flushLayoutCache()
safe        android.content.res.Resources: void finishPreloading()

# It should be always OK for an app to access its own resources:
safe        android.content.res.Resources$NotFoundException: void <init>()
safe        android.content.res.Resources$NotFoundException: void <init>(java.lang.String)

# It should be always OK for an app to access its own resources:
safe        android.content.res.Resources$Theme: void <init>(android.content.res.Resources)
safe        android.content.res.Resources$Theme: void applyStyle(int, boolean)
safe        android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)
safe        android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])
safe        android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int, int[])
safe        android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet, int[], int, int)
safe        android.content.res.Resources$Theme: boolean resolveAttribute(int, android.util.TypedValue, boolean)
safe        android.content.res.Resources$Theme: void dump(int, java.lang.String, java.lang.String)
safe        android.content.res.Resources$Theme: void finalize()

# Shared preferences look like a simple map, but somehow they feels security-critical:
spec        android.content.SharedPreferences: java.util.Map getAll()
spec        android.content.SharedPreferences: java.lang.String getString(java.lang.String, java.lang.String)
spec        android.content.SharedPreferences: java.util.Set getStringSet(java.lang.String, java.util.Set)
spec        android.content.SharedPreferences: int getInt(java.lang.String, int)
spec        android.content.SharedPreferences: long getLong(java.lang.String, long)
spec        android.content.SharedPreferences: float getFloat(java.lang.String, float)
spec        android.content.SharedPreferences: boolean getBoolean(java.lang.String, boolean)
spec        android.content.SharedPreferences: boolean contains(java.lang.String)
spec        android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()
spec        android.content.SharedPreferences: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)
spec        android.content.SharedPreferences: void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)

# Shared preferences look like a simple map, but somehow they feels security-critical:
spec        android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String, java.lang.String)
spec        android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putStringSet(java.lang.String, java.util.Set)
spec        android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String, int)
spec        android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String, long)
spec        android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putFloat(java.lang.String, float)
spec        android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String, boolean)
spec        android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor remove(java.lang.String)
spec        android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor clear()
spec        android.content.SharedPreferences$Editor: boolean commit()
spec        android.content.SharedPreferences$Editor: void apply()

# Shared preferences look like a simple map, but somehow they feels security-critical:
spec        android.content.SharedPreferences$OnSharedPreferenceChangeListener: void onSharedPreferenceChanged(android.content.SharedPreferences, java.lang.String)

safe        android.content.UriMatcher: int match(android.net.Uri)

safe        android.database.Cursor: int getCount()
safe        android.database.Cursor: int getPosition()
safe        android.database.Cursor: boolean move(int)
safe        android.database.Cursor: boolean moveToPosition(int)
safe        android.database.Cursor: boolean moveToFirst()
safe        android.database.Cursor: boolean moveToLast()
safe        android.database.Cursor: boolean moveToNext()
safe        android.database.Cursor: boolean moveToPrevious()
safe        android.database.Cursor: boolean isFirst()
safe        android.database.Cursor: boolean isLast()
safe        android.database.Cursor: boolean isBeforeFirst()
safe        android.database.Cursor: boolean isAfterLast()
safe        android.database.Cursor: int getColumnIndex(java.lang.String)
safe        android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)
safe        android.database.Cursor: java.lang.String getColumnName(int)
safe        android.database.Cursor: java.lang.String[] getColumnNames()
safe        android.database.Cursor: int getColumnCount()
safe        android.database.Cursor: byte[] getBlob(int)
safe        android.database.Cursor: java.lang.String getString(int)
safe        android.database.Cursor: void copyStringToBuffer(int, android.database.CharArrayBuffer)
safe        android.database.Cursor: short getShort(int)
safe        android.database.Cursor: int getInt(int)
safe        android.database.Cursor: long getLong(int)
safe        android.database.Cursor: float getFloat(int)
safe        android.database.Cursor: double getDouble(int)
safe        android.database.Cursor: int getType(int)
safe        android.database.Cursor: boolean isNull(int)
safe        android.database.Cursor: void deactivate()

# It looks like this accesses the data base, so it seems security-critical:
spec        android.database.Cursor: boolean requery()

safe        android.database.Cursor: void close()
safe        android.database.Cursor: boolean isClosed()
safe|model  android.database.Cursor: void registerContentObserver(android.database.ContentObserver)
safe|model  android.database.Cursor: void unregisterContentObserver(android.database.ContentObserver)
safe|model  android.database.Cursor: void registerDataSetObserver(android.database.DataSetObserver)
safe|model  android.database.Cursor: void unregisterDataSetObserver(android.database.DataSetObserver)
safe|model  android.database.Cursor: void setNotificationUri(android.content.ContentResolver, android.net.Uri)
safe        android.database.Cursor: boolean getWantsAllOnMoveCalls()
safe        android.database.Cursor: android.os.Bundle getExtras()

# The documentation suggests that this may access the network:
spec        android.database.Cursor: android.os.Bundle respond(android.os.Bundle)

# For SQL, probably everthing should be safe other than actual queries and updates.  Maybe only updates...
safe        android.database.SQLException: void <init>(java.lang.String)
#spec        android.database.sqlite.SQLiteDatabase: void <init>()
spec        android.database.sqlite.SQLiteDatabase: void onAllReferencesReleased()
spec        android.database.sqlite.SQLiteDatabase: int releaseMemory()
spec        android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)
spec        android.database.sqlite.SQLiteDatabase: void beginTransaction()
spec        android.database.sqlite.SQLiteDatabase: void beginTransactionNonExclusive()
spec        android.database.sqlite.SQLiteDatabase: void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)
spec        android.database.sqlite.SQLiteDatabase: void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)
spec        android.database.sqlite.SQLiteDatabase: void endTransaction()
spec        android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()
spec        android.database.sqlite.SQLiteDatabase: boolean inTransaction()
spec        android.database.sqlite.SQLiteDatabase: boolean isDbLockedByCurrentThread()
spec        android.database.sqlite.SQLiteDatabase: boolean isDbLockedByOtherThreads()
spec        android.database.sqlite.SQLiteDatabase: boolean yieldIfContended()
spec        android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely()
spec        android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely(long)
spec        android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()
spec        android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int)
spec        android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int, android.database.DatabaseErrorHandler)
spec        android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File, android.database.sqlite.SQLiteDatabase$CursorFactory)
spec        android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory)
spec        android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler)
spec        android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory)
safe        android.database.sqlite.SQLiteDatabase: void close()
spec        android.database.sqlite.SQLiteDatabase: int getVersion()
spec        android.database.sqlite.SQLiteDatabase: void setVersion(int)
spec        android.database.sqlite.SQLiteDatabase: long getMaximumSize()
spec        android.database.sqlite.SQLiteDatabase: long setMaximumSize(long)
spec        android.database.sqlite.SQLiteDatabase: long getPageSize()
spec        android.database.sqlite.SQLiteDatabase: void setPageSize(long)
spec        android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String, java.lang.String)
spec        android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String, java.lang.String, java.lang.String)
spec        android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)
spec        android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)
spec        android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)
spec        android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)
spec        android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String)
spec        android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)
spec        android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String, java.lang.String[])
spec        android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, java.lang.String, java.lang.String[], java.lang.String)
spec        android.database.sqlite.SQLiteDatabase: long insert(java.lang.String, java.lang.String, android.content.ContentValues)
spec        android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String, java.lang.String, android.content.ContentValues)
spec        android.database.sqlite.SQLiteDatabase: long replace(java.lang.String, java.lang.String, android.content.ContentValues)
spec        android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String, java.lang.String, android.content.ContentValues)
spec        android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String, java.lang.String, android.content.ContentValues, int)
spec        android.database.sqlite.SQLiteDatabase: int delete(java.lang.String, java.lang.String, java.lang.String[])
spec        android.database.sqlite.SQLiteDatabase: int update(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[])
spec        android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[], int)
spec        android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)
spec        android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String, java.lang.Object[])
spec        android.database.sqlite.SQLiteDatabase: void finalize()
spec        android.database.sqlite.SQLiteDatabase: boolean isReadOnly()
spec        android.database.sqlite.SQLiteDatabase: boolean isOpen()
spec        android.database.sqlite.SQLiteDatabase: boolean needUpgrade(int)
spec        android.database.sqlite.SQLiteDatabase: java.lang.String getPath()
spec        android.database.sqlite.SQLiteDatabase: void setLocale(java.util.Locale)
spec        android.database.sqlite.SQLiteDatabase: void setMaxSqlCacheSize(int)
spec        android.database.sqlite.SQLiteDatabase: boolean enableWriteAheadLogging()
spec        android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()
spec        android.database.sqlite.SQLiteDatabase: boolean isDatabaseIntegrityOk()

spec        android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()
spec        android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()
spec        android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context, java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int)
spec        android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context, java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int, android.database.DatabaseErrorHandler)
spec        android.database.sqlite.SQLiteOpenHelper: java.lang.String getDatabaseName()
safe        android.database.sqlite.SQLiteOpenHelper: void close()
spec        android.database.sqlite.SQLiteOpenHelper: void onCreate(android.database.sqlite.SQLiteDatabase)
spec        android.database.sqlite.SQLiteOpenHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)
spec        android.database.sqlite.SQLiteOpenHelper: void onDowngrade(android.database.sqlite.SQLiteDatabase, int, int)
spec        android.database.sqlite.SQLiteOpenHelper: void onOpen(android.database.sqlite.SQLiteDatabase)

spec        android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String)
safe        android.database.sqlite.SQLiteQueryBuilder: void setProjectionMap(java.util.Map)
safe        android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)
safe        android.database.sqlite.SQLiteQueryBuilder: void appendWhere(java.lang.CharSequence)
safe        android.database.sqlite.SQLiteQueryBuilder: void <init>()

safe        android.graphics.Paint: void setColor(int)
safe        android.graphics.Paint: void setStyle(android.graphics.Paint$Style)
safe        android.graphics.Paint: void <init>()

safe        android.graphics.Rect: void <init>()


spec|model  android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)

spec        android.location.Location: double getLongitude()
spec        android.location.Location: double getLatitude()

spec|model  android.location.LocationManager: void removeUpdates(android.location.LocationListener)
spec|model  android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)
spec|model  android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)
spec|model  android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)
spec|model  android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)
spec        android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)

spec        android.media.MediaRecorder: void <init>()
spec        android.media.MediaRecorder: void setCamera(android.hardware.Camera)
spec        android.media.MediaRecorder: void setPreviewDisplay(android.view.Surface)
spec        android.media.MediaRecorder: void setAudioSource(int)
spec        android.media.MediaRecorder: int getAudioSourceMax()
spec        android.media.MediaRecorder: void setVideoSource(int)
spec        android.media.MediaRecorder: void setProfile(android.media.CamcorderProfile)
spec        android.media.MediaRecorder: void setCaptureRate(double)
spec        android.media.MediaRecorder: void setOrientationHint(int)
spec        android.media.MediaRecorder: void setLocation(float, float)
spec        android.media.MediaRecorder: void setOutputFormat(int)
spec        android.media.MediaRecorder: void setVideoSize(int, int)
spec        android.media.MediaRecorder: void setVideoFrameRate(int)
spec        android.media.MediaRecorder: void setMaxDuration(int)
spec        android.media.MediaRecorder: void setMaxFileSize(long)
spec        android.media.MediaRecorder: void setAudioEncoder(int)
spec        android.media.MediaRecorder: void setVideoEncoder(int)
spec        android.media.MediaRecorder: void setAudioSamplingRate(int)
spec        android.media.MediaRecorder: void setAudioChannels(int)
spec        android.media.MediaRecorder: void setAudioEncodingBitRate(int)
spec        android.media.MediaRecorder: void setVideoEncodingBitRate(int)
spec        android.media.MediaRecorder: void setAuxiliaryOutputFile(java.io.FileDescriptor)
spec        android.media.MediaRecorder: void setAuxiliaryOutputFile(java.lang.String)
spec        android.media.MediaRecorder: void setOutputFile(java.io.FileDescriptor)
spec        android.media.MediaRecorder: void setOutputFile(java.lang.String)
spec        android.media.MediaRecorder: void prepare()
spec        android.media.MediaRecorder: void start()
spec        android.media.MediaRecorder: void stop()
spec        android.media.MediaRecorder: void reset()
spec        android.media.MediaRecorder: int getMaxAmplitude()
spec        android.media.MediaRecorder: void setOnErrorListener(android.media.MediaRecorder$OnErrorListener)
spec        android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)
spec        android.media.MediaRecorder: void release()
spec        android.media.MediaRecorder: void finalize()


# for now, these are all spec
#spec        android.net.http.AndroidHttpClient: void <init>()
spec        android.net.http.AndroidHttpClient: android.net.http.AndroidHttpClient newInstance(java.lang.String, android.content.Context)
spec        android.net.http.AndroidHttpClient: android.net.http.AndroidHttpClient newInstance(java.lang.String)
spec        android.net.http.AndroidHttpClient: void finalize()
spec        android.net.http.AndroidHttpClient: void modifyRequestToAcceptGzipResponse(org.apache.http.HttpRequest)
spec        android.net.http.AndroidHttpClient: java.io.InputStream getUngzippedContent(org.apache.http.HttpEntity)
spec        android.net.http.AndroidHttpClient: void close()
spec        android.net.http.AndroidHttpClient: org.apache.http.params.HttpParams getParams()
spec        android.net.http.AndroidHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()
spec        android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)
spec        android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext)
spec        android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest)
spec        android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)
spec        android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler)
spec        android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler, org.apache.http.protocol.HttpContext)
spec        android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler)
spec        android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler, org.apache.http.protocol.HttpContext)
spec        android.net.http.AndroidHttpClient: org.apache.http.entity.AbstractHttpEntity getCompressedEntity(byte[], android.content.ContentResolver)
spec        android.net.http.AndroidHttpClient: long getMinGzipSize(android.content.ContentResolver)
spec        android.net.http.AndroidHttpClient: void enableCurlLogging(java.lang.String, int)
spec        android.net.http.AndroidHttpClient: void disableCurlLogging()
spec        android.net.http.AndroidHttpClient: long parseDate(java.lang.String)

safe        android.net.Uri: java.util.List getPathSegments()
safe        android.net.Uri: java.lang.String toString()
safe        android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri, java.lang.String)
safe        android.net.Uri: java.lang.String getLastPathSegment()

spec        android.nfc.NdefMessage: int describeContents()
#Not in android-15
#spec        android.nfc.NdefMessage: boolean equals(java.lang.Object)
#spec        android.nfc.NdefMessage: int getByteArrayLength()

spec        android.nfc.NdefMessage: android.nfc.NdefRecord[] getRecords()
# Not in android-15
#spec        android.nfc.NdefMessage: int hashCode()
spec        android.nfc.NdefMessage: byte[] toByteArray()
# Not in android-15
#spec        android.nfc.NdefMessage: java.lang.String toString()
#spec        android.nfc.NdefMessage: void writeToParcel(android.os.Parcel)

spec        android.nfc.NfcAdapter: void disableForegroundDispatch(android.app.Activity)
spec        android.nfc.NfcAdapter: void enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])
spec        android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter(android.content.Context)
spec        android.nfc.NfcAdapter: boolean isEnabled()
spec|model  android.nfc.NfcAdapter: void setNdefPushMessageCallback(android.nfc.NfcAdapter$CreateNdefMessageCallback,android.app.Activity,android.app.Activity[])
spec|model  android.nfc.NfcAdapter: void setOnNdefPushCompleteCallback(android.nfc.NfcAdapter$OnNdefPushCompleteCallback, android.app.Activity, android.app.Activity[])

spec        android.nfc.tech.Ndef: void connect()
spec        android.nfc.tech.Ndef: android.nfc.tech.Ndef get(android.nfc.Tag)
spec        android.nfc.tech.Ndef: int getMaxSize()
spec        android.nfc.tech.Ndef: android.nfc.Tag getTag()
spec        android.nfc.tech.Ndef: java.lang.String getType()
spec        android.nfc.tech.Ndef: boolean isConnected()
spec        android.nfc.tech.Ndef: boolean isWritable()
spec        android.nfc.tech.Ndef: void writeNdefMessage(android.nfc.NdefMessage)    

spec        android.nfc.tech.NdefFormatable: void close()
spec        android.nfc.tech.NdefFormatable: void connect()
spec        android.nfc.tech.NdefFormatable: void format(android.nfc.NdefMessage)
spec        android.nfc.tech.NdefFormatable: void formatReadOnly(android.nfc.NdefMessage)
spec        android.nfc.tech.NdefFormatable: android.nfc.tech.NdefFormatable get(android.nfc.Tag)
spec        android.nfc.tech.NdefFormatable: android.nfc.Tag getTag()
spec        android.nfc.tech.NdefFormatable: boolean isConnected()

spec        android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])
safe        android.os.AsyncTask: void <init>()

safe        android.os.Bundle: java.lang.String getString(java.lang.String)

spec        android.os.Environment: java.io.File getExternalStorageDirectory()
#This is used in several examples, because it is a very simple system call that is 'spec':
spec        android.os.Environment: java.lang.String getExternalStorageState()



# Handlers seem dangerous and we don't really know how to support them.  But
# they exist in the apps we need to analyze, so spec for now
spec        android.os.Handler: boolean postDelayed(java.lang.Runnable,long)
spec        android.os.Handler: void <init>()


# Parcel objects seem related to IPC, so potentially security-critical:
#spec        android.os.Parcel: void <init>()
spec        android.os.Parcel: android.os.Parcel obtain()
spec        android.os.Parcel: void recycle()
spec        android.os.Parcel: int dataSize()
spec        android.os.Parcel: int dataAvail()
spec        android.os.Parcel: int dataPosition()
spec        android.os.Parcel: int dataCapacity()
spec        android.os.Parcel: void setDataSize(int)
spec        android.os.Parcel: void setDataPosition(int)
spec        android.os.Parcel: void setDataCapacity(int)
spec        android.os.Parcel: byte[] marshall()
spec        android.os.Parcel: void unmarshall(byte[], int, int)
spec        android.os.Parcel: void appendFrom(android.os.Parcel, int, int)
spec        android.os.Parcel: boolean hasFileDescriptors()
spec        android.os.Parcel: void writeInterfaceToken(java.lang.String)
spec        android.os.Parcel: void enforceInterface(java.lang.String)
spec        android.os.Parcel: void writeByteArray(byte[])
spec        android.os.Parcel: void writeByteArray(byte[], int, int)
spec        android.os.Parcel: void writeInt(int)
spec        android.os.Parcel: void writeLong(long)
spec        android.os.Parcel: void writeFloat(float)
spec        android.os.Parcel: void writeDouble(double)
spec        android.os.Parcel: void writeString(java.lang.String)
spec        android.os.Parcel: void writeStrongBinder(android.os.IBinder)
spec        android.os.Parcel: void writeStrongInterface(android.os.IInterface)
spec        android.os.Parcel: void writeFileDescriptor(java.io.FileDescriptor)
spec        android.os.Parcel: void writeByte(byte)
spec        android.os.Parcel: void writeMap(java.util.Map)
spec        android.os.Parcel: void writeBundle(android.os.Bundle)
spec        android.os.Parcel: void writeList(java.util.List)
spec        android.os.Parcel: void writeArray(java.lang.Object[])
spec        android.os.Parcel: void writeSparseArray(android.util.SparseArray)
spec        android.os.Parcel: void writeSparseBooleanArray(android.util.SparseBooleanArray)
spec        android.os.Parcel: void writeBooleanArray(boolean[])
spec        android.os.Parcel: boolean[] createBooleanArray()
spec        android.os.Parcel: void readBooleanArray(boolean[])
spec        android.os.Parcel: void writeCharArray(char[])
spec        android.os.Parcel: char[] createCharArray()
spec        android.os.Parcel: void readCharArray(char[])
spec        android.os.Parcel: void writeIntArray(int[])
spec        android.os.Parcel: int[] createIntArray()
spec        android.os.Parcel: void readIntArray(int[])
spec        android.os.Parcel: void writeLongArray(long[])
spec        android.os.Parcel: long[] createLongArray()
spec        android.os.Parcel: void readLongArray(long[])
spec        android.os.Parcel: void writeFloatArray(float[])
spec        android.os.Parcel: float[] createFloatArray()
spec        android.os.Parcel: void readFloatArray(float[])
spec        android.os.Parcel: void writeDoubleArray(double[])
spec        android.os.Parcel: double[] createDoubleArray()
spec        android.os.Parcel: void readDoubleArray(double[])
spec        android.os.Parcel: void writeStringArray(java.lang.String[])
spec        android.os.Parcel: java.lang.String[] createStringArray()
spec        android.os.Parcel: void readStringArray(java.lang.String[])
spec        android.os.Parcel: void writeBinderArray(android.os.IBinder[])
spec        android.os.Parcel: android.os.IBinder[] createBinderArray()
spec        android.os.Parcel: void readBinderArray(android.os.IBinder[])
spec        android.os.Parcel: void writeTypedList(java.util.List)
spec        android.os.Parcel: void writeStringList(java.util.List)
spec        android.os.Parcel: void writeBinderList(java.util.List)
spec        android.os.Parcel: void writeTypedArray(android.os.Parcelable[], int)
spec        android.os.Parcel: void writeValue(java.lang.Object)
spec        android.os.Parcel: void writeParcelable(android.os.Parcelable, int)
spec        android.os.Parcel: void writeSerializable(java.io.Serializable)
spec        android.os.Parcel: void writeException(java.lang.Exception)
spec        android.os.Parcel: void writeNoException()
spec        android.os.Parcel: void readException()
spec        android.os.Parcel: void readException(int, java.lang.String)
spec        android.os.Parcel: int readInt()
spec        android.os.Parcel: long readLong()
spec        android.os.Parcel: float readFloat()
spec        android.os.Parcel: double readDouble()
spec        android.os.Parcel: java.lang.String readString()
spec        android.os.Parcel: android.os.IBinder readStrongBinder()
spec        android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()
spec        android.os.Parcel: byte readByte()
spec        android.os.Parcel: void readMap(java.util.Map, java.lang.ClassLoader)
spec        android.os.Parcel: void readList(java.util.List, java.lang.ClassLoader)
spec        android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)
spec        android.os.Parcel: android.os.Bundle readBundle()
spec        android.os.Parcel: android.os.Bundle readBundle(java.lang.ClassLoader)
spec        android.os.Parcel: byte[] createByteArray()
spec        android.os.Parcel: void readByteArray(byte[])
spec        android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader)
spec        android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)
spec        android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader)
spec        android.os.Parcel: android.util.SparseBooleanArray readSparseBooleanArray()
spec        android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)
spec        android.os.Parcel: void readTypedList(java.util.List, android.os.Parcelable$Creator)
spec        android.os.Parcel: java.util.ArrayList createStringArrayList()
spec        android.os.Parcel: java.util.ArrayList createBinderArrayList()
spec        android.os.Parcel: void readStringList(java.util.List)
spec        android.os.Parcel: void readBinderList(java.util.List)
spec        android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)
spec        android.os.Parcel: void readTypedArray(java.lang.Object[], android.os.Parcelable$Creator)
spec        android.os.Parcel: void writeParcelableArray(android.os.Parcelable[], int)
spec        android.os.Parcel: java.lang.Object readValue(java.lang.ClassLoader)
spec        android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)
spec        android.os.Parcel: android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader)
spec        android.os.Parcel: java.io.Serializable readSerializable()
spec        android.os.Parcel: android.os.Parcel obtain(int)
spec        android.os.Parcel: void finalize()

safe        android.preference.PreferenceActivity: void <init>()
safe        android.preference.PreferenceActivity: void onCreate(android.os.Bundle)
spec        android.preference.PreferenceActivity: void addPreferencesFromResource(int)

safe        android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)

safe        android.telephony.SmsManager: java.util.ArrayList divideMessage(java.lang.String)
safe        android.telephony.SmsManager: android.telephony.SmsManager getDefault()
safe        android.telephony.SmsManager: void <init>()
spec        android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String, java.lang.String, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList)

#Not sure what to do about the intents on these two; do they need to be modeled?
spec        android.telephony.SmsManager: void sendTextMessage(java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent)
spec        android.telephony.SmsManager: void sendDataMessage(java.lang.String, java.lang.String, short, byte[], android.app.PendingIntent, android.app.PendingIntent)

# could infer time from this, but still seems relatively safe
safe        android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(android.content.Context, long)

safe        android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)

# Logging might leak user information to the logs, but it's not clear whether the logs are
# accessible to a malicious party, so we make them safe for now:
safe        android.util.Log: int d(java.lang.String, java.lang.String)
safe        android.util.Log: int d(java.lang.String, java.lang.String, java.lang.Throwable)
safe        android.util.Log: int e(java.lang.String, java.lang.String)
safe        android.util.Log: int e(java.lang.String, java.lang.String, java.lang.Throwable)
safe        android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)
safe        android.util.Log: int i(java.lang.String, java.lang.String)
safe        android.util.Log: int i(java.lang.String, java.lang.String, java.lang.Throwable)
safe        android.util.Log: boolean isLoggable(java.lang.String, int)
safe        android.util.Log: int println(int, java.lang.String, java.lang.String)
safe        android.util.Log: int v(java.lang.String, java.lang.String)
safe        android.util.Log: int v(java.lang.String, java.lang.String, java.lang.Throwable)
safe        android.util.Log: int w(java.lang.String, java.lang.String)
safe        android.util.Log: int w(java.lang.String, java.lang.String, java.lang.Throwable)
safe        android.util.Log: int w(java.lang.String, java.lang.Throwable)
safe        android.util.Log: int wtf(java.lang.String, java.lang.String)
safe        android.util.Log: int wtf(java.lang.String, java.lang.Throwable)
safe        android.util.Log: int wtf(java.lang.String, java.lang.String, java.lang.Throwable)

spec        android.view.ContextMenu: android.view.ContextMenu setHeaderTitle(java.lang.CharSequence) #perhaps safe if the title is a constant and we model this?

safe        android.view.Menu: void removeGroup(int) #seemingly removing menu items can't confuse the user
safe        android.view.Menu: int addIntentOptions(int, int, int, android.content.ComponentName, android.content.Intent[], android.content.Intent, int, android.view.MenuItem[])
safe        android.view.Menu: android.view.MenuItem findItem(int)

safe        android.view.MenuInflater: void inflate(int, android.view.Menu)

safe        android.view.MenuItem: android.view.ContextMenu$ContextMenuInfo getMenuInfo()
safe        android.view.MenuItem: int getItemId()
safe        android.view.MenuItem: android.view.MenuItem setVisible(boolean)
safe        android.view.MenuItem: android.view.MenuItem setEnabled(boolean)
spec        android.view.MenuItem: android.view.MenuItem setShortcut(char, char) # could this fool users into doing something they don't want?

safe        android.view.View: void <init>(android.content.Context)
safe        android.view.View: void <init>(android.content.Context, android.util.AttributeSet)
safe        android.view.View: void <init>(android.content.Context, android.util.AttributeSet, int)
safe        android.view.View: void initializeFadingEdge(android.content.res.TypedArray)
safe        android.view.View: int getVerticalFadingEdgeLength()
safe        android.view.View: void setFadingEdgeLength(int)
safe        android.view.View: int getHorizontalFadingEdgeLength()
safe        android.view.View: int getVerticalScrollbarWidth()
safe        android.view.View: int getHorizontalScrollbarHeight()
safe        android.view.View: void initializeScrollbars(android.content.res.TypedArray)
safe        android.view.View: void setVerticalScrollbarPosition(int)
safe        android.view.View: int getVerticalScrollbarPosition()
spec        android.view.View: void setOnFocusChangeListener(android.view.View$OnFocusChangeListener)
spec        android.view.View: void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)
spec        android.view.View: void removeOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)
spec        android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)
spec        android.view.View: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)
spec        android.view.View: android.view.View$OnFocusChangeListener getOnFocusChangeListener()
spec|model  android.view.View: void setOnClickListener(android.view.View$OnClickListener)
safe        android.view.View: boolean hasOnClickListeners()
spec        android.view.View: void setOnLongClickListener(android.view.View$OnLongClickListener)
spec        android.view.View: void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener)
spec        android.view.View: boolean performClick()
spec        android.view.View: boolean callOnClick()
spec        android.view.View: boolean performLongClick()
safe        android.view.View: boolean showContextMenu()
spec        android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)
spec        android.view.View: void setOnKeyListener(android.view.View$OnKeyListener)
spec        android.view.View: void setOnTouchListener(android.view.View$OnTouchListener)
spec        android.view.View: void setOnGenericMotionListener(android.view.View$OnGenericMotionListener)
spec        android.view.View: void setOnHoverListener(android.view.View$OnHoverListener)
spec        android.view.View: void setOnDragListener(android.view.View$OnDragListener)
safe        android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect)
safe        android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect, boolean)
safe        android.view.View: void clearFocus()
safe        android.view.View: boolean hasFocus()
safe        android.view.View: boolean hasFocusable()
spec        android.view.View: void onFocusChanged(boolean, int, android.graphics.Rect)
spec        android.view.View: void sendAccessibilityEvent(int)
spec        android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)
spec        android.view.View: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
spec        android.view.View: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
spec        android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
spec        android.view.View: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo()
spec        android.view.View: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)
spec        android.view.View: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)
safe        android.view.View: java.lang.CharSequence getContentDescription()
spec        android.view.View: void setContentDescription(java.lang.CharSequence)
safe        android.view.View: boolean isFocused()
safe        android.view.View: android.view.View findFocus()
safe        android.view.View: void setScrollContainer(boolean)
safe        android.view.View: int getDrawingCacheQuality()
safe        android.view.View: void setDrawingCacheQuality(int)
spec        android.view.View: boolean getKeepScreenOn()
spec        android.view.View: void setKeepScreenOn(boolean)
safe        android.view.View: int getNextFocusLeftId()
safe        android.view.View: void setNextFocusLeftId(int)
safe        android.view.View: int getNextFocusRightId()
safe        android.view.View: void setNextFocusRightId(int)
safe        android.view.View: int getNextFocusUpId()
safe        android.view.View: void setNextFocusUpId(int)
safe        android.view.View: int getNextFocusDownId()
safe        android.view.View: void setNextFocusDownId(int)
safe        android.view.View: int getNextFocusForwardId()
safe        android.view.View: void setNextFocusForwardId(int)
safe        android.view.View: boolean isShown()
safe        android.view.View: boolean fitSystemWindows(android.graphics.Rect)
safe        android.view.View: void setFitsSystemWindows(boolean)
safe        android.view.View: boolean fitsSystemWindows()
safe        android.view.View: int getVisibility()
spec        android.view.View: void setVisibility(int)
safe        android.view.View: boolean isEnabled()
spec|model  android.view.View: void setEnabled(boolean)
spec        android.view.View: void setFocusable(boolean)
spec        android.view.View: void setFocusableInTouchMode(boolean)
spec        android.view.View: void setSoundEffectsEnabled(boolean)
safe        android.view.View: boolean isSoundEffectsEnabled()
spec        android.view.View: void setHapticFeedbackEnabled(boolean)
safe        android.view.View: boolean isHapticFeedbackEnabled()
spec        android.view.View: void setWillNotDraw(boolean)
safe        android.view.View: boolean willNotDraw()
spec        android.view.View: void setWillNotCacheDrawing(boolean)
safe        android.view.View: boolean willNotCacheDrawing()
safe        android.view.View: boolean isClickable()
spec        android.view.View: void setClickable(boolean)
safe        android.view.View: boolean isLongClickable()
spec        android.view.View: void setLongClickable(boolean)
spec        android.view.View: void setPressed(boolean)
spec        android.view.View: void dispatchSetPressed(boolean)
safe        android.view.View: boolean isPressed()
safe        android.view.View: boolean isSaveEnabled()
spec        android.view.View: void setSaveEnabled(boolean)
safe        android.view.View: boolean getFilterTouchesWhenObscured()
spec        android.view.View: void setFilterTouchesWhenObscured(boolean)
safe        android.view.View: boolean isSaveFromParentEnabled()
spec        android.view.View: void setSaveFromParentEnabled(boolean)
safe        android.view.View: boolean isFocusable()
safe        android.view.View: boolean isFocusableInTouchMode()
safe        android.view.View: android.view.View focusSearch(int)
spec        android.view.View: boolean dispatchUnhandledMove(android.view.View, int)
safe        android.view.View: java.util.ArrayList getFocusables(int)
spec        android.view.View: void addFocusables(java.util.ArrayList, int)
spec        android.view.View: void addFocusables(java.util.ArrayList, int, int)
safe        android.view.View: void findViewsWithText(java.util.ArrayList, java.lang.CharSequence, int)
safe        android.view.View: java.util.ArrayList getTouchables()
spec        android.view.View: void addTouchables(java.util.ArrayList)
spec        android.view.View: boolean requestFocus()
spec        android.view.View: boolean requestFocus(int)
spec        android.view.View: boolean requestFocus(int, android.graphics.Rect)
spec        android.view.View: boolean requestFocusFromTouch()
spec        android.view.View: void onStartTemporaryDetach()
spec        android.view.View: void onFinishTemporaryDetach()
safe        android.view.View: android.view.KeyEvent$DispatcherState getKeyDispatcherState()
spec        android.view.View: boolean dispatchKeyEventPreIme(android.view.KeyEvent)
spec        android.view.View: boolean dispatchKeyEvent(android.view.KeyEvent)
spec        android.view.View: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)
spec        android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)
spec        android.view.View: boolean onFilterTouchEventForSecurity(android.view.MotionEvent)
spec        android.view.View: boolean dispatchTrackballEvent(android.view.MotionEvent)
spec        android.view.View: boolean dispatchGenericMotionEvent(android.view.MotionEvent)
spec        android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)
spec        android.view.View: boolean dispatchGenericPointerEvent(android.view.MotionEvent)
spec        android.view.View: boolean dispatchGenericFocusedEvent(android.view.MotionEvent)
spec        android.view.View: void dispatchWindowFocusChanged(boolean)
spec        android.view.View: void onWindowFocusChanged(boolean)
safe        android.view.View: boolean hasWindowFocus()
spec        android.view.View: void dispatchVisibilityChanged(android.view.View, int)
spec        android.view.View: void onVisibilityChanged(android.view.View, int)
spec        android.view.View: void dispatchDisplayHint(int)
spec        android.view.View: void onDisplayHint(int)
spec        android.view.View: void dispatchWindowVisibilityChanged(int)
spec        android.view.View: void onWindowVisibilityChanged(int)
safe        android.view.View: int getWindowVisibility()
safe        android.view.View: void getWindowVisibleDisplayFrame(android.graphics.Rect)
spec        android.view.View: void dispatchConfigurationChanged(android.content.res.Configuration)
spec        android.view.View: void onConfigurationChanged(android.content.res.Configuration)
safe        android.view.View: boolean isInTouchMode()
safe        android.view.View: android.content.Context getContext()
spec        android.view.View: boolean onKeyPreIme(int, android.view.KeyEvent)
spec        android.view.View: boolean onKeyDown(int, android.view.KeyEvent)
spec        android.view.View: boolean onKeyLongPress(int, android.view.KeyEvent)
spec        android.view.View: boolean onKeyUp(int, android.view.KeyEvent)
spec        android.view.View: boolean onKeyMultiple(int, int, android.view.KeyEvent)
spec        android.view.View: boolean onKeyShortcut(int, android.view.KeyEvent)
spec        android.view.View: boolean onCheckIsTextEditor()
spec        android.view.View: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)
safe        android.view.View: boolean checkInputConnectionProxy(android.view.View)
safe        android.view.View: void createContextMenu(android.view.ContextMenu)
safe        android.view.View: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()
spec        android.view.View: void onCreateContextMenu(android.view.ContextMenu)
spec        android.view.View: boolean onTrackballEvent(android.view.MotionEvent)
spec        android.view.View: boolean onGenericMotionEvent(android.view.MotionEvent)
spec        android.view.View: boolean onHoverEvent(android.view.MotionEvent)
safe        android.view.View: boolean isHovered()
spec        android.view.View: void setHovered(boolean)
spec        android.view.View: void onHoverChanged(boolean)
spec        android.view.View: boolean onTouchEvent(android.view.MotionEvent)
spec        android.view.View: void cancelLongPress()
spec        android.view.View: void setTouchDelegate(android.view.TouchDelegate)
safe        android.view.View: android.view.TouchDelegate getTouchDelegate()
spec        android.view.View: void bringToFront()
spec        android.view.View: void onScrollChanged(int, int, int, int)
spec        android.view.View: void onSizeChanged(int, int, int, int)
spec        android.view.View: void dispatchDraw(android.graphics.Canvas)
safe        android.view.View: android.view.ViewParent getParent()
safe        android.view.View: void setScrollX(int)
safe        android.view.View: void setScrollY(int)
safe        android.view.View: int getScrollX()
safe        android.view.View: int getScrollY()
safe        android.view.View: int getWidth()
safe        android.view.View: int getHeight()
safe        android.view.View: void getDrawingRect(android.graphics.Rect)
safe        android.view.View: int getMeasuredWidth()
safe        android.view.View: int getMeasuredWidthAndState()
safe        android.view.View: int getMeasuredHeight()
safe        android.view.View: int getMeasuredHeightAndState()
safe        android.view.View: int getMeasuredState()
safe        android.view.View: android.graphics.Matrix getMatrix()
safe        android.view.View: void setCameraDistance(float)
safe        android.view.View: float getRotation()
safe        android.view.View: void setRotation(float)
safe        android.view.View: float getRotationY()
safe        android.view.View: void setRotationY(float)
safe        android.view.View: float getRotationX()
safe        android.view.View: void setRotationX(float)
safe        android.view.View: float getScaleX()
safe        android.view.View: void setScaleX(float)
safe        android.view.View: float getScaleY()
safe        android.view.View: void setScaleY(float)
safe        android.view.View: float getPivotX()
safe        android.view.View: void setPivotX(float)
safe        android.view.View: float getPivotY()
safe        android.view.View: void setPivotY(float)
safe        android.view.View: float getAlpha()
safe        android.view.View: void setAlpha(float)
safe        android.view.View: int getTop()
safe        android.view.View: void setTop(int)
safe        android.view.View: int getBottom()
safe        android.view.View: boolean isDirty()
safe        android.view.View: void setBottom(int)
safe        android.view.View: int getLeft()
safe        android.view.View: void setLeft(int)
safe        android.view.View: int getRight()
safe        android.view.View: void setRight(int)
safe        android.view.View: float getX()
safe        android.view.View: void setX(float)
safe        android.view.View: float getY()
safe        android.view.View: void setY(float)
safe        android.view.View: float getTranslationX()
safe        android.view.View: void setTranslationX(float)
safe        android.view.View: float getTranslationY()
safe        android.view.View: void setTranslationY(float)
safe        android.view.View: void getHitRect(android.graphics.Rect)
safe        android.view.View: void getFocusedRect(android.graphics.Rect)
safe        android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect, android.graphics.Point)
safe        android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect)
safe        android.view.View: boolean getLocalVisibleRect(android.graphics.Rect)
safe        android.view.View: void offsetTopAndBottom(int)
safe        android.view.View: void offsetLeftAndRight(int)
safe        android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()
safe        android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)
safe        android.view.View: void scrollTo(int, int)
safe        android.view.View: void scrollBy(int, int)
safe        android.view.View: boolean awakenScrollBars()
safe        android.view.View: boolean awakenScrollBars(int)
safe        android.view.View: boolean awakenScrollBars(int, boolean)
safe        android.view.View: void invalidate(android.graphics.Rect)
safe        android.view.View: void invalidate(int, int, int, int)
safe        android.view.View: void invalidate()
safe        android.view.View: boolean isOpaque()
safe        android.view.View: android.os.Handler getHandler()
spec        android.view.View: boolean post(java.lang.Runnable)
spec        android.view.View: boolean postDelayed(java.lang.Runnable, long)
spec        android.view.View: boolean removeCallbacks(java.lang.Runnable)
spec        android.view.View: void postInvalidate()
spec        android.view.View: void postInvalidate(int, int, int, int)
spec        android.view.View: void postInvalidateDelayed(long)
spec        android.view.View: void postInvalidateDelayed(long, int, int, int, int)
safe        android.view.View: void computeScroll()
safe        android.view.View: boolean isHorizontalFadingEdgeEnabled()
safe        android.view.View: void setHorizontalFadingEdgeEnabled(boolean)
safe        android.view.View: boolean isVerticalFadingEdgeEnabled()
safe        android.view.View: void setVerticalFadingEdgeEnabled(boolean)
safe        android.view.View: float getTopFadingEdgeStrength()
safe        android.view.View: float getBottomFadingEdgeStrength()
safe        android.view.View: float getLeftFadingEdgeStrength()
safe        android.view.View: float getRightFadingEdgeStrength()
safe        android.view.View: boolean isHorizontalScrollBarEnabled()
safe        android.view.View: void setHorizontalScrollBarEnabled(boolean)
safe        android.view.View: boolean isVerticalScrollBarEnabled()
safe        android.view.View: void setVerticalScrollBarEnabled(boolean)
safe        android.view.View: void setScrollbarFadingEnabled(boolean)
safe        android.view.View: boolean isScrollbarFadingEnabled()
safe        android.view.View: void setScrollBarStyle(int)
safe        android.view.View: int getScrollBarStyle()
safe        android.view.View: int computeHorizontalScrollRange()
safe        android.view.View: int computeHorizontalScrollOffset()
safe        android.view.View: int computeHorizontalScrollExtent()
safe        android.view.View: int computeVerticalScrollRange()
safe        android.view.View: int computeVerticalScrollOffset()
safe        android.view.View: int computeVerticalScrollExtent()
safe        android.view.View: boolean canScrollHorizontally(int)
safe        android.view.View: boolean canScrollVertically(int)
spec        android.view.View: void onDrawScrollBars(android.graphics.Canvas)
spec        android.view.View: void onDraw(android.graphics.Canvas)
spec        android.view.View: void onAttachedToWindow()
spec        android.view.View: void onDetachedFromWindow()
safe        android.view.View: int getWindowAttachCount()
safe        android.view.View: android.os.IBinder getWindowToken()
safe        android.view.View: android.os.IBinder getApplicationWindowToken()
safe        android.view.View: void saveHierarchyState(android.util.SparseArray)
spec        android.view.View: void dispatchSaveInstanceState(android.util.SparseArray)
safe        android.view.View: android.os.Parcelable onSaveInstanceState()
spec        android.view.View: void restoreHierarchyState(android.util.SparseArray)
safe        android.view.View: void dispatchRestoreInstanceState(android.util.SparseArray)
spec        android.view.View: void onRestoreInstanceState(android.os.Parcelable)
safe        android.view.View: long getDrawingTime()
safe        android.view.View: void setDuplicateParentStateEnabled(boolean)
safe        android.view.View: boolean isDuplicateParentStateEnabled()
safe        android.view.View: void setLayerType(int, android.graphics.Paint)
safe        android.view.View: int getLayerType()
safe        android.view.View: void buildLayer()
safe        android.view.View: void setDrawingCacheEnabled(boolean)
safe        android.view.View: boolean isDrawingCacheEnabled()
safe        android.view.View: android.graphics.Bitmap getDrawingCache()
safe        android.view.View: android.graphics.Bitmap getDrawingCache(boolean)
safe        android.view.View: void destroyDrawingCache()
safe        android.view.View: void setDrawingCacheBackgroundColor(int)
safe        android.view.View: int getDrawingCacheBackgroundColor()
safe        android.view.View: void buildDrawingCache()
safe        android.view.View: void buildDrawingCache(boolean)
safe        android.view.View: boolean isInEditMode()
safe        android.view.View: boolean isPaddingOffsetRequired()
safe        android.view.View: int getLeftPaddingOffset()
safe        android.view.View: int getRightPaddingOffset()
safe        android.view.View: int getTopPaddingOffset()
safe        android.view.View: int getBottomPaddingOffset()
safe        android.view.View: boolean isHardwareAccelerated()
safe        android.view.View: void draw(android.graphics.Canvas)
safe        android.view.View: int getSolidColor()
safe        android.view.View: boolean isLayoutRequested()
safe        android.view.View: void layout(int, int, int, int)
spec        android.view.View: void onLayout(boolean, int, int, int, int)
safe        android.view.View: void onFinishInflate()
safe        android.view.View: android.content.res.Resources getResources()
spec        android.view.View: void invalidateDrawable(android.graphics.drawable.Drawable)
spec        android.view.View: void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long)
spec        android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable)
spec        android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable)
safe        android.view.View: boolean verifyDrawable(android.graphics.drawable.Drawable)
safe        android.view.View: void drawableStateChanged()
safe        android.view.View: void refreshDrawableState()
safe        android.view.View: int[] getDrawableState()
spec        android.view.View: int[] onCreateDrawableState(int)
spec        android.view.View: int[] mergeDrawableStates(int[], int[])
spec        android.view.View: void jumpDrawablesToCurrentState()
safe        android.view.View: void setBackgroundColor(int)
safe        android.view.View: void setBackgroundResource(int)
safe        android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)
safe        android.view.View: android.graphics.drawable.Drawable getBackground()
safe        android.view.View: void setPadding(int, int, int, int)
safe        android.view.View: int getPaddingTop()
safe        android.view.View: int getPaddingBottom()
safe        android.view.View: int getPaddingLeft()
safe        android.view.View: int getPaddingRight()
spec        android.view.View: void setSelected(boolean)
spec        android.view.View: void dispatchSetSelected(boolean)
safe        android.view.View: boolean isSelected()
spec        android.view.View: void setActivated(boolean)
spec        android.view.View: void dispatchSetActivated(boolean)
safe        android.view.View: boolean isActivated()
safe        android.view.View: android.view.ViewTreeObserver getViewTreeObserver()
safe        android.view.View: android.view.View getRootView()
safe        android.view.View: void getLocationOnScreen(int[])
safe        android.view.View: void getLocationInWindow(int[])
safe        android.view.View: android.view.View findViewById(int)
safe        android.view.View: android.view.View findViewWithTag(java.lang.Object)
spec        android.view.View: void setId(int)
safe        android.view.View: int getId()
safe        android.view.View: java.lang.Object getTag()
spec        android.view.View: void setTag(java.lang.Object)
safe        android.view.View: java.lang.Object getTag(int)
spec        android.view.View: void setTag(int, java.lang.Object)
safe        android.view.View: int getBaseline()
safe        android.view.View: void requestLayout()
safe        android.view.View: void forceLayout()
safe        android.view.View: void measure(int, int)
spec        android.view.View: void onMeasure(int, int)
safe        android.view.View: void setMeasuredDimension(int, int)
safe        android.view.View: int combineMeasuredStates(int, int)
safe        android.view.View: int resolveSize(int, int)
safe        android.view.View: int resolveSizeAndState(int, int, int)
safe        android.view.View: int getDefaultSize(int, int)
safe        android.view.View: int getSuggestedMinimumHeight()
safe        android.view.View: int getSuggestedMinimumWidth()
safe        android.view.View: void setMinimumHeight(int)
safe        android.view.View: void setMinimumWidth(int)
safe        android.view.View: android.view.animation.Animation getAnimation()
safe        android.view.View: void startAnimation(android.view.animation.Animation)
safe        android.view.View: void clearAnimation()
safe        android.view.View: void setAnimation(android.view.animation.Animation)
spec        android.view.View: void onAnimationStart()
spec        android.view.View: void onAnimationEnd()
safe        android.view.View: boolean onSetAlpha(int)
spec        android.view.View: void playSoundEffect(int)
spec        android.view.View: boolean performHapticFeedback(int)
spec        android.view.View: boolean performHapticFeedback(int, int)
spec        android.view.View: void setSystemUiVisibility(int)
safe        android.view.View: int getSystemUiVisibility()
spec        android.view.View: void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener)
spec        android.view.View: void dispatchSystemUiVisibilityChanged(int)
spec        android.view.View: boolean startDrag(android.content.ClipData, android.view.View$DragShadowBuilder, java.lang.Object, int)
spec        android.view.View: boolean onDragEvent(android.view.DragEvent)
spec        android.view.View: boolean dispatchDragEvent(android.view.DragEvent)
safe        android.view.View: android.view.View inflate(android.content.Context, int, android.view.ViewGroup)
safe        android.view.View: boolean overScrollBy(int, int, int, int, int, int, int, int, boolean)
spec        android.view.View: void onOverScrolled(int, int, boolean, boolean)
safe        android.view.View: int getOverScrollMode()
spec        android.view.View: void setOverScrollMode(int)
safe        android.view.View: android.view.ViewPropertyAnimator animate()
safe        android.view.View: void <clinit>()

safe        android.view.View$MeasureSpec: void <init>()
safe        android.view.View$MeasureSpec: int makeMeasureSpec(int,int)
safe        android.view.View$MeasureSpec: int getMode(int)
safe        android.view.View$MeasureSpec: int getSize(int)
safe        android.view.View$MeasureSpec: java.lang.String toString(int)


safe        android.widget.Adapter: int getCount()
safe        android.widget.Adapter: java.lang.Object getItem(int)

safe        android.widget.EditText: android.text.Editable getText()
safe        android.widget.EditText: void <init>(android.content.Context, android.util.AttributeSet)

safe        android.widget.ListView: void setAdapter(android.widget.ListAdapter)
safe        android.widget.SimpleCursorAdapter: void setViewBinder(android.widget.SimpleCursorAdapter$ViewBinder)

safe        android.widget.RemoteViews: void <init>(java.lang.String, int)
spec        android.widget.RemoteViews: void setOnClickPendingIntent(int, android.app.PendingIntent)
safe        android.widget.RemoteViews: void setTextViewText(int, java.lang.CharSequence)

safe        android.widget.SimpleCursorAdapter: void <init>(android.content.Context, int, android.database.Cursor, java.lang.String[], int[])

safe        android.widget.TextView: void <init>(android.content.Context)
safe        android.widget.TextView: void <init>(android.content.Context, android.util.AttributeSet)
safe        android.widget.TextView: void <init>(android.content.Context, android.util.AttributeSet, int)
spec        android.widget.TextView: void setEnabled(boolean)
safe        android.widget.TextView: void setTypeface(android.graphics.Typeface, int)
safe        android.widget.TextView: boolean getDefaultEditable()
safe        android.widget.TextView: android.text.method.MovementMethod getDefaultMovementMethod()
safe        android.widget.TextView: java.lang.CharSequence getText()
safe        android.widget.TextView: int length()
safe        android.widget.TextView: android.text.Editable getEditableText()
safe        android.widget.TextView: int getLineHeight()
safe        android.widget.TextView: android.text.Layout getLayout()
safe        android.widget.TextView: android.text.method.KeyListener getKeyListener()
safe        android.widget.TextView: void setKeyListener(android.text.method.KeyListener)
safe        android.widget.TextView: android.text.method.MovementMethod getMovementMethod()
safe        android.widget.TextView: void setMovementMethod(android.text.method.MovementMethod)
safe        android.widget.TextView: android.text.method.TransformationMethod getTransformationMethod()
safe        android.widget.TextView: void setTransformationMethod(android.text.method.TransformationMethod)
safe        android.widget.TextView: int getCompoundPaddingTop()
safe        android.widget.TextView: int getCompoundPaddingBottom()
safe        android.widget.TextView: int getCompoundPaddingLeft()
safe        android.widget.TextView: int getCompoundPaddingRight()
safe        android.widget.TextView: int getExtendedPaddingTop()
safe        android.widget.TextView: int getExtendedPaddingBottom()
safe        android.widget.TextView: int getTotalPaddingLeft()
safe        android.widget.TextView: int getTotalPaddingRight()
safe        android.widget.TextView: int getTotalPaddingTop()
safe        android.widget.TextView: int getTotalPaddingBottom()
safe        android.widget.TextView: void setCompoundDrawables(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable)
safe        android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(int, int, int, int)
safe        android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable)
safe        android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawables()
safe        android.widget.TextView: void setCompoundDrawablePadding(int)
safe        android.widget.TextView: int getCompoundDrawablePadding()
safe        android.widget.TextView: void setPadding(int, int, int, int)
safe        android.widget.TextView: int getAutoLinkMask()
safe        android.widget.TextView: void setTextAppearance(android.content.Context, int)
safe        android.widget.TextView: float getTextSize()
safe        android.widget.TextView: void setTextSize(float)
safe        android.widget.TextView: void setTextSize(int, float)
safe        android.widget.TextView: float getTextScaleX()
safe        android.widget.TextView: void setTextScaleX(float)
safe        android.widget.TextView: void setTypeface(android.graphics.Typeface)
safe        android.widget.TextView: android.graphics.Typeface getTypeface()
safe        android.widget.TextView: void setTextColor(int)
safe        android.widget.TextView: void setTextColor(android.content.res.ColorStateList)
safe        android.widget.TextView: android.content.res.ColorStateList getTextColors()
safe        android.widget.TextView: int getCurrentTextColor()
safe        android.widget.TextView: void setHighlightColor(int)
safe        android.widget.TextView: void setShadowLayer(float, float, float, int)
safe        android.widget.TextView: android.text.TextPaint getPaint()
safe        android.widget.TextView: void setAutoLinkMask(int)
safe        android.widget.TextView: void setLinksClickable(boolean)
safe        android.widget.TextView: boolean getLinksClickable()
safe        android.widget.TextView: android.text.style.URLSpan[] getUrls()
safe        android.widget.TextView: void setHintTextColor(int)
safe        android.widget.TextView: void setHintTextColor(android.content.res.ColorStateList)
safe        android.widget.TextView: android.content.res.ColorStateList getHintTextColors()
safe        android.widget.TextView: int getCurrentHintTextColor()
safe        android.widget.TextView: void setLinkTextColor(int)
safe        android.widget.TextView: void setLinkTextColor(android.content.res.ColorStateList)
safe        android.widget.TextView: android.content.res.ColorStateList getLinkTextColors()
safe        android.widget.TextView: void setGravity(int)
safe        android.widget.TextView: int getGravity()
safe        android.widget.TextView: int getPaintFlags()
safe        android.widget.TextView: void setPaintFlags(int)
safe        android.widget.TextView: void setHorizontallyScrolling(boolean)
safe        android.widget.TextView: void setMinLines(int)
safe        android.widget.TextView: void setMinHeight(int)
safe        android.widget.TextView: void setMaxLines(int)
safe        android.widget.TextView: void setMaxHeight(int)
safe        android.widget.TextView: void setLines(int)
safe        android.widget.TextView: void setHeight(int)
safe        android.widget.TextView: void setMinEms(int)
safe        android.widget.TextView: void setMinWidth(int)
safe        android.widget.TextView: void setMaxEms(int)
safe        android.widget.TextView: void setMaxWidth(int)
safe        android.widget.TextView: void setEms(int)
safe        android.widget.TextView: void setWidth(int)
safe        android.widget.TextView: void setLineSpacing(float, float)
safe        android.widget.TextView: void append(java.lang.CharSequence)
safe        android.widget.TextView: void append(java.lang.CharSequence, int, int)
spec        android.widget.TextView: void drawableStateChanged()
spec        android.widget.TextView: android.os.Parcelable onSaveInstanceState()
spec        android.widget.TextView: void onRestoreInstanceState(android.os.Parcelable)
safe        android.widget.TextView: void setFreezesText(boolean)
safe        android.widget.TextView: boolean getFreezesText()
spec        android.widget.TextView: void setEditableFactory(android.text.Editable$Factory)
spec        android.widget.TextView: void setSpannableFactory(android.text.Spannable$Factory)

# This used to be banned because it could be used to confuse a user
# as to what a button does.  However, as long as the button text is a constant
# this seems ok.  To set text in a widget (which is safe), use
# DroidSafe.setText().  This should be done for KeepState as well at 
# some point
spec        android.widget.TextView: void setText(java.lang.CharSequence)
safe        android.widget.TextView: void setTextKeepState(java.lang.CharSequence)

safe        android.widget.TextView: void setText(java.lang.CharSequence, android.widget.TextView$BufferType)
safe        android.widget.TextView: void setText(char[], int, int)
safe        android.widget.TextView: void setTextKeepState(java.lang.CharSequence, android.widget.TextView$BufferType)
safe        android.widget.TextView: void setText(int)
safe        android.widget.TextView: void setText(int, android.widget.TextView$BufferType)
safe        android.widget.TextView: void setHint(java.lang.CharSequence)
safe        android.widget.TextView: void setHint(int)
safe        android.widget.TextView: java.lang.CharSequence getHint()
safe        android.widget.TextView: void setInputType(int)
safe        android.widget.TextView: void setRawInputType(int)
safe        android.widget.TextView: int getInputType()
safe        android.widget.TextView: void setImeOptions(int)
safe        android.widget.TextView: int getImeOptions()
safe        android.widget.TextView: void setImeActionLabel(java.lang.CharSequence, int)
safe        android.widget.TextView: java.lang.CharSequence getImeActionLabel()
safe        android.widget.TextView: int getImeActionId()
spec        android.widget.TextView: void setOnEditorActionListener(android.widget.TextView$OnEditorActionListener)
spec        android.widget.TextView: void onEditorAction(int)
safe        android.widget.TextView: void setPrivateImeOptions(java.lang.String)
safe        android.widget.TextView: java.lang.String getPrivateImeOptions()
safe        android.widget.TextView: void setInputExtras(int)
safe        android.widget.TextView: android.os.Bundle getInputExtras(boolean)
safe        android.widget.TextView: java.lang.CharSequence getError()
spec        android.widget.TextView: void setError(java.lang.CharSequence)
spec        android.widget.TextView: void setError(java.lang.CharSequence, android.graphics.drawable.Drawable)
safe        android.widget.TextView: boolean setFrame(int, int, int, int)
safe        android.widget.TextView: void setFilters(android.text.InputFilter[])
safe        android.widget.TextView: android.text.InputFilter[] getFilters()
spec        android.widget.TextView: boolean onPreDraw()
spec        android.widget.TextView: void onAttachedToWindow()
spec        android.widget.TextView: void onDetachedFromWindow()
safe        android.widget.TextView: boolean isPaddingOffsetRequired()
safe        android.widget.TextView: int getLeftPaddingOffset()
safe        android.widget.TextView: int getTopPaddingOffset()
safe        android.widget.TextView: int getBottomPaddingOffset()
safe        android.widget.TextView: int getRightPaddingOffset()
safe        android.widget.TextView: boolean verifyDrawable(android.graphics.drawable.Drawable)
safe        android.widget.TextView: void jumpDrawablesToCurrentState()
safe        android.widget.TextView: void invalidateDrawable(android.graphics.drawable.Drawable)
spec        android.widget.TextView: boolean onSetAlpha(int)
safe        android.widget.TextView: boolean isTextSelectable()
safe        android.widget.TextView: void setTextIsSelectable(boolean)
spec        android.widget.TextView: int[] onCreateDrawableState(int)
spec        android.widget.TextView: void onDraw(android.graphics.Canvas)
safe        android.widget.TextView: void getFocusedRect(android.graphics.Rect)
safe        android.widget.TextView: int getLineCount()
safe        android.widget.TextView: int getLineBounds(int, android.graphics.Rect)
safe        android.widget.TextView: int getBaseline()
spec        android.widget.TextView: boolean onKeyPreIme(int, android.view.KeyEvent)
spec        android.widget.TextView: boolean onKeyDown(int, android.view.KeyEvent)
spec        android.widget.TextView: boolean onKeyMultiple(int, int, android.view.KeyEvent)
spec        android.widget.TextView: boolean onKeyUp(int, android.view.KeyEvent)
spec        android.widget.TextView: boolean onCheckIsTextEditor()
spec        android.widget.TextView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)
safe        android.widget.TextView: boolean extractText(android.view.inputmethod.ExtractedTextRequest, android.view.inputmethod.ExtractedText)
safe        android.widget.TextView: void setExtractedText(android.view.inputmethod.ExtractedText)
spec        android.widget.TextView: void onCommitCompletion(android.view.inputmethod.CompletionInfo)
spec        android.widget.TextView: void onCommitCorrection(android.view.inputmethod.CorrectionInfo)
safe        android.widget.TextView: void beginBatchEdit()
safe        android.widget.TextView: void endBatchEdit()
spec        android.widget.TextView: void onBeginBatchEdit()
spec        android.widget.TextView: void onEndBatchEdit()
spec        android.widget.TextView: boolean onPrivateIMECommand(java.lang.String, android.os.Bundle)
safe        android.widget.TextView: void resetResolvedLayoutDirection()
safe        android.widget.TextView: void setIncludeFontPadding(boolean)
safe        android.widget.TextView: void onMeasure(int, int)
safe        android.widget.TextView: boolean bringPointIntoView(int)
safe        android.widget.TextView: boolean moveCursorToVisibleOffset()
safe        android.widget.TextView: void computeScroll()
safe        android.widget.TextView: void debug(int)
safe        android.widget.TextView: int getSelectionStart()
safe        android.widget.TextView: int getSelectionEnd()
safe        android.widget.TextView: boolean hasSelection()
safe        android.widget.TextView: void setSingleLine()
safe        android.widget.TextView: void setAllCaps(boolean)
safe        android.widget.TextView: void setSingleLine(boolean)
safe        android.widget.TextView: void setEllipsize(android.text.TextUtils$TruncateAt)
safe        android.widget.TextView: void setMarqueeRepeatLimit(int)
safe        android.widget.TextView: android.text.TextUtils$TruncateAt getEllipsize()
safe        android.widget.TextView: void setSelectAllOnFocus(boolean)
safe        android.widget.TextView: void setCursorVisible(boolean)
spec        android.widget.TextView: void onTextChanged(java.lang.CharSequence, int, int, int)
spec        android.widget.TextView: void onSelectionChanged(int, int)
spec        android.widget.TextView: void addTextChangedListener(android.text.TextWatcher)
spec        android.widget.TextView: void removeTextChangedListener(android.text.TextWatcher)
spec        android.widget.TextView: void onStartTemporaryDetach()
spec        android.widget.TextView: void onFinishTemporaryDetach()
spec        android.widget.TextView: void onFocusChanged(boolean, int, android.graphics.Rect)
spec        android.widget.TextView: void onWindowFocusChanged(boolean)
spec        android.widget.TextView: void onVisibilityChanged(android.view.View, int)
spec        android.widget.TextView: void clearComposingText()
spec        android.widget.TextView: void setSelected(boolean)
spec        android.widget.TextView: boolean onTouchEvent(android.view.MotionEvent)
spec        android.widget.TextView: boolean onGenericMotionEvent(android.view.MotionEvent)
safe        android.widget.TextView: boolean didTouchFocusSelect()
spec        android.widget.TextView: void cancelLongPress()
spec        android.widget.TextView: boolean onTrackballEvent(android.view.MotionEvent)
safe        android.widget.TextView: void setScroller(android.widget.Scroller)
safe        android.widget.TextView: float getLeftFadingEdgeStrength()
safe        android.widget.TextView: float getRightFadingEdgeStrength()
safe        android.widget.TextView: int computeHorizontalScrollRange()
safe        android.widget.TextView: int computeVerticalScrollRange()
safe        android.widget.TextView: int computeVerticalScrollExtent()
safe        android.widget.TextView: void findViewsWithText(java.util.ArrayList, java.lang.CharSequence, int)
safe        android.widget.TextView: android.content.res.ColorStateList getTextColors(android.content.Context, android.content.res.TypedArray)
safe        android.widget.TextView: int getTextColor(android.content.Context, android.content.res.TypedArray, int)
spec        android.widget.TextView: boolean onKeyShortcut(int, android.view.KeyEvent)
spec        android.widget.TextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
spec        android.widget.TextView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
spec        android.widget.TextView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)
spec        android.widget.TextView: void sendAccessibilityEvent(int)
safe        android.widget.TextView: boolean isInputMethodTarget()
spec        android.widget.TextView: boolean onTextContextMenuItem(int)
spec        android.widget.TextView: boolean performLongClick()
safe        android.widget.TextView: void onScrollChanged(int, int, int, int)
safe        android.widget.TextView: boolean isSuggestionsEnabled()
spec        android.widget.TextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
spec        android.widget.TextView: android.view.ActionMode$Callback getCustomSelectionActionModeCallback()
safe        android.widget.TextView: int getOffsetForPosition(float, float)
spec        android.widget.TextView: boolean onDragEvent(android.view.DragEvent)
safe        android.widget.TextView: void resolveTextDirection()
safe        android.widget.TextView: void resolveDrawables()
safe        android.widget.TextView: void resetResolvedDrawables()


safe        android.widget.Toast: void <init>(android.content.Context)
safe        android.widget.Toast: void show()
safe        android.widget.Toast: void cancel()
safe        android.widget.Toast: void setView(android.view.View)
safe        android.widget.Toast: android.view.View getView()
safe        android.widget.Toast: void setDuration(int)
safe        android.widget.Toast: int getDuration()
safe        android.widget.Toast: void setMargin(float, float)
safe        android.widget.Toast: float getHorizontalMargin()
safe        android.widget.Toast: float getVerticalMargin()
safe        android.widget.Toast: void setGravity(int, int, int)
safe        android.widget.Toast: int getGravity()
safe        android.widget.Toast: int getXOffset()
safe        android.widget.Toast: int getYOffset()
safe        android.widget.Toast: android.widget.Toast makeText(android.content.Context, java.lang.CharSequence, int)
safe        android.widget.Toast: android.widget.Toast makeText(android.content.Context, int, int)
safe        android.widget.Toast: void setText(int)
safe        android.widget.Toast: void setText(java.lang.CharSequence)



# Wraps an existing InputStream. 
spec        java.io.BufferedInputStream: void <init>(java.io.InputStream)
spec        java.io.BufferedInputStream: void <init>(java.io.InputStream,int)
spec        java.io.BufferedInputStream: int available()
spec        java.io.BufferedInputStream: void close()
spec        java.io.BufferedInputStream: void mark(int)
spec        java.io.BufferedInputStream: boolean markSupported()
spec        java.io.BufferedInputStream: int read()
spec        java.io.BufferedInputStream: int read(byte[],int,int)
spec        java.io.BufferedInputStream: void reset()
spec        java.io.BufferedInputStream: long skip(long)

# Wraps an existing OutputStream. All Stream related classes are Spec. 
spec        java.io.BufferedOutputStream: void <init>(java.io.OutputStream)
spec        java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)
spec        java.io.BufferedOutputStream: void flush()
spec        java.io.BufferedOutputStream: void write(byte[],int,int)
spec        java.io.BufferedOutputStream: void close()
spec        java.io.BufferedOutputStream: void write(int)



# These operate on a char buffer (purely computational):
safe        java.io.BufferedReader: void <init>(java.io.Reader)
safe        java.io.BufferedReader: void <init>(java.io.Reader,int)
safe        java.io.BufferedReader: void close()
safe        java.io.BufferedReader: void mark(int)
safe        java.io.BufferedReader: boolean markSupported()
safe        java.io.BufferedReader: int read()
safe        java.io.BufferedReader: int read(char[],int,int)
safe        java.io.BufferedReader: java.lang.String readLine()
safe        java.io.BufferedReader: boolean ready()
safe        java.io.BufferedReader: void reset()
safe        java.io.BufferedReader: long skip(long)

# These operate on a char buffer (purely computational):
safe        java.io.BufferedWriter: void <init>(java.io.Writer)
safe        java.io.BufferedWriter: void <init>(java.io.Writer,int)
safe        java.io.BufferedWriter: void close()
safe        java.io.BufferedWriter: void flush()
safe        java.io.BufferedWriter: void newLine()
safe        java.io.BufferedWriter: void write(char[],int,int)
safe        java.io.BufferedWriter: void write(int)
safe        java.io.BufferedWriter: void write(java.lang.String,int,int)


# These operate on byte arrays (purely computational):
safe        java.io.ByteArrayInputStream: void <init>(byte[])
safe        java.io.ByteArrayInputStream: void <init>(byte[], int, int)
safe        java.io.ByteArrayInputStream: int available()
safe        java.io.ByteArrayInputStream: void close()
safe        java.io.ByteArrayInputStream: void mark(int)
safe        java.io.ByteArrayInputStream: boolean markSupported()
safe        java.io.ByteArrayInputStream: int read()
safe        java.io.ByteArrayInputStream: int read(byte[], int, int)
safe        java.io.ByteArrayInputStream: void reset()
safe        java.io.ByteArrayInputStream: long skip(long)

# These operate on byte arrays (purely computational):
safe        java.io.ByteArrayOutputStream: void <init>()
safe        java.io.ByteArrayOutputStream: void <init>(int)
safe        java.io.ByteArrayOutputStream: void close()
safe        java.io.ByteArrayOutputStream: void reset()
safe        java.io.ByteArrayOutputStream: int size()
safe        java.io.ByteArrayOutputStream: byte[] toByteArray()
safe        java.io.ByteArrayOutputStream: java.lang.String toString()
safe        java.io.ByteArrayOutputStream: java.lang.String toString(int)
safe        java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)
safe        java.io.ByteArrayOutputStream: void write(byte[], int, int)
safe        java.io.ByteArrayOutputStream: void write(int)
safe        java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)

safe        java.io.CharConversionException: void <init>()
safe        java.io.CharConversionException: void <init>(java.lang.String)

safe        java.io.Closeable: void close()


# DataInputStream is a wrapper around and InputStream.
spec        java.io.DataInputStream: void <init>(java.io.InputStream)
spec        java.io.DataInputStream: int read(byte[])
spec        java.io.DataInputStream: int read(byte[],int,int)
spec        java.io.DataInputStream: boolean readBoolean()
spec        java.io.DataInputStream: byte readByte()
spec        java.io.DataInputStream: char readChar()
spec        java.io.DataInputStream: double readDouble()
spec        java.io.DataInputStream: float readFloat()
spec        java.io.DataInputStream: void readFully(byte[])
spec        java.io.DataInputStream: void readFully(byte[],int,int)
spec        java.io.DataInputStream: int readInt()
spec        java.io.DataInputStream: java.lang.String readLine()
spec        java.io.DataInputStream: long readLong()
spec        java.io.DataInputStream: short readShort()
spec        java.io.DataInputStream: int readUnsignedByte()
spec        java.io.DataInputStream: int readUnsignedShort()
spec        java.io.DataInputStream: java.lang.String readUTF()
spec        java.io.DataInputStream: java.lang.String readUTF(java.io.DataInput)
spec        java.io.DataInputStream: int skipBytes(int)


# DataOutputStream is a wrapper around and output stream.
spec        java.io.DataOutputStream: void <init>(java.io.OutputStream)
spec        java.io.DataOutputStream: void flush()
spec        java.io.DataOutputStream: int size()
spec        java.io.DataOutputStream: void write(byte[],int,int)
spec        java.io.DataOutputStream: void write(int)
spec        java.io.DataOutputStream: void writeBoolean(boolean)
spec        java.io.DataOutputStream: void writeByte(int)
spec        java.io.DataOutputStream: void writeBytes(java.lang.String)
spec        java.io.DataOutputStream: void writeChar(int)
spec        java.io.DataOutputStream: void writeChars(java.lang.String)
spec        java.io.DataOutputStream: void writeDouble(double)
spec        java.io.DataOutputStream: void writeFloat(float)
spec        java.io.DataOutputStream: void writeInt(int)
spec        java.io.DataOutputStream: void writeLong(long)
spec        java.io.DataOutputStream: void writeShort(int)
spec        java.io.DataOutputStream: void writeUTF(java.lang.String)


safe        java.io.EOFException: void <init>()
safe        java.io.EOFException: void <init>(java.lang.String)


spec        java.io.Externalizable: void readExternal(java.io.ObjectInput)
spec        java.io.Externalizable: void writeExternal(java.io.ObjectOutput)


# Creating file paths should be safe:
safe        java.io.File: void <init>(java.io.File, java.lang.String)
safe        java.io.File: void <init>(java.lang.String)
safe        java.io.File: void <init>(java.lang.String, java.lang.String)
safe        java.io.File: void <init>(java.net.URI)

# Inspecting attributes of files may be security-critical:
spec        java.io.File: boolean canExecute()
spec        java.io.File: boolean canRead()
spec        java.io.File: boolean canWrite()

# Comparing file paths should be safe:
safe        java.io.File: int compareTo(java.io.File)
safe        java.io.File: int compareTo(java.lang.Object)

# Creating new files may be security-critical:
spec        java.io.File: boolean createNewFile()
spec        java.io.File: java.io.File createTempFile(java.lang.String, java.lang.String)
spec        java.io.File: java.io.File createTempFile(java.lang.String, java.lang.String, java.io.File)

# Deleting files is security-critical:
spec        java.io.File: boolean delete()
spec        java.io.File: void deleteOnExit()

# Comparing file paths should be safe:
safe        java.io.File: boolean equals(java.lang.Object)

# Inspecting the existence of files may be security-critical:
spec        java.io.File: boolean exists()

# Manipulating file paths should be safe:
safe        java.io.File: java.io.File getAbsoluteFile()
safe        java.io.File: java.lang.String getAbsolutePath()
safe        java.io.File: java.io.File getCanonicalFile()
safe        java.io.File: java.lang.String getCanonicalPath()

# This seems innocuous:
safe        java.io.File: long getFreeSpace()

# Manipulating file paths should be safe:
safe        java.io.File: java.lang.String getName()
safe        java.io.File: java.lang.String getParent()
safe        java.io.File: java.io.File getParentFile()
safe        java.io.File: java.lang.String getPath()

# These seem innocuous:
safe        java.io.File: long getTotalSpace()
safe        java.io.File: long getUsableSpace()

# Purely computational:
safe        java.io.File: int hashCode()

# Inspecting attributes of files may be security-critical:
spec        java.io.File: boolean isAbsolute()
spec        java.io.File: boolean isDirectory()
spec        java.io.File: boolean isFile()
spec        java.io.File: boolean isHidden()
spec        java.io.File: long lastModified()
spec        java.io.File: long length()

# Inspecting content of directories may be security-critical:
spec        java.io.File: java.lang.String[] list()
spec        java.io.File: java.lang.String[] list(java.io.FilenameFilter)
spec        java.io.File: java.io.File[] listFiles()
spec        java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)
spec        java.io.File: java.io.File[] listFiles(java.io.FileFilter)

# This seems innocuous:
safe        java.io.File: java.io.File[] listRoots()

# Creating directories seems security-critical:
spec        java.io.File: boolean mkdir()
spec        java.io.File: boolean mkdirs()

# Changing attributes of files seems security-critical:
spec        java.io.File: boolean renameTo(java.io.File)
spec        java.io.File: boolean setExecutable(boolean)
spec        java.io.File: boolean setExecutable(boolean, boolean)
spec        java.io.File: boolean setLastModified(long)
spec        java.io.File: boolean setReadOnly()
spec        java.io.File: boolean setReadable(boolean)
spec        java.io.File: boolean setReadable(boolean, boolean)
spec        java.io.File: boolean setWritable(boolean)
spec        java.io.File: boolean setWritable(boolean, boolean)

# Purely computational:
safe        java.io.File: java.lang.String toString()

# Manipulating file paths should be safe:
safe        java.io.File: java.net.URI toURI()
safe        java.io.File: java.net.URL toURL()



# Would mark some of these as spec since dealing with files. 
spec        java.io.FileDescriptor: void <init>()
spec        java.io.FileDescriptor: void sync()
safe        java.io.FileDescriptor: boolean valid()
safe        java.io.FileDescriptor: java.lang.String toString()
spec        java.io.FileDescriptor: void <clinit>()



# Dealing with files so should be security critical
spec        java.io.FileInputStream: void <init>(java.io.File)
spec        java.io.FileInputStream: void <init>(java.io.FileDescriptor)
spec        java.io.FileInputStream: void <init>(java.lang.String)
spec        java.io.FileInputStream: int available()
spec        java.io.FileInputStream: void close()
spec        java.io.FileInputStream: void finalize()
spec        java.io.FileInputStream: java.nio.channels.FileChannel getChannel()
spec        java.io.FileInputStream: java.io.FileDescriptor getFD()
spec        java.io.FileInputStream: int read()
spec        java.io.FileInputStream: int read(byte[],int,int)
spec        java.io.FileInputStream: long skip(long)

safe        java.io.FileNotFoundException: void <init>(java.lang.String)

# Dealing with files so should be security critical
spec        java.io.FileOutputStream: void <init>(java.io.File)
spec        java.io.FileOutputStream: void <init>(java.io.File,boolean)
spec        java.io.FileOutputStream: void <init>(java.io.FileDescriptor)
spec        java.io.FileOutputStream: void <init>(java.lang.String)
spec        java.io.FileOutputStream: void <init>(java.lang.String,boolean)
spec        java.io.FileOutputStream: void close()
spec        java.io.FileOutputStream: void finalize()
spec        java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()
spec        java.io.FileOutputStream: java.io.FileDescriptor getFD()
spec        java.io.FileOutputStream: void write(byte[],int,int)
spec        java.io.FileOutputStream: void write(int)



# Marking read methods as spec since filtering may modify the data. 
spec        java.io.FilterInputStream: void <init>(java.io.InputStream)
spec        java.io.FilterInputStream: int available()
spec        java.io.FilterInputStream: void close()
spec        java.io.FilterInputStream: void mark(int)
spec        java.io.FilterInputStream: boolean markSupported()
spec        java.io.FilterInputStream: int read()
spec        java.io.FilterInputStream: int read(byte[],int,int)
spec        java.io.FilterInputStream: void reset()
spec        java.io.FilterInputStream: long skip(long)

# Marking the write methods as spec since filtering may modify the data. 
spec        java.io.FilterOutputStream: void <init>(java.io.OutputStream)
spec        java.io.FilterOutputStream: void close()
spec        java.io.FilterOutputStream: void flush()
spec        java.io.FilterOutputStream: void write(byte[],int,int)
spec        java.io.FilterOutputStream: void write(int)

# Safe because of Reader
safe        java.io.FilterReader: void <init>(java.io.Reader)
safe        java.io.FilterReader: void close()
safe        java.io.FilterReader: void mark(int)
safe        java.io.FilterReader: boolean markSupported()
safe        java.io.FilterReader: int read()
safe        java.io.FilterReader: int read(char[],int,int)
safe        java.io.FilterReader: boolean ready()
safe        java.io.FilterReader: void reset()
safe        java.io.FilterReader: long skip(long)

# Safe because of Writer
spec        java.io.FilterWriter: void <init>(java.io.Writer)
spec        java.io.FilterWriter: void close()
spec        java.io.FilterWriter: void flush()
spec        java.io.FilterWriter: void write(char[],int,int)
spec        java.io.FilterWriter: void write(int)
spec        java.io.FilterWriter: void write(java.lang.String,int,int)



safe        java.io.Flushable: void flush()


safe        java.io.IOException: void <init>()
safe        java.io.IOException: void <init>(java.lang.String)
safe        java.io.IOException: void <init>(java.lang.String, java.lang.Throwable)
safe        java.io.IOException: void <init>(java.lang.Throwable)




# We consider files security-critical:
# Changing these to spec instead of safe
spec        java.io.InputStream: void <init>()
spec        java.io.InputStream: int available()
spec        java.io.InputStream: void close()
spec        java.io.InputStream: void mark(int)
spec        java.io.InputStream: boolean markSupported()
spec        java.io.InputStream: int read()
spec        java.io.InputStream: int read(byte[])
spec        java.io.InputStream: int read(byte[], int, int)
spec        java.io.InputStream: void reset()
spec        java.io.InputStream: long skip(long)

# Wrapper around InputStream. 
spec        java.io.InputStreamReader: void <init>(java.io.InputStream)
spec        java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)
spec        java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.CharsetDecoder)
spec        java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)
spec        java.io.InputStreamReader: void close()
spec        java.io.InputStreamReader: java.lang.String getEncoding()
spec        java.io.InputStreamReader: int read()
spec        java.io.InputStreamReader: int read(char[],int,int)
spec        java.io.InputStreamReader: boolean ready()

safe        java.io.InterruptedIOException: void <init>()
safe        java.io.InterruptedIOException: void <init>(java.lang.String)

safe        java.io.InvalidObjectException: void <init>(java.lang.String)


# Wraps an existing InputStream. 
spec        java.io.LineNumberInputStream: void <init>(java.io.InputStream)
spec        java.io.LineNumberInputStream: int available()
spec        java.io.LineNumberInputStream: int getLineNumber()
spec        java.io.LineNumberInputStream: void mark(int)
spec        java.io.LineNumberInputStream: int read()
spec        java.io.LineNumberInputStream: int read(byte[],int,int)
spec        java.io.LineNumberInputStream: void reset()
spec        java.io.LineNumberInputStream: void setLineNumber(int)
spec        java.io.LineNumberInputStream: long skip(long)

# Wraps a reader. Safe
safe        java.io.LineNumberReader: void <init>(java.io.Reader)
safe        java.io.LineNumberReader: void <init>(java.io.Reader,int)
safe        java.io.LineNumberReader: int getLineNumber()
safe        java.io.LineNumberReader: void mark(int)
safe        java.io.LineNumberReader: int read()
safe        java.io.LineNumberReader: int read(char[],int,int)
safe        java.io.LineNumberReader: java.lang.String readLine()
safe        java.io.LineNumberReader: void reset()
safe        java.io.LineNumberReader: void setLineNumber(int)
safe        java.io.LineNumberReader: long skip(long)


# Security critical since these methods can be used to serialize 
# java objects
# Not clear if InputStream is used or not. 
spec        java.io.ObjectInputStream: void <init>()
spec        java.io.ObjectInputStream: void <init>(java.io.InputStream)
spec        java.io.ObjectInputStream: int available()
spec        java.io.ObjectInputStream: void close()
spec        java.io.ObjectInputStream: void defaultReadObject()
spec        java.io.ObjectInputStream: boolean enableResolveObject(boolean)
spec        java.io.ObjectInputStream: int read()
spec        java.io.ObjectInputStream: int read(byte[],int,int)
spec        java.io.ObjectInputStream: boolean readBoolean()
spec        java.io.ObjectInputStream: byte readByte()
spec        java.io.ObjectInputStream: char readChar()
spec        java.io.ObjectInputStream: double readDouble()
spec        java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()
spec        java.io.ObjectInputStream: float readFloat()
spec        java.io.ObjectInputStream: void readFully(byte[])
spec        java.io.ObjectInputStream: void readFully(byte[],int,int)
spec        java.io.ObjectInputStream: int readInt()
spec        java.io.ObjectInputStream: java.lang.String readLine()
spec        java.io.ObjectInputStream: long readLong()
spec        java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDescriptor()
spec        java.io.ObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])
spec        java.io.ObjectInputStream: java.lang.Object readObject()
spec        java.io.ObjectInputStream: java.lang.Object readUnshared()
spec        java.io.ObjectInputStream: java.lang.Object readObjectOverride()
spec        java.io.ObjectInputStream: short readShort()
spec        java.io.ObjectInputStream: void readStreamHeader()
spec        java.io.ObjectInputStream: int readUnsignedByte()
spec        java.io.ObjectInputStream: int readUnsignedShort()
spec        java.io.ObjectInputStream: java.lang.String readUTF()
spec        java.io.ObjectInputStream: void registerValidation(java.io.ObjectInputValidation,int)
spec        java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)
spec        java.io.ObjectInputStream: java.lang.Object resolveObject(java.lang.Object)
spec        java.io.ObjectInputStream: int skipBytes(int)


# Security critical since these methods can be used to serialize 
# java objects
spec        java.io.ObjectOutputStream: void <init>()
spec        java.io.ObjectOutputStream: void <init>(java.io.OutputStream)
spec        java.io.ObjectOutputStream: void annotateClass(java.lang.Class)
spec        java.io.ObjectOutputStream: void annotateProxyClass(java.lang.Class)
spec        java.io.ObjectOutputStream: void close()
spec        java.io.ObjectOutputStream: void defaultWriteObject()
spec        java.io.ObjectOutputStream: void drain()
spec        java.io.ObjectOutputStream: boolean enableReplaceObject(boolean)
spec        java.io.ObjectOutputStream: void flush()
spec        java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()
spec        java.io.ObjectOutputStream: java.lang.Object replaceObject(java.lang.Object)
spec        java.io.ObjectOutputStream: void reset()
spec        java.io.ObjectOutputStream: void useProtocolVersion(int)
spec        java.io.ObjectOutputStream: void write(byte[],int,int)
spec        java.io.ObjectOutputStream: void write(int)
spec        java.io.ObjectOutputStream: void writeBoolean(boolean)
spec        java.io.ObjectOutputStream: void writeByte(int)
spec        java.io.ObjectOutputStream: void writeBytes(java.lang.String)
spec        java.io.ObjectOutputStream: void writeChar(int)
spec        java.io.ObjectOutputStream: void writeChars(java.lang.String)
spec        java.io.ObjectOutputStream: void writeDouble(double)
spec        java.io.ObjectOutputStream: void writeFields()
spec        java.io.ObjectOutputStream: void writeFloat(float)
spec        java.io.ObjectOutputStream: void writeInt(int)
spec        java.io.ObjectOutputStream: void writeLong(long)
spec        java.io.ObjectOutputStream: void writeClassDescriptor(java.io.ObjectStreamClass)
spec        java.io.ObjectOutputStream: void writeObject(java.lang.Object)
spec        java.io.ObjectOutputStream: void writeUnshared(java.lang.Object)
spec        java.io.ObjectOutputStream: void writeObjectOverride(java.lang.Object)
spec        java.io.ObjectOutputStream: void writeShort(int)
spec        java.io.ObjectOutputStream: void writeStreamHeader()
spec        java.io.ObjectOutputStream: void writeUTF(java.lang.String)




# We consider files security-critical:
spec        java.io.OutputStream: void <init>()
spec        java.io.OutputStream: void close()
spec        java.io.OutputStream: void flush()
spec        java.io.OutputStream: void write(byte[])
spec        java.io.OutputStream: void write(byte[], int, int)
spec        java.io.OutputStream: void write(int)


# Methods used to serialize an object. Marking as safe
# since just serializing the object should have no 
# security implications.
safe        java.io.ObjectStreamClass: void <init>()
safe        java.io.ObjectStreamClass: java.lang.Class forClass()
safe        java.io.ObjectStreamClass: java.io.ObjectStreamField getField(java.lang.String)
safe        java.io.ObjectStreamClass: java.io.ObjectStreamField[] getFields()
safe        java.io.ObjectStreamClass: java.lang.String getName()
safe        java.io.ObjectStreamClass: long getSerialVersionUID()
safe        java.io.ObjectStreamClass: java.io.ObjectStreamClass lookup(java.lang.Class)
safe        java.io.ObjectStreamClass: java.io.ObjectStreamClass lookupAny(java.lang.Class)
safe        java.io.ObjectStreamClass: java.lang.String toString()
safe        java.io.ObjectStreamClass: void <clinit>()


# Methods used to serialize an object. Marking as safe
# since just serializing the object should have no 
# security implications.
safe        java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)
safe        java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class,boolean)
safe        java.io.ObjectStreamField: int compareTo(java.lang.Object)
safe        java.io.ObjectStreamField: java.lang.String getName()
safe        java.io.ObjectStreamField: int getOffset()
safe        java.io.ObjectStreamField: java.lang.Class getType()
safe        java.io.ObjectStreamField: char getTypeCode()
safe        java.io.ObjectStreamField: java.lang.String getTypeString()
safe        java.io.ObjectStreamField: boolean isPrimitive()
safe        java.io.ObjectStreamField: void setOffset(int)
safe        java.io.ObjectStreamField: java.lang.String toString()
safe        java.io.ObjectStreamField: boolean isUnshared()


# Should be safe since it is a wrapper around an OutputStream. 
safe        java.io.OutputStreamWriter: void <init>(java.io.OutputStream)
safe        java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)
safe        java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)
safe        java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.CharsetEncoder)
safe        java.io.OutputStreamWriter: void close()
safe        java.io.OutputStreamWriter: void flush()
safe        java.io.OutputStreamWriter: java.lang.String getEncoding()
safe        java.io.OutputStreamWriter: void write(char[],int,int)
safe        java.io.OutputStreamWriter: void write(int)
safe        java.io.OutputStreamWriter: void write(java.lang.String,int,int)


safe        java.io.PipedReader: void <init>()
safe        java.io.PipedReader: void <init>(java.io.PipedWriter)
safe        java.io.PipedReader: void <init>(int)
safe        java.io.PipedReader: void <init>(java.io.PipedWriter,int)
safe        java.io.PipedReader: void close()
safe        java.io.PipedReader: void connect(java.io.PipedWriter)
safe        java.io.PipedReader: int read()
safe        java.io.PipedReader: int read(char[],int,int)
safe        java.io.PipedReader: boolean ready()

safe        java.io.PipedWriter: void <init>()
safe        java.io.PipedWriter: void <init>(java.io.PipedReader)
safe        java.io.PipedWriter: void close()
safe        java.io.PipedWriter: void connect(java.io.PipedReader)
safe        java.io.PipedWriter: void flush()
safe        java.io.PipedWriter: void write(char[],int,int)
safe        java.io.PipedWriter: void write(int)


# We consider files security-critical:
spec        java.io.PrintStream: void <init>(java.io.OutputStream)
spec        java.io.PrintStream: void <init>(java.io.OutputStream, boolean)
spec        java.io.PrintStream: void <init>(java.io.OutputStream, boolean, java.lang.String)
spec        java.io.PrintStream: void <init>(java.io.File)
spec        java.io.PrintStream: void <init>(java.io.File, java.lang.String)
spec        java.io.PrintStream: void <init>(java.lang.String)
spec        java.io.PrintStream: void <init>(java.lang.String, java.lang.String)
spec        java.io.PrintStream: boolean checkError()
spec        java.io.PrintStream: void clearError()
spec        java.io.PrintStream: void close()
spec        java.io.PrintStream: void flush()
spec        java.io.PrintStream: java.io.PrintStream format(java.lang.String, java.lang.Object[])
spec        java.io.PrintStream: java.io.PrintStream format(java.util.Locale, java.lang.String, java.lang.Object[])
spec        java.io.PrintStream: java.io.PrintStream printf(java.lang.String, java.lang.Object[])
spec        java.io.PrintStream: java.io.PrintStream printf(java.util.Locale, java.lang.String, java.lang.Object[])
spec        java.io.PrintStream: void print(char[])
spec        java.io.PrintStream: void print(char)
spec        java.io.PrintStream: void print(double)
spec        java.io.PrintStream: void print(float)
spec        java.io.PrintStream: void print(int)
spec        java.io.PrintStream: void print(long)
spec        java.io.PrintStream: void print(java.lang.Object)
spec        java.io.PrintStream: void print(java.lang.String)
spec        java.io.PrintStream: void print(boolean)
spec        java.io.PrintStream: void println()
spec        java.io.PrintStream: void println(char[])
spec        java.io.PrintStream: void println(char)
spec        java.io.PrintStream: void println(double)
spec        java.io.PrintStream: void println(float)
spec        java.io.PrintStream: void println(int)
spec        java.io.PrintStream: void println(long)
spec        java.io.PrintStream: void println(java.lang.Object)
spec        java.io.PrintStream: void println(java.lang.String)
spec        java.io.PrintStream: void println(boolean)
spec        java.io.PrintStream: void setError()
spec        java.io.PrintStream: void write(byte[], int, int)
spec        java.io.PrintStream: void write(int)
spec        java.io.PrintStream: java.io.PrintStream append(char)
spec        java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)
spec        java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence, int, int)
spec        java.io.PrintStream: java.lang.Appendable append(java.lang.CharSequence, int, int)
spec        java.io.PrintStream: java.lang.Appendable append(java.lang.CharSequence)
spec        java.io.PrintStream: java.lang.Appendable append(char)

# We consider files security-critical:
spec        java.io.PrintWriter: void <init>(java.io.OutputStream)
spec        java.io.PrintWriter: void <init>(java.io.OutputStream, boolean)
spec        java.io.PrintWriter: void <init>(java.io.Writer)
spec        java.io.PrintWriter: void <init>(java.io.Writer, boolean)
spec        java.io.PrintWriter: void <init>(java.io.File)
spec        java.io.PrintWriter: void <init>(java.io.File, java.lang.String)
spec        java.io.PrintWriter: void <init>(java.lang.String)
spec        java.io.PrintWriter: void <init>(java.lang.String, java.lang.String)
spec        java.io.PrintWriter: boolean checkError()
spec        java.io.PrintWriter: void clearError()
spec        java.io.PrintWriter: void close()
spec        java.io.PrintWriter: void flush()
spec        java.io.PrintWriter: java.io.PrintWriter format(java.lang.String, java.lang.Object[])
spec        java.io.PrintWriter: java.io.PrintWriter format(java.util.Locale, java.lang.String, java.lang.Object[])
spec        java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String, java.lang.Object[])
spec        java.io.PrintWriter: java.io.PrintWriter printf(java.util.Locale, java.lang.String, java.lang.Object[])
spec        java.io.PrintWriter: void print(char[])
spec        java.io.PrintWriter: void print(char)
spec        java.io.PrintWriter: void print(double)
spec        java.io.PrintWriter: void print(float)
spec        java.io.PrintWriter: void print(int)
spec        java.io.PrintWriter: void print(long)
spec        java.io.PrintWriter: void print(java.lang.Object)
spec        java.io.PrintWriter: void print(java.lang.String)
spec        java.io.PrintWriter: void print(boolean)
spec        java.io.PrintWriter: void println()
spec        java.io.PrintWriter: void println(char[])
spec        java.io.PrintWriter: void println(char)
spec        java.io.PrintWriter: void println(double)
spec        java.io.PrintWriter: void println(float)
spec        java.io.PrintWriter: void println(int)
spec        java.io.PrintWriter: void println(long)
spec        java.io.PrintWriter: void println(java.lang.Object)
spec        java.io.PrintWriter: void println(java.lang.String)
spec        java.io.PrintWriter: void println(boolean)
spec        java.io.PrintWriter: void setError()
spec        java.io.PrintWriter: void write(char[])
spec        java.io.PrintWriter: void write(char[], int, int)
spec        java.io.PrintWriter: void write(int)
spec        java.io.PrintWriter: void write(java.lang.String)
spec        java.io.PrintWriter: void write(java.lang.String, int, int)
spec        java.io.PrintWriter: java.io.PrintWriter append(char)
spec        java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)
spec        java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence, int, int)
spec        java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence, int, int)
spec        java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)
spec        java.io.PrintWriter: java.io.Writer append(char)
spec        java.io.PrintWriter: java.lang.Appendable append(java.lang.CharSequence, int, int)
spec        java.io.PrintWriter: java.lang.Appendable append(java.lang.CharSequence)
spec        java.io.PrintWriter: java.lang.Appendable append(char)




# Wrap around InputStream.
spec        java.io.PushbackInputStream: void <init>(java.io.InputStream)
spec        java.io.PushbackInputStream: void <init>(java.io.InputStream,int)
spec        java.io.PushbackInputStream: int available()
spec        java.io.PushbackInputStream: void close()
spec        java.io.PushbackInputStream: boolean markSupported()
spec        java.io.PushbackInputStream: int read()
spec        java.io.PushbackInputStream: int read(byte[],int,int)
spec        java.io.PushbackInputStream: long skip(long)
spec        java.io.PushbackInputStream: void unread(byte[])
spec        java.io.PushbackInputStream: void unread(byte[],int,int)
spec        java.io.PushbackInputStream: void unread(int)
spec        java.io.PushbackInputStream: void mark(int)
spec        java.io.PushbackInputStream: void reset()


# Wrap for Reader. Safe
safe        java.io.PushbackReader: void <init>(java.io.Reader)
safe        java.io.PushbackReader: void <init>(java.io.Reader,int)
safe        java.io.PushbackReader: void close()
safe        java.io.PushbackReader: void mark(int)
safe        java.io.PushbackReader: boolean markSupported()
safe        java.io.PushbackReader: int read()
safe        java.io.PushbackReader: int read(char[],int,int)
safe        java.io.PushbackReader: boolean ready()
safe        java.io.PushbackReader: void reset()
safe        java.io.PushbackReader: void unread(char[])
safe        java.io.PushbackReader: void unread(char[],int,int)
safe        java.io.PushbackReader: void unread(int)
safe        java.io.PushbackReader: long skip(long)



# Dealing with files. Should be spec
spec        java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)
spec        java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)
spec        java.io.RandomAccessFile: void close()
spec        java.io.RandomAccessFile: void finalize()
spec        java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()
spec        java.io.RandomAccessFile: java.io.FileDescriptor getFD()
spec        java.io.RandomAccessFile: long getFilePointer()
spec        java.io.RandomAccessFile: long length()
spec        java.io.RandomAccessFile: int read()
spec        java.io.RandomAccessFile: int read(byte[])
spec        java.io.RandomAccessFile: int read(byte[],int,int)
spec        java.io.RandomAccessFile: boolean readBoolean()
spec        java.io.RandomAccessFile: byte readByte()
spec        java.io.RandomAccessFile: char readChar()
spec        java.io.RandomAccessFile: double readDouble()
spec        java.io.RandomAccessFile: float readFloat()
spec        java.io.RandomAccessFile: void readFully(byte[])
spec        java.io.RandomAccessFile: void readFully(byte[],int,int)
spec        java.io.RandomAccessFile: int readInt()
spec        java.io.RandomAccessFile: java.lang.String readLine()
spec        java.io.RandomAccessFile: long readLong()
spec        java.io.RandomAccessFile: short readShort()
spec        java.io.RandomAccessFile: int readUnsignedByte()
spec        java.io.RandomAccessFile: int readUnsignedShort()
spec        java.io.RandomAccessFile: java.lang.String readUTF()
spec        java.io.RandomAccessFile: void seek(long)
spec        java.io.RandomAccessFile: void setLength(long)
spec        java.io.RandomAccessFile: int skipBytes(int)
spec        java.io.RandomAccessFile: void write(byte[])
spec        java.io.RandomAccessFile: void write(byte[],int,int)
spec        java.io.RandomAccessFile: void write(int)
spec        java.io.RandomAccessFile: void writeBoolean(boolean)
spec        java.io.RandomAccessFile: void writeByte(int)
spec        java.io.RandomAccessFile: void writeBytes(java.lang.String)
spec        java.io.RandomAccessFile: void writeChar(int)
spec        java.io.RandomAccessFile: void writeChars(java.lang.String)
spec        java.io.RandomAccessFile: void writeDouble(double)
spec        java.io.RandomAccessFile: void writeFloat(float)
spec        java.io.RandomAccessFile: void writeInt(int)
spec        java.io.RandomAccessFile: void writeLong(long)
spec        java.io.RandomAccessFile: void writeShort(int)
spec        java.io.RandomAccessFile: void writeUTF(java.lang.String)


# Following the same logic as Writer, Reader should be safe. 
safe        java.io.Reader: void <init>()
safe        java.io.Reader: void <init>(java.lang.Object)
safe        java.io.Reader: void close()
safe        java.io.Reader: void mark(int)
safe        java.io.Reader: boolean markSupported()
safe        java.io.Reader: int read()
safe        java.io.Reader: int read(char[])
safe        java.io.Reader: int read(char[],int,int)
safe        java.io.Reader: boolean ready()
safe        java.io.Reader: void reset()
safe        java.io.Reader: long skip(long)
safe        java.io.Reader: int read(java.nio.CharBuffer)


spec        java.io.SequenceInputStream: void <init>(java.io.InputStream,java.io.InputStream)
spec        java.io.SequenceInputStream: void <init>(java.util.Enumeration)
spec        java.io.SequenceInputStream: int available()
spec        java.io.SequenceInputStream: void close()
spec        java.io.SequenceInputStream: int read()
spec        java.io.SequenceInputStream: int read(byte[],int,int)


safe        java.io.StreamCorruptedException: void <init>()
safe        java.io.StreamCorruptedException: void <init>(java.lang.String)



# Reading from string. Safe.
safe        java.io.StringReader: void <init>(java.lang.String)
safe        java.io.StringReader: void close()
safe        java.io.StringReader: void mark(int)
safe        java.io.StringReader: boolean markSupported()
safe        java.io.StringReader: int read()
safe        java.io.StringReader: int read(char[],int,int)
safe        java.io.StringReader: boolean ready()
safe        java.io.StringReader: void reset()
safe        java.io.StringReader: long skip(long)

# Writing to string. Safe.
safe        java.io.StringWriter: void <init>()
safe        java.io.StringWriter: void <init>(int)
safe        java.io.StringWriter: void close()
safe        java.io.StringWriter: void flush()
safe        java.io.StringWriter: java.lang.StringBuffer getBuffer()
safe        java.io.StringWriter: java.lang.String toString()
safe        java.io.StringWriter: void write(char[],int,int)
safe        java.io.StringWriter: void write(int)
safe        java.io.StringWriter: void write(java.lang.String)
safe        java.io.StringWriter: void write(java.lang.String,int,int)
safe        java.io.StringWriter: java.io.StringWriter append(char)
safe        java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)
safe        java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence,int,int)
safe        java.io.StringWriter: java.io.Writer append(java.lang.CharSequence,int,int)
safe        java.io.StringWriter: java.io.Writer append(java.lang.CharSequence)
safe        java.io.StringWriter: java.io.Writer append(char)
safe        java.io.StringWriter: java.lang.Appendable append(java.lang.CharSequence,int,int)
safe        java.io.StringWriter: java.lang.Appendable append(java.lang.CharSequence)
safe        java.io.StringWriter: java.lang.Appendable append(char)


safe        java.io.UnsupportedEncodingException: void <init>()
safe        java.io.UnsupportedEncodingException: void <init>(java.lang.String)


# These are not, in themselves, manipulating files:
safe        java.io.Writer: void <init>()
safe        java.io.Writer: void <init>(java.lang.Object)
safe        java.io.Writer: void close()
safe        java.io.Writer: void flush()
safe        java.io.Writer: void write(char[])
safe        java.io.Writer: void write(char[], int, int)
safe        java.io.Writer: void write(int)
safe        java.io.Writer: void write(java.lang.String)
safe        java.io.Writer: void write(java.lang.String, int, int)
safe        java.io.Writer: java.io.Writer append(char)
safe        java.io.Writer: java.io.Writer append(java.lang.CharSequence)
safe        java.io.Writer: java.io.Writer append(java.lang.CharSequence, int, int)
safe        java.io.Writer: java.lang.Appendable append(java.lang.CharSequence, int, int)
safe        java.io.Writer: java.lang.Appendable append(java.lang.CharSequence)
safe        java.io.Writer: java.lang.Appendable append(char)

safe        java.lang.Appendable: java.lang.Appendable append(char)
safe        java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)
safe        java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence,int,int)

safe        java.lang.ArrayIndexOutOfBoundsException: void <init>()
safe        java.lang.ArrayIndexOutOfBoundsException: void <init>(int)
safe        java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)


safe        java.lang.AssertionError: void <init>()
safe        java.lang.AssertionError: void <init>(java.lang.Object)
safe        java.lang.AssertionError: void <init>(boolean)
safe        java.lang.AssertionError: void <init>(char)
safe        java.lang.AssertionError: void <init>(int)
safe        java.lang.AssertionError: void <init>(long)
safe        java.lang.AssertionError: void <init>(float)
safe        java.lang.AssertionError: void <init>(double)

safe        java.lang.Boolean: void <init>(java.lang.String)
safe        java.lang.Boolean: void <init>(boolean)
safe        java.lang.Boolean: boolean booleanValue()
safe        java.lang.Boolean: boolean equals(java.lang.Object)
safe        java.lang.Boolean: int compareTo(java.lang.Boolean)
safe        java.lang.Boolean: int hashCode()
safe        java.lang.Boolean: java.lang.String toString()
safe        java.lang.Boolean: boolean getBoolean(java.lang.String)
safe        java.lang.Boolean: boolean parseBoolean(java.lang.String)
safe        java.lang.Boolean: java.lang.String toString(boolean)
safe        java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)
safe        java.lang.Boolean: java.lang.Boolean valueOf(boolean)
safe        java.lang.Boolean: int compareTo(java.lang.Object)

safe        java.lang.Byte: void <init>(byte)
safe        java.lang.Byte: void <init>(java.lang.String)
safe        java.lang.Byte: byte byteValue()
safe        java.lang.Byte: int compareTo(java.lang.Byte)
safe        java.lang.Byte: java.lang.Byte decode(java.lang.String)
safe        java.lang.Byte: double doubleValue()
safe        java.lang.Byte: boolean equals(java.lang.Object)
safe        java.lang.Byte: float floatValue()
safe        java.lang.Byte: int hashCode()
safe        java.lang.Byte: int intValue()
safe        java.lang.Byte: long longValue()
safe        java.lang.Byte: byte parseByte(java.lang.String)
safe        java.lang.Byte: byte parseByte(java.lang.String,int)
safe        java.lang.Byte: short shortValue()
safe        java.lang.Byte: java.lang.String toString()
safe        java.lang.Byte: java.lang.String toString(byte)
safe        java.lang.Byte: java.lang.Byte valueOf(java.lang.String)
safe        java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)
safe        java.lang.Byte: java.lang.Byte valueOf(byte)
safe        java.lang.Byte: int compareTo(java.lang.Object)
safe        java.lang.Byte: void <clinit>()

safe        java.lang.Comparable: int compareTo(java.lang.Object)

safe        java.lang.Character: void <init>(char)
safe        java.lang.Character: char charValue()
safe        java.lang.Character: int compareTo(java.lang.Character)
safe        java.lang.Character: java.lang.Character valueOf(char)
safe        java.lang.Character: boolean isValidCodePoint(int)
safe        java.lang.Character: boolean isSupplementaryCodePoint(int)
safe        java.lang.Character: boolean isHighSurrogate(char)
safe        java.lang.Character: boolean isLowSurrogate(char)
safe        java.lang.Character: boolean isSurrogatePair(char,char)
safe        java.lang.Character: int charCount(int)
safe        java.lang.Character: int toCodePoint(char,char)
safe        java.lang.Character: int codePointAt(java.lang.CharSequence,int)
safe        java.lang.Character: int codePointAt(char[],int)
safe        java.lang.Character: int codePointAt(char[],int,int)
safe        java.lang.Character: int codePointBefore(java.lang.CharSequence,int)
safe        java.lang.Character: int codePointBefore(char[],int)
safe        java.lang.Character: int codePointBefore(char[],int,int)
safe        java.lang.Character: int toChars(int,char[],int)
safe        java.lang.Character: char[] toChars(int)
safe        java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)
safe        java.lang.Character: int codePointCount(char[],int,int)
safe        java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)
safe        java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)
safe        java.lang.Character: int digit(char,int)
safe        java.lang.Character: int digit(int,int)
safe        java.lang.Character: boolean equals(java.lang.Object)
safe        java.lang.Character: char forDigit(int,int)
safe        java.lang.Character: int getNumericValue(char)
safe        java.lang.Character: int getNumericValue(int)
safe        java.lang.Character: int getType(char)
safe        java.lang.Character: int getType(int)
safe        java.lang.Character: byte getDirectionality(char)
safe        java.lang.Character: byte getDirectionality(int)
safe        java.lang.Character: boolean isMirrored(char)
safe        java.lang.Character: boolean isMirrored(int)
safe        java.lang.Character: int hashCode()
safe        java.lang.Character: boolean isDefined(char)
safe        java.lang.Character: boolean isDefined(int)
safe        java.lang.Character: boolean isDigit(char)
safe        java.lang.Character: boolean isDigit(int)
safe        java.lang.Character: boolean isIdentifierIgnorable(char)
safe        java.lang.Character: boolean isIdentifierIgnorable(int)
safe        java.lang.Character: boolean isISOControl(char)
safe        java.lang.Character: boolean isISOControl(int)
safe        java.lang.Character: boolean isJavaIdentifierPart(char)
safe        java.lang.Character: boolean isJavaIdentifierPart(int)
safe        java.lang.Character: boolean isJavaIdentifierStart(char)
safe        java.lang.Character: boolean isJavaIdentifierStart(int)
safe        java.lang.Character: boolean isJavaLetter(char)
safe        java.lang.Character: boolean isJavaLetterOrDigit(char)
safe        java.lang.Character: boolean isLetter(char)
safe        java.lang.Character: boolean isLetter(int)
safe        java.lang.Character: boolean isLetterOrDigit(char)
safe        java.lang.Character: boolean isLetterOrDigit(int)
safe        java.lang.Character: boolean isLowerCase(char)
safe        java.lang.Character: boolean isLowerCase(int)
safe        java.lang.Character: boolean isSpace(char)
safe        java.lang.Character: boolean isSpaceChar(char)
safe        java.lang.Character: boolean isSpaceChar(int)
safe        java.lang.Character: boolean isTitleCase(char)
safe        java.lang.Character: boolean isTitleCase(int)
safe        java.lang.Character: boolean isUnicodeIdentifierPart(char)
safe        java.lang.Character: boolean isUnicodeIdentifierPart(int)
safe        java.lang.Character: boolean isUnicodeIdentifierStart(char)
safe        java.lang.Character: boolean isUnicodeIdentifierStart(int)
safe        java.lang.Character: boolean isUpperCase(char)
safe        java.lang.Character: boolean isUpperCase(int)
safe        java.lang.Character: boolean isWhitespace(char)
safe        java.lang.Character: boolean isWhitespace(int)
safe        java.lang.Character: char reverseBytes(char)
safe        java.lang.Character: char toLowerCase(char)
safe        java.lang.Character: int toLowerCase(int)
safe        java.lang.Character: java.lang.String toString()
safe        java.lang.Character: java.lang.String toString(char)
safe        java.lang.Character: char toTitleCase(char)
safe        java.lang.Character: int toTitleCase(int)
safe        java.lang.Character: char toUpperCase(char)
safe        java.lang.Character: int toUpperCase(int)
safe        java.lang.Character: int compareTo(java.lang.Object)
safe        java.lang.Character: void <clinit>()

safe        java.lang.CharSequence: int length()
safe        java.lang.CharSequence: char charAt(int)
safe        java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)
safe        java.lang.CharSequence: java.lang.String toString()

spec        java.lang.ClassNotFoundException: void <init>()
spec        java.lang.ClassNotFoundException: void <init>(java.lang.String)
spec        java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)
spec        java.lang.ClassNotFoundException: java.lang.Throwable getException()
spec        java.lang.ClassNotFoundException: java.lang.Throwable getCause()


safe        java.lang.Double: void <init>(double)
safe        java.lang.Double: void <init>(java.lang.String)
safe        java.lang.Double: int compareTo(java.lang.Double)
safe        java.lang.Double: byte byteValue()
safe        java.lang.Double: long doubleToLongBits(double)
safe        java.lang.Double: long doubleToRawLongBits(double)
safe        java.lang.Double: double doubleValue()
safe        java.lang.Double: boolean equals(java.lang.Object)
safe        java.lang.Double: float floatValue()
safe        java.lang.Double: int hashCode()
safe        java.lang.Double: int intValue()
safe        java.lang.Double: boolean isInfinite()
safe        java.lang.Double: boolean isInfinite(double)
safe        java.lang.Double: boolean isNaN()
safe        java.lang.Double: boolean isNaN(double)
safe        java.lang.Double: double longBitsToDouble(long)
safe        java.lang.Double: long longValue()
safe        java.lang.Double: double parseDouble(java.lang.String)
safe        java.lang.Double: short shortValue()
safe        java.lang.Double: java.lang.String toString()
safe        java.lang.Double: java.lang.String toString(double)
safe        java.lang.Double: java.lang.Double valueOf(java.lang.String)
safe        java.lang.Double: int compare(double,double)
safe        java.lang.Double: java.lang.Double valueOf(double)
safe        java.lang.Double: java.lang.String toHexString(double)
safe        java.lang.Double: int compareTo(java.lang.Object)
safe        java.lang.Double: void <clinit>()


# ban java.lang.Class methods by default -- no reflection for now


safe        java.lang.Enum: void <init>(java.lang.String, int)
safe        java.lang.Enum: java.lang.String name()
safe        java.lang.Enum: int ordinal()
safe        java.lang.Enum: java.lang.String toString()
safe        java.lang.Enum: boolean equals(java.lang.Object)
safe        java.lang.Enum: int hashCode()
safe        java.lang.Enum: java.lang.Object clone()
safe        java.lang.Enum: int compareTo(java.lang.Enum)
safe        java.lang.Enum: java.lang.Class getDeclaringClass()
safe        java.lang.Enum: java.lang.Enum valueOf(java.lang.Class, java.lang.String)
safe        java.lang.Enum: void finalize()
safe        java.lang.Enum: int compareTo(java.lang.Object)

safe        java.lang.Exception: void <init>()
safe        java.lang.Exception: void <init>(java.lang.String)
safe        java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)
safe        java.lang.Exception: void <init>(java.lang.Throwable)

safe        java.lang.Float: void <init>(float)
safe        java.lang.Float: void <init>(double)
safe        java.lang.Float: void <init>(java.lang.String)
safe        java.lang.Float: int compareTo(java.lang.Float)
safe        java.lang.Float: byte byteValue()
safe        java.lang.Float: double doubleValue()
safe        java.lang.Float: boolean equals(java.lang.Object)
safe        java.lang.Float: int floatToIntBits(float)
safe        java.lang.Float: int floatToRawIntBits(float)
safe        java.lang.Float: float floatValue()
safe        java.lang.Float: int hashCode()
safe        java.lang.Float: float intBitsToFloat(int)
safe        java.lang.Float: int intValue()
safe        java.lang.Float: boolean isInfinite()
safe        java.lang.Float: boolean isInfinite(float)
safe        java.lang.Float: boolean isNaN()
safe        java.lang.Float: boolean isNaN(float)
safe        java.lang.Float: long longValue()
safe        java.lang.Float: float parseFloat(java.lang.String)
safe        java.lang.Float: short shortValue()
safe        java.lang.Float: java.lang.String toString()
safe        java.lang.Float: java.lang.String toString(float)
safe        java.lang.Float: java.lang.Float valueOf(java.lang.String)
safe        java.lang.Float: int compare(float,float)
safe        java.lang.Float: java.lang.Float valueOf(float)
safe        java.lang.Float: java.lang.String toHexString(float)
safe        java.lang.Float: int compareTo(java.lang.Object)
safe        java.lang.Float: void <clinit>()


safe        java.lang.IllegalArgumentException: void <init>()
safe        java.lang.IllegalArgumentException: void <init>(java.lang.String)
safe        java.lang.IllegalArgumentException: void <init>(java.lang.String, java.lang.Throwable)
safe        java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)

safe        java.lang.IllegalStateException: void <init>()
safe        java.lang.IllegalStateException: void <init>(java.lang.String)
safe        java.lang.IllegalStateException: void <init>(java.lang.String, java.lang.Throwable)
safe        java.lang.IllegalStateException: void <init>(java.lang.Throwable)

safe        java.lang.IncompatibleClassChangeError: void <init>()
safe        java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)

safe        java.lang.IndexOutOfBoundsException: void <init>()
safe        java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)

safe        java.lang.InstantiationException: void <init>()
safe        java.lang.InstantiationException: void <init>(java.lang.String)


safe        java.lang.Integer: void <init>(int)
safe        java.lang.Integer: void <init>(java.lang.String)
safe        java.lang.Integer: void <clinit>()
safe        java.lang.Integer: byte byteValue()
safe        java.lang.Integer: int compareTo(java.lang.Integer)
safe        java.lang.Integer: java.lang.Integer decode(java.lang.String)
safe        java.lang.Integer: double doubleValue()
safe        java.lang.Integer: boolean equals(java.lang.Object)
safe        java.lang.Integer: float floatValue()
safe        java.lang.Integer: java.lang.Integer getInteger(java.lang.String)
safe        java.lang.Integer: java.lang.Integer getInteger(java.lang.String, int)
safe        java.lang.Integer: java.lang.Integer getInteger(java.lang.String, java.lang.Integer)
safe        java.lang.Integer: int hashCode()
safe        java.lang.Integer: int highestOneBit(int)
safe        java.lang.Integer: int intValue()
safe        java.lang.Integer: long longValue()
safe        java.lang.Integer: int parseInt(java.lang.String)
safe        java.lang.Integer: int parseInt(java.lang.String, int)
safe        java.lang.Integer: short shortValue()
safe        java.lang.Integer: java.lang.String toBinaryString(int)
safe        java.lang.Integer: java.lang.String toHexString(int)
safe        java.lang.Integer: java.lang.String toOctalString(int)
safe        java.lang.Integer: java.lang.String toString()
safe        java.lang.Integer: java.lang.String toString(int)
safe        java.lang.Integer: java.lang.String toString(int, int)
safe        java.lang.Integer: java.lang.Integer valueOf(java.lang.String)
safe        java.lang.Integer: java.lang.Integer valueOf(java.lang.String, int)
safe        java.lang.Integer: int lowestOneBit(int)
safe        java.lang.Integer: int numberOfLeadingZeros(int)
safe        java.lang.Integer: int numberOfTrailingZeros(int)
safe        java.lang.Integer: int bitCount(int)
safe        java.lang.Integer: int rotateLeft(int, int)
safe        java.lang.Integer: int rotateRight(int, int)
safe        java.lang.Integer: int reverseBytes(int)
safe        java.lang.Integer: int reverse(int)
safe        java.lang.Integer: int signum(int)
safe        java.lang.Integer: java.lang.Integer valueOf(int)
safe        java.lang.Integer: int compareTo(java.lang.Object)

safe        java.lang.Iterable: java.util.Iterator iterator()

safe        java.lang.Long: void <clinit>()
safe        java.lang.Long: void <init>(long)
safe        java.lang.Long: void <init>(java.lang.String)
safe        java.lang.Long: byte byteValue()
safe        java.lang.Long: int compareTo(java.lang.Long)
safe        java.lang.Long: java.lang.Long decode(java.lang.String)
safe        java.lang.Long: double doubleValue()
safe        java.lang.Long: boolean equals(java.lang.Object)
safe        java.lang.Long: float floatValue()
safe        java.lang.Long: java.lang.Long getLong(java.lang.String)
safe        java.lang.Long: java.lang.Long getLong(java.lang.String, long)
safe        java.lang.Long: java.lang.Long getLong(java.lang.String, java.lang.Long)
safe        java.lang.Long: int hashCode()
safe        java.lang.Long: int intValue()
safe        java.lang.Long: long longValue()
safe        java.lang.Long: long parseLong(java.lang.String)
safe        java.lang.Long: long parseLong(java.lang.String, int)
safe        java.lang.Long: short shortValue()
safe        java.lang.Long: java.lang.String toBinaryString(long)
safe        java.lang.Long: java.lang.String toHexString(long)
safe        java.lang.Long: java.lang.String toOctalString(long)
safe        java.lang.Long: java.lang.String toString()
safe        java.lang.Long: java.lang.String toString(long)
safe        java.lang.Long: java.lang.String toString(long, int)
safe        java.lang.Long: java.lang.Long valueOf(java.lang.String)
safe        java.lang.Long: java.lang.Long valueOf(java.lang.String, int)
safe        java.lang.Long: long highestOneBit(long)
safe        java.lang.Long: long lowestOneBit(long)
safe        java.lang.Long: int numberOfLeadingZeros(long)
safe        java.lang.Long: int numberOfTrailingZeros(long)
safe        java.lang.Long: int bitCount(long)
safe        java.lang.Long: long rotateLeft(long, int)
safe        java.lang.Long: long rotateRight(long, int)
safe        java.lang.Long: long reverseBytes(long)
safe        java.lang.Long: long reverse(long)
safe        java.lang.Long: int signum(long)
safe        java.lang.Long: java.lang.Long valueOf(long)
safe        java.lang.Long: int compareTo(java.lang.Object)

safe        java.lang.Math: double abs(double)
safe        java.lang.Math: float abs(float)
safe        java.lang.Math: int abs(int)
safe        java.lang.Math: long abs(long)
safe        java.lang.Math: double acos(double)
safe        java.lang.Math: double asin(double)
safe        java.lang.Math: double atan(double)
safe        java.lang.Math: double atan2(double, double)
safe        java.lang.Math: double cbrt(double)
safe        java.lang.Math: double ceil(double)
safe        java.lang.Math: double cos(double)
safe        java.lang.Math: double cosh(double)
safe        java.lang.Math: double exp(double)
safe        java.lang.Math: double expm1(double)
safe        java.lang.Math: double floor(double)
safe        java.lang.Math: double hypot(double, double)
safe        java.lang.Math: double IEEEremainder(double, double)
safe        java.lang.Math: double log(double)
safe        java.lang.Math: double log10(double)
safe        java.lang.Math: double log1p(double)
safe        java.lang.Math: double max(double, double)
safe        java.lang.Math: float max(float, float)
safe        java.lang.Math: int max(int, int)
safe        java.lang.Math: long max(long, long)
safe        java.lang.Math: double min(double, double)
safe        java.lang.Math: float min(float, float)
safe        java.lang.Math: int min(int, int)
safe        java.lang.Math: long min(long, long)
safe        java.lang.Math: double pow(double, double)
safe        java.lang.Math: double rint(double)
safe        java.lang.Math: long round(double)
safe        java.lang.Math: int round(float)
safe        java.lang.Math: double signum(double)
safe        java.lang.Math: float signum(float)
safe        java.lang.Math: double sin(double)
safe        java.lang.Math: double sinh(double)
safe        java.lang.Math: double sqrt(double)
safe        java.lang.Math: double tan(double)
safe        java.lang.Math: double tanh(double)
safe        java.lang.Math: double random()
safe        java.lang.Math: double toRadians(double)
safe        java.lang.Math: double toDegrees(double)
safe        java.lang.Math: double ulp(double)
safe        java.lang.Math: float ulp(float)
safe        java.lang.Math: double copySign(double, double)
safe        java.lang.Math: float copySign(float, float)
safe        java.lang.Math: int getExponent(float)
safe        java.lang.Math: int getExponent(double)
safe        java.lang.Math: double nextAfter(double, double)
safe        java.lang.Math: float nextAfter(float, double)
safe        java.lang.Math: double nextUp(double)
safe        java.lang.Math: float nextUp(float)
safe        java.lang.Math: double scalb(double, int)
safe        java.lang.Math: float scalb(float, int)

spec        java.lang.NoClassDefFoundError: void <init>()
spec        java.lang.NoClassDefFoundError: void <init>(java.lang.String)
spec        java.lang.NoSuchFieldException: void <init>()
spec        java.lang.NoSuchFieldException: void <init>(java.lang.String)

safe        java.lang.NullPointerException: void <init>()
safe        java.lang.NullPointerException: void <init>(java.lang.String)

safe        java.lang.Number: void <init>()
safe        java.lang.Number: byte byteValue()
safe        java.lang.Number: double doubleValue()
safe        java.lang.Number: float floatValue()
safe        java.lang.Number: int intValue()
safe        java.lang.Number: long longValue()
safe        java.lang.Number: short shortValue()

safe        java.lang.NumberFormatException: void <init>()
safe        java.lang.NumberFormatException: void <init>(java.lang.String)


safe        java.lang.Object: void <init>()
safe        java.lang.Object: java.lang.Object clone()
safe        java.lang.Object: boolean equals(java.lang.Object)
#safe        java.lang.Object: java.lang.Object finalize() #not in the android jar file
safe        java.lang.Object: int hashCode()
safe        java.lang.Object: void notify()
safe        java.lang.Object: void notifyAll()
safe        java.lang.Object: java.lang.String toString()
safe        java.lang.Object: void wait()
safe        java.lang.Object: void wait(long)
safe        java.lang.Object: void wait(long, int)

# Ok, to get a class (could be used for a variety of purposes).  This
# does not enable calling via reflection (which we do not support)
spec        java.lang.Object: java.lang.Class getClass()

safe        java.lang.OutOfMemoryError: void <init>()
safe        java.lang.OutOfMemoryError: void <init>(java.lang.String)


safe        java.lang.ref.PhantomReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)
safe        java.lang.ref.PhantomReference: java.lang.Object get()
safe        java.lang.ref.Reference: void <init>()
safe        java.lang.ref.Reference: void clear()
safe        java.lang.ref.Reference: boolean enqueue()
safe        java.lang.ref.Reference: java.lang.Object get()
safe        java.lang.ref.Reference: boolean isEnqueued()
safe        java.lang.ref.ReferenceQueue: void <init>()
safe        java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()
safe        java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove()
safe        java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove(long)
safe        java.lang.ref.SoftReference: void <init>(java.lang.Object)
safe        java.lang.ref.SoftReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)
safe        java.lang.ref.WeakReference: void <init>(java.lang.Object)
safe        java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)


safe        java.lang.RuntimeException: void <init>()
safe        java.lang.RuntimeException: void <init>(java.lang.String)
safe        java.lang.RuntimeException: void <init>(java.lang.String, java.lang.Throwable)
safe        java.lang.RuntimeException: void <init>(java.lang.Throwable)

# Should be spec.
spec        java.lang.SecurityException: void <init>()
spec        java.lang.SecurityException: void <init>(java.lang.String)
spec        java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)
spec        java.lang.SecurityException: void <init>(java.lang.Throwable)


safe        java.lang.Short: void <init>(java.lang.String)
safe        java.lang.Short: void <init>(short)
safe        java.lang.Short: byte byteValue()
safe        java.lang.Short: int compareTo(java.lang.Short)
safe        java.lang.Short: java.lang.Short decode(java.lang.String)
safe        java.lang.Short: double doubleValue()
safe        java.lang.Short: boolean equals(java.lang.Object)
safe        java.lang.Short: float floatValue()
safe        java.lang.Short: int hashCode()
safe        java.lang.Short: int intValue()
safe        java.lang.Short: long longValue()
safe        java.lang.Short: short parseShort(java.lang.String)
safe        java.lang.Short: short parseShort(java.lang.String,int)
safe        java.lang.Short: short shortValue()
safe        java.lang.Short: java.lang.String toString()
safe        java.lang.Short: java.lang.String toString(short)
safe        java.lang.Short: java.lang.Short valueOf(java.lang.String)
safe        java.lang.Short: java.lang.Short valueOf(java.lang.String,int)
safe        java.lang.Short: short reverseBytes(short)
safe        java.lang.Short: java.lang.Short valueOf(short)
safe        java.lang.Short: int compareTo(java.lang.Object)
safe        java.lang.Short: void <clinit>()


safe        java.lang.StackOverflowError: void <init>()
safe        java.lang.StackOverflowError: void <init>(java.lang.String)

# Marking these methods as spec since they are looking at the start
#trace methods. 
spec        java.lang.StackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int)
spec        java.lang.StackTraceElement: boolean equals(java.lang.Object)
spec        java.lang.StackTraceElement: java.lang.String getClassName()
spec        java.lang.StackTraceElement: java.lang.String getFileName()
spec        java.lang.StackTraceElement: int getLineNumber()
spec        java.lang.StackTraceElement: java.lang.String getMethodName()
spec        java.lang.StackTraceElement: int hashCode()
spec        java.lang.StackTraceElement: boolean isNativeMethod()
spec        java.lang.StackTraceElement: java.lang.String toString()


safe        java.lang.String: void <clinit>()
safe        java.lang.String: void <init>()
safe        java.lang.String: void <init>(byte[])
safe        java.lang.String: void <init>(byte[], int)
safe        java.lang.String: void <init>(byte[], int, int)
safe        java.lang.String: void <init>(byte[], int, int, int)
safe        java.lang.String: void <init>(byte[], int, int, java.lang.String)
safe        java.lang.String: void <init>(byte[], java.lang.String)
safe        java.lang.String: void <init>(byte[], int, int, java.nio.charset.Charset)
safe        java.lang.String: void <init>(byte[], java.nio.charset.Charset)
safe        java.lang.String: void <init>(char[])
safe        java.lang.String: void <init>(char[], int, int)
safe        java.lang.String: void <init>(java.lang.String)
safe        java.lang.String: void <init>(java.lang.StringBuffer)
safe        java.lang.String: void <init>(int[], int, int)
safe        java.lang.String: void <init>(java.lang.StringBuilder)
safe        java.lang.String: char charAt(int)
safe        java.lang.String: int compareTo(java.lang.String)
safe        java.lang.String: int compareToIgnoreCase(java.lang.String)
safe        java.lang.String: java.lang.String concat(java.lang.String)
safe        java.lang.String: java.lang.String copyValueOf(char[])
safe        java.lang.String: java.lang.String copyValueOf(char[], int, int)
safe        java.lang.String: boolean endsWith(java.lang.String)
safe        java.lang.String: boolean equals(java.lang.Object)
safe        java.lang.String: boolean equalsIgnoreCase(java.lang.String)
safe        java.lang.String: void getBytes(int, int, byte[], int)
safe        java.lang.String: byte[] getBytes()
safe        java.lang.String: byte[] getBytes(java.lang.String)
safe        java.lang.String: byte[] getBytes(java.nio.charset.Charset)
safe        java.lang.String: void getChars(int, int, char[], int)
safe        java.lang.String: int hashCode()
safe        java.lang.String: int indexOf(int)
safe        java.lang.String: int indexOf(int, int)
safe        java.lang.String: int indexOf(java.lang.String)
safe        java.lang.String: int indexOf(java.lang.String, int)
safe        java.lang.String: java.lang.String intern()
safe        java.lang.String: boolean isEmpty()
safe        java.lang.String: int lastIndexOf(int)
safe        java.lang.String: int lastIndexOf(int, int)
safe        java.lang.String: int lastIndexOf(java.lang.String)
safe        java.lang.String: int lastIndexOf(java.lang.String, int)
safe        java.lang.String: int length()
safe        java.lang.String: boolean regionMatches(int, java.lang.String, int, int)
safe        java.lang.String: boolean regionMatches(boolean, int, java.lang.String, int, int)
safe        java.lang.String: java.lang.String replace(char, char)
safe        java.lang.String: java.lang.String replace(java.lang.CharSequence, java.lang.CharSequence)
safe        java.lang.String: boolean startsWith(java.lang.String)
safe        java.lang.String: boolean startsWith(java.lang.String, int)
safe        java.lang.String: java.lang.String substring(int)
safe        java.lang.String: java.lang.String substring(int, int)
safe        java.lang.String: char[] toCharArray()
safe        java.lang.String: java.lang.String toLowerCase()
safe        java.lang.String: java.lang.String toLowerCase(java.util.Locale)
safe        java.lang.String: java.lang.String toString()
safe        java.lang.String: java.lang.String toUpperCase()
safe        java.lang.String: java.lang.String toUpperCase(java.util.Locale)
safe        java.lang.String: java.lang.String trim()
safe        java.lang.String: java.lang.String valueOf(char[])
safe        java.lang.String: java.lang.String valueOf(char[], int, int)
safe        java.lang.String: java.lang.String valueOf(char)
safe        java.lang.String: java.lang.String valueOf(double)
safe        java.lang.String: java.lang.String valueOf(float)
safe        java.lang.String: java.lang.String valueOf(int)
safe        java.lang.String: java.lang.String valueOf(long)
safe        java.lang.String: java.lang.String valueOf(java.lang.Object)
safe        java.lang.String: java.lang.String valueOf(boolean)
safe        java.lang.String: boolean contentEquals(java.lang.StringBuffer)
safe        java.lang.String: boolean contentEquals(java.lang.CharSequence)
safe        java.lang.String: boolean matches(java.lang.String)
safe        java.lang.String: java.lang.String replaceAll(java.lang.String, java.lang.String)
safe        java.lang.String: java.lang.String replaceFirst(java.lang.String, java.lang.String)
safe        java.lang.String: java.lang.String[] split(java.lang.String)
safe        java.lang.String: java.lang.String[] split(java.lang.String, int)
safe        java.lang.String: java.lang.CharSequence subSequence(int, int)
safe        java.lang.String: int codePointAt(int)
safe        java.lang.String: int codePointBefore(int)
safe        java.lang.String: int codePointCount(int, int)
safe        java.lang.String: boolean contains(java.lang.CharSequence)
safe        java.lang.String: int offsetByCodePoints(int, int)
safe        java.lang.String: java.lang.String format(java.lang.String, java.lang.Object[])
safe        java.lang.String: java.lang.String format(java.util.Locale, java.lang.String, java.lang.Object[])
safe        java.lang.String: int compareTo(java.lang.Object)

safe        java.lang.StringBuilder: void <init>()
safe        java.lang.StringBuilder: void <init>(int)
safe        java.lang.StringBuilder: void <init>(java.lang.CharSequence)
safe        java.lang.StringBuilder: void <init>(java.lang.String)
safe        java.lang.StringBuilder: java.lang.StringBuilder append(boolean)
safe        java.lang.StringBuilder: java.lang.StringBuilder append(char)
safe        java.lang.StringBuilder: java.lang.StringBuilder append(int)
safe        java.lang.StringBuilder: java.lang.StringBuilder append(long)
safe        java.lang.StringBuilder: java.lang.StringBuilder append(float)
safe        java.lang.StringBuilder: java.lang.StringBuilder append(double)
safe        java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)
safe        java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)
safe        java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.StringBuffer)
safe        java.lang.StringBuilder: java.lang.StringBuilder append(char[])
safe        java.lang.StringBuilder: java.lang.StringBuilder append(char[], int, int)
safe        java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)
safe        java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence, int, int)
safe        java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)
safe        java.lang.StringBuilder: java.lang.StringBuilder delete(int, int)
safe        java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)
safe        java.lang.StringBuilder: java.lang.StringBuilder insert(int, boolean)
safe        java.lang.StringBuilder: java.lang.StringBuilder insert(int, char)
safe        java.lang.StringBuilder: java.lang.StringBuilder insert(int, int)
safe        java.lang.StringBuilder: java.lang.StringBuilder insert(int, long)
safe        java.lang.StringBuilder: java.lang.StringBuilder insert(int, float)
safe        java.lang.StringBuilder: java.lang.StringBuilder insert(int, double)
safe        java.lang.StringBuilder: java.lang.StringBuilder insert(int, java.lang.Object)
safe        java.lang.StringBuilder: java.lang.StringBuilder insert(int, java.lang.String)
safe        java.lang.StringBuilder: java.lang.StringBuilder insert(int, char[])
safe        java.lang.StringBuilder: java.lang.StringBuilder insert(int, char[], int, int)
safe        java.lang.StringBuilder: java.lang.StringBuilder insert(int, java.lang.CharSequence)
safe        java.lang.StringBuilder: java.lang.StringBuilder insert(int, java.lang.CharSequence, int, int)
safe        java.lang.StringBuilder: java.lang.StringBuilder replace(int, int, java.lang.String)
safe        java.lang.StringBuilder: java.lang.StringBuilder reverse()
safe        java.lang.StringBuilder: java.lang.String toString()
safe        java.lang.StringBuilder: int offsetByCodePoints(int, int)
safe        java.lang.StringBuilder: int codePointCount(int, int)
safe        java.lang.StringBuilder: int codePointBefore(int)
safe        java.lang.StringBuilder: int codePointAt(int)
safe        java.lang.StringBuilder: void trimToSize()
safe        java.lang.StringBuilder: int lastIndexOf(java.lang.String, int)
safe        java.lang.StringBuilder: int lastIndexOf(java.lang.String)
safe        java.lang.StringBuilder: int indexOf(java.lang.String, int)
safe        java.lang.StringBuilder: int indexOf(java.lang.String)
safe        java.lang.StringBuilder: java.lang.CharSequence subSequence(int, int)
safe        java.lang.StringBuilder: java.lang.String substring(int, int)
safe        java.lang.StringBuilder: java.lang.String substring(int)
safe        java.lang.StringBuilder: void setLength(int)
safe        java.lang.StringBuilder: void setCharAt(int, char)
safe        java.lang.StringBuilder: int length()
safe        java.lang.StringBuilder: void getChars(int, int, char[], int)
safe        java.lang.StringBuilder: void ensureCapacity(int)
safe        java.lang.StringBuilder: char charAt(int)
safe        java.lang.StringBuilder: int capacity()
safe        java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence, int, int)
safe        java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)
safe        java.lang.StringBuilder: java.lang.Appendable append(char)

safe        java.lang.StringBuffer: void <init>()
safe        java.lang.StringBuffer: void <init>(int)
safe        java.lang.StringBuffer: void <init>(java.lang.String)
safe        java.lang.StringBuffer: void <init>(java.lang.CharSequence)
safe        java.lang.StringBuffer: java.lang.StringBuffer append(boolean)
safe        java.lang.StringBuffer: java.lang.StringBuffer append(char)
safe        java.lang.StringBuffer: java.lang.StringBuffer append(double)
safe        java.lang.StringBuffer: java.lang.StringBuffer append(float)
safe        java.lang.StringBuffer: java.lang.StringBuffer append(int)
safe        java.lang.StringBuffer: java.lang.StringBuffer append(long)
safe        java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)
safe        java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)
safe        java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)
safe        java.lang.StringBuffer: java.lang.StringBuffer append(char[])
safe        java.lang.StringBuffer: java.lang.StringBuffer append(char[], int, int)
safe        java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)
safe        java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence, int, int)
safe        java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)
safe        java.lang.StringBuffer: char charAt(int)
safe        java.lang.StringBuffer: int codePointAt(int)
safe        java.lang.StringBuffer: int codePointBefore(int)
safe        java.lang.StringBuffer: int codePointCount(int, int)
safe        java.lang.StringBuffer: java.lang.StringBuffer delete(int, int)
safe        java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)
safe        java.lang.StringBuffer: void ensureCapacity(int)
safe        java.lang.StringBuffer: void getChars(int, int, char[], int)
safe        java.lang.StringBuffer: int indexOf(java.lang.String, int)
safe        java.lang.StringBuffer: java.lang.StringBuffer insert(int, char)
safe        java.lang.StringBuffer: java.lang.StringBuffer insert(int, boolean)
safe        java.lang.StringBuffer: java.lang.StringBuffer insert(int, int)
safe        java.lang.StringBuffer: java.lang.StringBuffer insert(int, long)
safe        java.lang.StringBuffer: java.lang.StringBuffer insert(int, double)
safe        java.lang.StringBuffer: java.lang.StringBuffer insert(int, float)
safe        java.lang.StringBuffer: java.lang.StringBuffer insert(int, java.lang.Object)
safe        java.lang.StringBuffer: java.lang.StringBuffer insert(int, java.lang.String)
safe        java.lang.StringBuffer: java.lang.StringBuffer insert(int, char[])
safe        java.lang.StringBuffer: java.lang.StringBuffer insert(int, char[], int, int)
safe        java.lang.StringBuffer: java.lang.StringBuffer insert(int, java.lang.CharSequence)
safe        java.lang.StringBuffer: java.lang.StringBuffer insert(int, java.lang.CharSequence, int, int)
safe        java.lang.StringBuffer: int lastIndexOf(java.lang.String, int)
safe        java.lang.StringBuffer: int offsetByCodePoints(int, int)
safe        java.lang.StringBuffer: java.lang.StringBuffer replace(int, int, java.lang.String)
safe        java.lang.StringBuffer: java.lang.StringBuffer reverse()
safe        java.lang.StringBuffer: void setCharAt(int, char)
safe        java.lang.StringBuffer: void setLength(int)
safe        java.lang.StringBuffer: java.lang.CharSequence subSequence(int, int)
safe        java.lang.StringBuffer: java.lang.String substring(int)
safe        java.lang.StringBuffer: java.lang.String substring(int, int)
safe        java.lang.StringBuffer: java.lang.String toString()
safe        java.lang.StringBuffer: void trimToSize()
safe        java.lang.StringBuffer: int lastIndexOf(java.lang.String)
safe        java.lang.StringBuffer: int indexOf(java.lang.String)
safe        java.lang.StringBuffer: int length()
safe        java.lang.StringBuffer: int capacity()
safe        java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence, int, int)
safe        java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)
safe        java.lang.StringBuffer: java.lang.Appendable append(char)

# Purely computational:
safe        java.lang.System: void arraycopy(java.lang.Object, int, java.lang.Object, int, int)

# Acessing properties seems security-critical:
spec        java.lang.System: java.lang.String clearProperty(java.lang.String)

# Seems security-critical (we are being conservative):
spec        java.lang.System: java.io.Console console()

# Security-critical because of time-triggered malware:
spec        java.lang.System: long currentTimeMillis()

# Definitely security-critical (could be denial of service):
spec        java.lang.System: void exit(int)

# Seems purely computational:
safe        java.lang.System: void gc()

# Accessing environment variables seems security-critical:
spec        java.lang.System: java.util.Map getenv()
spec        java.lang.System: java.lang.String getenv(java.lang.String)

# Acessing properties seems security-critical:
spec        java.lang.System: java.util.Properties getProperties()
spec        java.lang.System: java.lang.String getProperty(java.lang.String)
spec        java.lang.System: java.lang.String getProperty(java.lang.String, java.lang.String)

# Anything related with the security manager seems security-critical:
spec        java.lang.System: java.lang.SecurityManager getSecurityManager()

# Purely computational:
safe        java.lang.System: int identityHashCode(java.lang.Object)

# Seems security-critical (we are being conservative):
spec        java.lang.System: java.nio.channels.Channel inheritedChannel()

# Loading dynamic libraries seems security-critical:
spec        java.lang.System: void load(java.lang.String)
spec        java.lang.System: void loadLibrary(java.lang.String)
spec        java.lang.System: java.lang.String mapLibraryName(java.lang.String)

# Security-critical because of time-triggered malware:
spec        java.lang.System: long nanoTime()

# Seems purely computational:
safe        java.lang.System: void runFinalization()

# Banned because deprecated due to inherent unsafety (see Java API documentation):
ban         java.lang.System: void runFinalizersOnExit(boolean)

# Changing these seems security-critical:
spec        java.lang.System: void setErr(java.io.PrintStream)
spec        java.lang.System: void setIn(java.io.InputStream)
spec        java.lang.System: void setOut(java.io.PrintStream)

# Acessing properties seems security-critical:
spec        java.lang.System: void setProperties(java.util.Properties)
spec        java.lang.System: java.lang.String setProperty(java.lang.String, java.lang.String)

# Anything related with the security manager seems security-critical:
spec        java.lang.System: void setSecurityManager(java.lang.SecurityManager)

# We wish we could not allow explicit threads, but are stuck for now
spec        java.lang.Thread: void <init>(java.lang.Runnable)
spec        java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)
spec        java.lang.Thread: void start()
safe        java.lang.Thread: void sleep(long)

safe        java.lang.Throwable: void <init>()
safe        java.lang.Throwable: void <init>(java.lang.String)
safe        java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)
safe        java.lang.Throwable: void <init>(java.lang.Throwable)
safe        java.lang.Throwable: java.lang.Throwable fillInStackTrace()
safe        java.lang.Throwable: java.lang.String getMessage()
safe        java.lang.Throwable: java.lang.String getLocalizedMessage()
safe        java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()
safe        java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])
safe        java.lang.Throwable: void printStackTrace()
safe        java.lang.Throwable: void printStackTrace(java.io.PrintStream)
safe        java.lang.Throwable: void printStackTrace(java.io.PrintWriter)
safe        java.lang.Throwable: java.lang.String toString()
safe        java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)
safe        java.lang.Throwable: java.lang.Throwable getCause()


safe        java.lang.UnsupportedOperationException: void <init>()
safe        java.lang.UnsupportedOperationException: void <init>(java.lang.String)
safe        java.lang.UnsupportedOperationException: void <init>(java.lang.String, java.lang.Throwable)
safe        java.lang.UnsupportedOperationException: void <init>(java.lang.Throwable)

safe        java.math.BigInteger: void <init>(int, java.util.Random)
safe        java.math.BigInteger: void <init>(int, int, java.util.Random)
safe        java.math.BigInteger: void <init>(java.lang.String)
safe        java.math.BigInteger: void <init>(java.lang.String, int)
safe        java.math.BigInteger: void <init>(int, byte[])
safe        java.math.BigInteger: void <init>(byte[])
safe        java.math.BigInteger: java.math.BigInteger valueOf(long)
safe        java.math.BigInteger: byte[] toByteArray()
safe        java.math.BigInteger: java.math.BigInteger abs()
safe        java.math.BigInteger: java.math.BigInteger negate()
safe        java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)
safe        java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)
safe        java.math.BigInteger: int signum()
safe        java.math.BigInteger: java.math.BigInteger shiftRight(int)
safe        java.math.BigInteger: java.math.BigInteger shiftLeft(int)
safe        java.math.BigInteger: int bitLength()
safe        java.math.BigInteger: boolean testBit(int)
safe        java.math.BigInteger: java.math.BigInteger setBit(int)
safe        java.math.BigInteger: java.math.BigInteger clearBit(int)
safe        java.math.BigInteger: java.math.BigInteger flipBit(int)
safe        java.math.BigInteger: int getLowestSetBit()
safe        java.math.BigInteger: int bitCount()
safe        java.math.BigInteger: java.math.BigInteger not()
safe        java.math.BigInteger: java.math.BigInteger and(java.math.BigInteger)
safe        java.math.BigInteger: java.math.BigInteger or(java.math.BigInteger)
safe        java.math.BigInteger: java.math.BigInteger xor(java.math.BigInteger)
safe        java.math.BigInteger: java.math.BigInteger andNot(java.math.BigInteger)
safe        java.math.BigInteger: int intValue()
safe        java.math.BigInteger: long longValue()
safe        java.math.BigInteger: float floatValue()
safe        java.math.BigInteger: double doubleValue()
safe        java.math.BigInteger: int compareTo(java.math.BigInteger)
safe        java.math.BigInteger: java.math.BigInteger min(java.math.BigInteger)
safe        java.math.BigInteger: java.math.BigInteger max(java.math.BigInteger)
safe        java.math.BigInteger: int hashCode()
safe        java.math.BigInteger: boolean equals(java.lang.Object)
safe        java.math.BigInteger: java.lang.String toString()
safe        java.math.BigInteger: java.lang.String toString(int)
safe        java.math.BigInteger: java.math.BigInteger gcd(java.math.BigInteger)
safe        java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)
safe        java.math.BigInteger: java.math.BigInteger pow(int)
safe        java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)
safe        java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)
safe        java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)
safe        java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)
safe        java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger, java.math.BigInteger)
safe        java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)
safe        java.math.BigInteger: boolean isProbablePrime(int)
safe        java.math.BigInteger: java.math.BigInteger nextProbablePrime()
safe        java.math.BigInteger: java.math.BigInteger probablePrime(int, java.util.Random)
safe        java.math.BigInteger: int compareTo(java.lang.Object)

#All spec for now:
spec        java.net.HttpURLConnection: void <init>(java.net.URL)
spec        java.net.HttpURLConnection: void disconnect()
spec        java.net.HttpURLConnection: java.io.InputStream getErrorStream()
spec        java.net.HttpURLConnection: boolean getFollowRedirects()
spec        java.net.HttpURLConnection: java.security.Permission getPermission()
spec        java.net.HttpURLConnection: java.lang.String getRequestMethod()
spec        java.net.HttpURLConnection: int getResponseCode()
spec        java.net.HttpURLConnection: java.lang.String getResponseMessage()
spec        java.net.HttpURLConnection: void setFollowRedirects(boolean)
spec        java.net.HttpURLConnection: void setRequestMethod(java.lang.String)
spec        java.net.HttpURLConnection: boolean usingProxy()
spec        java.net.HttpURLConnection: java.lang.String getContentEncoding()
spec        java.net.HttpURLConnection: boolean getInstanceFollowRedirects()
spec        java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)
spec        java.net.HttpURLConnection: long getHeaderFieldDate(java.lang.String, long)
spec        java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)
spec        java.net.HttpURLConnection: void setChunkedStreamingMode(int)

# InetAddresses are tricky, since they may access the network to (for
# example) resolve hostnames. If it hits the network, we make it
# spec, otherwise it is safe.
#safe        java.net.InetAddress: void <init>()
safe        java.net.InetAddress: boolean equals(java.lang.Object)
safe        java.net.InetAddress: byte[] getAddress()
spec        java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)
spec        java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)
safe        java.net.InetAddress: java.lang.String getHostAddress()
spec        java.net.InetAddress: java.lang.String getHostName()
spec        java.net.InetAddress: java.lang.String getCanonicalHostName()
spec        java.net.InetAddress: java.net.InetAddress getLocalHost()
safe        java.net.InetAddress: int hashCode()
safe        java.net.InetAddress: java.lang.String toString()
safe        java.net.InetAddress: boolean isAnyLocalAddress()
safe        java.net.InetAddress: boolean isLinkLocalAddress()
safe        java.net.InetAddress: boolean isLoopbackAddress()
safe        java.net.InetAddress: boolean isMCGlobal()
safe        java.net.InetAddress: boolean isMCLinkLocal()
safe        java.net.InetAddress: boolean isMCNodeLocal()
safe        java.net.InetAddress: boolean isMCOrgLocal()
safe        java.net.InetAddress: boolean isMCSiteLocal()
safe        java.net.InetAddress: boolean isMulticastAddress()
safe        java.net.InetAddress: boolean isSiteLocalAddress()
spec        java.net.InetAddress: boolean isReachable(int)
spec        java.net.InetAddress: boolean isReachable(java.net.NetworkInterface, int, int)
safe        java.net.InetAddress: java.net.InetAddress getByAddress(byte[])
safe        java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String, byte[])

# InetSocketAddresses are purely data.
safe        java.net.InetSocketAddress: void <init>(int)
safe        java.net.InetSocketAddress: void <init>(java.net.InetAddress, int)
safe        java.net.InetSocketAddress: void <init>(java.lang.String, int)
safe        java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String, int)
safe        java.net.InetSocketAddress: int getPort()
safe        java.net.InetSocketAddress: java.net.InetAddress getAddress()
safe        java.net.InetSocketAddress: java.lang.String getHostName()
safe        java.net.InetSocketAddress: boolean isUnresolved()
safe        java.net.InetSocketAddress: java.lang.String toString()
safe        java.net.InetSocketAddress: boolean equals(java.lang.Object)
safe        java.net.InetSocketAddress: int hashCode()

# SocketAddresses are purely data.
safe        java.net.SocketAddress: void <init>()

safe        java.net.URI: void <init>(java.lang.String)

safe        java.net.URL: void <init>(java.lang.String)
safe        java.net.URL: void <init>(java.net.URL, java.lang.String)
safe        java.net.URL: void <init>(java.net.URL, java.lang.String, java.net.URLStreamHandler)
safe        java.net.URL: void <init>(java.lang.String, java.lang.String, java.lang.String)
safe        java.net.URL: void <init>(java.lang.String, java.lang.String, int, java.lang.String)
safe        java.net.URL: void <init>(java.lang.String, java.lang.String, int, java.lang.String, java.net.URLStreamHandler)
spec        java.net.URL: void setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)
safe        java.net.URL: void set(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String)
safe        java.net.URL: boolean equals(java.lang.Object)
safe        java.net.URL: boolean sameFile(java.net.URL)
safe        java.net.URL: int hashCode()
safe        java.net.URL: java.lang.Object getContent()
safe        java.net.URL: java.lang.Object getContent(java.lang.Class[])
spec        java.net.URL: java.io.InputStream openStream()
spec        java.net.URL: java.net.URLConnection openConnection()
spec        java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)
safe        java.net.URL: java.net.URI toURI()
safe        java.net.URL: java.lang.String toString()
safe        java.net.URL: java.lang.String toExternalForm()
safe        java.net.URL: java.lang.String getProtocol()
safe        java.net.URL: java.lang.String getAuthority()
safe        java.net.URL: java.lang.String getUserInfo()
safe        java.net.URL: java.lang.String getHost()
safe        java.net.URL: int getPort()
safe        java.net.URL: int getDefaultPort()
safe        java.net.URL: java.lang.String getFile()
safe        java.net.URL: java.lang.String getPath()
safe        java.net.URL: java.lang.String getQuery()
safe        java.net.URL: java.lang.String getRef()
safe        java.net.URL: void set(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)

#All spec for now:
spec        java.net.URLConnection: void <init>(java.net.URL)
spec        java.net.URLConnection: void connect()
spec        java.net.URLConnection: boolean getAllowUserInteraction()
spec        java.net.URLConnection: java.lang.Object getContent()
spec        java.net.URLConnection: java.lang.Object getContent(java.lang.Class[])
spec        java.net.URLConnection: java.lang.String getContentEncoding()
spec        java.net.URLConnection: int getContentLength()
spec        java.net.URLConnection: java.lang.String getContentType()
spec        java.net.URLConnection: long getDate()
spec        java.net.URLConnection: boolean getDefaultAllowUserInteraction()
spec        java.net.URLConnection: java.lang.String getDefaultRequestProperty(java.lang.String)
spec        java.net.URLConnection: boolean getDefaultUseCaches()
spec        java.net.URLConnection: boolean getDoInput()
spec        java.net.URLConnection: boolean getDoOutput()
spec        java.net.URLConnection: long getExpiration()
spec        java.net.URLConnection: java.net.FileNameMap getFileNameMap()
spec        java.net.URLConnection: java.lang.String getHeaderField(int)
spec        java.net.URLConnection: java.util.Map getHeaderFields()
spec        java.net.URLConnection: java.util.Map getRequestProperties()
spec        java.net.URLConnection: void addRequestProperty(java.lang.String, java.lang.String)
spec        java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)
spec        java.net.URLConnection: long getHeaderFieldDate(java.lang.String, long)
spec        java.net.URLConnection: int getHeaderFieldInt(java.lang.String, int)
spec        java.net.URLConnection: java.lang.String getHeaderFieldKey(int)
spec        java.net.URLConnection: long getIfModifiedSince()
spec        java.net.URLConnection: java.io.InputStream getInputStream()
spec        java.net.URLConnection: long getLastModified()
spec        java.net.URLConnection: java.io.OutputStream getOutputStream()
spec        java.net.URLConnection: java.security.Permission getPermission()
spec        java.net.URLConnection: java.lang.String getRequestProperty(java.lang.String)
spec        java.net.URLConnection: java.net.URL getURL()
spec        java.net.URLConnection: boolean getUseCaches()
spec        java.net.URLConnection: java.lang.String guessContentTypeFromName(java.lang.String)
spec        java.net.URLConnection: java.lang.String guessContentTypeFromStream(java.io.InputStream)
spec        java.net.URLConnection: void setAllowUserInteraction(boolean)
spec        java.net.URLConnection: void setContentHandlerFactory(java.net.ContentHandlerFactory)
spec        java.net.URLConnection: void setDefaultAllowUserInteraction(boolean)
spec        java.net.URLConnection: void setDefaultRequestProperty(java.lang.String, java.lang.String)
spec        java.net.URLConnection: void setDefaultUseCaches(boolean)
spec        java.net.URLConnection: void setDoInput(boolean)
spec        java.net.URLConnection: void setDoOutput(boolean)
spec        java.net.URLConnection: void setFileNameMap(java.net.FileNameMap)
spec        java.net.URLConnection: void setIfModifiedSince(long)
spec        java.net.URLConnection: void setRequestProperty(java.lang.String, java.lang.String)
spec        java.net.URLConnection: void setUseCaches(boolean)
spec        java.net.URLConnection: void setConnectTimeout(int)
spec        java.net.URLConnection: int getConnectTimeout()
spec        java.net.URLConnection: void setReadTimeout(int)
spec        java.net.URLConnection: int getReadTimeout()
spec        java.net.URLConnection: java.lang.String toString()

safe        java.util.Arrays: void <init>()
safe        java.util.Arrays: java.util.List asList(java.lang.Object[])
safe        java.util.Arrays: int binarySearch(byte[],byte)
safe        java.util.Arrays: int binarySearch(byte[],int,int,byte)
safe        java.util.Arrays: int binarySearch(char[],char)
safe        java.util.Arrays: int binarySearch(char[],int,int,char)
safe        java.util.Arrays: int binarySearch(double[],double)
safe        java.util.Arrays: int binarySearch(double[],int,int,double)
safe        java.util.Arrays: int binarySearch(float[],float)
safe        java.util.Arrays: int binarySearch(float[],int,int,float)
safe        java.util.Arrays: int binarySearch(int[],int)
safe        java.util.Arrays: int binarySearch(int[],int,int,int)
safe        java.util.Arrays: int binarySearch(long[],long)
safe        java.util.Arrays: int binarySearch(long[],int,int,long)
safe        java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)
safe        java.util.Arrays: int binarySearch(java.lang.Object[],int,int,java.lang.Object)
safe        java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object,java.util.Comparator)
safe        java.util.Arrays: int binarySearch(java.lang.Object[],int,int,java.lang.Object,java.util.Comparator)
safe        java.util.Arrays: int binarySearch(short[],short)
safe        java.util.Arrays: int binarySearch(short[],int,int,short)
safe        java.util.Arrays: void fill(byte[],byte)
safe        java.util.Arrays: void fill(byte[],int,int,byte)
safe        java.util.Arrays: void fill(short[],short)
safe        java.util.Arrays: void fill(short[],int,int,short)
safe        java.util.Arrays: void fill(char[],char)
safe        java.util.Arrays: void fill(char[],int,int,char)
safe        java.util.Arrays: void fill(int[],int)
safe        java.util.Arrays: void fill(int[],int,int,int)
safe        java.util.Arrays: void fill(long[],long)
safe        java.util.Arrays: void fill(long[],int,int,long)
safe        java.util.Arrays: void fill(float[],float)
safe        java.util.Arrays: void fill(float[],int,int,float)
safe        java.util.Arrays: void fill(double[],double)
safe        java.util.Arrays: void fill(double[],int,int,double)
safe        java.util.Arrays: void fill(boolean[],boolean)
safe        java.util.Arrays: void fill(boolean[],int,int,boolean)
safe        java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)
safe        java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)
safe        java.util.Arrays: int hashCode(boolean[])
safe        java.util.Arrays: int hashCode(int[])
safe        java.util.Arrays: int hashCode(short[])
safe        java.util.Arrays: int hashCode(char[])
safe        java.util.Arrays: int hashCode(byte[])
safe        java.util.Arrays: int hashCode(long[])
safe        java.util.Arrays: int hashCode(float[])
safe        java.util.Arrays: int hashCode(double[])
safe        java.util.Arrays: int hashCode(java.lang.Object[])
safe        java.util.Arrays: int deepHashCode(java.lang.Object[])
safe        java.util.Arrays: boolean equals(byte[],byte[])
safe        java.util.Arrays: boolean equals(short[],short[])
safe        java.util.Arrays: boolean equals(char[],char[])
safe        java.util.Arrays: boolean equals(int[],int[])
safe        java.util.Arrays: boolean equals(long[],long[])
safe        java.util.Arrays: boolean equals(float[],float[])
safe        java.util.Arrays: boolean equals(double[],double[])
safe        java.util.Arrays: boolean equals(boolean[],boolean[])
safe        java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])
safe        java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])
safe        java.util.Arrays: void sort(byte[])
safe        java.util.Arrays: void sort(byte[],int,int)
safe        java.util.Arrays: void sort(char[])
safe        java.util.Arrays: void sort(char[],int,int)
safe        java.util.Arrays: void sort(double[])
safe        java.util.Arrays: void sort(double[],int,int)
safe        java.util.Arrays: void sort(float[])
safe        java.util.Arrays: void sort(float[],int,int)
safe        java.util.Arrays: void sort(int[])
safe        java.util.Arrays: void sort(int[],int,int)
safe        java.util.Arrays: void sort(long[])
safe        java.util.Arrays: void sort(long[],int,int)
safe        java.util.Arrays: void sort(short[])
safe        java.util.Arrays: void sort(short[],int,int)
safe        java.util.Arrays: void sort(java.lang.Object[])
safe        java.util.Arrays: void sort(java.lang.Object[],int,int)
safe        java.util.Arrays: void sort(java.lang.Object[],int,int,java.util.Comparator)
safe        java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)
safe        java.util.Arrays: java.lang.String toString(boolean[])
safe        java.util.Arrays: java.lang.String toString(byte[])
safe        java.util.Arrays: java.lang.String toString(char[])
safe        java.util.Arrays: java.lang.String toString(double[])
safe        java.util.Arrays: java.lang.String toString(float[])
safe        java.util.Arrays: java.lang.String toString(int[])
safe        java.util.Arrays: java.lang.String toString(long[])
safe        java.util.Arrays: java.lang.String toString(short[])
safe        java.util.Arrays: java.lang.String toString(java.lang.Object[])
safe        java.util.Arrays: java.lang.String deepToString(java.lang.Object[])
safe        java.util.Arrays: boolean[] copyOf(boolean[],int)
safe        java.util.Arrays: byte[] copyOf(byte[],int)
safe        java.util.Arrays: char[] copyOf(char[],int)
safe        java.util.Arrays: double[] copyOf(double[],int)
safe        java.util.Arrays: float[] copyOf(float[],int)
safe        java.util.Arrays: int[] copyOf(int[],int)
safe        java.util.Arrays: long[] copyOf(long[],int)
safe        java.util.Arrays: short[] copyOf(short[],int)
safe        java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)
safe        java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)
safe        java.util.Arrays: boolean[] copyOfRange(boolean[],int,int)
safe        java.util.Arrays: byte[] copyOfRange(byte[],int,int)
safe        java.util.Arrays: char[] copyOfRange(char[],int,int)
safe        java.util.Arrays: double[] copyOfRange(double[],int,int)
safe        java.util.Arrays: float[] copyOfRange(float[],int,int)
safe        java.util.Arrays: int[] copyOfRange(int[],int,int)
safe        java.util.Arrays: long[] copyOfRange(long[],int,int)
safe        java.util.Arrays: short[] copyOfRange(short[],int,int)
safe        java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)
safe        java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int,java.lang.Class)


safe        java.util.ArrayList: void <init>(int)
safe        java.util.ArrayList: void <init>()
safe        java.util.ArrayList: void <init>(java.util.Collection)
safe        java.util.ArrayList: boolean add(java.lang.Object)
safe        java.util.ArrayList: void add(int, java.lang.Object)
safe        java.util.ArrayList: boolean addAll(java.util.Collection)
safe        java.util.ArrayList: boolean addAll(int, java.util.Collection)
safe        java.util.ArrayList: void clear()
safe        java.util.ArrayList: java.lang.Object clone()
safe        java.util.ArrayList: void ensureCapacity(int)
safe        java.util.ArrayList: java.lang.Object get(int)
safe        java.util.ArrayList: int size()
safe        java.util.ArrayList: boolean isEmpty()
safe        java.util.ArrayList: boolean contains(java.lang.Object)
safe        java.util.ArrayList: int indexOf(java.lang.Object)
safe        java.util.ArrayList: int lastIndexOf(java.lang.Object)
safe        java.util.ArrayList: java.lang.Object remove(int)
safe        java.util.ArrayList: boolean remove(java.lang.Object)
safe        java.util.ArrayList: void removeRange(int, int)
safe        java.util.ArrayList: java.lang.Object set(int, java.lang.Object)
safe        java.util.ArrayList: java.lang.Object[] toArray()
safe        java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])
safe        java.util.ArrayList: void trimToSize()
safe        java.util.ArrayList: java.util.Iterator iterator()
safe        java.util.ArrayList: int hashCode()
safe        java.util.ArrayList: boolean equals(java.lang.Object)


safe        java.util.BitSet: void <init>()
safe        java.util.BitSet: void <init>(int)
safe        java.util.BitSet: java.lang.Object clone()
safe        java.util.BitSet: boolean equals(java.lang.Object)
safe        java.util.BitSet: int hashCode()
safe        java.util.BitSet: boolean get(int)
safe        java.util.BitSet: void set(int)
safe        java.util.BitSet: void clear(int)
safe        java.util.BitSet: void flip(int)
safe        java.util.BitSet: java.util.BitSet get(int,int)
safe        java.util.BitSet: void set(int,boolean)
safe        java.util.BitSet: void set(int,int,boolean)
safe        java.util.BitSet: void clear()
safe        java.util.BitSet: void set(int,int)
safe        java.util.BitSet: void clear(int,int)
safe        java.util.BitSet: void flip(int,int)
safe        java.util.BitSet: boolean intersects(java.util.BitSet)
safe        java.util.BitSet: void and(java.util.BitSet)
safe        java.util.BitSet: void andNot(java.util.BitSet)
safe        java.util.BitSet: void or(java.util.BitSet)
safe        java.util.BitSet: void xor(java.util.BitSet)
safe        java.util.BitSet: int size()
safe        java.util.BitSet: int length()
safe        java.util.BitSet: java.lang.String toString()
safe        java.util.BitSet: int nextSetBit(int)
safe        java.util.BitSet: int nextClearBit(int)
safe        java.util.BitSet: boolean isEmpty()
safe        java.util.BitSet: int cardinality()


safe        java.util.Collection: boolean add(java.lang.Object)
safe        java.util.Collection: boolean addAll(java.util.Collection)
safe        java.util.Collection: void clear()
safe        java.util.Collection: boolean contains(java.lang.Object)
safe        java.util.Collection: boolean containsAll(java.util.Collection)
safe        java.util.Collection: boolean equals(java.lang.Object)
safe        java.util.Collection: int hashCode()
safe        java.util.Collection: boolean isEmpty()
safe        java.util.Collection: java.util.Iterator iterator()
safe        java.util.Collection: boolean remove(java.lang.Object)
safe        java.util.Collection: boolean removeAll(java.util.Collection)
safe        java.util.Collection: boolean retainAll(java.util.Collection)
safe        java.util.Collection: int size()
safe        java.util.Collection: java.lang.Object[] toArray()
safe        java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])

safe        java.util.Collections: void <init>()
safe        java.util.Collections: int binarySearch(java.util.List,java.lang.Object)
safe        java.util.Collections: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator)
safe        java.util.Collections: void copy(java.util.List,java.util.List)
safe        java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)
safe        java.util.Collections: void fill(java.util.List,java.lang.Object)
safe        java.util.Collections: java.lang.Object max(java.util.Collection)
safe        java.util.Collections: java.lang.Object max(java.util.Collection,java.util.Comparator)
safe        java.util.Collections: java.lang.Object min(java.util.Collection)
safe        java.util.Collections: java.lang.Object min(java.util.Collection,java.util.Comparator)
safe        java.util.Collections: java.util.List nCopies(int,java.lang.Object)
safe        java.util.Collections: void reverse(java.util.List)
safe        java.util.Collections: java.util.Comparator reverseOrder()
safe        java.util.Collections: java.util.Comparator reverseOrder(java.util.Comparator)
safe        java.util.Collections: void shuffle(java.util.List)
safe        java.util.Collections: void shuffle(java.util.List,java.util.Random)
safe        java.util.Collections: java.util.Set singleton(java.lang.Object)
safe        java.util.Collections: java.util.List singletonList(java.lang.Object)
safe        java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)
safe        java.util.Collections: void sort(java.util.List)
safe        java.util.Collections: void sort(java.util.List,java.util.Comparator)
safe        java.util.Collections: void swap(java.util.List,int,int)
safe        java.util.Collections: boolean replaceAll(java.util.List,java.lang.Object,java.lang.Object)
safe        java.util.Collections: void rotate(java.util.List,int)
safe        java.util.Collections: int indexOfSubList(java.util.List,java.util.List)
safe        java.util.Collections: int lastIndexOfSubList(java.util.List,java.util.List)
safe        java.util.Collections: java.util.ArrayList list(java.util.Enumeration)
safe        java.util.Collections: java.util.Collection synchronizedCollection(java.util.Collection)
safe        java.util.Collections: java.util.List synchronizedList(java.util.List)
safe        java.util.Collections: java.util.Map synchronizedMap(java.util.Map)
safe        java.util.Collections: java.util.Set synchronizedSet(java.util.Set)
safe        java.util.Collections: java.util.SortedMap synchronizedSortedMap(java.util.SortedMap)
safe        java.util.Collections: java.util.SortedSet synchronizedSortedSet(java.util.SortedSet)
safe        java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)
safe        java.util.Collections: java.util.List unmodifiableList(java.util.List)
safe        java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)
safe        java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)
safe        java.util.Collections: java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap)
safe        java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)
safe        java.util.Collections: int frequency(java.util.Collection,java.lang.Object)
safe        java.util.Collections: java.util.List emptyList()
safe        java.util.Collections: java.util.Set emptySet()
safe        java.util.Collections: java.util.Map emptyMap()
safe        java.util.Collections: java.util.Collection checkedCollection(java.util.Collection,java.lang.Class)
safe        java.util.Collections: java.util.Map checkedMap(java.util.Map,java.lang.Class,java.lang.Class)
safe        java.util.Collections: java.util.List checkedList(java.util.List,java.lang.Class)
safe        java.util.Collections: java.util.Set checkedSet(java.util.Set,java.lang.Class)
safe        java.util.Collections: java.util.SortedMap checkedSortedMap(java.util.SortedMap,java.lang.Class,java.lang.Class)
safe        java.util.Collections: java.util.SortedSet checkedSortedSet(java.util.SortedSet,java.lang.Class)
safe        java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])
safe        java.util.Collections: boolean disjoint(java.util.Collection,java.util.Collection)
safe        java.util.Collections: java.util.Set newSetFromMap(java.util.Map)
safe        java.util.Collections: java.util.Queue asLifoQueue(java.util.Deque)
safe        java.util.Collections: void <clinit>()

safe        java.util.Calendar: void <init>()
safe        java.util.Calendar: void <init>(java.util.TimeZone,java.util.Locale)
safe        java.util.Calendar: void add(int,int)
safe        java.util.Calendar: boolean after(java.lang.Object)
safe        java.util.Calendar: boolean before(java.lang.Object)
safe        java.util.Calendar: void clear()
safe        java.util.Calendar: void clear(int)
safe        java.util.Calendar: java.lang.Object clone()
safe        java.util.Calendar: void complete()
safe        java.util.Calendar: void computeFields()
safe        java.util.Calendar: void computeTime()
safe        java.util.Calendar: boolean equals(java.lang.Object)
safe        java.util.Calendar: int get(int)
safe        java.util.Calendar: int getActualMaximum(int)
safe        java.util.Calendar: int getActualMinimum(int)
safe        java.util.Calendar: java.util.Locale[] getAvailableLocales()
safe        java.util.Calendar: int getFirstDayOfWeek()
safe        java.util.Calendar: int getGreatestMinimum(int)
safe        java.util.Calendar: java.util.Calendar getInstance()
safe        java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)
safe        java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)
safe        java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)
safe        java.util.Calendar: int getLeastMaximum(int)
safe        java.util.Calendar: int getMaximum(int)
safe        java.util.Calendar: int getMinimalDaysInFirstWeek()
safe        java.util.Calendar: int getMinimum(int)
safe        java.util.Calendar: java.util.Date getTime()
safe        java.util.Calendar: long getTimeInMillis()
safe        java.util.Calendar: java.util.TimeZone getTimeZone()
safe        java.util.Calendar: int hashCode()
safe        java.util.Calendar: int internalGet(int)
safe        java.util.Calendar: boolean isLenient()
safe        java.util.Calendar: boolean isSet(int)
safe        java.util.Calendar: void roll(int,int)
safe        java.util.Calendar: void roll(int,boolean)
safe        java.util.Calendar: void set(int,int)
safe        java.util.Calendar: void set(int,int,int)
safe        java.util.Calendar: void set(int,int,int,int,int)
safe        java.util.Calendar: void set(int,int,int,int,int,int)
safe        java.util.Calendar: void setFirstDayOfWeek(int)
safe        java.util.Calendar: void setLenient(boolean)
safe        java.util.Calendar: void setMinimalDaysInFirstWeek(int)
safe        java.util.Calendar: void setTime(java.util.Date)
safe        java.util.Calendar: void setTimeInMillis(long)
safe        java.util.Calendar: void setTimeZone(java.util.TimeZone)
safe        java.util.Calendar: java.lang.String toString()
safe        java.util.Calendar: int compareTo(java.util.Calendar)
safe        java.util.Calendar: java.lang.String getDisplayName(int,int,java.util.Locale)
safe        java.util.Calendar: java.util.Map getDisplayNames(int,int,java.util.Locale)
safe        java.util.Calendar: int compareTo(java.lang.Object)

safe        java.util.EnumMap: void <init>(java.lang.Class)
safe        java.util.EnumMap: void <init>(java.util.EnumMap)
safe        java.util.EnumMap: void <init>(java.util.Map)
safe        java.util.EnumMap: void clear()
safe        java.util.EnumMap: java.util.EnumMap clone()
safe        java.util.EnumMap: boolean containsKey(java.lang.Object)
safe        java.util.EnumMap: boolean containsValue(java.lang.Object)
safe        java.util.EnumMap: java.util.Set entrySet()
safe        java.util.EnumMap: boolean equals(java.lang.Object)
safe        java.util.EnumMap: java.lang.Object get(java.lang.Object)
safe        java.util.EnumMap: java.util.Set keySet()
safe        java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)
safe        java.util.EnumMap: void putAll(java.util.Map)
safe        java.util.EnumMap: java.lang.Object remove(java.lang.Object)
safe        java.util.EnumMap: int size()
safe        java.util.EnumMap: java.util.Collection values()
safe        java.util.EnumMap: java.lang.Object clone()
safe        java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)


#safe        java.util.EnumSet: void <init>()
safe        java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)
safe        java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)
safe        java.util.EnumSet: java.util.EnumSet copyOf(java.util.EnumSet)
safe        java.util.EnumSet: java.util.EnumSet copyOf(java.util.Collection)
safe        java.util.EnumSet: java.util.EnumSet complementOf(java.util.EnumSet)
safe        java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)
safe        java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)
safe        java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum,java.lang.Enum)
safe        java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum)
safe        java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum)
safe        java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum[])
safe        java.util.EnumSet: java.util.EnumSet range(java.lang.Enum,java.lang.Enum)
safe        java.util.EnumSet: java.util.EnumSet clone()
safe        java.util.EnumSet: java.lang.Object clone()

# Getting the date can be a possible trigger
# Other calls only manipulate a date.  Its possible the comparison functions
# should be spec just so that we might see possible trigger comparisons.
spec        java.util.Date: void <init>()
safe        java.util.Date: void <init>(int, int, int)
safe        java.util.Date: void <init>(int, int, int, int, int)
safe        java.util.Date: void <init>(int, int, int, int, int, int)
safe        java.util.Date: void <init>(long)
safe        java.util.Date: void <init>(java.lang.String)
safe        java.util.Date: boolean after(java.util.Date)
safe        java.util.Date: boolean before(java.util.Date)
safe        java.util.Date: java.lang.Object clone()
safe        java.util.Date: int compareTo(java.util.Date)
safe        java.util.Date: boolean equals(java.lang.Object)
safe        java.util.Date: int getDate()
safe        java.util.Date: int getDay()
safe        java.util.Date: int getHours()
safe        java.util.Date: int getMinutes()
safe        java.util.Date: int getMonth()
safe        java.util.Date: int getSeconds()
safe        java.util.Date: long getTime()
safe        java.util.Date: int getTimezoneOffset()
safe        java.util.Date: int getYear()
safe        java.util.Date: int hashCode()
safe        java.util.Date: long parse(java.lang.String)
safe        java.util.Date: void setDate(int)
safe        java.util.Date: void setHours(int)
safe        java.util.Date: void setMinutes(int)
safe        java.util.Date: void setMonth(int)
safe        java.util.Date: void setSeconds(int)
safe        java.util.Date: void setTime(long)
safe        java.util.Date: void setYear(int)
safe        java.util.Date: java.lang.String toGMTString()
safe        java.util.Date: java.lang.String toLocaleString()
safe        java.util.Date: java.lang.String toString()
safe        java.util.Date: long UTC(int, int, int, int, int, int)
safe        java.util.Date: int compareTo(java.lang.Object)

safe        java.text.DateFormat: java.util.Date parse(java.lang.String)

safe        java.util.Enumeration: boolean hasMoreElements()
safe        java.util.Enumeration: java.lang.Object nextElement()

safe        java.util.EventObject: void <init>(java.lang.Object)
safe        java.util.EventObject: java.lang.Object getSource()
safe        java.util.EventObject: java.lang.String toString()


spec        java.util.GregorianCalendar: void <init>()
spec        java.util.GregorianCalendar: void <init>(int,int,int)
spec        java.util.GregorianCalendar: void <init>(int,int,int,int,int)
spec        java.util.GregorianCalendar: void <init>(int,int,int,int,int,int)
spec        java.util.GregorianCalendar: void <init>(java.util.Locale)
spec        java.util.GregorianCalendar: void <init>(java.util.TimeZone)
spec        java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)
spec        java.util.GregorianCalendar: void add(int,int)
spec        java.util.GregorianCalendar: java.lang.Object clone()
spec        java.util.GregorianCalendar: void computeFields()
spec        java.util.GregorianCalendar: void computeTime()
spec        java.util.GregorianCalendar: boolean equals(java.lang.Object)
spec        java.util.GregorianCalendar: int getActualMaximum(int)
spec        java.util.GregorianCalendar: int getActualMinimum(int)
spec        java.util.GregorianCalendar: int getGreatestMinimum(int)
spec        java.util.GregorianCalendar: java.util.Date getGregorianChange()
spec        java.util.GregorianCalendar: int getLeastMaximum(int)
spec        java.util.GregorianCalendar: int getMaximum(int)
spec        java.util.GregorianCalendar: int getMinimum(int)
spec        java.util.GregorianCalendar: int hashCode()
spec        java.util.GregorianCalendar: boolean isLeapYear(int)
spec        java.util.GregorianCalendar: void roll(int,int)
spec        java.util.GregorianCalendar: void roll(int,boolean)
spec        java.util.GregorianCalendar: void setGregorianChange(java.util.Date)
spec        java.util.GregorianCalendar: void setFirstDayOfWeek(int)
spec        java.util.GregorianCalendar: void setMinimalDaysInFirstWeek(int)


safe        java.util.HashMap: void <init>()
safe        java.util.HashMap: void <init>(int)
safe        java.util.HashMap: void <init>(int, float)
safe        java.util.HashMap: void <init>(java.util.Map)
safe        java.util.HashMap: java.lang.Object clone()
safe        java.util.HashMap: boolean isEmpty()
safe        java.util.HashMap: int size()
safe        java.util.HashMap: java.lang.Object get(java.lang.Object)
safe        java.util.HashMap: boolean containsKey(java.lang.Object)
safe        java.util.HashMap: boolean containsValue(java.lang.Object)
safe        java.util.HashMap: java.lang.Object put(java.lang.Object, java.lang.Object)
safe        java.util.HashMap: void putAll(java.util.Map)
safe        java.util.HashMap: java.lang.Object remove(java.lang.Object)
safe        java.util.HashMap: void clear()
safe        java.util.HashMap: java.util.Set keySet()
safe        java.util.HashMap: java.util.Collection values()
safe        java.util.HashMap: java.util.Set entrySet()

safe        java.util.HashSet: void <init>()
safe        java.util.HashSet: void <init>(int)
safe        java.util.HashSet: void <init>(int, float)
safe        java.util.HashSet: void <init>(java.util.Collection)
safe        java.util.HashSet: boolean add(java.lang.Object)
safe        java.util.HashSet: void clear()
safe        java.util.HashSet: java.lang.Object clone()
safe        java.util.HashSet: boolean contains(java.lang.Object)
safe        java.util.HashSet: boolean isEmpty()
safe        java.util.HashSet: java.util.Iterator iterator()
safe        java.util.HashSet: boolean remove(java.lang.Object)
safe        java.util.HashSet: int size()

safe        java.util.Hashtable: void <init>()
safe        java.util.Hashtable: void <init>(int)
safe        java.util.Hashtable: void <init>(int, float)
safe        java.util.Hashtable: void <init>(java.util.Map)
safe        java.util.Hashtable: java.lang.Object clone()
safe        java.util.Hashtable: boolean isEmpty()
safe        java.util.Hashtable: int size()
safe        java.util.Hashtable: java.lang.Object get(java.lang.Object)
safe        java.util.Hashtable: boolean containsKey(java.lang.Object)
safe        java.util.Hashtable: boolean containsValue(java.lang.Object)
safe        java.util.Hashtable: boolean contains(java.lang.Object)
safe        java.util.Hashtable: java.lang.Object put(java.lang.Object, java.lang.Object)
safe        java.util.Hashtable: void putAll(java.util.Map)
safe        java.util.Hashtable: void rehash()
safe        java.util.Hashtable: java.lang.Object remove(java.lang.Object)
safe        java.util.Hashtable: void clear()
safe        java.util.Hashtable: java.util.Set keySet()
safe        java.util.Hashtable: java.util.Collection values()
safe        java.util.Hashtable: java.util.Set entrySet()
safe        java.util.Hashtable: java.util.Enumeration keys()
safe        java.util.Hashtable: java.util.Enumeration elements()
safe        java.util.Hashtable: boolean equals(java.lang.Object)
safe        java.util.Hashtable: int hashCode()
safe        java.util.Hashtable: java.lang.String toString()

safe        java.util.IdentityHashMap: void <init>()
safe        java.util.IdentityHashMap: void <init>(int)
safe        java.util.IdentityHashMap: void <init>(java.util.Map)
safe        java.util.IdentityHashMap: void clear()
safe        java.util.IdentityHashMap: boolean containsKey(java.lang.Object)
safe        java.util.IdentityHashMap: boolean containsValue(java.lang.Object)
safe        java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)
safe        java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)
safe        java.util.IdentityHashMap: void putAll(java.util.Map)
safe        java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)
safe        java.util.IdentityHashMap: java.util.Set entrySet()
safe        java.util.IdentityHashMap: java.util.Set keySet()
safe        java.util.IdentityHashMap: java.util.Collection values()
safe        java.util.IdentityHashMap: boolean equals(java.lang.Object)
safe        java.util.IdentityHashMap: java.lang.Object clone()
safe        java.util.IdentityHashMap: boolean isEmpty()
safe        java.util.IdentityHashMap: int size()


safe        java.util.Iterator: boolean hasNext()
safe        java.util.Iterator: java.lang.Object next()
safe        java.util.Iterator: void remove()

safe        java.util.LinkedHashMap: void <init>()
safe        java.util.LinkedHashMap: void <init>(int)
safe        java.util.LinkedHashMap: void <init>(int,float)
safe        java.util.LinkedHashMap: void <init>(int,float,boolean)
safe        java.util.LinkedHashMap: void <init>(java.util.Map)
safe        java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)
safe        java.util.LinkedHashMap: boolean containsValue(java.lang.Object)
safe        java.util.LinkedHashMap: void clear()
safe        java.util.LinkedHashMap: boolean removeEldestEntry(java.util.Map$Entry)

safe        java.util.LinkedHashSet: void <init>()
safe        java.util.LinkedHashSet: void <init>(int)
safe        java.util.LinkedHashSet: void <init>(int,float)
safe        java.util.LinkedHashSet: void <init>(java.util.Collection)

safe        java.util.LinkedList: void <init>()
safe        java.util.LinkedList: void <init>(java.util.Collection)
safe        java.util.LinkedList: void add(int,java.lang.Object)
safe        java.util.LinkedList: boolean add(java.lang.Object)
safe        java.util.LinkedList: boolean addAll(int,java.util.Collection)
safe        java.util.LinkedList: boolean addAll(java.util.Collection)
safe        java.util.LinkedList: void addFirst(java.lang.Object)
safe        java.util.LinkedList: void addLast(java.lang.Object)
safe        java.util.LinkedList: void clear()
safe        java.util.LinkedList: java.lang.Object clone()
safe        java.util.LinkedList: boolean contains(java.lang.Object)
safe        java.util.LinkedList: java.lang.Object get(int)
safe        java.util.LinkedList: java.lang.Object getFirst()
safe        java.util.LinkedList: java.lang.Object getLast()
safe        java.util.LinkedList: int indexOf(java.lang.Object)
safe        java.util.LinkedList: int lastIndexOf(java.lang.Object)
safe        java.util.LinkedList: java.util.ListIterator listIterator(int)
safe        java.util.LinkedList: java.lang.Object remove(int)
safe        java.util.LinkedList: boolean remove(java.lang.Object)
safe        java.util.LinkedList: java.lang.Object removeFirst()
safe        java.util.LinkedList: java.lang.Object removeLast()
safe        java.util.LinkedList: java.util.Iterator descendingIterator()
safe        java.util.LinkedList: boolean offerFirst(java.lang.Object)
safe        java.util.LinkedList: boolean offerLast(java.lang.Object)
safe        java.util.LinkedList: java.lang.Object peekFirst()
safe        java.util.LinkedList: java.lang.Object peekLast()
safe        java.util.LinkedList: java.lang.Object pollFirst()
safe        java.util.LinkedList: java.lang.Object pollLast()
safe        java.util.LinkedList: java.lang.Object pop()
safe        java.util.LinkedList: void push(java.lang.Object)
safe        java.util.LinkedList: boolean removeFirstOccurrence(java.lang.Object)
safe        java.util.LinkedList: boolean removeLastOccurrence(java.lang.Object)
safe        java.util.LinkedList: java.lang.Object set(int,java.lang.Object)
safe        java.util.LinkedList: int size()
safe        java.util.LinkedList: boolean offer(java.lang.Object)
safe        java.util.LinkedList: java.lang.Object poll()
safe        java.util.LinkedList: java.lang.Object remove()
safe        java.util.LinkedList: java.lang.Object peek()
safe        java.util.LinkedList: java.lang.Object element()
safe        java.util.LinkedList: java.lang.Object[] toArray()
safe        java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])


safe        java.util.List: void add(int, java.lang.Object)
safe        java.util.List: boolean add(java.lang.Object)
safe        java.util.List: boolean addAll(int, java.util.Collection)
safe        java.util.List: boolean addAll(java.util.Collection)
safe        java.util.List: void clear()
safe        java.util.List: boolean contains(java.lang.Object)
safe        java.util.List: boolean containsAll(java.util.Collection)
safe        java.util.List: boolean equals(java.lang.Object)
safe        java.util.List: java.lang.Object get(int)
safe        java.util.List: int hashCode()
safe        java.util.List: int indexOf(java.lang.Object)
safe        java.util.List: boolean isEmpty()
safe        java.util.List: java.util.Iterator iterator()
safe        java.util.List: int lastIndexOf(java.lang.Object)
safe        java.util.List: java.util.ListIterator listIterator()
safe        java.util.List: java.util.ListIterator listIterator(int)
safe        java.util.List: java.lang.Object remove(int)
safe        java.util.List: boolean remove(java.lang.Object)
safe        java.util.List: boolean removeAll(java.util.Collection)
safe        java.util.List: boolean retainAll(java.util.Collection)
safe        java.util.List: java.lang.Object set(int, java.lang.Object)
safe        java.util.List: int size()
safe        java.util.List: java.util.List subList(int, int)
safe        java.util.List: java.lang.Object[] toArray()
safe        java.util.List: java.lang.Object[] toArray(java.lang.Object[])

safe        java.util.ListIterator: void add(java.lang.Object)
safe        java.util.ListIterator: boolean hasNext()
safe        java.util.ListIterator: boolean hasPrevious()
safe        java.util.ListIterator: java.lang.Object next()
safe        java.util.ListIterator: int nextIndex()
safe        java.util.ListIterator: java.lang.Object previous()
safe        java.util.ListIterator: int previousIndex()
safe        java.util.ListIterator: void remove()
safe        java.util.ListIterator: void set(java.lang.Object)

safe        java.util.Locale: void <init>(java.lang.String)
safe        java.util.Locale: void <init>(java.lang.String,java.lang.String)
safe        java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)
safe        java.util.Locale: java.lang.Object clone()
safe        java.util.Locale: boolean equals(java.lang.Object)
safe        java.util.Locale: java.util.Locale[] getAvailableLocales()
safe        java.util.Locale: java.lang.String getCountry()
safe        java.util.Locale: java.util.Locale getDefault()
safe        java.util.Locale: java.lang.String getDisplayCountry()
safe        java.util.Locale: java.lang.String getDisplayCountry(java.util.Locale)
safe        java.util.Locale: java.lang.String getDisplayLanguage()
safe        java.util.Locale: java.lang.String getDisplayLanguage(java.util.Locale)
safe        java.util.Locale: java.lang.String getDisplayName()
safe        java.util.Locale: java.lang.String getDisplayName(java.util.Locale)
safe        java.util.Locale: java.lang.String getDisplayVariant()
safe        java.util.Locale: java.lang.String getDisplayVariant(java.util.Locale)
safe        java.util.Locale: java.lang.String getISO3Country()
safe        java.util.Locale: java.lang.String getISO3Language()
safe        java.util.Locale: java.lang.String[] getISOCountries()
safe        java.util.Locale: java.lang.String[] getISOLanguages()
safe        java.util.Locale: java.lang.String getLanguage()
safe        java.util.Locale: java.lang.String getVariant()
safe        java.util.Locale: int hashCode()
spec        java.util.Locale: void setDefault(java.util.Locale)
safe        java.util.Locale: java.lang.String toString()
safe        java.util.Locale: void <clinit>()

safe        java.util.Map: void clear()
safe        java.util.Map: boolean containsKey(java.lang.Object)
safe        java.util.Map: boolean containsValue(java.lang.Object)
safe        java.util.Map: java.util.Set entrySet()
safe        java.util.Map: boolean equals(java.lang.Object)
safe        java.util.Map: java.lang.Object get(java.lang.Object)
safe        java.util.Map: int hashCode()
safe        java.util.Map: boolean isEmpty()
safe        java.util.Map: java.util.Set keySet()
safe        java.util.Map: java.lang.Object put(java.lang.Object, java.lang.Object)
safe        java.util.Map: void putAll(java.util.Map)
safe        java.util.Map: java.lang.Object remove(java.lang.Object)
safe        java.util.Map: int size()
safe        java.util.Map: java.util.Collection values()

safe        java.util.Map$Entry: boolean equals(java.lang.Object)
safe        java.util.Map$Entry: java.lang.Object getKey()
safe        java.util.Map$Entry: java.lang.Object getValue()
safe        java.util.Map$Entry: int hashCode()
safe        java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)

safe        java.util.NoSuchElementException: void <init>()
safe        java.util.NoSuchElementException: void <init>(java.lang.String)

safe        java.util.PriorityQueue: void <init>()
safe        java.util.PriorityQueue: void <init>(int)
safe        java.util.PriorityQueue: void <init>(int,java.util.Comparator)
safe        java.util.PriorityQueue: void <init>(java.util.Collection)
safe        java.util.PriorityQueue: void <init>(java.util.PriorityQueue)
safe        java.util.PriorityQueue: void <init>(java.util.SortedSet)
safe        java.util.PriorityQueue: java.util.Iterator iterator()
safe        java.util.PriorityQueue: int size()
safe        java.util.PriorityQueue: void clear()
safe        java.util.PriorityQueue: boolean offer(java.lang.Object)
safe        java.util.PriorityQueue: java.lang.Object poll()
safe        java.util.PriorityQueue: java.lang.Object peek()
safe        java.util.PriorityQueue: java.util.Comparator comparator()
safe        java.util.PriorityQueue: boolean remove(java.lang.Object)
safe        java.util.PriorityQueue: boolean add(java.lang.Object)

# Properties should be spec. 
spec        java.util.Properties: void <init>()
spec        java.util.Properties: void <init>(java.util.Properties)
spec        java.util.Properties: java.lang.String getProperty(java.lang.String)
spec        java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)
spec        java.util.Properties: void list(java.io.PrintStream)
spec        java.util.Properties: void list(java.io.PrintWriter)
spec        java.util.Properties: void load(java.io.InputStream)
spec        java.util.Properties: void load(java.io.Reader)
spec        java.util.Properties: java.util.Enumeration propertyNames()
spec        java.util.Properties: java.util.Set stringPropertyNames()
spec        java.util.Properties: void save(java.io.OutputStream,java.lang.String)
spec        java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)
spec        java.util.Properties: void store(java.io.OutputStream,java.lang.String)
spec        java.util.Properties: void store(java.io.Writer,java.lang.String)
spec        java.util.Properties: void loadFromXML(java.io.InputStream)
spec        java.util.Properties: void storeToXML(java.io.OutputStream,java.lang.String)
spec        java.util.Properties: void storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)


safe        java.util.Queue: boolean add(java.lang.Object)
safe        java.util.Queue: boolean offer(java.lang.Object)
safe        java.util.Queue: java.lang.Object remove()
safe        java.util.Queue: java.lang.Object poll()
safe        java.util.Queue: java.lang.Object element()
safe        java.util.Queue: java.lang.Object peek()

#safe        java.util.regex.Matcher: void <init>()
safe        java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)
safe        java.util.regex.Matcher: java.util.regex.Matcher reset()
safe        java.util.regex.Matcher: java.util.regex.Matcher reset(java.lang.CharSequence)
safe        java.util.regex.Matcher: java.util.regex.Matcher usePattern(java.util.regex.Pattern)
safe        java.util.regex.Matcher: java.util.regex.Matcher region(int,int)
safe        java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)
safe        java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)
safe        java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)
safe        java.util.regex.Matcher: java.util.regex.Pattern pattern()
safe        java.util.regex.Matcher: java.lang.String group(int)
safe        java.util.regex.Matcher: java.lang.String group()
safe        java.util.regex.Matcher: boolean find(int)
safe        java.util.regex.Matcher: boolean find()
safe        java.util.regex.Matcher: boolean lookingAt()
safe        java.util.regex.Matcher: boolean matches()
safe        java.util.regex.Matcher: int start(int)
safe        java.util.regex.Matcher: int end(int)
safe        java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)
safe        java.util.regex.Matcher: int start()
safe        java.util.regex.Matcher: int groupCount()
safe        java.util.regex.Matcher: int end()
safe        java.util.regex.Matcher: java.util.regex.MatchResult toMatchResult()
safe        java.util.regex.Matcher: java.util.regex.Matcher useAnchoringBounds(boolean)
safe        java.util.regex.Matcher: boolean hasAnchoringBounds()
safe        java.util.regex.Matcher: java.util.regex.Matcher useTransparentBounds(boolean)
safe        java.util.regex.Matcher: boolean hasTransparentBounds()
safe        java.util.regex.Matcher: int regionStart()
safe        java.util.regex.Matcher: int regionEnd()
safe        java.util.regex.Matcher: boolean requireEnd()
safe        java.util.regex.Matcher: boolean hitEnd()
safe        java.util.regex.Matcher: void finalize()
safe        java.util.regex.PatternSyntaxException: void <init>(java.lang.String,java.lang.String,int)
safe        java.util.regex.PatternSyntaxException: java.lang.String getPattern()
safe        java.util.regex.PatternSyntaxException: java.lang.String getMessage()
safe        java.util.regex.PatternSyntaxException: java.lang.String getDescription()
safe        java.util.regex.PatternSyntaxException: int getIndex()
#safe        java.util.regex.Pattern: void <init>()
safe        java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)
safe        java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)
safe        java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)
safe        java.util.regex.Pattern: java.lang.String pattern()
safe        java.util.regex.Pattern: java.lang.String toString()
safe        java.util.regex.Pattern: int flags()
safe        java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)
safe        java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)
safe        java.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)
safe        java.util.regex.Pattern: java.lang.String quote(java.lang.String)
safe        java.util.regex.Pattern: void finalize()
safe        java.util.regex.MatchResult: int end()
safe        java.util.regex.MatchResult: int end(int)
safe        java.util.regex.MatchResult: java.lang.String group()
safe        java.util.regex.MatchResult: java.lang.String group(int)
safe        java.util.regex.MatchResult: int groupCount()
safe        java.util.regex.MatchResult: int start()
safe        java.util.regex.MatchResult: int start(int)


# Since scanner can read a file, making all methods spec. 
spec        java.util.Scanner: void <init>(java.io.File)
spec        java.util.Scanner: void <init>(java.io.File,java.lang.String)
spec        java.util.Scanner: void <init>(java.lang.String)
spec        java.util.Scanner: void <init>(java.io.InputStream)
spec        java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)
spec        java.util.Scanner: void <init>(java.lang.Readable)
spec        java.util.Scanner: void <init>(java.nio.channels.ReadableByteChannel)
spec        java.util.Scanner: void <init>(java.nio.channels.ReadableByteChannel,java.lang.String)
spec        java.util.Scanner: void close()
spec        java.util.Scanner: java.util.regex.Pattern delimiter()
spec        java.util.Scanner: java.lang.String findInLine(java.util.regex.Pattern)
spec        java.util.Scanner: java.lang.String findInLine(java.lang.String)
spec        java.util.Scanner: java.lang.String findWithinHorizon(java.util.regex.Pattern,int)
spec        java.util.Scanner: java.lang.String findWithinHorizon(java.lang.String,int)
spec        java.util.Scanner: boolean hasNext()
spec        java.util.Scanner: boolean hasNext(java.util.regex.Pattern)
spec        java.util.Scanner: boolean hasNext(java.lang.String)
spec        java.util.Scanner: boolean hasNextBigDecimal()
spec        java.util.Scanner: boolean hasNextBigInteger()
spec        java.util.Scanner: boolean hasNextBigInteger(int)
spec        java.util.Scanner: boolean hasNextBoolean()
spec        java.util.Scanner: boolean hasNextByte()
spec        java.util.Scanner: boolean hasNextByte(int)
spec        java.util.Scanner: boolean hasNextDouble()
spec        java.util.Scanner: boolean hasNextFloat()
spec        java.util.Scanner: boolean hasNextInt()
spec        java.util.Scanner: boolean hasNextInt(int)
spec        java.util.Scanner: boolean hasNextLine()
spec        java.util.Scanner: boolean hasNextLong()
spec        java.util.Scanner: boolean hasNextLong(int)
spec        java.util.Scanner: boolean hasNextShort()
spec        java.util.Scanner: boolean hasNextShort(int)
spec        java.util.Scanner: java.io.IOException ioException()
spec        java.util.Scanner: java.util.Locale locale()
spec        java.util.Scanner: java.util.regex.MatchResult match()
spec        java.util.Scanner: java.lang.String next()
spec        java.util.Scanner: java.lang.String next(java.util.regex.Pattern)
spec        java.util.Scanner: java.lang.String next(java.lang.String)
spec        java.util.Scanner: java.math.BigDecimal nextBigDecimal()
spec        java.util.Scanner: java.math.BigInteger nextBigInteger()
spec        java.util.Scanner: java.math.BigInteger nextBigInteger(int)
spec        java.util.Scanner: boolean nextBoolean()
spec        java.util.Scanner: byte nextByte()
spec        java.util.Scanner: byte nextByte(int)
spec        java.util.Scanner: double nextDouble()
spec        java.util.Scanner: float nextFloat()
spec        java.util.Scanner: int nextInt()
spec        java.util.Scanner: int nextInt(int)
spec        java.util.Scanner: java.lang.String nextLine()
spec        java.util.Scanner: long nextLong()
spec        java.util.Scanner: long nextLong(int)
spec        java.util.Scanner: short nextShort()
spec        java.util.Scanner: short nextShort(int)
spec        java.util.Scanner: int radix()
spec        java.util.Scanner: java.util.Scanner skip(java.util.regex.Pattern)
spec        java.util.Scanner: java.util.Scanner skip(java.lang.String)
spec        java.util.Scanner: java.lang.String toString()
spec        java.util.Scanner: java.util.Scanner useDelimiter(java.util.regex.Pattern)
spec        java.util.Scanner: java.util.Scanner useDelimiter(java.lang.String)
spec        java.util.Scanner: java.util.Scanner useLocale(java.util.Locale)
spec        java.util.Scanner: java.util.Scanner useRadix(int)
spec        java.util.Scanner: void remove()
spec        java.util.Scanner: java.util.Scanner reset()
spec        java.util.Scanner: java.lang.Object next()


safe        java.util.Set: boolean add(java.lang.Object)
safe        java.util.Set: boolean addAll(java.util.Collection)
safe        java.util.Set: void clear()
safe        java.util.Set: boolean contains(java.lang.Object)
safe        java.util.Set: boolean containsAll(java.util.Collection)
safe        java.util.Set: boolean equals(java.lang.Object)
safe        java.util.Set: int hashCode()
safe        java.util.Set: boolean isEmpty()
safe        java.util.Set: java.util.Iterator iterator()
safe        java.util.Set: boolean remove(java.lang.Object)
safe        java.util.Set: boolean removeAll(java.util.Collection)
safe        java.util.Set: boolean retainAll(java.util.Collection)
safe        java.util.Set: int size()
safe        java.util.Set: java.lang.Object[] toArray()
safe        java.util.Set: java.lang.Object[] toArray(java.lang.Object[])

safe        java.util.SortedSet: java.util.Comparator comparator()
safe        java.util.SortedSet: java.lang.Object first()
safe        java.util.SortedSet: java.util.SortedSet headSet(java.lang.Object)
safe        java.util.SortedSet: java.lang.Object last()
safe        java.util.SortedSet: java.util.SortedSet subSet(java.lang.Object,java.lang.Object)
safe        java.util.SortedSet: java.util.SortedSet tailSet(java.lang.Object)

safe        java.util.SortedMap: java.util.Comparator comparator()
safe        java.util.SortedMap: java.lang.Object firstKey()
safe        java.util.SortedMap: java.util.SortedMap headMap(java.lang.Object)
safe        java.util.SortedMap: java.lang.Object lastKey()
safe        java.util.SortedMap: java.util.SortedMap subMap(java.lang.Object,java.lang.Object)
safe        java.util.SortedMap: java.util.SortedMap tailMap(java.lang.Object)

safe        java.util.Stack: void <init>()
safe        java.util.Stack: boolean empty()
safe        java.util.Stack: java.lang.Object peek()
safe        java.util.Stack: java.lang.Object pop()
safe        java.util.Stack: java.lang.Object push(java.lang.Object)
safe        java.util.Stack: int search(java.lang.Object)


safe        java.util.TreeMap: void <init>()
safe        java.util.TreeMap: void <init>(java.util.Map)
safe        java.util.TreeMap: void <init>(java.util.Comparator)
safe        java.util.TreeMap: void <init>(java.util.SortedMap)
safe        java.util.TreeMap: java.lang.Object clone()
safe        java.util.TreeMap: int size()
safe        java.util.TreeMap: boolean isEmpty()
safe        java.util.TreeMap: java.lang.Object get(java.lang.Object)
safe        java.util.TreeMap: boolean containsKey(java.lang.Object)
safe        java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)
safe        java.util.TreeMap: void clear()
safe        java.util.TreeMap: java.lang.Object remove(java.lang.Object)
safe        java.util.TreeMap: java.util.Map$Entry firstEntry()
safe        java.util.TreeMap: java.util.Map$Entry pollFirstEntry()
safe        java.util.TreeMap: java.lang.Object firstKey()
safe        java.util.TreeMap: java.util.Map$Entry lastEntry()
safe        java.util.TreeMap: java.util.Map$Entry pollLastEntry()
safe        java.util.TreeMap: java.lang.Object lastKey()
safe        java.util.TreeMap: java.util.Map$Entry lowerEntry(java.lang.Object)
safe        java.util.TreeMap: java.lang.Object lowerKey(java.lang.Object)
safe        java.util.TreeMap: java.util.Map$Entry floorEntry(java.lang.Object)
safe        java.util.TreeMap: java.lang.Object floorKey(java.lang.Object)
safe        java.util.TreeMap: java.util.Map$Entry ceilingEntry(java.lang.Object)
safe        java.util.TreeMap: java.lang.Object ceilingKey(java.lang.Object)
safe        java.util.TreeMap: java.util.Map$Entry higherEntry(java.lang.Object)
safe        java.util.TreeMap: java.lang.Object higherKey(java.lang.Object)
safe        java.util.TreeMap: java.util.Comparator comparator()
safe        java.util.TreeMap: java.util.Set entrySet()
safe        java.util.TreeMap: java.util.Set keySet()
safe        java.util.TreeMap: java.util.NavigableSet navigableKeySet()
safe        java.util.TreeMap: java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)
safe        java.util.TreeMap: java.util.SortedMap subMap(java.lang.Object,java.lang.Object)
safe        java.util.TreeMap: java.util.NavigableMap headMap(java.lang.Object,boolean)
safe        java.util.TreeMap: java.util.SortedMap headMap(java.lang.Object)
safe        java.util.TreeMap: java.util.NavigableMap tailMap(java.lang.Object,boolean)
safe        java.util.TreeMap: java.util.SortedMap tailMap(java.lang.Object)
safe        java.util.TreeMap: java.util.NavigableMap descendingMap()
safe        java.util.TreeMap: java.util.NavigableSet descendingKeySet()


safe        java.util.Vector: void <init>()
safe        java.util.Vector: void <init>(int)
safe        java.util.Vector: void <init>(int, int)
safe        java.util.Vector: void <init>(java.util.Collection)
safe        java.util.Vector: void add(int, java.lang.Object)
safe        java.util.Vector: boolean add(java.lang.Object)
safe        java.util.Vector: boolean addAll(int, java.util.Collection)
safe        java.util.Vector: boolean addAll(java.util.Collection)
safe        java.util.Vector: void addElement(java.lang.Object)
safe        java.util.Vector: int capacity()
safe        java.util.Vector: void clear()
safe        java.util.Vector: java.lang.Object clone()
safe        java.util.Vector: boolean contains(java.lang.Object)
safe        java.util.Vector: boolean containsAll(java.util.Collection)
safe        java.util.Vector: void copyInto(java.lang.Object[])
safe        java.util.Vector: java.lang.Object elementAt(int)
safe        java.util.Vector: java.util.Enumeration elements()
safe        java.util.Vector: void ensureCapacity(int)
safe        java.util.Vector: boolean equals(java.lang.Object)
safe        java.util.Vector: java.lang.Object firstElement()
safe        java.util.Vector: java.lang.Object get(int)
safe        java.util.Vector: int hashCode()
safe        java.util.Vector: int indexOf(java.lang.Object)
safe        java.util.Vector: int indexOf(java.lang.Object, int)
safe        java.util.Vector: void insertElementAt(java.lang.Object, int)
safe        java.util.Vector: boolean isEmpty()
safe        java.util.Vector: java.lang.Object lastElement()
safe        java.util.Vector: int lastIndexOf(java.lang.Object)
safe        java.util.Vector: int lastIndexOf(java.lang.Object, int)
safe        java.util.Vector: java.lang.Object remove(int)
safe        java.util.Vector: boolean remove(java.lang.Object)
safe        java.util.Vector: boolean removeAll(java.util.Collection)
safe        java.util.Vector: void removeAllElements()
safe        java.util.Vector: boolean removeElement(java.lang.Object)
safe        java.util.Vector: void removeElementAt(int)
safe        java.util.Vector: void removeRange(int, int)
safe        java.util.Vector: boolean retainAll(java.util.Collection)
safe        java.util.Vector: java.lang.Object set(int, java.lang.Object)
safe        java.util.Vector: void setElementAt(java.lang.Object, int)
safe        java.util.Vector: void setSize(int)
safe        java.util.Vector: int size()
safe        java.util.Vector: java.util.List subList(int, int)
safe        java.util.Vector: java.lang.Object[] toArray()
safe        java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])
safe        java.util.Vector: java.lang.String toString()
safe        java.util.Vector: void trimToSize()

# Using the Cipher class and all its different implementations should
# be safe.
safe        javax.crypto.Cipher: void <init>(javax.crypto.CipherSpi, java.security.Provider, java.lang.String)
safe        javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)
safe        javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String, java.lang.String)
safe        javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String, java.security.Provider)
safe        javax.crypto.Cipher: java.security.Provider getProvider()
safe        javax.crypto.Cipher: java.lang.String getAlgorithm()
safe        javax.crypto.Cipher: int getBlockSize()
safe        javax.crypto.Cipher: int getOutputSize(int)
safe        javax.crypto.Cipher: byte[] getIV()
safe        javax.crypto.Cipher: java.security.AlgorithmParameters getParameters()
safe        javax.crypto.Cipher: javax.crypto.ExemptionMechanism getExemptionMechanism()
safe        javax.crypto.Cipher: void init(int, java.security.Key)
safe        javax.crypto.Cipher: void init(int, java.security.Key, java.security.SecureRandom)
safe        javax.crypto.Cipher: void init(int, java.security.Key, java.security.spec.AlgorithmParameterSpec)
safe        javax.crypto.Cipher: void init(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom)
safe        javax.crypto.Cipher: void init(int, java.security.Key, java.security.AlgorithmParameters)
safe        javax.crypto.Cipher: void init(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom)
safe        javax.crypto.Cipher: void init(int, java.security.cert.Certificate)
safe        javax.crypto.Cipher: void init(int, java.security.cert.Certificate, java.security.SecureRandom)
safe        javax.crypto.Cipher: byte[] update(byte[])
safe        javax.crypto.Cipher: byte[] update(byte[], int, int)
safe        javax.crypto.Cipher: int update(byte[], int, int, byte[])
safe        javax.crypto.Cipher: int update(byte[], int, int, byte[], int)
safe        javax.crypto.Cipher: int update(java.nio.ByteBuffer, java.nio.ByteBuffer)
safe        javax.crypto.Cipher: byte[] doFinal()
safe        javax.crypto.Cipher: int doFinal(byte[], int)
safe        javax.crypto.Cipher: byte[] doFinal(byte[])
safe        javax.crypto.Cipher: byte[] doFinal(byte[], int, int)
safe        javax.crypto.Cipher: int doFinal(byte[], int, int, byte[])
safe        javax.crypto.Cipher: int doFinal(byte[], int, int, byte[], int)
safe        javax.crypto.Cipher: int doFinal(java.nio.ByteBuffer, java.nio.ByteBuffer)
safe        javax.crypto.Cipher: byte[] wrap(java.security.Key)
safe        javax.crypto.Cipher: java.security.Key unwrap(byte[], java.lang.String, int)
safe        javax.crypto.Cipher: int getMaxAllowedKeyLength(java.lang.String)
safe        javax.crypto.Cipher: java.security.spec.AlgorithmParameterSpec getMaxAllowedParameterSpec(java.lang.String)


spec        javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)
spec        javax.crypto.CipherInputStream: void <init>(java.io.InputStream)
spec        javax.crypto.CipherInputStream: int read()
spec        javax.crypto.CipherInputStream: int read(byte[],int,int)
spec        javax.crypto.CipherInputStream: long skip(long)
spec        javax.crypto.CipherInputStream: int available()
spec        javax.crypto.CipherInputStream: void close()
spec        javax.crypto.CipherInputStream: boolean markSupported()

spec        javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream,javax.crypto.Cipher)
spec        javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream)
spec        javax.crypto.CipherOutputStream: void write(int)
spec        javax.crypto.CipherOutputStream: void write(byte[],int,int)
spec        javax.crypto.CipherOutputStream: void flush()
spec        javax.crypto.CipherOutputStream: void close()

# Key agreement may involve multiple parties. Security critical
spec        javax.crypto.KeyAgreement: void <init>(javax.crypto.KeyAgreementSpi,java.security.Provider,java.lang.String)
spec        javax.crypto.KeyAgreement: java.lang.String getAlgorithm()
spec        javax.crypto.KeyAgreement: java.security.Provider getProvider()
spec        javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)
spec        javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String,java.lang.String)
spec        javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String,java.security.Provider)
spec        javax.crypto.KeyAgreement: void init(java.security.Key)
spec        javax.crypto.KeyAgreement: void init(java.security.Key,java.security.SecureRandom)
spec        javax.crypto.KeyAgreement: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)
spec        javax.crypto.KeyAgreement: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
spec        javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)
spec        javax.crypto.KeyAgreement: byte[] generateSecret()
spec        javax.crypto.KeyAgreement: int generateSecret(byte[],int)
spec        javax.crypto.KeyAgreement: javax.crypto.SecretKey generateSecret(java.lang.String)


spec        javax.crypto.interfaces.DHKey: javax.crypto.spec.DHParameterSpec getParams()
spec        javax.crypto.interfaces.PBEKey: int getIterationCount()
spec        javax.crypto.interfaces.PBEKey: byte[] getSalt()
spec        javax.crypto.interfaces.PBEKey: char[] getPassword()
spec        javax.crypto.interfaces.DHPrivateKey: java.math.BigInteger getX()
spec        javax.crypto.interfaces.DHPublicKey: java.math.BigInteger getY()


safe        javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)
safe        javax.crypto.NoSuchPaddingException: void <init>()


safe        javax.crypto.SecretKeyFactory: void <init>(javax.crypto.SecretKeyFactorySpi,java.security.Provider,java.lang.String)
safe        javax.crypto.SecretKeyFactory: java.lang.String getAlgorithm()
safe        javax.crypto.SecretKeyFactory: java.security.Provider getProvider()
safe        javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)
safe        javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)
safe        javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.security.Provider)
safe        javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)
safe        javax.crypto.SecretKeyFactory: java.security.spec.KeySpec getKeySpec(javax.crypto.SecretKey,java.lang.Class)
safe        javax.crypto.SecretKeyFactory: javax.crypto.SecretKey translateKey(javax.crypto.SecretKey)


safe        javax.crypto.spec.DESedeKeySpec: void <init>(byte[])
safe        javax.crypto.spec.DESedeKeySpec: void <init>(byte[], int)
safe        javax.crypto.spec.DESedeKeySpec: byte[] getKey()
safe        javax.crypto.spec.DESedeKeySpec: boolean isParityAdjusted(byte[], int)
safe        javax.crypto.spec.RC5ParameterSpec: void <init>(int, int, int)
safe        javax.crypto.spec.RC5ParameterSpec: void <init>(int, int, int, byte[])
safe        javax.crypto.spec.RC5ParameterSpec: void <init>(int, int, int, byte[], int)
safe        javax.crypto.spec.RC5ParameterSpec: int getVersion()
safe        javax.crypto.spec.RC5ParameterSpec: int getRounds()
safe        javax.crypto.spec.RC5ParameterSpec: int getWordSize()
safe        javax.crypto.spec.RC5ParameterSpec: byte[] getIV()
safe        javax.crypto.spec.RC5ParameterSpec: boolean equals(java.lang.Object)
safe        javax.crypto.spec.RC5ParameterSpec: int hashCode()
safe        javax.crypto.spec.SecretKeySpec: void <init>(byte[], java.lang.String)
safe        javax.crypto.spec.SecretKeySpec: void <init>(byte[], int, int, java.lang.String)
safe        javax.crypto.spec.SecretKeySpec: java.lang.String getAlgorithm()
safe        javax.crypto.spec.SecretKeySpec: java.lang.String getFormat()
safe        javax.crypto.spec.SecretKeySpec: byte[] getEncoded()
safe        javax.crypto.spec.SecretKeySpec: int hashCode()
safe        javax.crypto.spec.SecretKeySpec: boolean equals(java.lang.Object)
safe        javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger, java.math.BigInteger)
safe        javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger, java.math.BigInteger, int)
safe        javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()
safe        javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()
safe        javax.crypto.spec.DHParameterSpec: int getL()
safe        javax.crypto.spec.DHGenParameterSpec: void <init>(int, int)
safe        javax.crypto.spec.DHGenParameterSpec: int getPrimeSize()
safe        javax.crypto.spec.DHGenParameterSpec: int getExponentSize()
safe        javax.crypto.spec.DESKeySpec: void <init>(byte[])
safe        javax.crypto.spec.DESKeySpec: void <init>(byte[], int)
safe        javax.crypto.spec.DESKeySpec: byte[] getKey()
safe        javax.crypto.spec.DESKeySpec: boolean isParityAdjusted(byte[], int)
safe        javax.crypto.spec.DESKeySpec: boolean isWeak(byte[], int)
safe        javax.crypto.spec.PSource$PSpecified: void <init>(byte[])
safe        javax.crypto.spec.PSource$PSpecified: byte[] getValue()
safe        javax.crypto.spec.PSource$PSpecified: void <clinit>()
safe        javax.crypto.spec.IvParameterSpec: void <init>(byte[])
safe        javax.crypto.spec.IvParameterSpec: void <init>(byte[], int, int)
safe        javax.crypto.spec.IvParameterSpec: byte[] getIV()
safe        javax.crypto.spec.PBEKeySpec: void <init>(char[])
safe        javax.crypto.spec.PBEKeySpec: void <init>(char[], byte[], int, int)
safe        javax.crypto.spec.PBEKeySpec: void <init>(char[], byte[], int)
safe        javax.crypto.spec.PBEKeySpec: void clearPassword()
safe        javax.crypto.spec.PBEKeySpec: char[] getPassword()
safe        javax.crypto.spec.PBEKeySpec: byte[] getSalt()
safe        javax.crypto.spec.PBEKeySpec: int getIterationCount()
safe        javax.crypto.spec.PBEKeySpec: int getKeyLength()
safe        javax.crypto.spec.PBEParameterSpec: void <init>(byte[], int)
safe        javax.crypto.spec.PBEParameterSpec: byte[] getSalt()
safe        javax.crypto.spec.PBEParameterSpec: int getIterationCount()
safe        javax.crypto.spec.PSource: void <init>(java.lang.String)
safe        javax.crypto.spec.PSource: java.lang.String getAlgorithm()
safe        javax.crypto.spec.DHPrivateKeySpec: void <init>(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
safe        javax.crypto.spec.DHPrivateKeySpec: java.math.BigInteger getX()
safe        javax.crypto.spec.DHPrivateKeySpec: java.math.BigInteger getP()
safe        javax.crypto.spec.DHPrivateKeySpec: java.math.BigInteger getG()
safe        javax.crypto.spec.DHPublicKeySpec: void <init>(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
safe        javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getY()
safe        javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getP()
safe        javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getG()
safe        javax.crypto.spec.OAEPParameterSpec: void <init>(java.lang.String, java.lang.String, java.security.spec.AlgorithmParameterSpec, javax.crypto.spec.PSource)
safe        javax.crypto.spec.OAEPParameterSpec: java.lang.String getDigestAlgorithm()
safe        javax.crypto.spec.OAEPParameterSpec: java.lang.String getMGFAlgorithm()
safe        javax.crypto.spec.OAEPParameterSpec: java.security.spec.AlgorithmParameterSpec getMGFParameters()
safe        javax.crypto.spec.OAEPParameterSpec: javax.crypto.spec.PSource getPSource()
safe        javax.crypto.spec.OAEPParameterSpec: void <clinit>()
safe        javax.crypto.spec.RC2ParameterSpec: void <init>(int)
safe        javax.crypto.spec.RC2ParameterSpec: void <init>(int, byte[])
safe        javax.crypto.spec.RC2ParameterSpec: void <init>(int, byte[], int)
safe        javax.crypto.spec.RC2ParameterSpec: int getEffectiveKeyBits()
safe        javax.crypto.spec.RC2ParameterSpec: byte[] getIV()
safe        javax.crypto.spec.RC2ParameterSpec: boolean equals(java.lang.Object)
safe        javax.crypto.spec.RC2ParameterSpec: int hashCode()
safe        javax.crypto.ShortBufferException: void <init>(java.lang.String)
safe        javax.crypto.ShortBufferException: void <init>()
safe        javax.crypto.Mac: void <init>(javax.crypto.MacSpi, java.security.Provider, java.lang.String)
safe        javax.crypto.Mac: java.lang.String getAlgorithm()
safe        javax.crypto.Mac: java.security.Provider getProvider()
safe        javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)
safe        javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String, java.lang.String)
safe        javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String, java.security.Provider)
safe        javax.crypto.Mac: int getMacLength()
safe        javax.crypto.Mac: void init(java.security.Key, java.security.spec.AlgorithmParameterSpec)
safe        javax.crypto.Mac: void init(java.security.Key)
safe        javax.crypto.Mac: void update(byte)
safe        javax.crypto.Mac: void update(byte[], int, int)
safe        javax.crypto.Mac: void update(byte[])
safe        javax.crypto.Mac: void update(java.nio.ByteBuffer)
safe        javax.crypto.Mac: byte[] doFinal()
safe        javax.crypto.Mac: void doFinal(byte[], int)
safe        javax.crypto.Mac: byte[] doFinal(byte[])
safe        javax.crypto.Mac: void reset()
safe        javax.crypto.Mac: java.lang.Object clone()
safe        javax.crypto.SecretKeyFactorySpi: void <init>()
safe        javax.crypto.SecretKeyFactorySpi: javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)
safe        javax.crypto.SecretKeyFactorySpi: java.security.spec.KeySpec engineGetKeySpec(javax.crypto.SecretKey, java.lang.Class)
safe        javax.crypto.SecretKeyFactorySpi: javax.crypto.SecretKey engineTranslateKey(javax.crypto.SecretKey)
safe        javax.crypto.ExemptionMechanism: void <init>(javax.crypto.ExemptionMechanismSpi, java.security.Provider, java.lang.String)
safe        javax.crypto.ExemptionMechanism: java.lang.String getName()
safe        javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String)
safe        javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String, java.lang.String)
safe        javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String, java.security.Provider)
safe        javax.crypto.ExemptionMechanism: java.security.Provider getProvider()
safe        javax.crypto.ExemptionMechanism: boolean isCryptoAllowed(java.security.Key)
safe        javax.crypto.ExemptionMechanism: int getOutputSize(int)
safe        javax.crypto.ExemptionMechanism: void init(java.security.Key)
safe        javax.crypto.ExemptionMechanism: void init(java.security.Key, java.security.AlgorithmParameters)
safe        javax.crypto.ExemptionMechanism: void init(java.security.Key, java.security.spec.AlgorithmParameterSpec)
safe        javax.crypto.ExemptionMechanism: byte[] genExemptionBlob()
safe        javax.crypto.ExemptionMechanism: int genExemptionBlob(byte[])
safe        javax.crypto.ExemptionMechanism: int genExemptionBlob(byte[], int)
safe        javax.crypto.ExemptionMechanism: void finalize()
safe        javax.crypto.ExemptionMechanismException: void <init>(java.lang.String)
safe        javax.crypto.ExemptionMechanismException: void <init>()
safe        javax.crypto.EncryptedPrivateKeyInfo: void <init>(byte[])
safe        javax.crypto.EncryptedPrivateKeyInfo: void <init>(java.lang.String, byte[])
safe        javax.crypto.EncryptedPrivateKeyInfo: void <init>(java.security.AlgorithmParameters, byte[])
safe        javax.crypto.EncryptedPrivateKeyInfo: java.lang.String getAlgName()
safe        javax.crypto.EncryptedPrivateKeyInfo: java.security.AlgorithmParameters getAlgParameters()
safe        javax.crypto.EncryptedPrivateKeyInfo: byte[] getEncryptedData()
safe        javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(javax.crypto.Cipher)
safe        javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(java.security.Key)
safe        javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(java.security.Key, java.lang.String)
safe        javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(java.security.Key, java.security.Provider)
safe        javax.crypto.EncryptedPrivateKeyInfo: byte[] getEncoded()
safe        javax.crypto.NullCipher: void <init>()
safe        javax.crypto.IllegalBlockSizeException: void <init>(java.lang.String)
safe        javax.crypto.IllegalBlockSizeException: void <init>()

# not sure why this is there...
safe        junit.framework.TestCase: void <init>()
safe        org.apache.http.client.entity.UrlEncodedFormEntity: void <init>(java.util.List, java.lang.String)
safe        org.apache.http.client.entity.UrlEncodedFormEntity: void <init>(java.util.List)

#Adding as spec, for now:
spec        org.apache.http.client.HttpClient: org.apache.http.params.HttpParams getParams()
spec        org.apache.http.client.HttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()
spec        org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)
spec        org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext)
spec        org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest)
spec        org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)
spec        org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler)
spec        org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler, org.apache.http.protocol.HttpContext)
spec        org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler)
spec        org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler, org.apache.http.protocol.HttpContext)

safe        org.apache.http.client.methods.HttpEntityEnclosingRequestBase: void <init>()
safe        org.apache.http.client.methods.HttpEntityEnclosingRequestBase: org.apache.http.HttpEntity getEntity()
spec        org.apache.http.client.methods.HttpEntityEnclosingRequestBase: void setEntity(org.apache.http.HttpEntity)
safe        org.apache.http.client.methods.HttpEntityEnclosingRequestBase: boolean expectContinue()
safe        org.apache.http.client.methods.HttpEntityEnclosingRequestBase: java.lang.Object clone()

# Merely creating and querying an HttpDelete object, etc. seems safe:
safe        org.apache.http.client.methods.HttpDelete: void <init>()
safe        org.apache.http.client.methods.HttpDelete: void <init>(java.net.URI)
safe        org.apache.http.client.methods.HttpDelete: void <init>(java.lang.String)
safe        org.apache.http.client.methods.HttpDelete: java.lang.String getMethod()
safe        org.apache.http.client.methods.HttpGet: void <init>()
safe        org.apache.http.client.methods.HttpGet: void <init>(java.net.URI)
safe        org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)
safe        org.apache.http.client.methods.HttpGet: java.lang.String getMethod()
safe        org.apache.http.client.methods.HttpHead: void <init>()
safe        org.apache.http.client.methods.HttpHead: void <init>(java.net.URI)
safe        org.apache.http.client.methods.HttpHead: void <init>(java.lang.String)
safe        org.apache.http.client.methods.HttpHead: java.lang.String getMethod()
safe        org.apache.http.client.methods.HttpOptions: void <init>()
safe        org.apache.http.client.methods.HttpOptions: void <init>(java.net.URI)
safe        org.apache.http.client.methods.HttpOptions: void <init>(java.lang.String)
safe        org.apache.http.client.methods.HttpOptions: java.lang.String getMethod()
safe        org.apache.http.client.methods.HttpOptions: java.util.Set getAllowedMethods(org.apache.http.HttpResponse)
safe        org.apache.http.client.methods.HttpPost: void <init>()
safe        org.apache.http.client.methods.HttpPost: void <init>(java.net.URI)
safe        org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)
safe        org.apache.http.client.methods.HttpPost: java.lang.String getMethod()
safe        org.apache.http.client.methods.HttpPut: void <init>()
safe        org.apache.http.client.methods.HttpPut: void <init>(java.net.URI)
safe        org.apache.http.client.methods.HttpPut: void <init>(java.lang.String)
safe        org.apache.http.client.methods.HttpPut: java.lang.String getMethod()
safe        org.apache.http.client.methods.HttpTrace: void <init>()
safe        org.apache.http.client.methods.HttpTrace: void <init>(java.net.URI)
safe        org.apache.http.client.methods.HttpTrace: void <init>(java.lang.String)
safe        org.apache.http.client.methods.HttpTrace: java.lang.String getMethod()

safe        org.apache.http.client.methods.HttpUriRequest: java.lang.String getMethod()
safe        org.apache.http.client.methods.HttpUriRequest: java.net.URI getURI()
spec        org.apache.http.client.methods.HttpUriRequest: void abort()
safe        org.apache.http.client.methods.HttpUriRequest: boolean isAborted()

#Does this need to be modeled?
spec        org.apache.http.client.ResponseHandler: java.lang.Object handleResponse(org.apache.http.HttpResponse)

#spec for now:
spec        org.apache.http.HttpEntity: boolean isRepeatable()
spec        org.apache.http.HttpEntity: boolean isChunked()
spec        org.apache.http.HttpEntity: long getContentLength()
spec        org.apache.http.HttpEntity: org.apache.http.Header getContentType()
spec        org.apache.http.HttpEntity: org.apache.http.Header getContentEncoding()
spec        org.apache.http.HttpEntity: java.io.InputStream getContent()
spec        org.apache.http.HttpEntity: void writeTo(java.io.OutputStream)
spec        org.apache.http.HttpEntity: boolean isStreaming()
spec        org.apache.http.HttpEntity: void consumeContent()

safe        org.apache.http.HttpEntityEnclosingRequest: boolean expectContinue()
safe        org.apache.http.HttpEntityEnclosingRequest: void setEntity(org.apache.http.HttpEntity)
safe        org.apache.http.HttpEntityEnclosingRequest: org.apache.http.HttpEntity getEntity()

#Spec for now
spec        org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()
spec        org.apache.http.HttpResponse: void setStatusLine(org.apache.http.StatusLine)
spec        org.apache.http.HttpResponse: void setStatusLine(org.apache.http.ProtocolVersion, int)
spec        org.apache.http.HttpResponse: void setStatusLine(org.apache.http.ProtocolVersion, int, java.lang.String)
spec        org.apache.http.HttpResponse: void setStatusCode(int)
spec        org.apache.http.HttpResponse: void setReasonPhrase(java.lang.String)
spec        org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()
spec        org.apache.http.HttpResponse: void setEntity(org.apache.http.HttpEntity)
spec        org.apache.http.HttpResponse: java.util.Locale getLocale()
spec        org.apache.http.HttpResponse: void setLocale(java.util.Locale)


spec        org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)
spec        org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext)
spec        org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest)
spec        org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)

#Do any of these need to be modeled?
spec       org.apache.http.impl.client.BasicResponseHandler: void <init>()
#These are the same except for the return type!
spec       org.apache.http.impl.client.BasicResponseHandler: java.lang.String handleResponse(org.apache.http.HttpResponse)
spec       org.apache.http.impl.client.BasicResponseHandler: java.lang.Object handleResponse(org.apache.http.HttpResponse)

safe        org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)
safe        org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)
safe        org.apache.http.impl.client.DefaultHttpClient: void <init>()

safe        org.apache.http.impl.client.EntityEnclosingRequestWrapper: void <init>(org.apache.http.HttpEntityEnclosingRequest)
safe        org.apache.http.impl.client.EntityEnclosingRequestWrapper: org.apache.http.HttpEntity getEntity()
safe        org.apache.http.impl.client.EntityEnclosingRequestWrapper: void setEntity(org.apache.http.HttpEntity)
safe        org.apache.http.impl.client.EntityEnclosingRequestWrapper: boolean expectContinue()
safe        org.apache.http.impl.client.EntityEnclosingRequestWrapper: boolean isRepeatable()

safe        org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String, java.lang.String)
safe        org.apache.http.message.BasicNameValuePair: java.lang.String getName()
safe        org.apache.http.message.BasicNameValuePair: java.lang.String getValue()
safe        org.apache.http.message.BasicNameValuePair: java.lang.String toString()
safe        org.apache.http.message.BasicNameValuePair: boolean equals(java.lang.Object)
safe        org.apache.http.message.BasicNameValuePair: int hashCode()
safe        org.apache.http.message.BasicNameValuePair: java.lang.Object clone()

# Purely computational:
safe        org.apache.http.util.CharArrayBuffer: void <init>(int)
safe        org.apache.http.util.CharArrayBuffer: void append(char[], int, int)
safe        org.apache.http.util.CharArrayBuffer: void append(java.lang.String)
safe        org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.CharArrayBuffer, int, int)
safe        org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.CharArrayBuffer)
safe        org.apache.http.util.CharArrayBuffer: void append(char)
safe        org.apache.http.util.CharArrayBuffer: void append(byte[], int, int)
safe        org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.ByteArrayBuffer, int, int)
safe        org.apache.http.util.CharArrayBuffer: void append(java.lang.Object)
safe        org.apache.http.util.CharArrayBuffer: void clear()
safe        org.apache.http.util.CharArrayBuffer: char[] toCharArray()
safe        org.apache.http.util.CharArrayBuffer: char charAt(int)
safe        org.apache.http.util.CharArrayBuffer: char[] buffer()
safe        org.apache.http.util.CharArrayBuffer: int capacity()
safe        org.apache.http.util.CharArrayBuffer: int length()
safe        org.apache.http.util.CharArrayBuffer: void ensureCapacity(int)
safe        org.apache.http.util.CharArrayBuffer: void setLength(int)
safe        org.apache.http.util.CharArrayBuffer: boolean isEmpty()
safe        org.apache.http.util.CharArrayBuffer: boolean isFull()
safe        org.apache.http.util.CharArrayBuffer: int indexOf(int, int, int)
safe        org.apache.http.util.CharArrayBuffer: int indexOf(int)
safe        org.apache.http.util.CharArrayBuffer: java.lang.String substring(int, int)
safe        org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int, int)
safe        org.apache.http.util.CharArrayBuffer: java.lang.String toString()

safe        org.json.JSONArray: int length()
safe        org.json.JSONArray: java.lang.String toString()
safe        org.json.JSONArray: org.json.JSONObject getJSONObject(int)
safe        org.json.JSONArray: void <init>(java.lang.String)

safe        org.json.JSONObject: boolean getBoolean(java.lang.String)
safe        org.json.JSONObject: boolean has(java.lang.String)
safe        org.json.JSONObject: boolean optBoolean(java.lang.String)
safe        org.json.JSONObject: int getInt(java.lang.String)
safe        org.json.JSONObject: java.lang.Object get(java.lang.String)
safe        org.json.JSONObject: java.lang.Object opt(java.lang.String)
safe        org.json.JSONObject: java.lang.String getString(java.lang.String)
safe        org.json.JSONObject: long getLong(java.lang.String)
safe        org.json.JSONObject: org.json.JSONObject optJSONObject(java.lang.String)
safe        org.json.JSONObject: void <init>()
safe        org.json.JSONObject: void <init>(java.lang.String)

# Parsing XML should be safe:
safe        org.xmlpull.v1.XmlPullParser: void setFeature(java.lang.String, boolean)
safe        org.xmlpull.v1.XmlPullParser: boolean getFeature(java.lang.String)
safe        org.xmlpull.v1.XmlPullParser: void setProperty(java.lang.String, java.lang.Object)
safe        org.xmlpull.v1.XmlPullParser: java.lang.Object getProperty(java.lang.String)
safe        org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)
safe        org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream, java.lang.String)
safe        org.xmlpull.v1.XmlPullParser: java.lang.String getInputEncoding()
safe        org.xmlpull.v1.XmlPullParser: void defineEntityReplacementText(java.lang.String, java.lang.String)
safe        org.xmlpull.v1.XmlPullParser: int getNamespaceCount(int)
safe        org.xmlpull.v1.XmlPullParser: java.lang.String getNamespacePrefix(int)
safe        org.xmlpull.v1.XmlPullParser: java.lang.String getNamespaceUri(int)
safe        org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace(java.lang.String)
safe        org.xmlpull.v1.XmlPullParser: int getDepth()
safe        org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()
safe        org.xmlpull.v1.XmlPullParser: int getLineNumber()
safe        org.xmlpull.v1.XmlPullParser: int getColumnNumber()
safe        org.xmlpull.v1.XmlPullParser: boolean isWhitespace()
safe        org.xmlpull.v1.XmlPullParser: java.lang.String getText()
safe        org.xmlpull.v1.XmlPullParser: char[] getTextCharacters(int[])
safe        org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace()
safe        org.xmlpull.v1.XmlPullParser: java.lang.String getName()
safe        org.xmlpull.v1.XmlPullParser: java.lang.String getPrefix()
safe        org.xmlpull.v1.XmlPullParser: boolean isEmptyElementTag()
safe        org.xmlpull.v1.XmlPullParser: int getAttributeCount()
safe        org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeNamespace(int)
safe        org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeName(int)
safe        org.xmlpull.v1.XmlPullParser: java.lang.String getAttributePrefix(int)
safe        org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeType(int)
safe        org.xmlpull.v1.XmlPullParser: boolean isAttributeDefault(int)
safe        org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(int)
safe        org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String, java.lang.String)
safe        org.xmlpull.v1.XmlPullParser: int getEventType()
safe        org.xmlpull.v1.XmlPullParser: int next()
safe        org.xmlpull.v1.XmlPullParser: int nextToken()
safe        org.xmlpull.v1.XmlPullParser: void require(int, java.lang.String, java.lang.String)
safe        org.xmlpull.v1.XmlPullParser: java.lang.String nextText()
safe        org.xmlpull.v1.XmlPullParser: int nextTag()

safe        org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)
safe        org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)
safe        org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()
safe        org.xmlpull.v1.XmlPullParserException: int getLineNumber()
safe        org.xmlpull.v1.XmlPullParserException: int getColumnNumber()
safe        org.xmlpull.v1.XmlPullParserException: void printStackTrace()

# our calls
safe        edu.mit.csail.droidsafe.DroidSafeCalls: void setText(android.widget.TextView, java.lang.CharSequence)
safe        edu.mit.csail.droidsafe.DroidSafeCalls: void setText(android.widget.TextView, java.lang.CharSequence, android.widget.TextView$BufferType)
safe        edu.mit.csail.droidsafe.DroidSafeCalls: void setText(android.widget.TextView, char[], int, int)
safe        edu.mit.csail.droidsafe.DroidSafeCalls: void setText(android.widget.TextView, int)
safe        edu.mit.csail.droidsafe.DroidSafeCalls: void setText(android.widget.TextView, int, android.widget.TextView$BufferType)
spec        edu.mit.csail.droidsafe.DroidSafeCalls: void setupAlarmService(android.content.Context, java.lang.Class, long)
spec        edu.mit.csail.droidsafe.DroidSafeCalls: android.database.Cursor queryURI(android.content.Context,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)
spec        edu.mit.csail.droidsafe.DroidSafeCalls: void setOnClickRunActivity(android.content.Context,android.widget.RemoteViews,int,java.lang.Class)
spec        edu.mit.csail.droidsafe.DroidSafeCalls: void startActivity(android.content.Context,java.lang.Class)

# new calls added by Jeff for Flashlight
safe        android.hardware.Camera: android.hardware.Camera$Parameters getParameters()
safe        android.hardware.Camera: void release()
spec        android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)
# this doesn't do anything, but return a handle for the camera.  All it
# can show is that whether or not a camera is present
safe        android.hardware.Camera: android.hardware.Camera open()
# not clear this shouldn't just be safe.  You can easily change the execution
# of any other task by just setting a shared variable.
spec        android.os.AsyncTask: boolean cancel(boolean)
safe        android.widget.CompoundButton: boolean isChecked()
safe        java.util.Random: int nextInt(int)
safe        java.util.Random: void <init>()
safe        android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)

spec        android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)
spec        android.widget.ToggleButton: void setChecked(boolean)

# should be safe to check to see if a task is cancelled (should always do it)
safe        android.os.AsyncTask: boolean isCancelled()
# also should be safe to publish progress (should always do it)
safe        android.os.AsyncTask: void publishProgress(java.lang.Object[])

safe 	    android.widget.ArrayAdapter: void <init>(android.content.Context, int)
safe	    android.widget.ArrayAdapter: void <init>(android.content.Context, int, int)
safe	    android.widget.ArrayAdapter: void <init>(android.content.Context, int, java.lang.Object[])
safe	    android.widget.ArrayAdapter: void <init>(android.content.Context, int, int, java.lang.Object[])
safe	    android.widget.ArrayAdapter: void <init>(android.content.Context, int, java.util.List)
safe	    android.widget.ArrayAdapter: void <init>(android.content.Context, int, int, java.util.List)
safe	    android.widget.ArrayAdapter: void add(java.lang.Object)
safe	    android.widget.ArrayAdapter: void addAll(java.util.Collection)
safe	    android.widget.ArrayAdapter: void addAll(java.lang.Object[])
safe	    android.widget.ArrayAdapter: void insert(java.lang.Object, int)
safe	    android.widget.ArrayAdapter: void remove(java.lang.Object)
safe	    android.widget.ArrayAdapter: void clear()
safe	    android.widget.ArrayAdapter: void sort(java.util.Comparator)
safe	    android.widget.ArrayAdapter: void notifyDataSetChanged()
safe	    android.widget.ArrayAdapter: void setNotifyOnChange(boolean)
safe	    android.widget.ArrayAdapter: android.content.Context getContext()
safe	    android.widget.ArrayAdapter: int getCount()
safe	    android.widget.ArrayAdapter: java.lang.Object getItem(int)
safe	    android.widget.ArrayAdapter: int getPosition(java.lang.Object)
safe	    android.widget.ArrayAdapter: long getItemId(int)
safe	    android.widget.ArrayAdapter: android.view.View getView(int, android.view.View, android.view.ViewGroup)
safe	    android.widget.ArrayAdapter: void setDropDownViewResource(int)
safe	    android.widget.ArrayAdapter: android.view.View getDropDownView(int, android.view.View, android.view.ViewGroup)
safe	    android.widget.ArrayAdapter: android.widget.ArrayAdapter createFromResource(android.content.Context, int, int)
safe	    android.widget.ArrayAdapter: android.widget.Filter getFilter()

safe	    java.text.SimpleDateFormat: void <init>()
safe	    java.text.SimpleDateFormat: void <init>(java.lang.String)
safe	    java.text.SimpleDateFormat: void <init>(java.lang.String, java.text.DateFormatSymbols)
safe	    java.text.SimpleDateFormat: void <init>(java.lang.String, java.util.Locale)
safe	    java.text.SimpleDateFormat: void applyLocalizedPattern(java.lang.String)
safe	    java.text.SimpleDateFormat: void applyPattern(java.lang.String)
safe	    java.text.SimpleDateFormat: java.lang.Object clone()
safe	    java.text.SimpleDateFormat: boolean equals(java.lang.Object)
safe	    java.text.SimpleDateFormat: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)
safe	    java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date, java.lang.StringBuffer, java.text.FieldPosition)
safe 	    java.text.SimpleDateFormat: java.util.Date get2DigitYearStart()
safe	    java.text.SimpleDateFormat: java.text.DateFormatSymbols getDateFormatSymbols()
safe	    java.text.SimpleDateFormat: int hashCode()
safe	    java.text.SimpleDateFormat: java.util.Date parse(java.lang.String, java.text.ParsePosition)
safe	    java.text.SimpleDateFormat: void set2DigitYearStart(java.util.Date)
safe	    java.text.SimpleDateFormat: void setDateFormatSymbols(java.text.DateFormatSymbols)
safe	    java.text.SimpleDateFormat: java.lang.String toLocalizedPattern()
safe	    java.text.SimpleDateFormat: java.lang.String toPattern()

safe	    java.text.Format: void <init>()
safe	    java.text.Format: java.lang.Object clone()
safe	    java.text.Format: java.lang.String format(java.lang.Object)
safe	    java.text.Format: java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)
safe	    java.text.Format: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)
safe	    java.text.Format: java.lang.Object parseObject(java.lang.String)
safe	    java.text.Format: java.lang.Object parseObject(java.lang.String, java.text.ParsePosition)

#
# New calls for SuperSudoku (jhp)
#
# These seem to be simply UI building calls, we didn't want to support these
# yet, but they are here.  Possibly could be considered safe.
spec        android.view.ViewGroup: void addView(android.view.View)
spec        android.widget.Button: void <init>(android.content.Context)
spec        android.widget.EditText: void <init>(android.content.Context)
spec        android.widget.RelativeLayout: void <init>(android.content.Context)
spec        android.widget.RelativeLayout$LayoutParams: void <init>(int,int)
spec        android.widget.RelativeLayout$LayoutParams: void addRule(int,int)

# this just creates an array of the specified type, seems safe
safe        java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])
# tree sets are safe
safe        java.util.TreeSet: boolean add(java.lang.Object)
safe        java.util.TreeSet: void <init>()

#
# New calls for SysMon (jhp)
#
spec        android.widget.AdapterView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)
spec        android.os.SystemClock: long elapsedRealtime()
spec        android.os.Handler: void removeCallbacks(java.lang.Runnable)
spec        android.widget.CompoundButton: void setChecked(boolean)
spec        android.widget.CompoundButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)
safe        android.content.ContextWrapper: android.content.Context getApplicationContext()
# The account manager controls information about the accounts (such as email accounts or other
# places where contacts can be stored).  The first is just the manager (and arguably safe), but the
# second contains information on how to authenticate the accounts themselves.  Pretty dangerous
# stuff
spec        android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)
spec        android.accounts.AccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()
# Gets information abou the application packages that are installed
spec        android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()
# Gets the image for a package
spec        android.content.pm.PackageManager: android.graphics.drawable.Drawable getDrawable(java.lang.String,int,android.content.pm.ApplicationInfo)
spec        android.content.pm.PackageManager: java.lang.CharSequence getText(java.lang.String,int,android.content.pm.ApplicationInfo)
# inflates a view from a resource id
spec        android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)
# set the displayed image to the specified image
spec        android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)

# none of these seem that dangerous, but also seem relatively unusual
# and might as well appear in the spec
spec        android.os.Environment: boolean isExternalStorageRemovable()
spec        android.os.Environment: java.io.File getDataDirectory()
spec        android.os.Environment: java.io.File getDownloadCacheDirectory()
spec        android.os.Environment: java.io.File getRootDirectory()
# information about a file system
spec        android.os.StatFs: int getAvailableBlocks()
spec        android.os.StatFs: int getBlockCount()
spec        android.os.StatFs: int getBlockSize()
spec        android.os.StatFs: void <init>(java.lang.String)

# Adds something to the current view
spec        android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)
safe        android.widget.LinearLayout: void <init>(android.content.Context)

# this is completely safe, but its good to make it visible because it MUST be
# performed in onPause and onStop
spec        android.media.MediaPlayer: void release()

# various calls that setup the mediaplayer.  Arguably at least some of these
# could be safe (what can you do with a player?)
spec        android.media.MediaPlayer: void <init>()
spec        android.media.MediaPlayer: void prepare()
spec        android.media.MediaPlayer: void setDataSource(java.lang.String)
spec        android.media.MediaPlayer: void start()

spec        android.speech.SpeechRecognizer: void startListening(android.content.Intent)
spec        android.speech.SpeechRecognizer: android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context)
spec        android.speech.SpeechRecognizer: void setRecognitionListener(android.speech.RecognitionListener)
spec        android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)

# Information about various connectivity
spec        android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()
spec        android.net.NetworkInfo: android.net.NetworkInfo$State getState()
spec        android.net.NetworkInfo: boolean isRoaming()
spec        android.net.NetworkInfo: java.lang.String getExtraInfo()
spec        android.net.NetworkInfo: java.lang.String getTypeName()
spec        android.net.TrafficStats: long getTotalRxBytes()
spec        android.net.TrafficStats: long getTotalRxPackets()
spec        android.net.TrafficStats: long getTotalTxBytes()
spec        android.net.TrafficStats: long getTotalTxPackets()

# vibrate for the specified number of milliseconds
spec        android.os.Vibrator: void vibrate(long)

spec        android.widget.ListView: boolean dispatchKeyEvent(android.view.KeyEvent)
spec        android.view.ViewGroup: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)
spec        android.widget.AdapterView: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
spec        android.view.ViewGroup: boolean dispatchTouchEvent(android.view.MotionEvent)
spec        android.view.ViewGroup: boolean dispatchTrackballEvent(android.view.MotionEvent)
spec        android.widget.AbsListView: boolean onGenericMotionEvent(android.view.MotionEvent)
spec        android.widget.ListView: boolean onKeyDown(int,android.view.KeyEvent)
spec        android.widget.ListView: boolean onKeyMultiple(int,int,android.view.KeyEvent)
spec        android.widget.ListView: boolean onKeyUp(int,android.view.KeyEvent)
spec        android.widget.AbsListView: boolean onTouchEvent(android.view.MotionEvent)
spec        android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)
spec        android.provider.ContactsContract$CommonDataKinds$Email: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)
spec        android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)
spec        android.widget.Spinner: void setAdapter(android.widget.SpinnerAdapter)
spec        android.widget.Spinner: void setPrompt(java.lang.CharSequence)
spec        android.accounts.AccountManager: void removeOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener)
spec        android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation build()
spec        android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValue(java.lang.String,java.lang.Object)
spec        android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValueBackReference(java.lang.String,int)
spec        android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newInsert(android.net.Uri)
spec        android.content.ContentResolver: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)
spec        android.widget.AdapterView: int getSelectedItemPosition()
spec        android.content.ContextWrapper: java.lang.String getPackageName()
spec        android.net.VpnService: android.content.Intent prepare(android.content.Context)
spec        android.widget.AdapterView: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)

spec        android.content.BroadcastReceiver: void abortBroadcast()
spec        android.os.Bundle: java.lang.Object get(java.lang.String)
spec        android.os.Vibrator: boolean hasVibrator()
spec        android.speech.SpeechRecognizer: boolean isRecognitionAvailable(android.content.Context)
spec        android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])
spec        android.telephony.SmsMessage: java.lang.String getMessageBody()
safe        android.widget.LinearLayout$LayoutParams: void <init>(int,int,float)
spec        java.lang.Thread: void interrupt()

spec        android.net.VpnService: void <init>()
spec        android.net.wifi.WifiInfo: java.lang.String getSSID()
spec        android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()

# asks for a list of activities that can respond to the specified Intent
spec        android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)

# variety of io/calls.  Only the writes themselves seemingly need to be spec
safe        java.nio.Buffer: java.nio.Buffer clear()
safe        java.nio.Buffer: java.nio.Buffer flip()
safe        java.nio.Buffer: java.nio.Buffer limit(int)
safe        java.nio.Buffer: java.nio.Buffer position(int)
safe        java.nio.ByteBuffer: byte get(int)
safe        java.nio.ByteBuffer: byte[] array()
safe        java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)
safe        java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])
safe        java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)
spec        java.nio.channels.DatagramChannel: int read(java.nio.ByteBuffer)
spec        java.nio.channels.DatagramChannel: int write(java.nio.ByteBuffer)
spec        java.nio.channels.DatagramChannel: java.net.DatagramSocket socket()
spec        java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel connect(java.net.SocketAddress)
spec        java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()
spec        java.nio.channels.SelectableChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)
spec        java.nio.channels.spi.AbstractInterruptibleChannel: void close()

spec        android.net.VpnService$Builder: android.net.VpnService$Builder addAddress(java.lang.String,int)
spec        android.net.VpnService$Builder: android.net.VpnService$Builder addDnsServer(java.lang.String)
spec        android.net.VpnService$Builder: android.net.VpnService$Builder addRoute(java.lang.String,int)
spec        android.net.VpnService$Builder: android.net.VpnService$Builder addSearchDomain(java.lang.String)
spec        android.net.VpnService$Builder: android.net.VpnService$Builder setConfigureIntent(android.app.PendingIntent)
spec        android.net.VpnService$Builder: android.net.VpnService$Builder setMtu(int)
spec        android.net.VpnService$Builder: android.net.VpnService$Builder setSession(java.lang.String)

spec        android.net.VpnService$Builder: android.os.ParcelFileDescriptor establish()
spec        android.net.VpnService$Builder: void <init>(android.net.VpnService)
spec        android.net.VpnService: boolean protect(java.net.DatagramSocket)
spec        android.os.Handler: boolean sendEmptyMessage(int)
spec        android.os.Handler: void <init>(android.os.Handler$Callback)
spec        android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()
spec        android.os.ParcelFileDescriptor: void close()
spec        android.widget.AbsSpinner: void setAdapter(android.widget.SpinnerAdapter)

# com.p.morsecode
spec        android.graphics.Color: int parseColor(java.lang.String)
spec        android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)
spec        android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)
spec        android.view.Window: void setFlags(int,int)
spec        android.widget.AdapterView: java.lang.Object getItemAtPosition(int)

# CountdownTimer
spec        android.app.KeyguardManager$KeyguardLock: void disableKeyguard()
spec        android.app.KeyguardManager$KeyguardLock: void reenableKeyguard()
spec        android.app.KeyguardManager: android.app.KeyguardManager$KeyguardLock newKeyguardLock(java.lang.String)
spec        android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()
spec        android.app.NotificationManager: void cancelAll()
spec        android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)
spec        android.content.IntentFilter: void setPriority(int)
spec        android.net.Uri: android.net.Uri parse(java.lang.String)
spec        android.os.Handler: android.os.Message obtainMessage(int)
spec        android.os.Handler: boolean sendMessage(android.os.Message)
spec        android.os.Handler: void removeMessages(int)
spec        android.os.PowerManager$WakeLock: void acquire()
spec        android.os.PowerManager$WakeLock: void release()
spec        android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)
spec        android.view.Menu: android.view.MenuItem add(int,int,int,int)
spec        android.view.MenuItem: android.view.MenuItem setIcon(int)
spec        android.widget.AdapterView: java.lang.Object getSelectedItem()
spec        android.widget.AdapterView: void setSelection(int)
spec        android.widget.LinearLayout: void setOrientation(int)
