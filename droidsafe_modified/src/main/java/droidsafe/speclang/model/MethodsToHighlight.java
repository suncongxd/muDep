/*
 * Copyright (C) 2015,  Massachusetts Institute of Technology
 * 
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * 
 * Please email droidsafe@lists.csail.mit.edu if you need additional
 * information or have any questions.
 */

package droidsafe.speclang.model;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This class keeps a set of of methods that should be highlighted in the outline display.
 * 
 * Add the soot signature of any method you want to highlight to the MethodsToHighlighArray below.
 * 
 * @author becker
 * 
 */
public class MethodsToHighlight {

  /**
   * Standard logger.
   */
  @SuppressWarnings("unused")
  private static final Logger logger = LoggerFactory.getLogger(MethodsToHighlight.class);

  /** set of classes for quick lookups */
  private static Set<String> methodsToHighlight;
  



  /**
   * Return true if the soot method signature is in the list of methods to highlight.
   */
  public static boolean shouldHighlightMethd(String sootMethodSignature) {
    return methodsToHighlight.contains(sootMethodSignature);
  }

  /**
   * Return true if the soot method signature is in the list of methods to highlight.
   */
  public static boolean shouldHighlightMethd(MethodModel method) {
    boolean result = methodsToHighlight.contains(method.getSootMethodSignature());
    //logger.debug("Size of methods to highlight " + methodsToHighlight.size()
    //    + " soot method signature = " + method.getSootMethodSignature() + "\n contains " + result);
    return result;
  }

  /** The list of method signature in soot format that we want to highlight in the outline */
  private static final String[] METHODS_TO_HIGHLIGHT_BAN = {
      "<android.app.Instrumentation: android.app.Activity newActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)>",
      "<android.app.Instrumentation: android.app.Application newApplication(java.lang.ClassLoader,java.lang.String,android.content.Context)>",
      "<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader)>",
      "<dalvik.system.DexPathList: java.util.ArrayList splitDexPath(java.lang.String)>",
      "<dalvik.system.DexPathList: java.util.ArrayList splitPaths(java.lang.String,java.lang.String,boolean)>",
      "<java.lang.BootClassLoader: java.lang.BootClassLoader getInstance()>",
      "<android.os.Parcel: android.os.Bundle readBundle(java.lang.ClassLoader)>",
      "<dalvik.system.BaseDexClassLoader: java.lang.Class findClass(java.lang.String)>",
      "<dalvik.system.DexFile: java.lang.Class defineClass(java.lang.String,java.lang.ClassLoader,int)>",
      "<dalvik.system.DexFile: java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader)>",
      "<dalvik.system.DexFile: java.lang.Class loadClassBinaryName(java.lang.String,java.lang.ClassLoader)>",
      "<dalvik.system.DexPathList: java.lang.Class findClass(java.lang.String)>",
      "<dalvik.system.VMStack: java.lang.Class getStackClass2()>",
      "<java.lang.Class: java.lang.Class classForName(java.lang.String,boolean,java.lang.ClassLoader)>",
      "<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>",
      "<java.lang.Class: java.lang.Class forName(java.lang.String)>",
      "<java.lang.VMClassLoader: java.lang.Class defineClass(java.lang.ClassLoader,java.lang.String,byte[],int,int)>",
      "<java.lang.VMClassLoader: java.lang.Class defineClass(java.lang.ClassLoader,byte[],int,int)>",
      "<java.lang.VMClassLoader: java.lang.Class findLoadedClass(java.lang.ClassLoader,java.lang.String)>",
      "<java.lang.reflect.Proxy: java.lang.Class generateProxy(java.lang.String,java.lang.Class[],java.lang.ClassLoader)>",
      "<android.app.ApplicationLoaders: java.lang.ClassLoader getClassLoader(java.lang.String,java.lang.String,java.lang.ClassLoader)>",
      "<android.app.ContextImpl: java.lang.ClassLoader getClassLoader()>",
      "<android.app.LoadedApk: java.lang.ClassLoader getClassLoader()>",
      "<android.content.Context: java.lang.ClassLoader getClassLoader()>",
      "<android.content.ContextWrapper: java.lang.ClassLoader getClassLoader()>",
      "<android.os.Bundle: java.lang.ClassLoader getClassLoader()>",
      "<android.test.InstrumentationTestRunner: java.lang.ClassLoader getLoader()>",
      "<android.test.mock.MockContext: java.lang.ClassLoader getClassLoader()>",
      "<dalvik.system.VMStack: java.lang.ClassLoader getCallingClassLoader()>",
      "<java.io.ObjectInputStream: java.lang.ClassLoader getClosestUserClassLoader()>",
      "<java.lang.Class: java.lang.ClassLoader getClassLoader()>",
      "<java.lang.Class: java.lang.ClassLoader getClassLoader(java.lang.Class)>",
      "<java.lang.Class: java.lang.ClassLoader getClassLoaderImpl()>",
      "<java.lang.ClassLoader: java.lang.ClassLoader createSystemClassLoader()>",
      "<java.lang.ClassLoader: java.lang.ClassLoader getParent()>",
      "<java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>",
      "<java.lang.SecurityManager: java.lang.ClassLoader currentClassLoader()>",
      "<org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()>",
      "<org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>",
      "<org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoader()>",
      "<org.xml.sax.helpers.NewInstance: java.lang.ClassLoader getClassLoader()>",
      "<android.test.PackageInfoSources: android.test.ClassPathPackageInfoSource forClassPath(java.lang.ClassLoader)>",
      "<java.lang.Class: java.lang.reflect.Constructor getEnclosingConstructor()>",
      "<dalvik.system.DexFile: dalvik.system.DexFile loadDex(java.lang.String,java.lang.String,int)>",
      "<dalvik.system.DexPathList: dalvik.system.DexFile loadDexFile(java.io.File,java.io.File)>",
      "<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance(java.lang.String,java.lang.ClassLoader)>",
      "<dalvik.system.BaseDexClassLoader: java.util.Enumeration findResources(java.lang.String)>",
      "<dalvik.system.DexFile: java.util.Enumeration entries()>",
      "<dalvik.system.DexPathList: java.util.Enumeration findResources(java.lang.String)>",
      "<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.Class,java.lang.String)>",
      "<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>",
      "<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>",
      "<java.lang.Class: java.lang.reflect.Field getPublicFieldRecursive(java.lang.String)>",
      "<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>",
      "<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields(java.lang.Class,boolean)>",
      "<java.lang.Class: java.lang.reflect.Field[] getFields()>",
      "<dalvik.system.DexPathList: java.io.File[] splitLibraryPath(java.lang.String)>",
      "<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)>",
      "<dalvik.system.profiler.SamplingProfiler: HprofData getHprofData()>",
      "<dalvik.system.profiler.HprofData: List getThreadHistory()>",
      "<android.app.ActivityThread: LoadedApk getPackageInfo(ApplicationInfo,CompatibilityInfo,java.lang.ClassLoader,boolean,boolean)>",
      "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getCachedFactory(java.lang.ClassLoader)>",
      "<com.android.internal.telephony.MccTable: com.android.internal.telephony.MccTable$MccEntry entryForMcc(int)>",
      "<java.lang.Class: java.lang.reflect.Member getConstructorOrMethod(java.lang.String,boolean,boolean,java.lang.Class[])>",
      "<java.lang.Class: java.lang.reflect.Member getDeclaredConstructorOrMethod(java.lang.Class,java.lang.String,java.lang.Class[])>",
      "<java.lang.Class: java.lang.reflect.Member getPublicConstructorOrMethodRecursive(java.lang.String,java.lang.Class[])>",
      "<java.lang.Class: java.lang.reflect.Method getEnclosingMethod()>",
      "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
      "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class,boolean)>",
      "<java.lang.Class: java.lang.reflect.Method[] getMethods()>",
      "<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String, java.lang.Object[])>",
      "<android.os.Parcel: java.lang.Object readValue(java.lang.ClassLoader)>",
      "<dalvik.system.VMRuntime: java.lang.Object newNonMovableArray(java.lang.Class,int)>",
      "<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],InvocationHandler)>",
      "<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>",
      "<org.xml.sax.helpers.NewInstance: java.lang.Object newInstance(java.lang.ClassLoader,java.lang.String)>",
      "<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)>",
      "<dalvik.system.BaseDexClassLoader: java.lang.Package getPackage(java.lang.String)>",
      "<android.os.Parcel: android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader)>",
      "<dalvik.system.BlockGuard: dalvik.system.BlockGuard.Policy getThreadPolicy()>",
      "<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>",
      "<dalvik.system.CloseGuard: dalvik.system.CloseGuard$Reporter getReporter()>",
      "<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance(java.lang.String,java.lang.ClassLoader)>",
      "<java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>",
      "<dalvik.system.profiler.HprofData: java.util.Set getSamples()>",
      "<dalvik.system.SocketTagger: dalvik.system.SocketTagger get()>",
      "<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader)>",
      "<dalvik.system.VMStack: java.lang.StackTraceElement[] getThreadStackTrace(java.lang.Thread)>",
      "<dalvik.system.profiler.HprofData$StackTrace: java.lang.StackTraceElement[] getStackFrames()>",
      "<dalvik.system.profiler.PortableThreadSampler: java.lang.StackTraceElement[] getStackTrace(java.lang.Thread)>",
      "<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getVoiceMailNumber()>",
      "<dalvik.system.BaseDexClassLoader: java.lang.String findLibrary(java.lang.String)>",
      "<dalvik.system.BaseDexClassLoader: java.lang.String toString()>",
      "<dalvik.system.BlockGuard$BlockGuardPolicyException: java.lang.String getMessage()>",
      "<dalvik.system.DalvikLogging: java.lang.String loggerNameToTag(java.lang.String)>",
      "<dalvik.system.DexFile$DFEnum: java.lang.String nextElement()>",
      "<dalvik.system.DexFile: java.lang.String getName()>",
      "<dalvik.system.DexPathList: java.lang.String findLibrary(java.lang.String)>",
      "<dalvik.system.DexPathList: java.lang.String optimizedPathFor(java.io.File,java.io.File)>",
      "<dalvik.system.VMRuntime: java.lang.String bootClassPath()>",
      "<dalvik.system.VMRuntime: java.lang.String classPath()>",
      "<dalvik.system.VMRuntime: java.lang.String vmVersion()>",
      "<dalvik.system.profiler.BinaryHprof$Tag: java.lang.String checkSize(int)>",
      "<dalvik.system.profiler.BinaryHprof: java.lang.String readMagic(DataInputStream)>",
      "<dalvik.system.profiler.HprofData$Sample: java.lang.String toString()>",
      "<dalvik.system.profiler.HprofData$StackTrace: java.lang.String toString()>",
      "<dalvik.system.profiler.HprofData$ThreadEvent: java.lang.String toString()>",
      "<org.apache.harmony.security.x509.X509PublicKey: java.lang.String toString()>",
      "<dalvik.system.DexFile: java.lang.String[] getClassNameList(int)>",
      "<dalvik.system.VMDebug: java.lang.String[] getVmFeatureList()>",
      "<dalvik.system.VMRuntime: java.lang.String[] properties()>",
      "<dalvik.system.profiler.HprofData$ThreadEvent: dalvik.system.profiler.HprofData$ThreadEvent end(int)>",
      "<dalvik.system.profiler.HprofData$ThreadEvent: dalvik.system.profiler.HprofData$ThreadEvent start(int,int,java.lang.String,java.lang.String,java.lang.String)>",
      "<javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance(java.lang.String,java.lang.ClassLoader)>",
      "<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>",
      "<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>",
      "<dalvik.system.BaseDexClassLoader: java.net.URL findResource(java.lang.String)>",
      "<dalvik.system.DexPathList$Element: java.net.URL findResource(java.lang.String)>",
      "<dalvik.system.DexPathList: java.net.URL findResource(java.lang.String)>",
      "<dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>",
      "<org.apache.http.util.VersionInfo: VersionInfo fromMap(java.lang.String,Map,java.lang.ClassLoader)>",
      "<org.apache.http.util.VersionInfo: VersionInfo[] loadVersionInfo(java.lang.String[],java.lang.ClassLoader)>",
      "<org.xml.sax.helpers.XMLReaderFactory: XMLReader loadClass(java.lang.ClassLoader,java.lang.String)>",
      "<android.content.ContentProviderNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>",
      "<com.android.internal.telephony.gsm.GsmConnection: boolean update(com.android.internal.telephony.DriverCall)>",
      "<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean isConnected()>",
      "<dalvik.bytecode.OpcodeInfo: boolean isInvoke(int)>",
      "<dalvik.system.DexFile$DFEnum: boolean hasMoreElements()>",
      "<dalvik.system.DexFile: boolean isDexOptNeeded(java.lang.String)>",
      "<dalvik.system.VMDebug: boolean cacheRegisterMap(java.lang.String)>",
      "<dalvik.system.VMDebug: boolean isDebuggerConnected()>",
      "<dalvik.system.VMDebug: boolean isDebuggingEnabled()>",
      "<dalvik.system.VMDebug: boolean isMethodTracingActive()>",
      "<dalvik.system.VMRuntime: boolean isDebuggerActive()>",
      "<dalvik.system.VMRuntime: boolean trackExternalAllocation(long)>",
      "<dalvik.system.profiler.HprofData$Sample: boolean equals(java.lang.Object)>",
      "<dalvik.system.profiler.HprofData$StackTrace: boolean equals(java.lang.Object)>",
      "<dalvik.system.profiler.HprofData$ThreadEvent: boolean equal(java.lang.Object,java.lang.Object)>",
      "<dalvik.system.profiler.HprofData$ThreadEvent: boolean equals(java.lang.Object)>",
      "<java.lang.Object: boolean getTaintBoolean()>",
      "<java.lang.Object: byte getTaintByte()>",
      "<java.lang.Object: char getTaintChar()>",
      "<java.lang.Object: double getTaintDouble()>",
      "<dalvik.system.VMRuntime: float getTargetHeapUtilization()>",
      "<dalvik.system.VMRuntime: float setTargetHeapUtilization(float)>",
      "<java.lang.Object: float getTaintFloat()>",
      "<dalvik.system.BlockGuard$BlockGuardPolicyException: int getPolicy()>",
      "<dalvik.system.BlockGuard$BlockGuardPolicyException: int getPolicyViolation()>",
      "<dalvik.system.DexFile: int openDexFile(java.lang.String,java.lang.String,int)>",
      "<dalvik.system.DexFile: int openDexFile(byte[])>",
      "<dalvik.system.VMDebug: int getAllocCount(int)>",
      "<dalvik.system.VMDebug: int getLoadedClassCount()>",
      "<dalvik.system.VMDebug: int setAllocationLimit(int)>",
      "<dalvik.system.VMDebug: int setGlobalAllocationLimit(int)>",
      "<dalvik.system.VMStack: int fillStackTraceElements(java.lang.Thread,java.lang.StackTraceElement[])>",
      "<dalvik.system.Zygote: int fork()>",
      "<dalvik.system.Zygote: int forkAndSpecialize(int,int,int[],boolean,int[][])>",
      "<dalvik.system.Zygote: int forkAndSpecialize(int,int,int[],int,int[][])>",
      "<dalvik.system.Zygote: int forkSystemServer(int,int,int[],boolean,int[][])>",
      "<dalvik.system.Zygote: int forkSystemServer(int,int,int[],int,int[][],long,long)>",
      "<dalvik.system.Zygote: int nativeFork()>",
      "<dalvik.system.Zygote: int nativeForkAndSpecialize(int,int,int[],int,int[][])>",
      "<dalvik.system.Zygote: int nativeForkSystemServer(int,int,int[],int,int[][],long,long)>",
      "<dalvik.system.profiler.BinaryHprofWriter: int writeLoadClass(java.lang.String)>",
      "<dalvik.system.profiler.BinaryHprofWriter: int writeStackFrame(java.lang.StackTraceElement)>",
      "<dalvik.system.profiler.BinaryHprofWriter: int writeString(java.lang.String)>",
      "<dalvik.system.profiler.HprofData$Sample: int hashCode()>",
      "<dalvik.system.profiler.HprofData$StackTrace: int getThreadId()>",
      "<dalvik.system.profiler.HprofData$StackTrace: int hashCode()>",
      "<dalvik.system.profiler.HprofData$ThreadEvent: int hashCode()>",
      "<dalvik.system.profiler.HprofData$ThreadEvent: int hashCode(java.lang.Object)>",
      "<dalvik.system.profiler.HprofData: int getDepth()>",
      "<dalvik.system.profiler.HprofData: int getFlags()>",
      "<org.bouncycastle.math.ec.IntArray: int bitLength()>",
      "<org.ccil.cowan.tagsoup.Parser: int lookupEntity(char[],int,int)>",
      "<dalvik.system.VMDebug: long countInstancesOfClass(java.lang.Class,boolean)>",
      "<dalvik.system.VMDebug: long lastDebuggerActivity()>",
      "<dalvik.system.VMDebug: long threadCpuTimeNanos()>",
      "<dalvik.system.VMRuntime: long addressOf(java.lang.Object)>",
      "<dalvik.system.VMRuntime: long getExternalBytesAllocated()>",
      "<dalvik.system.VMRuntime: long getMinimumHeapSize()>",
      "<dalvik.system.VMRuntime: long setMinimumHeapSize(long)>",
      "<dalvik.system.profiler.HprofData: long getStartMillis()>",
      "<java.lang.Object: long getTaintLong()>",
      "<java.lang.Object: short getTaintShort()>",
      "<android.app.Activity: void performCreate(android.os.Bundle,android.content.Context)>",
      "<android.app.ApplicationPackageManager: void handlePackageBroadcast(int,java.lang.String[],boolean)>",
      "<android.app.Fragment$SavedState: void <init>(android.os.Parcel,java.lang.ClassLoader)>",
      "<android.app.LoadedApk: void <init>(ActivityThread,ApplicationInfo,CompatibilityInfo,ActivityThread,java.lang.ClassLoader,boolean,boolean)>",
      "<android.content.BroadcastReceiver$PendingResult: void setExtrasClassLoader(java.lang.ClassLoader)>",
      "<android.content.Intent: void setExtrasClassLoader(java.lang.ClassLoader)>",
      "<android.content.SyncManager: void dumpRecentHistory(PrintWriter)>",
      "<android.hardware.Sensor: void <init>(int)>",
      "<android.hardware.SensorManager: void <init>()>",
      "<android.os.Bundle: void <init>(java.lang.ClassLoader)>",
      "<android.os.Bundle: void <init>(int)>",
      "<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)>",
      "<android.os.Parcel: void readArrayInternal(java.lang.Object[],int,java.lang.ClassLoader)>",
      "<android.os.Parcel: void readList(List,java.lang.ClassLoader)>",
      "<android.os.Parcel: void readListInternal(List,int,java.lang.ClassLoader)>",
      "<android.os.Parcel: void readMap(Map,java.lang.ClassLoader)>",
      "<android.os.Parcel: void readMapInternal(Map,int,java.lang.ClassLoader)>",
      "<android.os.Parcel: void readSparseArrayInternal(SparseArray,int,java.lang.ClassLoader)>",
      "<android.support.v4.app.Fragment$SavedState: void <init>(android.os.Parcel,java.lang.ClassLoader)>",
      "<android.support.v4.app.FragmentPagerAdapter: void restoreState(Parcelable,java.lang.ClassLoader)>",
      "<android.support.v4.view.PagerAdapter: void restoreState(Parcelable,java.lang.ClassLoader)>",
      "<android.support.v4.view.ViewPager$SavedState: void <init>(android.os.Parcel,java.lang.ClassLoader)>",
      "<android.test.ClassPathPackageInfoSource: void setClassLoader(java.lang.ClassLoader)>",
      "<android.test.suitebuilder.TestGrouping: void setClassLoader(java.lang.ClassLoader)>",
      "<android.test.suitebuilder.TestSuiteBuilder: void <init>(java.lang.String,java.lang.ClassLoader)>",
      "<com.android.internal.os.ZygoteInit: void invokeStaticMain(java.lang.ClassLoader,java.lang.String,java.lang.String[])>",
      "<com.android.internal.telephony.ATResponseParser: void nextTok()>",
      "<com.android.internal.telephony.ATResponseParser: void skipPrefix()>",
      "<com.android.internal.telephony.DataConnectionTracker$DataRoamingSettingObserver: void onChange(boolean)>",
      "<com.android.internal.telephony.cat.LanguageResponseData: void format(java.io.ByteArrayOutputStream)>",
      "<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimCdmaHomeLoaded: void onRecordLoaded(android.os.AsyncResult)>",
      "<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void fetchSimRecords()>",
      "<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onVoiceCallEnded()>",
      "<com.android.internal.telephony.gsm.SmsMessage: void parseSmsDeliver(PduParser,int)>",
      "<com.android.internal.telephony.sip.SipPhone: void setOutgoingCallerIdDisplay(int,java.os.Message)>",
      "<com.android.internal.view.menu.MenuItemImpl: void setShowAsAction(int)>",
      "<dalvik.bytecode.OpcodeInfo: void <init>()>",
      "<dalvik.system.BaseDexClassLoader: void <init>(java.lang.String,java.io.File,java.lang.String,java.lang.ClassLoader)>",
      "<dalvik.system.BlockGuard$BlockGuardPolicyException: void <init>(int,int)>",
      "<dalvik.system.BlockGuard$BlockGuardPolicyException: void <init>(int,int,java.lang.String)>",
      "<dalvik.system.BlockGuard: void <init>()>",
      "<dalvik.system.BlockGuard: void setThreadPolicy(dalvik.system.BlockGuard.Policy)>",
      "<dalvik.system.CloseGuard$DefaultReporter: void <init>()>",
      "<dalvik.system.CloseGuard$DefaultReporter: void report(java.lang.String,java.lang.Throwable)>",
      "<dalvik.system.CloseGuard: void <init>()>",
      "<dalvik.system.CloseGuard: void close()>",
      "<dalvik.system.CloseGuard: void open(java.lang.String)>",
      "<dalvik.system.CloseGuard: void setEnabled(boolean)>",
      "<dalvik.system.CloseGuard: void setReporter(Reporter)>",
      "<dalvik.system.CloseGuard: void warnIfOpen()>",
      "<dalvik.system.DalvikLogging: void <init>()>",
      "<dalvik.system.DexClassLoader: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.ClassLoader)>",
      "<dalvik.system.DexFile: void <init>(java.io.File)>",
      "<dalvik.system.DexFile: void <init>(java.lang.String)>",
      "<dalvik.system.DexFile: void <init>(java.lang.String,java.lang.String,int)>",
      "<dalvik.system.DexFile: void close()>",
      "<dalvik.system.DexFile: void closeDexFile(int)>",
      "<dalvik.system.DexFile: void finalize()>",
      "<dalvik.system.DexPathList$Element: void <init>(java.io.File,ZipFile,dalvik.system.DexFile)>",
      "<dalvik.system.DexPathList: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.io.File)>",
      "<dalvik.system.DexPathList: void splitAndAdd(java.lang.String,boolean,java.util.ArrayList)>",
      "<dalvik.system.PathClassLoader: void <init>(java.lang.String,java.lang.ClassLoader)>",
      "<dalvik.system.PathClassLoader: void <init>(java.lang.String,java.lang.String,java.lang.ClassLoader)>",
      "<dalvik.system.SocketTagger: void <init>()>",
      "<dalvik.system.SocketTagger: void set(dalvik.system.SocketTagger)>",
      "<dalvik.system.SocketTagger: void tag(java.io.FileDescriptor)>",
      "<dalvik.system.SocketTagger: void tag(Socket)>",
      "<dalvik.system.SocketTagger: void untag(java.io.FileDescriptor)>",
      "<dalvik.system.SocketTagger: void untag(Socket)>",
      "<dalvik.system.VMDebug: void <init>()>",
      "<dalvik.system.VMDebug: void crash()>",
      "<dalvik.system.VMDebug: void dumpHprofData(java.lang.String)>",
      "<dalvik.system.VMDebug: void dumpHprofData(java.lang.String,java.io.FileDescriptor)>",
      "<dalvik.system.VMDebug: void dumpHprofDataDdms()>",
      "<dalvik.system.VMDebug: void dumpReferenceTables()>",
      "<dalvik.system.VMDebug: void getInstructionCount(int[])>",
      "<dalvik.system.VMDebug: void infopoint(int)>",
      "<dalvik.system.VMDebug: void printLoadedClasses(int)>",
      "<dalvik.system.VMDebug: void resetAllocCount(int)>",
      "<dalvik.system.VMDebug: void resetInstructionCount()>",
      "<dalvik.system.VMDebug: void startAllocCounting()>",
      "<dalvik.system.VMDebug: void startClassPrep()>",
      "<dalvik.system.VMDebug: void startEmulatorTracing()>",
      "<dalvik.system.VMDebug: void startGC()>",
      "<dalvik.system.VMDebug: void startInstructionCounting()>",
      "<dalvik.system.VMDebug: void startMethodTracing()>",
      "<dalvik.system.VMDebug: void startMethodTracing(java.lang.String,java.io.FileDescriptor,int,int)>",
      "<dalvik.system.VMDebug: void startMethodTracing(java.lang.String,int,int)>",
      "<dalvik.system.VMDebug: void startMethodTracingDdms(int,int)>",
      "<dalvik.system.VMDebug: void startMethodTracingNative(java.lang.String,java.io.FileDescriptor,int,int)>",
      "<dalvik.system.VMDebug: void stopAllocCounting()>",
      "<dalvik.system.VMDebug: void stopEmulatorTracing()>",
      "<dalvik.system.VMDebug: void stopInstructionCounting()>",
      "<dalvik.system.VMDebug: void stopMethodTracing()>",
      "<dalvik.system.VMRuntime: void <init>()>",
      "<dalvik.system.VMRuntime: void clearGrowthLimit()>",
      "<dalvik.system.VMRuntime: void disableJitCompilation()>",
      "<dalvik.system.VMRuntime: void gcSoftReferences()>",
      "<dalvik.system.VMRuntime: void nativeSetTargetHeapUtilization(float)>",
      "<dalvik.system.VMRuntime: void runFinalizationSync()>",
      "<dalvik.system.VMRuntime: void setTargetSdkVersion(int)>",
      "<dalvik.system.VMRuntime: void startJitCompilation()>",
      "<dalvik.system.VMRuntime: void trackExternalFree(long)>",
      "<dalvik.system.VMStack: void <init>()>",
      "<dalvik.system.Zygote: void <init>()>",
      "<dalvik.system.Zygote: void appendQuotedShellArgs(java.lang.StringBuilder,java.lang.String[])>",
      "<dalvik.system.Zygote: void execShell(java.lang.String)>",
      "<dalvik.system.Zygote: void nativeExecShell(java.lang.String)>",
      "<dalvik.system.Zygote: void postFork()>",
      "<dalvik.system.Zygote: void preFork()>",
      "<dalvik.system.Zygote: void waitUntilAllThreadsStopped()>",
      "<dalvik.system.profiler.BinaryHprof: void <init>()>",
      "<dalvik.system.profiler.BinaryHprofWriter: void <init>(HprofData,OutputStream)>",
      "<dalvik.system.profiler.BinaryHprofWriter: void write()>",
      "<dalvik.system.profiler.BinaryHprofWriter: void write(HprofData,OutputStream)>",
      "<dalvik.system.profiler.BinaryHprofWriter: void writeControlSettings(int,int)>",
      "<dalvik.system.profiler.BinaryHprofWriter: void writeCpuSamples(int,Set)>",
      "<dalvik.system.profiler.BinaryHprofWriter: void writeHeader(long)>",
      "<dalvik.system.profiler.BinaryHprofWriter: void writeId(int)>",
      "<dalvik.system.profiler.BinaryHprofWriter: void writeRecordHeader(Tag,int,int)>",
      "<dalvik.system.profiler.BinaryHprofWriter: void writeStackTrace(dalvik.system.profiler.HprofData$StackTrace)>",
      "<dalvik.system.profiler.BinaryHprofWriter: void writeStartThread(dalvik.system.profiler.HprofData$ThreadEvent)>",
      "<dalvik.system.profiler.BinaryHprofWriter: void writeStopThread(dalvik.system.profiler.HprofData$ThreadEvent)>",
      "<dalvik.system.profiler.BinaryHprofWriter: void writeThreadEvent(dalvik.system.profiler.HprofData$ThreadEvent)>",
      "<dalvik.system.profiler.HprofData$Sample: void <init>(dalvik.system.profiler.HprofData$StackTrace,int)>",
      "<dalvik.system.profiler.HprofData$StackTrace: void <init>()>",
      "<dalvik.system.profiler.HprofData$StackTrace: void <init>(int,int,java.lang.StackTraceElement[])>",
      "<dalvik.system.profiler.HprofData$ThreadEvent: void <init>(ThreadEventType,int)>",
      "<dalvik.system.profiler.HprofData$ThreadEvent: void <init>(ThreadEventType,int,int,java.lang.String,java.lang.String,java.lang.String)>",
      "<dalvik.system.profiler.HprofData: void <init>(Map)>",
      "<dalvik.system.profiler.HprofData: void addStackTrace(dalvik.system.profiler.HprofData$StackTrace,int[])>",
      "<dalvik.system.profiler.HprofData: void addThreadEvent(ThreadEvent)>",
      "<dalvik.system.profiler.HprofData: void setDepth(int)>",
      "<dalvik.system.profiler.HprofData: void setFlags(int)>",
      "<dalvik.system.profiler.HprofData: void setStartMillis(long)>",
      "<dalvik.system.profiler.PortableThreadSampler: void <init>()>",
      "<dalvik.system.profiler.PortableThreadSampler: void setDepth(int)>",
      "<dalvik.system.profiler.SamplingProfiler$Sampler: void addEndThread(java.lang.Thread)>",
      "<dalvik.system.profiler.SamplingProfiler$Sampler: void addStartThread(java.lang.Thread)>",
      "<dalvik.system.profiler.SamplingProfiler$Sampler: void recordStackTrace(java.lang.Thread,java.lang.StackTraceElement[])>",
      "<dalvik.system.profiler.SamplingProfiler$Sampler: void run()>",
      "<dalvik.system.profiler.SamplingProfiler$Sampler: void updateThreadHistory(java.lang.Thread[],java.lang.Thread[])>",
      "<dalvik.system.profiler.SamplingProfiler$ThreadGroupThreadSet: void <init>(java.lang.ThreadGroup)>",
      "<dalvik.system.profiler.SamplingProfiler$ThreadGroupThreadSet: void resize()>",
      "<dalvik.system.profiler.SamplingProfiler: void <init>(int,ThreadSet)>",
      "<dalvik.system.profiler.SamplingProfiler: void shutdown()>",
      "<dalvik.system.profiler.SamplingProfiler: void start(int)>",
      "<dalvik.system.profiler.SamplingProfiler: void stop()>",
      "<java.io.ObjectStreamField: void resolve(java.lang.ClassLoader)>",
      "<java.lang.Class: void <init>()>",
      "<java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>",
      "<java.lang.ClassLoader: void <init>(java.lang.ClassLoader,boolean)>",
      "<java.util.ServiceLoader: void <init>(java.lang.Class,java.lang.ClassLoader)>",
      "<org.apache.commons.logging.LogFactory: void cacheFactory(java.lang.ClassLoader,org.apache.commons.logging.LogFactory.LogFactory)>",
      "<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>",
      "<org.apache.commons.logging.LogFactory: void release(java.lang.ClassLoader)>",
      "<org.apache.harmony.dalvik.ddmc.DdmVmInternal: void <init>()>",
      "<org.apache.harmony.luni.lang.reflect.GenericSignatureParser: void <init>(java.lang.ClassLoader)>",
      "<org.apache.harmony.luni.lang.reflect.ImplForType: void <init>(ImplForType,java.lang.String,ListOfTypes,java.lang.ClassLoader)>",
      "<org.bouncycastle.jce.provider.JCEECPublicKey: void populateFromPubKeyInfo(SubjectPublicKeyInfo)>",
      "<org.bouncycastle.jce.provider.ProviderUtil: void setParameter(java.lang.String,java.lang.Object)>",
      "<org.bouncycastle.math.ec.IntArray: void addShifted(org.bouncycastle.math.ec.IntArray,int)>",
      "<org.ccil.cowan.tagsoup.Parser: void pi(char[],int,int)>"
  };

  private static final String[] METHODS_TO_HIGHLIGHT_SPEC = {
      "<org.bouncycastle.asn1.x500.style.BCStyle: org.bouncycastle.asn1.ASN1Encodable stringToValue(org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String)>",
      "<org.bouncycastle.asn1.x500.style.IETFUtils: org.bouncycastle.asn1.ASN1Encodable valueFromHexString(java.lang.String,int)>",
      "<org.bouncycastle.x509.X509Attribute: org.bouncycastle.asn1.ASN1Encodable[] getValues()>",
      "<org.bouncycastle.asn1.x500.style.IETFUtils: org.bouncycastle.asn1.ASN1Object decodeObject(java.lang.String)>",
      "<java.security.AccessController: java.security.AccessControlContext getContext()>",
      "<android.app.Activity: android.app.ActionBar getActionBar()>",
      "<android.app.Activity: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>",
      "<android.app.Activity: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)>",
      "<android.app.ActivityThread: android.app.Activity performLaunchActivity(android.app.ActivityThread$ActivityClientRecord,android.content.Intent)>",
      "<android.app.ActivityThread: android.app.Activity startActivityNow(android.app.Activity,java.lang.String,android.content.Intent,android.content.pm.ActivityInfo,android.os.IBinder,android.os.Bundle,android.app.Activity$NonConfigurationInstances)>",
      "<android.app.Instrumentation: android.app.Activity newActivity(java.lang.Class,android.content.Context,android.os.IBinder,android.app.Application,android.content.Intent,android.content.pm.ActivityInfo,java.lang.CharSequence,android.app.Activity,java.lang.String,java.lang.Object)>",
      "<android.app.Instrumentation: android.app.Activity startActivitySync(android.content.Intent)>",
      "<android.content.pm.PackageParser: android.content.pm.PackageParser$Activity parseActivity(android.content.pm.PackageParser$Package,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,java.lang.String[],boolean,boolean)>",
      "<android.app.ActivityThread: android.content.pm.ActivityInfo resolveActivityInfo(android.content.Intent)>",
      "<android.app.ApplicationPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)>",
      "<android.app.ApplicationPackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)>",
      "<android.content.Intent: android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager,int)>",
      "<android.app.Instrumentation: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent,int)>",
      "<android.app.Instrumentation: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Fragment,android.content.Intent,int)>",
      "<android.net.http.HttpsConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)>",
      "<android.view.animation.AnimationUtils: android.view.animation.Animation createAnimationFromXml(android.content.Context,org.xmlpull.v1.XmlPullParser)>",
      "<android.view.animation.AnimationUtils: android.view.animation.Animation createAnimationFromXml(android.content.Context,org.xmlpull.v1.XmlPullParser,android.view.animation.AnimationSet,android.util.AttributeSet)>",
      "<android.animation.Animator: android.animation.Animator clone()>",
      "<java.lang.reflect.Method: java.lang.annotation.Annotation[] getDeclaredAnnotations()>",
      "<com.android.internal.telephony.ApnContext: com.android.internal.telephony.ApnSetting getNextWaitingApn()>",
      "<android.app.LoadedApk: android.app.Application makeApplication(boolean,android.app.Instrumentation)>",
      "<android.app.ContextImpl: android.content.pm.ApplicationInfo getApplicationInfo()>",
      "<android.content.pm.PackageParser: android.content.pm.ApplicationInfo generateApplicationInfo(android.content.pm.PackageParser$Package,int)>",
      "<android.content.Intent: java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String)>",
      "<android.content.Intent: java.util.ArrayList getIntegerArrayListExtra(java.lang.String)>",
      "<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)>",
      "<android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)>",
      "<android.webkit.WebViewDatabase: java.util.ArrayList getFormData(java.lang.String,java.lang.String)>",
      "<android.content.ContentProvider$Transport: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>",
      "<android.content.ContentProvider$Transport: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>",
      "<android.content.ContentProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>",
      "<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>",
      "<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>",
      "<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)>",
      "<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>",
      "<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>",
      "<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)>",
      "<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)>",
      "<android.content.res.Resources: android.content.res.AssetFileDescriptor openRawResourceFd(int)>",
      "<android.app.ContextImpl: android.content.res.AssetManager getAssets()>",
      "<android.content.ContextWrapper: android.content.res.AssetManager getAssets()>",
      "<org.bouncycastle.asn1.x509.AttCertIssuer: org.bouncycastle.asn1.x509.AttCertIssuer getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)>",
      "<org.bouncycastle.asn1.x509.AttributeCertificate: org.bouncycastle.asn1.x509.AttributeCertificate getInstance(java.lang.Object)>",
      "<libcore.icu.NativeDecimalFormat: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)>",
      "<android.content.SyncStorageEngine: android.content.SyncStorageEngine$AuthorityInfo parseAuthority(org.xmlpull.v1.XmlPullParser,int)>",
      "<android.app.BackStackState: android.app.BackStackRecord instantiate(android.app.FragmentManagerImpl)>",
      "<android.support.v4.app.BackStackState: android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl)>",
      "<org.bouncycastle.crypto.signers.ECDSASigner: java.math.BigInteger calculateE(java.math.BigInteger,byte[])>",
      "<android.app.ActivityManager$TaskThumbnails: android.graphics.Bitmap getSubThumbnail(int)>",
      "<android.media.ThumbnailUtils: android.graphics.Bitmap makeBitmap(int,int,android.net.Uri,android.content.ContentResolver,android.os.ParcelFileDescriptor,android.graphics.BitmapFactory$Options)>",
      "<android.media.ThumbnailUtils: android.graphics.Bitmap transform(android.graphics.Matrix,android.graphics.Bitmap,int,int,int)>",
      "<android.provider.Contacts$People: android.graphics.Bitmap loadContactPhoto(android.content.Context,android.net.Uri,int,android.graphics.BitmapFactory$Options)>",
      "<android.provider.MediaStore$Images$Media: android.graphics.Bitmap getBitmap(android.content.ContentResolver,android.net.Uri)>",
      "<android.provider.MediaStore$InternalThumbnails: android.graphics.Bitmap getMiniThumbFromFile(android.database.Cursor,android.net.Uri,android.content.ContentResolver,android.graphics.BitmapFactory$Options)>",
      "<android.provider.MediaStore$InternalThumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,long,int,android.graphics.BitmapFactory$Options,android.net.Uri,boolean)>",
      "<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createInsecureRfcommSocket(int)>",
      "<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createInsecureRfcommSocketToServiceRecord(java.util.UUID)>",
      "<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocket(int)>",
      "<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID)>",
      "<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createScoSocket()>",
      "<android.bluetooth.BluetoothServerSocket: android.bluetooth.BluetoothSocket accept()>",
      "<android.bluetooth.BluetoothServerSocket: android.bluetooth.BluetoothSocket accept(int)>",
      "<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothSocket accept(int)>",
      "<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothSocket acceptNative(int)>",
      "<android.webkit.BrowserFrame: android.webkit.BrowserFrame createWindow(boolean,boolean)>",
      "<android.webkit.CallbackProxy: android.webkit.BrowserFrame createWindow(boolean,boolean)>",
      "<android.app.Notification$Builder: android.app.Notification$Builder setSound(android.net.Uri)>",
      "<android.app.Notification$Builder: android.app.Notification$Builder setSound(android.net.Uri,int)>",
      "<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newAssertQuery(android.net.Uri)>",
      "<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newDelete(android.net.Uri)>",
      "<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newInsert(android.net.Uri)>",
      "<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newUpdate(android.net.Uri)>",
      "<android.net.Uri: android.net.Uri$Builder buildUpon()>",
      "<android.content.ContentProviderProxy: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>",
      "<android.content.ContentResolver: android.os.Bundle call(android.net.Uri,java.lang.String,java.lang.String,android.os.Bundle)>",
      "<android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)>",
      "<android.content.Intent: android.os.Bundle getExtras()>",
      "<android.database.BulkCursorToCursorAdaptor: android.os.Bundle getExtras()>",
      "<android.database.BulkCursorToCursorAdaptor: android.os.Bundle respond(android.os.Bundle)>",
      "<java.net.ResponseCache: java.net.CacheRequest put(java.net.URI,java.net.URLConnection)>",
      "<libcore.net.http.HttpResponseCache: java.net.CacheRequest put(java.net.URI,java.net.URLConnection)>",
      "<java.net.ResponseCache: java.net.CacheResponse get(java.net.URI,java.lang.String,java.util.Map)>",
      "<libcore.net.http.HttpResponseCache: java.net.CacheResponse get(java.net.URI,java.lang.String,java.util.Map)>",
      "<android.webkit.WebViewDatabase: android.webkit.CacheManager$CacheResult getCache(java.lang.String)>",
      "<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String)>",
      "<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,android.net.Uri)>",
      "<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,android.net.Uri,android.database.Cursor)>",
      "<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo markAsVoiceMail()>",
      "<com.android.internal.telephony.cdma.CdmaMmiCode: com.android.internal.telephony.cdma.CdmaMmiCode newFromDialString(java.lang.String,com.android.internal.telephony.cdma.CDMAPhone)>",
      "<android.telephony.CellLocation: android.telephony.CellLocation newFromBundle(android.os.Bundle)>",
      "<android.content.pm.PackageParser: java.security.cert.Certificate[] loadCertificates(java.util.jar.JarFile,java.util.jar.JarEntry,byte[])>",
      "<libcore.net.http.HttpsURLConnectionImpl: java.security.cert.Certificate[] getLocalCertificates()>",
      "<libcore.net.http.HttpsURLConnectionImpl: java.security.cert.Certificate[] getServerCertificates()>",
      "<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.Certificate[] getPeerCertificates()>",
      "<android.app.ApplicationPackageManager: java.lang.CharSequence getCachedString(android.app.ApplicationPackageManager$ResourceName)>",
      "<android.app.BackStackRecord: java.lang.CharSequence getBreadCrumbShortTitle()>",
      "<android.app.BackStackRecord: java.lang.CharSequence getBreadCrumbTitle()>",
      "<android.app.WallpaperInfo: java.lang.CharSequence loadAuthor(android.content.pm.PackageManager)>",
      "<android.app.WallpaperInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>",
      "<android.app.admin.DeviceAdminInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>",
      "<android.app.admin.DeviceAdminInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>",
      "<android.app.admin.DeviceAdminReceiver: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)>",
      "<android.content.Intent: java.lang.CharSequence getCharSequenceExtra(java.lang.String)>",
      "<android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)>",
      "<android.content.res.StringBlock: java.lang.CharSequence get(int)>",
      "<android.support.v4.app.BackStackRecord: java.lang.CharSequence getBreadCrumbShortTitle()>",
      "<android.support.v4.app.BackStackRecord: java.lang.CharSequence getBreadCrumbTitle()>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: java.lang.CharSequence getClassName(java.lang.Object)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: java.lang.CharSequence getContentDescription(java.lang.Object)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: java.lang.CharSequence getPackageName(java.lang.Object)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: java.lang.CharSequence getText(java.lang.Object)>",
      "<android.view.inputmethod.InputMethodInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>",
      "<com.android.internal.view.InputConnectionWrapper: java.lang.CharSequence getSelectedText(int)>",
      "<com.android.internal.view.InputConnectionWrapper: java.lang.CharSequence getTextAfterCursor(int,int)>",
      "<com.android.internal.view.InputConnectionWrapper: java.lang.CharSequence getTextBeforeCursor(int,int)>",
      "<android.content.Intent: java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String)>",
      "<android.content.res.Resources: java.lang.CharSequence[] getTextArray(int)>",
      "<android.webkit.ViewManager: android.webkit.ViewManager$ChildView hitTest(int,int)>",
      "<android.ddm.DdmHandleExit: org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk)>",
      "<android.ddm.DdmHandleNativeHeap: org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk)>",
      "<android.ddm.DdmHandleThread: org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk)>",
      "<android.webkit.ByteArrayBuilder: android.webkit.ByteArrayBuilder$Chunk obtainChunk(int)>",
      "<org.apache.harmony.dalvik.ddmc.ChunkHandler: org.apache.harmony.dalvik.ddmc.Chunk createFailChunk(int,java.lang.String)>",
      "<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>",
      "<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: org.apache.http.conn.ClientConnectionManager getManager()>",
      "<android.content.ClipData: android.content.ClipData newIntent(java.lang.CharSequence,android.content.Intent)>",
      "<android.content.ClipData: android.content.ClipData newRawUri(java.lang.CharSequence,android.net.Uri)>",
      "<android.content.ClipData: android.content.ClipData newUri(android.content.ContentResolver,java.lang.CharSequence,android.net.Uri)>",
      "<com.android.internal.telephony.DataConnectionAc: java.util.Collection rspApnList(android.os.Message)>",
      "<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int)>",
      "<android.app.Activity: android.content.ComponentName getCallingActivity()>",
      "<android.app.ActivityManagerProxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String)>",
      "<android.app.ApplicationErrorReport: android.content.ComponentName getErrorReportReceiver(android.content.Context,java.lang.String,int)>",
      "<android.app.ApplicationErrorReport: android.content.ComponentName getErrorReportReceiver(android.content.pm.PackageManager,java.lang.String,java.lang.String)>",
      "<android.app.ContextImpl: android.content.ComponentName startService(android.content.Intent)>",
      "<android.app.WallpaperInfo: android.content.ComponentName getComponent()>",
      "<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>",
      "<android.content.ComponentName: android.content.ComponentName clone()>",
      "<android.content.Context: android.content.ComponentName startService(android.content.Intent)>",
      "<android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>",
      "<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)>",
      "<android.test.mock.MockContext: android.content.ComponentName startService(android.content.Intent)>",
      "<android.view.inputmethod.InputMethodInfo: android.content.ComponentName getComponent()>",
      "<android.view.textservice.SpellCheckerInfo: android.content.ComponentName getComponent()>",
      "<android.app.ActivityManager: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()>",
      "<android.net.http.IdleCache: android.net.http.Connection getConnection(org.apache.http.HttpHost)>",
      "<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)>",
      "<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dialThreeWay(java.lang.String)>",
      "<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>",
      "<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int,com.android.internal.telephony.UUSInfo)>",
      "<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dialInternal(java.lang.String)>",
      "<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(android.net.Uri)>",
      "<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation build()>",
      "<android.provider.SyncStateContract$Helpers: android.content.ContentProviderOperation newSetOperation(android.net.Uri,android.accounts.Account,byte[])>",
      "<android.provider.SyncStateContract$Helpers: android.content.ContentProviderOperation newUpdateOperation(android.net.Uri,byte[])>",
      "<android.content.ContentProviderOperation: android.content.ContentProviderResult apply(android.content.ContentProvider,android.content.ContentProviderResult[],int)>",
      "<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>",
      "<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()>",
      "<android.app.ContextImpl: android.content.Context createPackageContext(java.lang.String,int)>",
      "<android.app.ContextImpl: android.content.Context getApplicationContext()>",
      "<android.app.SearchableInfo: android.content.Context getActivityContext(android.content.Context)>",
      "<android.app.SearchableInfo: android.content.Context getProviderContext(android.content.Context,android.content.Context)>",
      "<android.content.ContextWrapper: android.content.Context getBaseContext()>",
      "<android.webkit.HTML5VideoViewProxy: android.content.Context getContext()>",
      "<android.app.ContextImpl: android.app.ContextImpl createSystemContext(android.app.ActivityThread)>",
      "<android.app.ContextImpl: android.app.ContextImpl getImpl(android.content.Context)>",
      "<android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String)>",
      "<android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>",
      "<android.app.DownloadManager$Query: android.database.Cursor runQuery(android.content.ContentResolver,java.lang.String[],android.net.Uri)>",
      "<android.content.ContentProvider$Transport: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>",
      "<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>",
      "<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>",
      "<android.content.ContentProviderProxy: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>",
      "<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>",
      "<android.content.SearchRecentSuggestionsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>",
      "<android.database.sqlite.SQLiteDirectCursorDriver: android.database.Cursor query(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String[])>",
      "<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
      "<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>",
      "<android.database.sqlite.SqliteWrapper: android.database.Cursor query(android.content.Context,android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>",
      "<android.media.RingtoneManager: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>",
      "<android.provider.MediaStore$Images$Media: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[])>",
      "<android.provider.MediaStore$Images$Media: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String)>",
      "<android.provider.MediaStore$Images$Thumbnails: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[])>",
      "<android.provider.MediaStore$Images$Thumbnails: android.database.Cursor queryMiniThumbnails(android.content.ContentResolver,android.net.Uri,int,java.lang.String[])>",
      "<android.provider.MediaStore$Video: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[])>",
      "<android.database.BulkCursorProxy: android.database.CursorWindow getWindow(int)>",
      "<android.database.CursorToBulkCursorAdaptor: android.database.CursorWindow getWindow(int)>",
      "<org.bouncycastle.asn1.DERBoolean: org.bouncycastle.asn1.DERBoolean getInstance(java.lang.Object)>",
      "<org.bouncycastle.asn1.ASN1EncodableVector: org.bouncycastle.asn1.DEREncodable get(int)>",
      "<org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.DEREncodable getNext(java.util.Enumeration)>",
      "<org.bouncycastle.asn1.ASN1Set: org.bouncycastle.asn1.DEREncodable getNext(java.util.Enumeration)>",
      "<org.bouncycastle.asn1.ASN1StreamParser: org.bouncycastle.asn1.DEREncodable readImplicit(boolean,int)>",
      "<org.bouncycastle.asn1.DEREnumerated: org.bouncycastle.asn1.DEREnumerated getInstance(java.lang.Object)>",
      "<org.bouncycastle.asn1.DERGeneralString: org.bouncycastle.asn1.DERGeneralString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)>",
      "<org.bouncycastle.asn1.DERInteger: org.bouncycastle.asn1.DERInteger getInstance(java.lang.Object)>",
      "<org.bouncycastle.asn1.DERExternalParser: org.bouncycastle.asn1.DERObject getLoadedObject()>",
      "<org.bouncycastle.asn1.cms.ContentInfo: org.bouncycastle.asn1.DERObject toASN1Object()>",
      "<org.bouncycastle.asn1.x509.X509DefaultEntryConverter: org.bouncycastle.asn1.DERObject getConvertedValue(org.bouncycastle.asn1.DERObjectIdentifier,java.lang.String)>",
      "<org.bouncycastle.x509.X509Attribute: org.bouncycastle.asn1.DERObject toASN1Object()>",
      "<org.bouncycastle.asn1.sec.SECNamedCurves: org.bouncycastle.asn1.DERObjectIdentifier getOID(java.lang.String)>",
      "<org.bouncycastle.x509.X509Util: org.bouncycastle.asn1.DERObjectIdentifier getAlgorithmOID(java.lang.String)>",
      "<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.DataConnection checkForConnectionForApnContext(com.android.internal.telephony.ApnContext)>",
      "<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Phone$DataState getDataConnectionState(java.lang.String)>",
      "<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Phone$DataState getDataConnectionState(java.lang.String)>",
      "<java.nio.DatagramChannelImpl: java.nio.channels.DatagramChannel connect(java.net.SocketAddress)>",
      "<org.bouncycastle.asn1.x509.Time: java.util.Date getDate()>",
      "<android.app.Activity: android.app.Dialog createDialog(java.lang.Integer,android.os.Bundle,android.os.Bundle)>",
      "<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.Intent)>",
      "<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.Intent)>",
      "<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getCachedIcon(android.app.ApplicationPackageManager$ResourceName)>",
      "<android.app.ContextImpl: android.graphics.drawable.Drawable getWallpaper()>",
      "<android.app.ContextImpl: android.graphics.drawable.Drawable peekWallpaper()>",
      "<android.app.WallpaperInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>",
      "<android.app.admin.DeviceAdminInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>",
      "<android.content.pm.ApplicationInfo: android.graphics.drawable.Drawable loadDefaultIcon(android.content.pm.PackageManager)>",
      "<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.Intent)>",
      "<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.Intent)>",
      "<android.content.pm.ResolveInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>",
      "<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>",
      "<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int)>",
      "<android.view.inputmethod.InputMethodInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>",
      "<android.widget.SuggestionsAdapter: android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)>",
      "<android.widget.SuggestionsAdapter: android.graphics.drawable.Drawable getDefaultIcon1(android.database.Cursor)>",
      "<android.widget.SuggestionsAdapter: android.graphics.drawable.Drawable getDrawable(android.net.Uri)>",
      "<android.drm.mobile1.DrmRightsManager: android.drm.mobile1.DrmRights installRights(java.io.InputStream,int,java.lang.String)>",
      "<android.drm.mobile1.DrmRightsManager: android.drm.mobile1.DrmRights queryRights(android.drm.mobile1.DrmRawContent)>",
      "<android.app.ContextImpl: android.os.DropBoxManager createDropBoxManager()>",
      "<com.android.internal.telephony.cat.ValueParser: com.android.internal.telephony.cat.Duration retrieveDuration(com.android.internal.telephony.cat.ComprehensionTlv)>",
      "<org.bouncycastle.math.ec.ECFieldElement$Fp: org.bouncycastle.math.ec.ECFieldElement add(org.bouncycastle.math.ec.ECFieldElement)>",
      "<org.bouncycastle.math.ec.ECFieldElement$Fp: org.bouncycastle.math.ec.ECFieldElement multiply(org.bouncycastle.math.ec.ECFieldElement)>",
      "<org.bouncycastle.math.ec.ECFieldElement$Fp: org.bouncycastle.math.ec.ECFieldElement subtract(org.bouncycastle.math.ec.ECFieldElement)>",
      "<org.bouncycastle.jce.provider.JCEECPublicKey: java.security.spec.ECPoint getW()>",
      "<org.bouncycastle.math.ec.ECAlgorithms: org.bouncycastle.math.ec.ECPoint shamirsTrick(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger,org.bouncycastle.math.ec.ECPoint,java.math.BigInteger)>",
      "<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECPoint multiply(java.math.BigInteger)>",
      "<android.opengl.EGLLogWrapper: javax.microedition.khronos.egl.EGLSurface eglCreatePbufferSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int[])>",
      "<android.opengl.EGLLogWrapper: javax.microedition.khronos.egl.EGLSurface eglCreatePixmapSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])>",
      "<android.opengl.EGLLogWrapper: javax.microedition.khronos.egl.EGLSurface eglCreateWindowSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])>",
      "<android.opengl.ETC1Util: android.opengl.ETC1Util$ETC1Texture createTexture(java.io.InputStream)>",
      "<android.app.SharedPreferencesImpl: android.content.SharedPreferences$Editor edit()>",
      "<org.ccil.cowan.tagsoup.Schema: org.ccil.cowan.tagsoup.ElementType getElementType(java.lang.String)>",
      "<org.bouncycastle.jce.provider.asymmetric.ec.EC5Util: java.security.spec.EllipticCurve convertCurve(org.bouncycastle.math.ec.ECCurve,byte[])>",
      "<org.bouncycastle.jce.spec.ECNamedCurveSpec: java.security.spec.EllipticCurve convertCurve(org.bouncycastle.math.ec.ECCurve,byte[])>",
      "<android.util.Xml: android.util.Xml$Encoding findEncodingByName(java.lang.String)>",
      "<android.speech.tts.TtsEngines: android.speech.tts.TextToSpeech$EngineInfo getEngineInfo(android.content.pm.ResolveInfo,android.content.pm.PackageManager)>",
      "<android.speech.tts.TtsEngines: android.speech.tts.TextToSpeech$EngineInfo getEngineInfo(java.lang.String)>",
      "<org.bouncycastle.asn1.BERConstructedOctetString: java.util.Enumeration getObjects()>",
      "<android.webkit.ZoomControlExternal: android.webkit.ZoomControlExternal$ExtendedZoomControls createZoomControls()>",
      "<com.android.internal.view.InputConnectionWrapper: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)>",
      "<android.app.ContextImpl: java.io.File getDataDirFile()>",
      "<android.app.ContextImpl: java.io.File getDatabasePath(java.lang.String)>",
      "<android.app.ContextImpl: java.io.File getDatabasesDir()>",
      "<android.app.ContextImpl: java.io.File getExternalCacheDir()>",
      "<android.app.ContextImpl: java.io.File getExternalFilesDir(java.lang.String)>",
      "<android.app.ContextImpl: java.io.File getFileStreamPath(java.lang.String)>",
      "<android.app.ContextImpl: java.io.File getFilesDir()>",
      "<android.app.ContextImpl: java.io.File getObbDir()>",
      "<android.app.ContextImpl: java.io.File getPreferencesDir()>",
      "<android.app.ContextImpl: java.io.File getSharedPrefsFile(java.lang.String)>",
      "<android.app.ContextImpl: java.io.File makeFilename(java.io.File,java.lang.String)>",
      "<android.app.ContextImpl: java.io.File validateFilePath(java.lang.String,boolean)>",
      "<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>",
      "<android.test.RenamingDelegatingContext: java.io.File getDatabasePath(java.lang.String)>",
      "<android.test.RenamingDelegatingContext: java.io.File getFileStreamPath(java.lang.String)>",
      "<java.nio.FileChannelImpl: java.nio.channels.FileChannel position(long)>",
      "<java.nio.FileChannelImpl: java.nio.channels.FileChannel truncate(long)>",
      "<java.nio.NioUtils: java.io.FileDescriptor getFD(java.nio.channels.FileChannel)>",
      "<java.nio.ServerSocketChannelImpl: java.io.FileDescriptor getFD()>",
      "<libcore.io.BlockGuardOs: java.io.FileDescriptor accept(java.io.FileDescriptor,java.net.InetSocketAddress)>",
      "<libcore.io.BlockGuardOs: java.io.FileDescriptor open(java.lang.String,int,int)>",
      "<libcore.io.BlockGuardOs: java.io.FileDescriptor socket(int,int,int)>",
      "<libcore.io.BlockGuardOs: java.io.FileDescriptor tagSocket(java.io.FileDescriptor)>",
      "<libcore.io.ForwardingOs: java.io.FileDescriptor accept(java.io.FileDescriptor,java.net.InetSocketAddress)>",
      "<libcore.io.ForwardingOs: java.io.FileDescriptor dup(java.io.FileDescriptor)>",
      "<libcore.io.ForwardingOs: java.io.FileDescriptor dup2(java.io.FileDescriptor,int)>",
      "<libcore.io.ForwardingOs: java.io.FileDescriptor open(java.lang.String,int,int)>",
      "<libcore.io.ForwardingOs: java.io.FileDescriptor socket(int,int,int)>",
      "<libcore.io.ForwardingOs: java.io.FileDescriptor[] pipe()>",
      "<android.app.ContextImpl: java.io.FileInputStream openFileInput(java.lang.String)>",
      "<android.test.RenamingDelegatingContext: java.io.FileInputStream openFileInput(java.lang.String)>",
      "<java.nio.FileChannelImpl: java.nio.channels.FileLock basicLock(long,long,boolean,boolean)>",
      "<android.app.ContextImpl: java.io.FileOutputStream openFileOutput(java.lang.String,int)>",
      "<android.test.RenamingDelegatingContext: java.io.FileOutputStream openFileOutput(java.lang.String,int)>",
      "<com.android.internal.os.AtomicFile: java.io.FileOutputStream startWrite()>",
      "<android.app.FragmentState: android.app.Fragment instantiate(android.app.Activity)>",
      "<android.app.Activity: android.app.FragmentManager getFragmentManager()>",
      "<android.app.BackStackRecord: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)>",
      "<android.app.BackStackRecord: android.app.FragmentTransaction add(int,android.app.Fragment)>",
      "<android.app.BackStackRecord: android.app.FragmentTransaction add(int,android.app.Fragment,java.lang.String)>",
      "<android.app.BackStackRecord: android.app.FragmentTransaction addToBackStack(java.lang.String)>",
      "<android.app.BackStackRecord: android.app.FragmentTransaction attach(android.app.Fragment)>",
      "<android.app.BackStackRecord: android.app.FragmentTransaction detach(android.app.Fragment)>",
      "<android.app.BackStackRecord: android.app.FragmentTransaction disallowAddToBackStack()>",
      "<android.app.BackStackRecord: android.app.FragmentTransaction hide(android.app.Fragment)>",
      "<android.app.BackStackRecord: android.app.FragmentTransaction remove(android.app.Fragment)>",
      "<android.app.BackStackRecord: android.app.FragmentTransaction replace(int,android.app.Fragment)>",
      "<android.app.BackStackRecord: android.app.FragmentTransaction replace(int,android.app.Fragment,java.lang.String)>",
      "<android.app.BackStackRecord: android.app.FragmentTransaction setCustomAnimations(int,int)>",
      "<android.app.BackStackRecord: android.app.FragmentTransaction show(android.app.Fragment)>",
      "<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)>",
      "<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment)>",
      "<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String)>",
      "<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction addToBackStack(java.lang.String)>",
      "<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment)>",
      "<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment)>",
      "<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction disallowAddToBackStack()>",
      "<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction hide(android.support.v4.app.Fragment)>",
      "<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction remove(android.support.v4.app.Fragment)>",
      "<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment)>",
      "<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)>",
      "<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction setCustomAnimations(int,int)>",
      "<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction show(android.support.v4.app.Fragment)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: com.android.internal.telephony.cdma.sms.BearerData$Gsm7bitCodingResult encode7bitGsm(java.lang.String,int,boolean)>",
      "<com.android.internal.telephony.gsm.SmsMessage$PduParser: com.android.internal.telephony.gsm.GsmSmsAddress getAddress()>",
      "<android.webkit.HTML5VideoViewProxy: android.webkit.HTML5VideoViewProxy getInstance(android.webkit.WebViewCore,int)>",
      "<libcore.net.http.HttpConnection: libcore.net.http.HttpConnection connect(java.net.URI,java.net.Proxy,boolean,int)>",
      "<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: org.apache.http.HttpEntity getEntity()>",
      "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>",
      "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>",
      "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
      "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>",
      "<android.media.AudioManager: android.media.IAudioService getService()>",
      "<android.app.Activity: android.os.IBinder getActivityToken()>",
      "<android.app.ActivityManagerProxy: android.os.IBinder peekService(android.content.Intent,java.lang.String)>",
      "<android.app.IntentService: android.os.IBinder onBind(android.content.Intent)>",
      "<android.app.Service: android.os.IBinder onBind(android.content.Intent)>",
      "<android.content.BroadcastReceiver: android.os.IBinder peekService(android.content.Context,android.content.Intent)>",
      "<android.content.Intent: android.os.IBinder getIBinderExtra(java.lang.String)>",
      "<android.inputmethodservice.AbstractInputMethodService: android.os.IBinder onBind(android.content.Intent)>",
      "<android.os.Messenger: android.os.IBinder getBinder()>",
      "<android.os.ServiceManager: android.os.IBinder checkService(java.lang.String)>",
      "<android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>",
      "<android.test.ServiceTestCase: android.os.IBinder bindService(android.content.Intent)>",
      "<com.android.internal.util.AsyncService: android.os.IBinder onBind(android.content.Intent)>",
      "<android.app.ContextImpl$ApplicationContentResolver: android.content.IContentProvider acquireExistingProvider(android.content.Context,java.lang.String)>",
      "<android.app.ContextImpl$ApplicationContentResolver: android.content.IContentProvider acquireProvider(android.content.Context,java.lang.String)>",
      "<android.content.ContentProviderNative: android.content.IContentProvider asInterface(android.os.IBinder)>",
      "<android.content.ContentResolver: android.content.IContentProvider acquireExistingProvider(android.content.Context,java.lang.String)>",
      "<android.content.ContentResolver: android.content.IContentProvider acquireExistingProvider(android.net.Uri)>",
      "<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.net.Uri)>",
      "<android.content.ContentResolver: android.content.IContentService getContentService()>",
      "<android.app.ActivityManagerProxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int)>",
      "<android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfo()>",
      "<android.os.ServiceManager: android.os.IServiceManager getIServiceManager()>",
      "<com.android.internal.telephony.cat.ValueParser: com.android.internal.telephony.cat.IconId retrieveIconId(com.android.internal.telephony.cat.ComprehensionTlv)>",
      "<com.android.internal.telephony.cat.IconLoader: com.android.internal.telephony.cat.IconLoader getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)>",
      "<android.app.Activity: java.lang.IllegalArgumentException missingDialog(int)>",
      "<org.bouncycastle.x509.X509Util: org.bouncycastle.x509.X509Util$Implementation getImplementation(java.lang.String,java.lang.String,java.security.Provider)>",
      "<java.net.URLStreamHandler: java.net.InetAddress getHostAddress(java.net.URL)>",
      "<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.net.InetAddress getInetAddress()>",
      "<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.net.InetAddress getLocalAddress()>",
      "<libcore.io.ForwardingOs: java.net.InetAddress getsockoptInAddr(java.io.FileDescriptor,int,int)>",
      "<libcore.io.ForwardingOs: java.net.InetAddress inet_pton(int,java.lang.String)>",
      "<libcore.io.ForwardingOs: java.net.InetAddress ioctlInetAddress(java.io.FileDescriptor,int,java.lang.String)>",
      "<libcore.io.ForwardingOs: java.net.InetAddress[] getaddrinfo(java.lang.String,libcore.io.StructAddrinfo)>",
      "<java.nio.SocketChannelImpl: java.net.InetSocketAddress validateAddress(java.net.SocketAddress)>",
      "<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>",
      "<android.content.res.Resources: java.io.InputStream openRawResource(int)>",
      "<android.content.res.Resources: java.io.InputStream openRawResource(int,android.util.TypedValue)>",
      "<android.provider.Contacts$People: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)>",
      "<android.provider.ContactsContract$Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)>",
      "<android.provider.ContactsContract$Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri,boolean)>",
      "<android.webkit.BrowserFrame: java.io.InputStream inputStreamForAndroidResource(java.lang.String)>",
      "<java.nio.SocketChannelImpl$SocketAdapter: java.io.InputStream getInputStream()>",
      "<android.app.ApplicationPackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>",
      "<org.bouncycastle.math.ec.IntArray: org.bouncycastle.math.ec.IntArray square(int)>",
      "<android.accounts.AccountManager: android.content.Intent newChooseAccountIntent(android.accounts.Account,java.util.ArrayList,java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>",
      "<android.app.Activity: android.content.Intent getIntent()>",
      "<android.app.ActivityManagerProxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String)>",
      "<android.app.ActivityThread: android.content.Intent getIntentBeingBroadcast()>",
      "<android.app.ApplicationPackageManager: android.content.Intent getLaunchIntentForPackage(java.lang.String)>",
      "<android.app.ContextImpl: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>",
      "<android.app.ContextImpl: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>",
      "<android.app.ContextImpl: android.content.Intent registerReceiverInternal(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,android.content.Context)>",
      "<android.app.Instrumentation$ActivityResult: android.content.Intent getResultData()>",
      "<android.app.ReceiverRestrictedContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>",
      "<android.app.ReceiverRestrictedContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>",
      "<android.app.SearchDialog: android.content.Intent createIntent(java.lang.String,android.net.Uri,java.lang.String,java.lang.String,int,java.lang.String)>",
      "<android.content.ClipData$Item: android.content.Intent getIntent()>",
      "<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>",
      "<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>",
      "<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>",
      "<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>",
      "<android.content.Intent$FilterComparison: android.content.Intent getIntent()>",
      "<android.content.Intent: android.content.Intent addCategory(java.lang.String)>",
      "<android.content.Intent: android.content.Intent cloneFilter()>",
      "<android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence)>",
      "<android.content.Intent: android.content.Intent getIntent(java.lang.String)>",
      "<android.content.Intent: android.content.Intent getIntentOld(java.lang.String)>",
      "<android.content.Intent: android.content.Intent getSelector()>",
      "<android.content.Intent: android.content.Intent makeMainActivity(android.content.ComponentName)>",
      "<android.content.Intent: android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String)>",
      "<android.content.Intent: android.content.Intent makeRestartActivityTask(android.content.ComponentName)>",
      "<android.content.Intent: android.content.Intent parseIntent(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>",
      "<android.content.Intent: android.content.Intent parseUri(java.lang.String,int)>",
      "<android.content.Intent: android.content.Intent putCharSequenceArrayListExtra(java.lang.String,java.util.ArrayList)>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence[])>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.IBinder)>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable[])>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean[])>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte)>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,char)>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,char[])>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,double)>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,double[])>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,float)>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,float[])>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,int[])>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,long[])>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,short)>",
      "<android.content.Intent: android.content.Intent putExtra(java.lang.String,short[])>",
      "<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>",
      "<android.content.Intent: android.content.Intent putExtras(android.content.Intent)>",
      "<android.content.Intent: android.content.Intent putIntegerArrayListExtra(java.lang.String,java.util.ArrayList)>",
      "<android.content.Intent: android.content.Intent putParcelableArrayListExtra(java.lang.String,java.util.ArrayList)>",
      "<android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)>",
      "<android.content.Intent: android.content.Intent replaceExtras(android.os.Bundle)>",
      "<android.content.Intent: android.content.Intent replaceExtras(android.content.Intent)>",
      "<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>",
      "<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)>",
      "<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>",
      "<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>",
      "<android.content.Intent: android.content.Intent setFlags(int)>",
      "<android.content.pm.PackageManager: android.content.Intent getLaunchIntentForPackage(java.lang.String)>",
      "<android.net.sip.SipManager: android.content.Intent createIncomingCallBroadcast(java.lang.String,java.lang.String)>",
      "<android.preference.Preference: android.content.Intent getIntent()>",
      "<android.provider.DrmStore: android.content.Intent addDrmFile(android.content.ContentResolver,java.io.File,java.lang.String)>",
      "<android.provider.DrmStore: android.content.Intent addDrmFile(android.content.ContentResolver,java.io.FileInputStream,java.lang.String)>",
      "<android.provider.Settings$Bookmarks: android.content.Intent getIntentForShortcut(android.content.ContentResolver,char)>",
      "<android.security.KeyChain: android.content.Intent createInstallIntent()>",
      "<android.speech.RecognizerIntent: android.content.Intent getVoiceDetailsIntent(android.content.Context)>",
      "<android.speech.tts.TtsEngines: android.content.Intent getSettingsIntent(java.lang.String)>",
      "<android.support.v4.app.NavUtils: android.content.Intent getParentActivityIntent(android.app.Activity)>",
      "<android.support.v4.app.NavUtils: android.content.Intent getParentActivityIntent(android.content.Context,java.lang.Class)>",
      "<android.support.v4.app.NavUtils: android.content.Intent getParentActivityIntent(android.content.Context,android.content.ComponentName)>",
      "<android.support.v4.app.TaskStackBuilder: android.content.Intent getIntent(int)>",
      "<android.test.IsolatedContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>",
      "<android.test.mock.MockContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>",
      "<android.test.mock.MockContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>",
      "<android.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)>",
      "<android.widget.ActivityChooserModel: android.content.Intent getIntent()>",
      "<android.widget.RemoteViewsAdapter: android.content.Intent getRemoteViewsServiceIntent()>",
      "<android.widget.SearchView: android.content.Intent createIntent(java.lang.String,android.net.Uri,java.lang.String,java.lang.String,int,java.lang.String)>",
      "<android.widget.SearchView: android.content.Intent createIntentFromSuggestion(android.database.Cursor,int,java.lang.String)>",
      "<android.widget.SearchView: android.content.Intent createVoiceAppSearchIntent(android.content.Intent,android.app.SearchableInfo)>",
      "<android.widget.SearchView: android.content.Intent createVoiceWebSearchIntent(android.content.Intent,android.app.SearchableInfo)>",
      "<com.android.internal.net.VpnConfig: android.content.Intent getIntentForConfirmation()>",
      "<com.android.internal.view.menu.ActionMenuItem: android.content.Intent getIntent()>",
      "<com.android.internal.view.menu.MenuItemImpl: android.content.Intent getIntent()>",
      "<android.view.animation.AnimationUtils: android.view.animation.Interpolator createInterpolatorFromXml(android.content.Context,org.xmlpull.v1.XmlPullParser)>",
      "<com.android.internal.telephony.cat.ValueParser: com.android.internal.telephony.cat.Item retrieveItem(com.android.internal.telephony.cat.ComprehensionTlv)>",
      "<com.android.internal.telephony.cat.ValueParser: com.android.internal.telephony.cat.ItemsIconId retrieveItemsIconId(com.android.internal.telephony.cat.ComprehensionTlv)>",
      "<org.apache.harmony.xnet.provider.jsse.DefaultSSLContextImpl: javax.net.ssl.KeyManager[] getKeyManagers()>",
      "<android.view.animation.AnimationUtils: android.view.animation.LayoutAnimationController createLayoutAnimationFromXml(android.content.Context,org.xmlpull.v1.XmlPullParser)>",
      "<android.view.animation.AnimationUtils: android.view.animation.LayoutAnimationController createLayoutAnimationFromXml(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>",
      "<android.view.animation.AnimationUtils: android.view.animation.LayoutAnimationController loadLayoutAnimation(android.content.Context,int)>",
      "<android.app.Activity: android.view.LayoutInflater getLayoutInflater()>",
      "<com.android.internal.view.menu.ListMenuItemView: android.view.LayoutInflater getInflater()>",
      "<com.android.internal.telephony.DataConnectionAc: android.net.LinkCapabilities getLinkCapabilitiesSync()>",
      "<android.app.ActivityManager: java.util.List getRunningAppProcesses()>",
      "<android.app.ActivityManagerProxy: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)>",
      "<android.app.ApplicationPackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)>",
      "<android.app.ApplicationPackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>",
      "<android.app.ApplicationPackageManager: java.util.List queryIntentServices(android.content.Intent,int)>",
      "<android.content.ContentResolver: java.util.List getCurrentSyncs()>",
      "<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)>",
      "<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>",
      "<android.content.pm.PackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],android.content.Intent,int)>",
      "<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,int)>",
      "<android.preference.PreferenceManager: java.util.List queryIntentActivities(android.content.Intent)>",
      "<android.webkit.WebViewDatabase: java.util.List trimCache(long)>",
      "<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.util.List findApnContextToClean(java.util.Collection)>",
      "<java.lang.VMClassLoader: java.util.List getResources(java.lang.String)>",
      "<java.net.ProxySelector: java.util.List select(java.net.URI)>",
      "<java.net.ProxySelectorImpl: java.util.List select(java.net.URI)>",
      "<android.app.Activity: android.app.LoaderManager getLoaderManager()>",
      "<android.app.Activity: android.app.LoaderManagerImpl getLoaderManager(int,boolean,boolean)>",
      "<libcore.icu.ICU: java.util.Locale[] localesFromStrings(java.lang.String[])>",
      "<android.app.ContextImpl: android.os.Looper getMainLooper()>",
      "<java.lang.Thread: java.util.Map getAllStackTraces()>",
      "<java.net.CookieHandler: java.util.Map get(java.net.URI,java.util.Map)>",
      "<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri)>",
      "<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder)>",
      "<java.nio.MemoryBlock: java.nio.MemoryBlock allocate(int)>",
      "<android.app.SharedPreferencesImpl$EditorImpl: android.app.SharedPreferencesImpl$MemoryCommitResult commitToMemory()>",
      "<android.app.Activity: android.view.MenuInflater getMenuInflater()>",
      "<android.support.v4.view.MenuItemCompatHoneycomb: android.view.MenuItem setActionView(android.view.MenuItem,android.view.View)>",
      "<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setIntent(android.content.Intent)>",
      "<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setIcon(int)>",
      "<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setIntent(android.content.Intent)>",
      "<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setTitleCondensed(java.lang.CharSequence)>",
      "<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setVisible(boolean)>",
      "<com.android.internal.view.menu.MenuPopupHelper$MenuAdapter: com.android.internal.view.menu.MenuItemImpl getItem(int)>",
      "<com.android.internal.view.menu.MenuPopupHelper: com.android.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)>",
      "<android.media.MiniThumbFile: android.media.MiniThumbFile instance(android.net.Uri)>",
      "<android.content.res.Resources: android.graphics.Movie getMovie(int)>",
      "<android.nfc.NdefRecord: android.nfc.NdefRecord createUri(android.net.Uri)>",
      "<android.webkit.Network: android.webkit.Network getInstance(android.content.Context)>",
      "<android.app.Activity: android.app.Activity$NonConfigurationInstances retainNonConfigurationInstances()>",
      "<java.math.BigInt: java.lang.NumberFormatException invalidBigInteger(java.lang.String)>",
      "<android.animation.ArgbEvaluator: java.lang.Object evaluate(float,java.lang.Object,java.lang.Object)>",
      "<android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>",
      "<android.content.Intent: java.lang.Object clone()>",
      "<android.content.Intent: java.lang.Object getExtra(java.lang.String)>",
      "<android.content.Intent: java.lang.Object getExtra(java.lang.String,java.lang.Object)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: java.lang.Object getChild(java.lang.Object,int)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: java.lang.Object getParent(java.lang.Object)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: java.lang.Object obtain()>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: java.lang.Object obtain(java.lang.Object)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: java.lang.Object obtain(android.view.View)>",
      "<libcore.io.IoBridge: java.lang.Object getSocketOptionErrno(java.io.FileDescriptor,int)>",
      "<org.bouncycastle.x509.AttributeCertificateIssuer: java.lang.Object clone()>",
      "<org.kxml2.io.KXmlParser: java.lang.Object getProperty(java.lang.String)>",
      "<org.bouncycastle.x509.AttributeCertificateIssuer: java.lang.Object[] getNames()>",
      "<android.content.ContentResolver: android.content.ContentResolver$OpenResourceIdResult getResourceId(android.net.Uri)>",
      "<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri)>",
      "<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri,java.lang.String)>",
      "<java.nio.SocketChannelImpl$SocketAdapter: java.io.OutputStream getOutputStream()>",
      "<android.content.pm.PackageParser: android.content.pm.PackageParser$Package parsePackage(java.io.File,java.lang.String,android.util.DisplayMetrics,int)>",
      "<java.lang.ClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>",
      "<android.content.pm.PackageParser: android.content.pm.PackageParser$PackageLite parsePackageLite(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,java.lang.String[])>",
      "<android.content.pm.PackageParser: android.content.pm.PackageParser$PackageLite parsePackageLite(java.lang.String,int)>",
      "<android.app.ContextImpl: android.content.pm.PackageManager getPackageManager()>",
      "<android.provider.SyncStateContract$Helpers: android.util.Pair getWithUri(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account)>",
      "<android.app.ActivityManagerProxy: android.os.ParcelFileDescriptor openContentUri(android.net.Uri)>",
      "<android.content.ContentProvider$Transport: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>",
      "<android.content.ContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>",
      "<android.content.ContentProvider: android.os.ParcelFileDescriptor openFileHelper(android.net.Uri,java.lang.String)>",
      "<android.content.ContentProviderClient: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>",
      "<android.content.ContentProviderProxy: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>",
      "<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)>",
      "<android.media.ThumbnailUtils: android.os.ParcelFileDescriptor makeInputStream(android.net.Uri,android.content.ContentResolver)>",
      "<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromSocket(java.net.Socket)>",
      "<android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)>",
      "<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>",
      "<org.bouncycastle.openssl.MiscPEMGenerator: org.bouncycastle.util.io.pem.PemObject createPemObject(java.lang.Object)>",
      "<org.bouncycastle.util.io.pem.PemReader: org.bouncycastle.util.io.pem.PemObject loadObject(java.lang.String)>",
      "<android.app.Activity: android.app.PendingIntent createPendingResult(int,android.content.Intent,int)>",
      "<android.app.ActivityManager: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)>",
      "<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>",
      "<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>",
      "<android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)>",
      "<android.support.v4.app.TaskStackBuilderHoneycomb: android.app.PendingIntent getActivitiesPendingIntent(android.content.Context,int,android.content.Intent[],int)>",
      "<java.security.Permission: java.security.PermissionCollection newPermissionCollection()>",
      "<android.app.ActivityManager: com.android.internal.os.PkgUsageStats[] getAllPackageUsageStats()>",
      "<android.preference.PreferenceManager: android.preference.PreferenceScreen inflateFromIntent(android.content.Intent,android.preference.PreferenceScreen)>",
      "<javax.net.ssl.HandshakeCompletedEvent: java.security.Principal getLocalPrincipal()>",
      "<javax.net.ssl.HandshakeCompletedEvent: java.security.Principal getPeerPrincipal()>",
      "<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.Principal getLocalPrincipal()>",
      "<java.lang.ProcessManager: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File,boolean)>",
      "<java.lang.ProcessManager$ProcessReferenceQueue: java.lang.ProcessManager$ProcessReference poll()>",
      "<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence)>",
      "<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean)>",
      "<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean,boolean)>",
      "<android.content.pm.PackageParser: android.content.pm.PackageParser$Provider parseProvider(android.content.pm.PackageParser$Package,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,java.lang.String[])>",
      "<org.apache.harmony.security.fortress.Services: java.security.Provider getProvider(java.lang.String)>",
      "<android.app.ApplicationPackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int)>",
      "<org.apache.harmony.security.fortress.Services: java.security.Provider[] getProviders()>",
      "<java.net.ProxySelectorImpl: java.net.Proxy selectOneProxy(java.net.URI)>",
      "<org.bouncycastle.asn1.x500.style.IETFUtils: org.bouncycastle.asn1.x500.RDN[] rDNsFromString(java.lang.String,org.bouncycastle.asn1.x500.X500NameStyle)>",
      "<libcore.net.http.HttpsURLConnectionImpl$ProxyConnectEngine: libcore.net.http.RawHeaders getNetworkRequestHeaders()>",
      "<android.app.DownloadManager$Request: android.app.DownloadManager$Request setDestinationUri(android.net.Uri)>",
      "<android.app.ApplicationPackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>",
      "<android.app.ApplicationPackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,int)>",
      "<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>",
      "<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,int)>",
      "<android.app.ContextImpl: android.content.res.Resources getResources()>",
      "<android.content.ContextWrapper: android.content.res.Resources getResources()>",
      "<libcore.net.http.ResponseHeaders: libcore.net.http.ResponseSource chooseResponseSource(long,libcore.net.http.RequestHeaders)>",
      "<gov.nist.javax.sip.parser.extensions.JoinParser: gov.nist.javax.sip.header.SIPHeader parse()>",
      "<gov.nist.javax.sip.parser.extensions.ReferencesParser: gov.nist.javax.sip.header.SIPHeader parse()>",
      "<gov.nist.javax.sip.parser.extensions.ReplacesParser: gov.nist.javax.sip.header.SIPHeader parse()>",
      "<android.app.ContextImpl: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>",
      "<android.app.ContextImpl: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>",
      "<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: javax.net.ssl.SSLEngine engineCreateSSLEngine()>",
      "<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: javax.net.ssl.SSLEngine engineCreateSSLEngine(java.lang.String,int)>",
      "<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: javax.net.ssl.SSLServerSocketFactory engineGetServerSocketFactory()>",
      "<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: javax.net.ssl.SSLSession getSession(byte[])>",
      "<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: javax.net.ssl.SSLSession toSession(byte[],java.lang.String,int)>",
      "<gov.nist.core.net.DefaultNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int)>",
      "<gov.nist.core.net.DefaultNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int,java.net.InetAddress)>",
      "<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int)>",
      "<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int,java.net.InetAddress)>",
      "<javax.net.ssl.HandshakeCompletedEvent: javax.net.ssl.SSLSocket getSocket()>",
      "<libcore.net.http.HttpConnection: javax.net.ssl.SSLSocket getSecureSocketIfConnected()>",
      "<libcore.net.http.HttpConnection: javax.net.ssl.SSLSocket verifySecureSocketHostname(javax.net.ssl.HostnameVerifier)>",
      "<libcore.net.http.HttpsURLConnectionImpl$HttpUrlConnectionDelegate: javax.net.ssl.SSLSocket getSSLSocket()>",
      "<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: javax.net.ssl.SSLSocketFactory engineGetSocketFactory()>",
      "<android.app.SearchableInfo: android.app.SearchableInfo getActivityMetaData(android.content.Context,android.content.pm.ActivityInfo)>",
      "<java.nio.SelectionKeyImpl: java.nio.channels.SelectionKey interestOps(int)>",
      "<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)>",
      "<org.apache.harmony.xnet.provider.jsse.SSLServerSocketFactoryImpl: java.net.ServerSocket createServerSocket()>",
      "<org.apache.harmony.xnet.provider.jsse.SSLServerSocketFactoryImpl: java.net.ServerSocket createServerSocket(int)>",
      "<org.apache.harmony.xnet.provider.jsse.SSLServerSocketFactoryImpl: java.net.ServerSocket createServerSocket(int,int)>",
      "<org.apache.harmony.xnet.provider.jsse.SSLServerSocketFactoryImpl: java.net.ServerSocket createServerSocket(int,int,java.net.InetAddress)>",
      "<android.content.pm.PackageParser: android.content.pm.PackageParser$Service parseService(android.content.pm.PackageParser$Package,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,java.lang.String[])>",
      "<android.app.ApplicationPackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int)>",
      "<com.android.internal.telephony.sip.SipPhone: android.telephony.ServiceState getServiceState()>",
      "<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.ServiceState getServiceState()>",
      "<com.android.internal.telephony.DataCallState: com.android.internal.telephony.DataCallState$SetupResult setLinkProperties(android.net.LinkProperties,boolean)>",
      "<android.app.Activity: android.content.SharedPreferences getPreferences(int)>",
      "<android.app.ContextImpl: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
      "<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>",
      "<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)>",
      "<android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)>",
      "<javax.sip.SipFactory: javax.sip.SipStack createSipStack(java.util.Properties)>",
      "<android.telephony.SmsMessage: android.telephony.SmsMessage newFromParcel(android.os.Parcel)>",
      "<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage newFromCDS(java.lang.String)>",
      "<android.provider.Telephony$Sms$Intents: android.telephony.SmsMessage[] getMessagesFromIntent(android.content.Intent)>",
      "<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket()>",
      "<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)>",
      "<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>",
      "<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>",
      "<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int)>",
      "<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>",
      "<gov.nist.core.net.DefaultNetworkLayer: java.net.Socket createSocket(java.net.InetAddress,int)>",
      "<gov.nist.core.net.DefaultNetworkLayer: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress)>",
      "<gov.nist.core.net.DefaultNetworkLayer: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>",
      "<gov.nist.core.net.SslNetworkLayer: java.net.Socket createSocket(java.net.InetAddress,int)>",
      "<gov.nist.core.net.SslNetworkLayer: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress)>",
      "<gov.nist.core.net.SslNetworkLayer: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>",
      "<gov.nist.javax.sip.stack.IOHandler: java.net.Socket getSocket(java.lang.String)>",
      "<gov.nist.javax.sip.stack.IOHandler: java.net.Socket sendBytes(java.net.InetAddress,java.net.InetAddress,int,java.lang.String,byte[],boolean,gov.nist.javax.sip.stack.MessageChannel)>",
      "<java.net.ServerSocket: java.net.Socket accept()>",
      "<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: java.net.Socket accept()>",
      "<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: java.net.Socket implAccept(java.nio.SocketChannelImpl)>",
      "<java.nio.SocketChannelImpl: java.net.Socket socket()>",
      "<java.nio.channels.SocketChannel: java.net.Socket socket()>",
      "<javax.net.DefaultSocketFactory: java.net.Socket createSocket()>",
      "<javax.net.DefaultSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)>",
      "<javax.net.DefaultSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>",
      "<javax.net.DefaultSocketFactory: java.net.Socket createSocket(java.lang.String,int)>",
      "<javax.net.DefaultSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>",
      "<javax.net.SocketFactory: java.net.Socket createSocket()>",
      "<javax.net.SocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)>",
      "<javax.net.SocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>",
      "<javax.net.SocketFactory: java.net.Socket createSocket(java.lang.String,int)>",
      "<javax.net.SocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>",
      "<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)>",
      "<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>",
      "<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>",
      "<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket(java.lang.String,int)>",
      "<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>",
      "<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>",
      "<libcore.net.http.HttpConnection: java.net.Socket getSocket()>",
      "<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.net.Socket accept()>",
      "<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl: java.net.Socket createSocket()>",
      "<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl: java.net.Socket createSocket(java.net.InetAddress,int)>",
      "<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>",
      "<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>",
      "<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl: java.net.Socket createSocket(java.lang.String,int)>",
      "<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>",
      "<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.net.Socket accept()>",
      "<org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl: java.net.Socket createSocket()>",
      "<org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl: java.net.Socket createSocket(java.net.InetAddress,int)>",
      "<org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>",
      "<org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>",
      "<org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl: java.net.Socket createSocket(java.lang.String,int)>",
      "<org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>",
      "<org.apache.http.conn.scheme.PlainSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)>",
      "<org.apache.http.conn.scheme.PlainSocketFactory: java.net.Socket createSocket()>",
      "<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createSocket()>",
      "<org.apache.http.impl.SocketHttpClientConnection: java.net.Socket getSocket()>",
      "<org.apache.http.impl.conn.DefaultClientConnection: java.net.Socket getSocket()>",
      "<java.nio.DatagramChannelImpl: java.net.SocketAddress receive(java.nio.ByteBuffer)>",
      "<java.nio.DatagramChannelImpl: java.net.SocketAddress receiveDirectImpl(java.nio.ByteBuffer,boolean)>",
      "<java.nio.DatagramChannelImpl: java.net.SocketAddress receiveImpl(java.nio.ByteBuffer,boolean)>",
      "<libcore.io.ForwardingOs: java.net.SocketAddress getsockname(java.io.FileDescriptor)>",
      "<java.nio.ServerSocketChannelImpl: java.nio.channels.SocketChannel accept()>",
      "<android.webkit.SslCertLookupTable: android.webkit.SslCertLookupTable getInstance()>",
      "<android.net.http.CertificateChainValidator: android.net.http.SslError doHandshakeAndValidateServerCertificates(android.net.http.HttpsConnection,javax.net.ssl.SSLSocket,java.lang.String)>",
      "<android.net.http.SslError: android.net.http.SslError SslErrorFromChromiumErrorCode(int,android.net.http.SslCertificate,java.lang.String)>",
      "<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>",
      "<com.android.internal.telephony.IccCard: com.android.internal.telephony.IccCard$State getIccCardState()>",
      "<java.lang.Thread: java.lang.Thread$State getState()>",
      "<android.app.Activity: java.lang.String getCallingPackage()>",
      "<android.app.Activity: java.lang.String getLocalClassName()>",
      "<android.app.Activity: java.lang.String savedDialogArgsKeyFor(int)>",
      "<android.app.Activity: java.lang.String savedDialogKeyFor(int)>",
      "<android.app.ActivityManagerProxy: java.lang.String getPackageForIntentSender(android.content.IIntentSender)>",
      "<android.app.ActivityManagerProxy: java.lang.String getProviderMimeType(android.net.Uri)>",
      "<android.app.ActivityThread: java.lang.String safeToComponentShortString(android.content.Intent)>",
      "<android.app.ApplicationPackageManager$ResourceName: java.lang.String toString()>",
      "<android.app.ApplicationPackageManager: java.lang.String getInstallerPackageName(java.lang.String)>",
      "<android.app.ContextImpl: java.lang.String getPackageCodePath()>",
      "<android.app.ContextImpl: java.lang.String getPackageName()>",
      "<android.app.ContextImpl: java.lang.String getPackageResourcePath()>",
      "<android.app.ContextImpl: java.lang.String uriModeFlagToString(int)>",
      "<android.app.WallpaperInfo: java.lang.String toString()>",
      "<android.app.admin.DeviceAdminInfo: java.lang.String toString()>",
      "<android.appwidget.AppWidgetProviderInfo: java.lang.String toString()>",
      "<android.content.ComponentName: java.lang.String flattenToShortString()>",
      "<android.content.ComponentName: java.lang.String toString()>",
      "<android.content.ContentProvider$Transport: java.lang.String getType(android.net.Uri)>",
      "<android.content.ContentProvider: java.lang.String getType(android.net.Uri)>",
      "<android.content.ContentProviderClient: java.lang.String getType(android.net.Uri)>",
      "<android.content.ContentProviderProxy: java.lang.String getType(android.net.Uri)>",
      "<android.content.ContentResolver: java.lang.String getType(android.net.Uri)>",
      "<android.content.Intent: java.lang.String getScheme()>",
      "<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>",
      "<android.content.Intent: java.lang.String resolveType(android.content.Context)>",
      "<android.content.Intent: java.lang.String toInsecureString()>",
      "<android.content.Intent: java.lang.String toShortString(boolean,boolean,boolean)>",
      "<android.content.Intent: java.lang.String toString()>",
      "<android.content.Intent: java.lang.String toURI()>",
      "<android.content.Intent: java.lang.String toUri(int)>",
      "<android.content.SearchRecentSuggestionsProvider: java.lang.String getType(android.net.Uri)>",
      "<android.content.pm.ActivityInfo: java.lang.String toString()>",
      "<android.content.pm.ApplicationInfo: java.lang.String toString()>",
      "<android.content.pm.ConfigurationInfo: java.lang.String toString()>",
      "<android.content.pm.PackageInfo: java.lang.String toString()>",
      "<android.content.pm.PackageStats: java.lang.String toString()>",
      "<android.content.pm.ProviderInfo: java.lang.String toString()>",
      "<android.content.pm.ResolveInfo: java.lang.String toString()>",
      "<android.content.pm.ServiceInfo: java.lang.String toString()>",
      "<android.content.pm.Signature: java.lang.String toCharsString()>",
      "<android.content.res.Resources: java.lang.String getQuantityString(int,int)>",
      "<android.content.res.Resources: java.lang.String getString(int)>",
      "<android.content.res.Resources: java.lang.String stringForQuantityCode(int)>",
      "<android.database.sqlite.SQLiteClosable: java.lang.String getObjInfo()>",
      "<android.database.sqlite.SQLiteDirectCursorDriver: java.lang.String toString()>",
      "<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>",
      "<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionQuery(java.lang.String[],java.lang.String,java.lang.String)>",
      "<android.hardware.usb.UsbDeviceConnection: java.lang.String getSerial()>",
      "<android.media.AudioManager: java.lang.String getParameters(java.lang.String)>",
      "<android.media.Ringtone: java.lang.String getTitle(android.content.Context,android.net.Uri,boolean)>",
      "<android.net.DhcpInfo: java.lang.String toString()>",
      "<android.net.NetworkInfo: java.lang.String toString()>",
      "<android.net.sip.SipManager: java.lang.String getCallId(android.content.Intent)>",
      "<android.net.sip.SipManager: java.lang.String getOfferSessionDescription(android.content.Intent)>",
      "<android.net.wifi.WifiInfo: java.lang.String toString()>",
      "<android.opengl.EGLLogWrapper: java.lang.String getHex(int)>",
      "<android.os.Build: java.lang.String getRadioVersion()>",
      "<android.os.Build: java.lang.String getString(java.lang.String)>",
      "<android.provider.Settings$NameValueCache: java.lang.String getString(android.content.ContentResolver,java.lang.String)>",
      "<android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>",
      "<android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)>",
      "<android.speech.tts.TtsEngines: java.lang.String getDefaultEngine()>",
      "<android.speech.tts.TtsEngines: java.lang.String getLocalePrefForEngine(java.lang.String)>",
      "<android.speech.tts.TtsEngines: java.lang.String settingsActivityFromServiceInfo(android.content.pm.ServiceInfo,android.content.pm.PackageManager)>",
      "<android.support.v4.app.BackStackRecord: java.lang.String toString()>",
      "<android.support.v4.app.NavUtils: java.lang.String getParentActivityName(android.app.Activity)>",
      "<android.telephony.PhoneNumberUtils: java.lang.String appendPwCharBackToOrigDialStr(int,java.lang.String,java.lang.String)>",
      "<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String,java.lang.String)>",
      "<android.telephony.PhoneNumberUtils: java.lang.String getDefaultIdp()>",
      "<android.telephony.PhoneNumberUtils: java.lang.String getNumberFromIntent(android.content.Intent,android.content.Context)>",
      "<android.telephony.PhoneNumberUtils: java.lang.String internalGetStrippedReversed(java.lang.String,int)>",
      "<android.telephony.PhoneNumberUtils: java.lang.String stringFromStringAndTOA(java.lang.String,int)>",
      "<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>",
      "<android.telephony.PhoneNumberUtils: java.lang.String toCallerIDMinMatch(java.lang.String)>",
      "<android.telephony.SmsMessage$SubmitPdu: java.lang.String toString()>",
      "<android.telephony.SmsMessage: java.lang.String getServiceCenterAddress()>",
      "<android.test.RenamingDelegatingContext: java.lang.String renamedFileName(java.lang.String)>",
      "<android.test.suitebuilder.TestSuiteBuilder: java.lang.String parsePackageNameFromClassName(java.lang.String)>",
      "<android.view.inputmethod.CompletionInfo: java.lang.String toString()>",
      "<android.view.inputmethod.CorrectionInfo: java.lang.String toString()>",
      "<android.view.inputmethod.InputBinding: java.lang.String toString()>",
      "<android.view.inputmethod.InputMethodInfo: java.lang.String toString()>",
      "<android.webkit.BrowserFrame: java.lang.String getRawResFilename(int,android.content.Context)>",
      "<android.webkit.BrowserFrame: java.lang.String getUserAgentString()>",
      "<android.webkit.CertTool: java.lang.String getSignedPublicKey(android.content.Context,int,java.lang.String)>",
      "<android.webkit.ContentLoader: java.lang.String errString(java.lang.Exception)>",
      "<android.webkit.JWebCoreJavaBridge: java.lang.String cookies(java.lang.String)>",
      "<android.webkit.JWebCoreJavaBridge: java.lang.String getSignedPublicKey(int,java.lang.String,java.lang.String)>",
      "<android.webkit.JWebCoreJavaBridge: java.lang.String resolveFilePathForContentUri(java.lang.String)>",
      "<android.webkit.JniUtil: java.lang.String getAutofillQueryUrl()>",
      "<android.webkit.L10nUtils: java.lang.String getLocalisedString(int)>",
      "<android.webkit.LoadListener: java.lang.String guessMimeTypeFromExtension(java.lang.String)>",
      "<android.webkit.LoadListener: java.lang.String host()>",
      "<android.webkit.LoadListener: java.lang.String realm()>",
      "<android.webkit.URLUtil: java.lang.String composeSearchUrl(java.lang.String,java.lang.String,java.lang.String)>",
      "<android.webkit.URLUtil: java.lang.String guessUrl(java.lang.String)>",
      "<android.webkit.URLUtil: java.lang.String parseContentDisposition(java.lang.String)>",
      "<android.webkit.URLUtil: java.lang.String stripAnchor(java.lang.String)>",
      "<com.android.internal.content.PackageMonitor: java.lang.String getPackageName(android.content.Intent)>",
      "<com.android.internal.telephony.ApnContext: java.lang.String toString()>",
      "<com.android.internal.telephony.CallerInfo: java.lang.String getCurrentCountryIso(android.content.Context,java.util.Locale)>",
      "<com.android.internal.telephony.CallerInfo: java.lang.String getGeoDescription(android.content.Context,java.lang.String)>",
      "<com.android.internal.telephony.CallerInfo: java.lang.String normalize(java.lang.String)>",
      "<com.android.internal.telephony.PhoneSubInfo: java.lang.String getCompleteVoiceMailNumber()>",
      "<com.android.internal.telephony.RestrictedState: java.lang.String toString()>",
      "<com.android.internal.telephony.SmsResponse: java.lang.String toString()>",
      "<com.android.internal.telephony.cat.ValueParser: java.lang.String retrieveAlphaId(com.android.internal.telephony.cat.ComprehensionTlv)>",
      "<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getVoiceMailNumber()>",
      "<com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaDisplayInfoRec: java.lang.String toString()>",
      "<com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaLineControlInfoRec: java.lang.String toString()>",
      "<com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaT53AudioControlInfoRec: java.lang.String toString()>",
      "<com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaT53ClirInfoRec: java.lang.String toString()>",
      "<com.android.internal.telephony.cdma.sms.BearerData$TimeStamp: java.lang.String toString()>",
      "<com.android.internal.telephony.cdma.sms.BearerData: java.lang.String decode7bitAscii(byte[],int,int)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: java.lang.String decode7bitGsm(byte[],int,int)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: java.lang.String decodeLatin(byte[],int,int)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: java.lang.String decodeUtf16(byte[],int,int)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: java.lang.String decodeUtf8(byte[],int,int)>",
      "<com.android.internal.telephony.cdma.sms.CdmaSmsAddress: java.lang.String filterWhitespace(java.lang.String)>",
      "<com.android.internal.telephony.sip.SipPhone: java.lang.String getSipDomain(android.net.sip.SipProfile)>",
      "<com.android.internal.view.InputBindResult: java.lang.String toString()>",
      "<gov.nist.javax.sip.message.ContentImpl: java.lang.String toString()>",
      "<java.lang.ProcessManager$ProcessImpl: java.lang.String toString()>",
      "<java.lang.Thread: java.lang.String getName()>",
      "<java.lang.Thread: java.lang.String toString()>",
      "<java.lang.reflect.Method: java.lang.String getSignatureAttribute()>",
      "<java.lang.reflect.Method: java.lang.String toGenericString()>",
      "<java.net.Socks4Message: java.lang.String getUserId()>",
      "<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>",
      "<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL,boolean)>",
      "<javax.net.ssl.DefaultHostnameVerifier: java.lang.String getFirstCn(java.security.cert.X509Certificate)>",
      "<junit.textui.ResultPrinter: java.lang.String elapsedTimeAsString(long)>",
      "<libcore.io.ForwardingOs: java.lang.String gai_strerror(int)>",
      "<libcore.io.ForwardingOs: java.lang.String getenv(java.lang.String)>",
      "<libcore.io.ForwardingOs: java.lang.String getnameinfo(java.net.InetAddress,int)>",
      "<libcore.io.ForwardingOs: java.lang.String if_indextoname(int)>",
      "<libcore.io.ForwardingOs: java.lang.String strerror(int)>",
      "<libcore.io.IoUtils: java.lang.String readFileAsString(java.lang.String)>",
      "<libcore.io.Streams: java.lang.String readFully(java.io.Reader)>",
      "<libcore.net.http.HttpEngine: java.lang.String getOriginAddress(java.net.URL)>",
      "<libcore.net.http.HttpResponseCache: java.lang.String uriToKey(java.net.URI)>",
      "<libcore.net.url.FtpURLConnection: java.lang.String getContentType()>",
      "<libcore.net.url.JarHandler: java.lang.String toExternalForm(java.net.URL)>",
      "<libcore.net.url.UrlUtils: java.lang.String getSchemePrefix(java.lang.String)>",
      "<libcore.util.ZoneInfo: java.lang.String toString()>",
      "<org.apache.harmony.luni.lang.reflect.ImplForArray: java.lang.String toString()>",
      "<org.apache.harmony.security.x501.Name: java.lang.String getName0(java.lang.String)>",
      "<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String getCipherSuite()>",
      "<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String getCompressionMethod()>",
      "<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String getProtocol()>",
      "<org.bouncycastle.asn1.DERBitString: java.lang.String getString()>",
      "<org.bouncycastle.asn1.util.ASN1Dump: java.lang.String dumpAsString(java.lang.Object)>",
      "<org.bouncycastle.asn1.x500.style.BCStyle: java.lang.String toString(org.bouncycastle.asn1.x500.X500Name)>",
      "<org.bouncycastle.asn1.x500.style.IETFUtils: java.lang.String valueToString(org.bouncycastle.asn1.ASN1Encodable)>",
      "<org.bouncycastle.jce.provider.JCEECPublicKey: java.lang.String toString()>",
      "<org.bouncycastle.x509.X509Attribute: java.lang.String getOID()>",
      "<org.kxml2.io.KXmlParser: java.lang.String getAttributeName(int)>",
      "<org.kxml2.io.KXmlParser: java.lang.String getAttributeNamespace(int)>",
      "<org.kxml2.io.KXmlParser: java.lang.String getAttributePrefix(int)>",
      "<org.kxml2.io.KXmlParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>",
      "<org.kxml2.io.KXmlParser: java.lang.String getAttributeValue(int)>",
      "<org.kxml2.io.KXmlParser: java.lang.String getPositionDescription()>",
      "<org.kxml2.io.KXmlParser: java.lang.String nextText()>",
      "<org.kxml2.io.KXmlParser: java.lang.String readComment(boolean)>",
      "<org.kxml2.io.KXmlParser: java.lang.String readName()>",
      "<org.kxml2.io.KXmlParser: java.lang.String readQuotedId(boolean)>",
      "<android.app.ContextImpl: java.lang.String[] databaseList()>",
      "<android.app.ContextImpl: java.lang.String[] fileList()>",
      "<android.content.ContentProvider$Transport: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>",
      "<android.content.ContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>",
      "<android.content.ContentProviderClient: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>",
      "<android.content.ContentProviderProxy: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>",
      "<android.content.ContentResolver: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>",
      "<android.content.Intent: java.lang.String[] getStringArrayExtra(java.lang.String)>",
      "<android.content.res.Resources: java.lang.String[] getStringArray(int)>",
      "<android.database.sqlite.SQLiteQueryBuilder: java.lang.String[] computeProjection(java.lang.String[])>",
      "<android.test.RenamingDelegatingContext: java.lang.String[] databaseList()>",
      "<android.test.RenamingDelegatingContext: java.lang.String[] fileList()>",
      "<android.webkit.PluginManager: java.lang.String[] getPluginDirectories()>",
      "<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String[] parseTypes(java.lang.String)>",
      "<libcore.io.ForwardingOs: java.lang.String[] environ()>",
      "<org.apache.harmony.xnet.provider.jsse.NativeCrypto: java.lang.String[] checkEnabledCompressionMethods(java.lang.String[])>",
      "<org.apache.harmony.xnet.provider.jsse.NativeCrypto: java.lang.String[] checkEnabledProtocols(java.lang.String[])>",
      "<org.apache.harmony.xnet.provider.jsse.NativeCrypto: java.lang.String[] getSupportedCipherSuites()>",
      "<org.apache.harmony.xnet.provider.jsse.NativeCrypto: java.lang.String[] getSupportedCompressionMethods()>",
      "<org.apache.harmony.xnet.provider.jsse.SSLServerSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()>",
      "<org.apache.harmony.xnet.provider.jsse.SSLServerSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()>",
      "<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>",
      "<org.kxml2.io.KXmlParser: java.lang.String[] ensureCapacity(java.lang.String[],int)>",
      "<libcore.io.ForwardingOs: libcore.io.StructLinger getsockoptLinger(java.io.FileDescriptor,int,int)>",
      "<libcore.io.ForwardingOs: libcore.io.StructPasswd getpwnam(java.lang.String)>",
      "<libcore.io.ForwardingOs: libcore.io.StructPasswd getpwuid(int)>",
      "<libcore.io.ForwardingOs: libcore.io.StructStat fstat(java.io.FileDescriptor)>",
      "<libcore.io.ForwardingOs: libcore.io.StructStat lstat(java.lang.String)>",
      "<libcore.io.ForwardingOs: libcore.io.StructStat stat(java.lang.String)>",
      "<libcore.io.ForwardingOs: libcore.io.StructStatFs fstatfs(java.io.FileDescriptor)>",
      "<libcore.io.ForwardingOs: libcore.io.StructStatFs statfs(java.lang.String)>",
      "<libcore.io.ForwardingOs: libcore.io.StructTimeval getsockoptTimeval(java.io.FileDescriptor,int,int)>",
      "<libcore.io.ForwardingOs: libcore.io.StructUtsname uname()>",
      "<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState valueOf(java.lang.String)>",
      "<android.webkit.HTML5VideoInline: android.graphics.SurfaceTexture getSurfaceTexture(int)>",
      "<android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypes()>",
      "<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>",
      "<android.support.v4.app.TaskStackBuilder: android.support.v4.app.TaskStackBuilder addNextIntent(android.content.Intent)>",
      "<android.app.ActivityManager: android.app.ActivityManager$TaskThumbnails getTaskThumbnails(int)>",
      "<android.test.suitebuilder.TestMethod: junit.framework.TestCase instantiateTest(java.lang.Class,java.lang.String)>",
      "<com.android.internal.telephony.cdma.CdmaSMSDispatcher: com.android.internal.telephony.SmsMessageBase$TextEncodingDetails calculateLength(java.lang.CharSequence,boolean)>",
      "<com.android.internal.telephony.gsm.GsmSMSDispatcher: com.android.internal.telephony.SmsMessageBase$TextEncodingDetails calculateLength(java.lang.CharSequence,boolean)>",
      "<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>",
      "<java.lang.Thread: java.lang.Thread currentThread()>",
      "<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>",
      "<org.bouncycastle.asn1.x509.Time: org.bouncycastle.asn1.x509.Time getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)>",
      "<android.util.TimeUtils: java.util.TimeZone getTimeZone(int,boolean,long,java.lang.String)>",
      "<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>",
      "<android.widget.Toast: android.widget.Toast makeText(android.content.Context,int,int)>",
      "<org.apache.harmony.xnet.provider.jsse.DefaultSSLContextImpl: javax.net.ssl.TrustManager[] getTrustManagers()>",
      "<org.apache.harmony.luni.lang.reflect.ImplForVariable: java.lang.reflect.TypeVariable findFormalVar(java.lang.reflect.GenericDeclaration,java.lang.String)>",
      "<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>",
      "<java.io.File: java.net.URI toURI()>",
      "<java.net.URI: java.net.URI create(java.lang.String)>",
      "<java.net.URI: java.net.URI duplicate()>",
      "<java.net.URI: java.net.URI normalize()>",
      "<java.net.URI: java.net.URI parseServerAuthority()>",
      "<java.net.URI: java.net.URI relativize(java.net.URI)>",
      "<java.net.URI: java.net.URI resolve(java.lang.String)>",
      "<java.net.URI: java.net.URI resolve(java.net.URI)>",
      "<java.net.URL: java.net.URI toURI()>",
      "<java.net.URL: java.net.URI toURILenient()>",
      "<libcore.net.http.RequestHeaders: java.net.URI getUri()>",
      "<libcore.net.http.ResponseHeaders: java.net.URI getUri()>",
      "<org.apache.http.client.methods.HttpRequestBase: java.net.URI getURI()>",
      "<org.apache.http.impl.client.RequestWrapper: java.net.URI getURI()>",
      "<android.app.LoadedApk$WarningContextClassLoader: java.net.URL getResource(java.lang.String)>",
      "<java.io.File: java.net.URL toURL()>",
      "<java.lang.BootClassLoader: java.net.URL findResource(java.lang.String)>",
      "<java.lang.BootClassLoader: java.net.URL getResource(java.lang.String)>",
      "<java.lang.Class: java.net.URL getResource(java.lang.String)>",
      "<java.lang.ClassLoader: java.net.URL findResource(java.lang.String)>",
      "<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>",
      "<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>",
      "<java.lang.TwoEnumerationsInOne: java.net.URL nextElement()>",
      "<java.lang.VMClassLoader: java.net.URL getResource(java.lang.String)>",
      "<java.net.Authenticator: java.net.URL getRequestingURL()>",
      "<java.net.JarURLConnection: java.net.URL getJarFileURL()>",
      "<java.net.URI: java.net.URL toURL()>",
      "<java.net.URLConnection: java.net.URL getURL()>",
      "<junit.runner.TestCaseClassLoader: java.net.URL getResource(java.lang.String)>",
      "<libcore.net.http.HttpsURLConnectionImpl: java.net.URL getURL()>",
      "<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL)>",
      "<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>",
      "<libcore.net.http.HttpHandler: java.net.URLConnection openConnection(java.net.URL)>",
      "<libcore.net.http.HttpHandler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>",
      "<libcore.net.http.HttpsHandler: java.net.URLConnection openConnection(java.net.URL)>",
      "<libcore.net.http.HttpsHandler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>",
      "<libcore.net.url.FileHandler: java.net.URLConnection openConnection(java.net.URL)>",
      "<libcore.net.url.FileHandler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>",
      "<libcore.net.url.FtpHandler: java.net.URLConnection openConnection(java.net.URL)>",
      "<libcore.net.url.FtpHandler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>",
      "<libcore.net.url.JarHandler: java.net.URLConnection openConnection(java.net.URL)>",
      "<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>",
      "<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>",
      "<android.app.DownloadManager: android.net.Uri getDownloadUri(long)>",
      "<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)>",
      "<android.content.ClipData$Item: android.net.Uri getUri()>",
      "<android.content.ContentProvider$Transport: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>",
      "<android.content.ContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>",
      "<android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>",
      "<android.content.ContentProviderOperation: android.net.Uri getUri()>",
      "<android.content.ContentProviderProxy: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>",
      "<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>",
      "<android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>",
      "<android.content.SearchRecentSuggestionsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>",
      "<android.database.AbstractCursor: android.net.Uri getNotificationUri()>",
      "<android.database.sqlite.SqliteWrapper: android.net.Uri insert(android.content.Context,android.content.ContentResolver,android.net.Uri,android.content.ContentValues)>",
      "<android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)>",
      "<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>",
      "<android.media.RingtoneManager: android.net.Uri getRingtoneUri(int)>",
      "<android.media.RingtoneManager: android.net.Uri getUriFromCursor(android.database.Cursor)>",
      "<android.media.RingtoneManager: android.net.Uri getValidRingtoneUri(android.content.Context)>",
      "<android.media.RingtoneManager: android.net.Uri getValidRingtoneUriFromCursorAndClose(android.content.Context,android.database.Cursor)>",
      "<android.net.Uri$Builder: android.net.Uri build()>",
      "<android.net.Uri$HierarchicalUri: android.net.Uri readFrom(android.os.Parcel)>",
      "<android.net.Uri$OpaqueUri: android.net.Uri readFrom(android.os.Parcel)>",
      "<android.net.Uri$StringUri: android.net.Uri readFrom(android.os.Parcel)>",
      "<android.net.Uri: android.net.Uri fromFile(java.io.File)>",
      "<android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)>",
      "<android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>",
      "<android.nfc.NdefRecord: android.net.Uri parseWellKnownUriRecord(android.nfc.NdefRecord)>",
      "<android.preference.RingtonePreference: android.net.Uri onRestoreRingtone()>",
      "<android.provider.BrowserContract$Bookmarks: android.net.Uri buildFolderUri(long)>",
      "<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)>",
      "<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>",
      "<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)>",
      "<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)>",
      "<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>",
      "<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.net.Uri build()>",
      "<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>",
      "<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>",
      "<android.provider.ContactsContract$Contacts: android.net.Uri lookupContact(android.content.ContentResolver,android.net.Uri)>",
      "<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>",
      "<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>",
      "<android.provider.MediaStore$Audio$Albums: android.net.Uri getContentUri(java.lang.String)>",
      "<android.provider.MediaStore$Audio$Artists$Albums: android.net.Uri getContentUri(java.lang.String,long)>",
      "<android.provider.MediaStore$Audio$Artists: android.net.Uri getContentUri(java.lang.String)>",
      "<android.provider.MediaStore$Audio$Genres$Members: android.net.Uri getContentUri(java.lang.String,long)>",
      "<android.provider.MediaStore$Audio$Genres: android.net.Uri getContentUri(java.lang.String)>",
      "<android.provider.MediaStore$Audio$Genres: android.net.Uri getContentUriForAudioId(java.lang.String,int)>",
      "<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUri(java.lang.String)>",
      "<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUriForPath(java.lang.String)>",
      "<android.provider.MediaStore$Audio$Playlists$Members: android.net.Uri getContentUri(java.lang.String,long)>",
      "<android.provider.MediaStore$Audio$Playlists: android.net.Uri getContentUri(java.lang.String)>",
      "<android.provider.MediaStore$Files: android.net.Uri getContentUri(java.lang.String)>",
      "<android.provider.MediaStore$Files: android.net.Uri getContentUri(java.lang.String,long)>",
      "<android.provider.MediaStore$Files: android.net.Uri getMtpObjectsUri(java.lang.String)>",
      "<android.provider.MediaStore$Files: android.net.Uri getMtpObjectsUri(java.lang.String,long)>",
      "<android.provider.MediaStore$Files: android.net.Uri getMtpReferencesUri(java.lang.String,long)>",
      "<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>",
      "<android.provider.MediaStore$Images$Thumbnails: android.net.Uri getContentUri(java.lang.String)>",
      "<android.provider.MediaStore$Video$Media: android.net.Uri getContentUri(java.lang.String)>",
      "<android.provider.MediaStore$Video$Thumbnails: android.net.Uri getContentUri(java.lang.String)>",
      "<android.provider.MediaStore: android.net.Uri getMediaScannerUri()>",
      "<android.provider.Settings$Bookmarks: android.net.Uri add(android.content.ContentResolver,android.content.Intent,java.lang.String,java.lang.String,char,int)>",
      "<android.provider.Settings$NameValueTable: android.net.Uri getUriFor(android.net.Uri,java.lang.String)>",
      "<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>",
      "<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>",
      "<android.provider.SyncStateContract$Helpers: android.net.Uri insert(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account,byte[])>",
      "<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)>",
      "<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)>",
      "<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)>",
      "<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)>",
      "<android.provider.Telephony$Sms: android.net.Uri addMessageToUri(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,boolean)>",
      "<android.provider.Telephony$Sms: android.net.Uri addMessageToUri(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,boolean,long)>",
      "<android.speech.tts.TextToSpeech: android.net.Uri makeResourceUri(java.lang.String,int)>",
      "<android.support.v4.content.CursorLoader: android.net.Uri getUri()>",
      "<android.webkit.CallbackProxy$UploadFile: android.net.Uri getResult()>",
      "<android.webkit.CallbackProxy: android.net.Uri openFileChooser(java.lang.String)>",
      "<android.app.ApplicationPackageManager: android.content.pm.UserInfo createUser(java.lang.String,int)>",
      "<org.bouncycastle.asn1.BERConstructedOctetString: java.util.Vector generateOcts()>",
      "<android.app.ApplicationPackageManager: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()>",
      "<android.content.pm.PackageParser: android.content.pm.VerifierInfo parseVerifier(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,java.lang.String[])>",
      "<android.app.Activity: android.view.View getCurrentFocus()>",
      "<android.app.Activity: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)>",
      "<android.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>",
      "<android.net.http.SslCertificate: android.view.View inflateCertificateView(android.content.Context)>",
      "<android.view.ViewGroup: android.view.View getChildAt(int)>",
      "<com.android.internal.view.menu.MenuPopupHelper$MenuAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>",
      "<android.support.v4.app.NoSaveStateFrameLayout: android.view.ViewGroup wrap(android.view.View)>",
      "<android.app.ActivityManagerProxy: android.app.IActivityManager$WaitResult startActivityAndWait(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.net.Uri[],int,android.os.IBinder,java.lang.String,int,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,boolean)>",
      "<android.app.ContextImpl: android.app.WallpaperManager getWallpaperManager()>",
      "<android.webkit.BrowserFrame: android.webkit.WebResourceResponse shouldInterceptRequest(java.lang.String)>",
      "<android.app.LocalActivityManager: android.view.Window startActivity(java.lang.String,android.content.Intent)>",
      "<android.os.WorkSource: android.os.WorkSource addReturningNewbs(android.os.WorkSource)>",
      "<android.os.WorkSource: android.os.WorkSource addReturningNewbs(int)>",
      "<android.os.WorkSource: android.os.WorkSource[] setReturningDiffs(android.os.WorkSource)>",
      "<org.bouncycastle.asn1.x509.X509Extensions: org.bouncycastle.asn1.x509.X509Extension getExtension(org.bouncycastle.asn1.DERObjectIdentifier)>",
      "<org.bouncycastle.asn1.x9.X962Parameters: org.bouncycastle.asn1.x9.X962Parameters getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)>",
      "<android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(int)>",
      "<android.content.res.Resources: android.content.res.XmlResourceParser getLayout(int)>",
      "<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>",
      "<android.util.Xml: org.xmlpull.v1.XmlSerializer newSerializer()>",
      "<android.app.Activity: boolean dispatchKeyEvent(android.view.KeyEvent)>",
      "<android.app.Activity: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>",
      "<android.app.Activity: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>",
      "<android.app.Activity: boolean dispatchTouchEvent(android.view.MotionEvent)>",
      "<android.app.Activity: boolean dispatchTrackballEvent(android.view.MotionEvent)>",
      "<android.app.Activity: boolean hasWindowFocus()>",
      "<android.app.Activity: boolean isImmersive()>",
      "<android.app.Activity: boolean isTaskRoot()>",
      "<android.app.Activity: boolean moveTaskToBack(boolean)>",
      "<android.app.Activity: boolean onCreatePanelMenu(int,android.view.Menu)>",
      "<android.app.Activity: boolean onKeyUp(int,android.view.KeyEvent)>",
      "<android.app.Activity: boolean onMenuItemSelected(int,android.view.MenuItem)>",
      "<android.app.Activity: boolean onMenuOpened(int,android.view.Menu)>",
      "<android.app.Activity: boolean onPreparePanel(int,android.view.View,android.view.Menu)>",
      "<android.app.Activity: boolean onTouchEvent(android.view.MotionEvent)>",
      "<android.app.Activity: boolean requestWindowFeature(int)>",
      "<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int)>",
      "<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent)>",
      "<android.app.ActivityManager: boolean clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)>",
      "<android.app.ActivityManager: boolean getPackageAskScreenCompat(java.lang.String)>",
      "<android.app.ActivityManager: boolean isRunningInTestHarness()>",
      "<android.app.ActivityManager: boolean isUserAMonkey()>",
      "<android.app.ActivityManagerProxy: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)>",
      "<android.app.ActivityManagerProxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent)>",
      "<android.app.ActivityManagerProxy: boolean isIntentSenderTargetedToPackage(android.content.IIntentSender)>",
      "<android.app.ActivityManagerProxy: boolean killPids(int[],java.lang.String,boolean)>",
      "<android.app.ActivityManagerProxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>",
      "<android.app.ActivityManagerProxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher)>",
      "<android.app.ActivityManagerProxy: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent)>",
      "<android.app.ActivityManagerProxy: boolean unbindService(android.app.IServiceConnection)>",
      "<android.app.ApplicationPackageManager: boolean removeUser(int)>",
      "<android.app.ApplicationThreadNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>",
      "<android.app.ContextImpl$ApplicationContentResolver: boolean releaseProvider(android.content.IContentProvider)>",
      "<android.app.ContextImpl: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>",
      "<android.app.ContextImpl: boolean deleteDatabase(java.lang.String)>",
      "<android.app.ContextImpl: boolean deleteFile(java.lang.String)>",
      "<android.app.ContextImpl: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>",
      "<android.app.ContextImpl: boolean stopService(android.content.Intent)>",
      "<android.app.Instrumentation$ActivityMonitor: boolean match(android.content.Context,android.app.Activity,android.content.Intent)>",
      "<android.app.ProgressDialog: boolean isIndeterminate()>",
      "<android.app.ReceiverRestrictedContext: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>",
      "<android.app.SearchDialog: boolean isEmpty(android.widget.AutoCompleteTextView)>",
      "<android.app.SearchDialog: boolean isLandscapeMode(android.content.Context)>",
      "<android.app.SearchDialog: boolean isOutOfBounds(android.view.View,android.view.MotionEvent)>",
      "<android.app.SearchDialog: boolean onClosePressed()>",
      "<android.app.SearchDialog: boolean show(android.content.ComponentName,android.os.Bundle)>",
      "<android.app.SearchDialog: boolean show(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle)>",
      "<android.app.Service: boolean onUnbind(android.content.Intent)>",
      "<android.app.SharedPreferencesImpl$EditorImpl: boolean commit()>",
      "<android.app.SharedPreferencesImpl: boolean hasFileChangedUnexpectedly()>",
      "<android.app.backup.FileBackupHelperBase: boolean isKeyInList(java.lang.String,java.lang.String[])>",
      "<android.app.backup.FileBackupHelperBase: boolean writeFile(java.io.File,android.app.backup.BackupDataInputStream)>",
      "<android.content.ComponentName: boolean equals(java.lang.Object)>",
      "<android.content.ContentProvider$Transport: boolean hasWritePermission(android.net.Uri)>",
      "<android.content.ContentProviderClient: boolean release()>",
      "<android.content.ContentValues: boolean containsKey(java.lang.String)>",
      "<android.content.ContentValues: boolean equals(java.lang.Object)>",
      "<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>",
      "<android.content.Context: boolean stopService(android.content.Intent)>",
      "<android.content.ContextWrapper: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>",
      "<android.content.ContextWrapper: boolean stopService(android.content.Intent)>",
      "<android.content.Intent$FilterComparison: boolean equals(java.lang.Object)>",
      "<android.content.Intent: boolean filterEquals(android.content.Intent)>",
      "<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>",
      "<android.content.Intent: boolean hasCategory(java.lang.String)>",
      "<android.content.Intent: boolean hasExtra(java.lang.String)>",
      "<android.content.Intent: boolean hasFileDescriptors()>",
      "<android.content.IntentFilter: boolean hasDataAuthority(android.net.Uri)>",
      "<android.content.SyncManager$SyncHandler: boolean dispatchSyncOperation(android.content.SyncOperation)>",
      "<android.content.SyncManager$SyncHandler: boolean isActivityAvailable(android.content.Intent)>",
      "<android.content.SyncStorageEngine: boolean maybeMigrateSettingsForRenamedAuthorities()>",
      "<android.content.pm.ApplicationInfo: boolean isPackageUnavailable(android.content.pm.PackageManager)>",
      "<android.content.pm.PackageManager: boolean isSameUser(int,int)>",
      "<android.content.pm.PackageParser: boolean collectCertificates(android.content.pm.PackageParser$Package,int)>",
      "<android.content.pm.PackageParser: boolean parseIntent(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,android.content.pm.PackageParser$IntentInfo,java.lang.String[],boolean)>",
      "<android.content.pm.PackageParser: boolean parseProviderTags(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.pm.PackageParser$Provider,java.lang.String[])>",
      "<android.content.pm.Signature: boolean equals(java.lang.Object)>",
      "<android.content.res.Resources: boolean getBoolean(int)>",
      "<android.database.BulkCursorToCursorAdaptor: boolean onMove(int,int)>",
      "<android.database.BulkCursorToCursorAdaptor: boolean requery()>",
      "<android.database.ContentObserver$Transport: boolean deliverSelfNotifications()>",
      "<android.database.sqlite.SQLiteCursor: boolean requery()>",
      "<android.hardware.usb.UsbDeviceConnection: boolean open(java.lang.String,android.os.ParcelFileDescriptor)>",
      "<android.inputmethodservice.ExtractEditText: boolean onTextContextMenuItem(int)>",
      "<android.media.AudioManager: boolean isBluetoothScoAvailableOffCall()>",
      "<android.media.AudioManager: boolean isBluetoothScoOn()>",
      "<android.media.AudioManager: boolean isMusicActive()>",
      "<android.media.AudioManager: boolean isStreamMute(int)>",
      "<android.media.RingtoneManager: boolean isDefault(android.net.Uri)>",
      "<android.net.http.Connection: boolean openHttpConnection(android.net.http.Request)>",
      "<android.net.sip.SipManager: boolean isIncomingCallIntent(android.content.Intent)>",
      "<android.opengl.EGLLogWrapper: boolean eglCopyBuffers(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,java.lang.Object)>",
      "<android.opengl.EGLLogWrapper: boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext)>",
      "<android.opengl.EGLLogWrapper: boolean eglReleaseThread()>",
      "<android.os.Bundle: boolean hasFileDescriptors()>",
      "<android.os.Messenger: boolean equals(java.lang.Object)>",
      "<android.os.PatternMatcher: boolean matchPattern(java.lang.String,java.lang.String,int)>",
      "<android.os.Vibrator: boolean hasVibrator()>",
      "<android.os.WorkSource: boolean add(android.os.WorkSource)>",
      "<android.os.WorkSource: boolean add(int)>",
      "<android.os.WorkSource: boolean remove(android.os.WorkSource)>",
      "<android.os.WorkSource: boolean updateLocked(android.os.WorkSource,boolean,boolean)>",
      "<android.preference.RingtonePreference: boolean onActivityResult(int,int,android.content.Intent)>",
      "<android.provider.Settings$NameValueTable: boolean putString(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String)>",
      "<android.provider.Settings$System: boolean getShowGTalkServiceStatus(android.content.ContentResolver)>",
      "<android.provider.Settings$System: boolean putConfiguration(android.content.ContentResolver,android.content.res.Configuration)>",
      "<android.provider.Telephony$Sms$Draft: boolean saveMessage(android.content.ContentResolver,android.net.Uri,java.lang.String)>",
      "<android.provider.Telephony$Sms: boolean moveMessageToFolder(android.content.Context,android.net.Uri,int,int)>",
      "<android.speech.SpeechRecognizer: boolean checkOpenConnection()>",
      "<android.speech.tts.TtsEngines: boolean isEngineInstalled(java.lang.String)>",
      "<android.support.v4.app.NavUtils: boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent)>",
      "<android.support.v4.content.LocalBroadcastManager: boolean sendBroadcast(android.content.Intent)>",
      "<android.support.v4.view.KeyEventCompatHoneycomb: boolean metaStateHasModifiers(int,int)>",
      "<android.support.v4.view.KeyEventCompatHoneycomb: boolean metaStateHasNoModifiers(int)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: boolean isCheckable(java.lang.Object)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: boolean isChecked(java.lang.Object)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: boolean isClickable(java.lang.Object)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: boolean isEnabled(java.lang.Object)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: boolean isFocusable(java.lang.Object)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: boolean isFocused(java.lang.Object)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: boolean isLongClickable(java.lang.Object)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: boolean isPassword(java.lang.Object)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: boolean isScrollable(java.lang.Object)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: boolean isSelected(java.lang.Object)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: boolean performAction(java.lang.Object,int)>",
      "<android.telephony.PhoneNumberUtils: boolean compare(java.lang.String,java.lang.String,boolean)>",
      "<android.telephony.PhoneNumberUtils: boolean compareStrictly(java.lang.String,java.lang.String)>",
      "<android.telephony.PhoneNumberUtils: boolean isDialable(java.lang.String)>",
      "<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(java.lang.String)>",
      "<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(java.lang.String,java.lang.String)>",
      "<android.telephony.PhoneNumberUtils: boolean isEmergencyNumberInternal(java.lang.String,java.lang.String,boolean)>",
      "<android.telephony.PhoneNumberUtils: boolean isGlobalPhoneNumber(java.lang.String)>",
      "<android.telephony.PhoneNumberUtils: boolean isNonSeparator(java.lang.String)>",
      "<android.telephony.PhoneNumberUtils: boolean isSeparator(char)>",
      "<android.telephony.PhoneNumberUtils: boolean matchTrunkPrefix(java.lang.String,int)>",
      "<android.telephony.SmsMessage: boolean isEmail()>",
      "<android.test.IsolatedContext: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>",
      "<android.test.RenamingDelegatingContext: boolean deleteDatabase(java.lang.String)>",
      "<android.test.RenamingDelegatingContext: boolean deleteFile(java.lang.String)>",
      "<android.test.mock.MockContext: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>",
      "<android.test.mock.MockContext: boolean stopService(android.content.Intent)>",
      "<android.test.suitebuilder.TestSuiteBuilder: boolean satisfiesAllPredicates(android.test.suitebuilder.TestMethod)>",
      "<android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>",
      "<android.view.ViewRootImpl: boolean scrollToRectOrFocus(android.graphics.Rect,boolean)>",
      "<android.view.inputmethod.InputMethodInfo: boolean equals(java.lang.Object)>",
      "<android.webkit.BrowserFrame: boolean handleUrl(java.lang.String)>",
      "<android.webkit.BrowserFrame: boolean shouldSaveFormData()>",
      "<android.webkit.ContentLoader: boolean setupStreamAndSendStatus()>",
      "<android.webkit.FileLoader: boolean setupStreamAndSendStatus()>",
      "<android.webkit.FindActionModeCallback: boolean onCreateActionMode(android.view.ActionMode,android.view.Menu)>",
      "<android.webkit.FrameLoader: boolean executeLoad()>",
      "<android.webkit.FrameLoader: boolean handleCache()>",
      "<android.webkit.FrameLoader: boolean handleHTTPLoad()>",
      "<android.webkit.FrameLoader: boolean handleLocalFile(java.lang.String,android.webkit.LoadListener,android.webkit.WebSettings)>",
      "<android.webkit.HTML5VideoFullScreen: boolean onTouch(android.view.View,android.view.MotionEvent)>",
      "<android.webkit.HTML5VideoView: boolean isPlaying()>",
      "<android.webkit.HTML5VideoViewProxy$VideoPlayer: boolean isPlaying(android.webkit.HTML5VideoViewProxy)>",
      "<android.webkit.HTML5VideoViewProxy: boolean onError(android.media.MediaPlayer,int,int)>",
      "<android.webkit.HTML5VideoViewProxy: boolean onInfo(android.media.MediaPlayer,int,int)>",
      "<android.webkit.JniUtil: boolean canSatisfyMemoryAllocation(long)>",
      "<android.webkit.LoadListener: boolean authCredentialsInvalid()>",
      "<android.webkit.LoadListener: boolean checkCache(java.util.Map)>",
      "<android.webkit.LoadListener: boolean handleSslErrorRequest(android.net.http.SslError)>",
      "<android.webkit.Network: boolean isValidProxySet()>",
      "<android.webkit.PluginFullScreenHolder$CustomFrameLayout: boolean onKeyDown(int,android.view.KeyEvent)>",
      "<android.webkit.PluginFullScreenHolder$CustomFrameLayout: boolean onKeyUp(int,android.view.KeyEvent)>",
      "<android.webkit.PluginFullScreenHolder$CustomFrameLayout: boolean onTrackballEvent(android.view.MotionEvent)>",
      "<android.webkit.SelectActionModeCallback: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)>",
      "<android.webkit.SelectActionModeCallback: boolean onCreateActionMode(android.view.ActionMode,android.view.Menu)>",
      "<android.webkit.SslCertLookupTable: boolean isAllowed(android.net.http.SslError)>",
      "<android.webkit.URLUtil: boolean isAboutUrl(java.lang.String)>",
      "<android.webkit.URLUtil: boolean isAssetUrl(java.lang.String)>",
      "<android.webkit.URLUtil: boolean isContentUrl(java.lang.String)>",
      "<android.webkit.URLUtil: boolean isCookielessProxyUrl(java.lang.String)>",
      "<android.webkit.URLUtil: boolean isDataUrl(java.lang.String)>",
      "<android.webkit.URLUtil: boolean isHttpUrl(java.lang.String)>",
      "<android.webkit.URLUtil: boolean isHttpsUrl(java.lang.String)>",
      "<android.webkit.URLUtil: boolean isJavaScriptUrl(java.lang.String)>",
      "<android.webkit.URLUtil: boolean isNetworkUrl(java.lang.String)>",
      "<android.webkit.URLUtil: boolean isResourceUrl(java.lang.String)>",
      "<android.webkit.URLUtil: boolean verifyURLEncoding(java.lang.String)>",
      "<android.webkit.WebViewCore: boolean isSupportedMediaMimeType(java.lang.String)>",
      "<android.webkit.WebViewDatabase: boolean endCacheTransaction()>",
      "<android.webkit.WebViewDatabase: boolean hasCookies()>",
      "<android.widget.AbsSeekBar: boolean onTouchEvent(android.view.MotionEvent)>",
      "<android.widget.ListView: boolean dispatchKeyEvent(android.view.KeyEvent)>",
      "<android.widget.OverScroller: boolean computeScrollOffset()>",
      "<android.widget.RemoteViews$Action: boolean startIntentSafely(android.content.Context,android.app.PendingIntent,android.content.Intent)>",
      "<android.widget.ShareActionProvider$ShareAcitivityChooserModelPolicy: boolean onChooseActivity(android.widget.ActivityChooserModel,android.content.Intent)>",
      "<com.android.internal.app.AlertController: boolean canTextInput(android.view.View)>",
      "<com.android.internal.app.AlertController: boolean setupTitle(android.widget.LinearLayout)>",
      "<com.android.internal.content.PackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)>",
      "<com.android.internal.net.DomainNameValidator: boolean domainTokenMatch(java.lang.String,java.lang.String)>",
      "<com.android.internal.net.DomainNameValidator: boolean isIpAddress(java.lang.String)>",
      "<com.android.internal.net.DomainNameValidator: boolean match(java.security.cert.X509Certificate,java.lang.String)>",
      "<com.android.internal.net.DomainNameValidator: boolean matchDns(java.lang.String,java.lang.String)>",
      "<com.android.internal.net.DomainNameValidator: boolean matchDns(java.security.cert.X509Certificate,java.lang.String)>",
      "<com.android.internal.net.DomainNameValidator: boolean matchIpAddress(java.security.cert.X509Certificate,java.lang.String)>",
      "<com.android.internal.telephony.ApnContext: boolean getDependencyMet()>",
      "<com.android.internal.telephony.ApnContext: boolean isDisconnected()>",
      "<com.android.internal.telephony.ApnContext: boolean isEnabled()>",
      "<com.android.internal.telephony.ApnContext: boolean isReady()>",
      "<com.android.internal.telephony.ApnSetting: boolean canHandleType(java.lang.String)>",
      "<com.android.internal.telephony.Call: boolean hasConnections()>",
      "<com.android.internal.telephony.Call: boolean isIdle()>",
      "<com.android.internal.telephony.ServiceStateTracker: boolean processPendingRadioPowerOffAfterDataOff()>",
      "<com.android.internal.telephony.cat.IconLoader: boolean handleImageDescriptor(byte[])>",
      "<com.android.internal.telephony.cdma.CDMAPhone: boolean isOtaSpNumber(java.lang.String)>",
      "<com.android.internal.telephony.cdma.CdmaCall: boolean isFull()>",
      "<com.android.internal.telephony.cdma.CdmaConnection: boolean compareTo(com.android.internal.telephony.DriverCall)>",
      "<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: boolean onTrySetupData(java.lang.String)>",
      "<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: boolean trySetupData(java.lang.String)>",
      "<com.android.internal.telephony.cdma.CdmaLteUiccRecords: boolean isProvisioned()>",
      "<com.android.internal.telephony.cdma.CdmaSMSDispatcher: boolean checkDuplicatePortOmadmWappush(byte[],int)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: boolean decodeMsgCount(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: boolean decodeUserData(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)>",
      "<com.android.internal.telephony.gsm.GSMPhone: boolean handleCallHoldIncallSupplementaryService(java.lang.String)>",
      "<com.android.internal.telephony.gsm.GsmCall: boolean isFull()>",
      "<com.android.internal.telephony.gsm.GsmConnection: boolean compareTo(com.android.internal.telephony.DriverCall)>",
      "<com.android.internal.telephony.gsm.GsmDataConnection: boolean isDnsOk(java.lang.String[])>",
      "<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean setupData(com.android.internal.telephony.ApnContext)>",
      "<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(com.android.internal.telephony.ApnContext)>",
      "<com.android.internal.telephony.gsm.GsmSMSDispatcher$SmsCbConcatInfo: boolean equals(java.lang.Object)>",
      "<com.android.internal.telephony.gsm.SmsMessage: boolean isCphsMwiMessage()>",
      "<com.android.internal.telephony.gsm.SmsMessage: boolean isMWIClearMessage()>",
      "<com.android.internal.telephony.gsm.SmsMessage: boolean isMWISetMessage()>",
      "<com.android.internal.telephony.sip.SipPhone: boolean canTake(java.lang.Object)>",
      "<com.android.internal.telephony.sip.SipPhoneBase: boolean canDial()>",
      "<com.android.internal.view.menu.ActionMenuItemView: boolean dispatchHoverEvent(android.view.MotionEvent)>",
      "<com.android.internal.view.menu.ActionMenuItemView: boolean onLongClick(android.view.View)>",
      "<com.android.internal.view.menu.ActionMenuPresenter: boolean flagActionItems()>",
      "<com.android.internal.view.menu.MenuPopupHelper: boolean isShowing()>",
      "<com.android.internal.view.menu.MenuPopupHelper: boolean onKey(android.view.View,int,android.view.KeyEvent)>",
      "<com.android.internal.view.menu.MenuPopupHelper: boolean onSubMenuSelected(com.android.internal.view.menu.SubMenuBuilder)>",
      "<com.android.internal.view.menu.MenuPopupHelper: boolean tryShow()>",
      "<com.android.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean collapseItemActionView(com.android.internal.view.menu.MenuBuilder,com.android.internal.view.menu.MenuItemImpl)>",
      "<com.android.internal.widget.ActionBarView$HomeView: boolean dispatchHoverEvent(android.view.MotionEvent)>",
      "<com.android.internal.widget.EditableInputConnection: boolean commitCorrection(android.view.inputmethod.CorrectionInfo)>",
      "<java.lang.Thread: boolean holdsLock(java.lang.Object)>",
      "<java.lang.Thread: boolean interrupted()>",
      "<java.lang.Thread: boolean isAlive()>",
      "<java.lang.Thread: boolean isDaemon()>",
      "<java.lang.Thread: boolean isInterrupted()>",
      "<java.lang.reflect.Method: boolean equals(java.lang.Object)>",
      "<java.net.Inet4Address: boolean isMCGlobal()>",
      "<java.net.URL: boolean sameFile(java.net.URL)>",
      "<java.net.URLStreamHandler: boolean equals(java.net.URL,java.net.URL)>",
      "<java.net.URLStreamHandler: boolean hostsEqual(java.net.URL,java.net.URL)>",
      "<java.net.URLStreamHandler: boolean sameFile(java.net.URL,java.net.URL)>",
      "<java.nio.DatagramChannelImpl$DatagramSocketAdapter: boolean isConnected()>",
      "<java.nio.FileChannelImpl$FileLockImpl: boolean isValid()>",
      "<java.nio.SelectionKeyImpl: boolean isConnected()>",
      "<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: boolean isBound()>",
      "<java.nio.SocketChannelImpl: boolean connect(java.net.SocketAddress)>",
      "<java.security.Provider: boolean implementsAlg(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>",
      "<javax.net.ssl.DefaultHostnameVerifier: boolean matches(java.lang.String,java.lang.String)>",
      "<libcore.icu.NativeBreakIterator: boolean equals(java.lang.Object)>",
      "<libcore.io.BlockGuardOs: boolean isLingerSocket(java.io.FileDescriptor)>",
      "<libcore.io.ForwardingOs: boolean access(java.lang.String,int)>",
      "<libcore.io.ForwardingOs: boolean isatty(java.io.FileDescriptor)>",
      "<libcore.net.http.HttpResponseCache$Entry: boolean matches(java.net.URI,java.lang.String,java.util.Map)>",
      "<org.apache.harmony.security.fortress.Services: boolean isEmpty()>",
      "<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: boolean isValid()>",
      "<org.apache.http.conn.scheme.PlainSocketFactory: boolean isSecure(java.net.Socket)>",
      "<org.apache.http.conn.ssl.AbstractVerifier: boolean acceptableCountryWildcard(java.lang.String)>",
      "<org.apache.http.conn.ssl.SSLSocketFactory: boolean isSecure(java.net.Socket)>",
      "<org.apache.http.impl.cookie.NetscapeDomainHandler: boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>",
      "<org.bouncycastle.asn1.ASN1Set: boolean lessThanOrEqual(byte[],byte[])>",
      "<org.bouncycastle.asn1.DERApplicationSpecific: boolean asn1Equals(org.bouncycastle.asn1.DERObject)>",
      "<org.bouncycastle.asn1.DERUnknownTag: boolean equals(java.lang.Object)>",
      "<org.bouncycastle.asn1.x500.style.BCStyle: boolean rdnAreEqual(org.bouncycastle.asn1.x500.RDN,org.bouncycastle.asn1.x500.RDN)>",
      "<org.bouncycastle.jce.provider.JCEECPublicKey: boolean equals(java.lang.Object)>",
      "<org.bouncycastle.util.IPAddress: boolean isValid(java.lang.String)>",
      "<org.bouncycastle.util.IPAddress: boolean isValidWithNetMask(java.lang.String)>",
      "<org.bouncycastle.x509.AttributeCertificateIssuer: boolean equals(java.lang.Object)>",
      "<org.bouncycastle.x509.AttributeCertificateIssuer: boolean match(java.lang.Object)>",
      "<org.bouncycastle.x509.AttributeCertificateIssuer: boolean matchesDN(javax.security.auth.x500.X500Principal,org.bouncycastle.asn1.x509.GeneralNames)>",
      "<org.ccil.cowan.tagsoup.Parser: boolean etag_cdata(char[],int,int)>",
      "<org.kxml2.io.KXmlParser: boolean adjustNsp()>",
      "<org.kxml2.io.KXmlParser: boolean fillBuffer(int)>",
      "<org.kxml2.io.KXmlParser: boolean getFeature(java.lang.String)>",
      "<org.kxml2.io.KXmlParser: boolean isEmptyElementTag()>",
      "<org.kxml2.io.KXmlParser: boolean isWhitespace()>",
      "<android.content.Intent: boolean[] getBooleanArrayExtra(java.lang.String)>",
      "<android.content.Intent: byte getByteExtra(java.lang.String,byte)>",
      "<android.content.Intent: byte[] getByteArrayExtra(java.lang.String)>",
      "<android.content.pm.Signature: byte[] toByteArray()>",
      "<android.hardware.usb.UsbDeviceConnection: byte[] getRawDescriptors()>",
      "<android.nfc.TransceiveResult: byte[] getResponseOrThrow()>",
      "<android.provider.SyncStateContract$Helpers: byte[] get(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account)>",
      "<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCD(java.lang.String)>",
      "<android.webkit.URLUtil: byte[] decode(byte[])>",
      "<com.android.internal.telephony.cdma.sms.BearerData: byte[] encode7bitAscii(java.lang.String,boolean)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: byte[] encodeDtmfSmsAddress(java.lang.String)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: byte[] encodeUtf16(java.lang.String)>",
      "<java.security.spec.EncodedKeySpec: byte[] getEncoded()>",
      "<org.bouncycastle.asn1.BERConstructedOctetString: byte[] toBytes(java.util.Vector)>",
      "<org.bouncycastle.asn1.DERApplicationSpecific: byte[] replaceTagNumber(int,byte[])>",
      "<org.bouncycastle.openssl.PEMUtilities: byte[] crypt(boolean,java.security.Provider,byte[],char[],java.lang.String,byte[])>",
      "<org.bouncycastle.util.Strings: byte[] toUTF8ByteArray(char[])>",
      "<org.bouncycastle.util.encoders.Base64: byte[] decode(byte[])>",
      "<org.bouncycastle.util.encoders.Base64: byte[] encode(byte[])>",
      "<org.bouncycastle.util.encoders.Hex: byte[] decode(java.lang.String)>",
      "<org.bouncycastle.util.encoders.Hex: byte[] decode(byte[])>",
      "<org.bouncycastle.util.encoders.Hex: byte[] encode(byte[])>",
      "<org.bouncycastle.util.encoders.Hex: byte[] encode(byte[],int,int)>",
      "<org.apache.harmony.xnet.provider.jsse.NativeCrypto: byte[][] encodeCertificates(java.security.cert.Certificate[])>",
      "<org.apache.harmony.xnet.provider.jsse.NativeCrypto: byte[][] encodeIssuerX509Principals(java.security.cert.X509Certificate[])>",
      "<android.content.Intent: char getCharExtra(java.lang.String,char)>",
      "<com.android.internal.telephony.cdma.CdmaConnection: char findPOrWCharToAppend(java.lang.String,int,int)>",
      "<java.text.AttributedString$AttributedIterator: char current()>",
      "<java.text.AttributedString$AttributedIterator: char first()>",
      "<java.text.AttributedString$AttributedIterator: char last()>",
      "<java.text.AttributedString$AttributedIterator: char next()>",
      "<java.text.AttributedString$AttributedIterator: char previous()>",
      "<java.text.AttributedString$AttributedIterator: char setIndex(int)>",
      "<android.content.Intent: char[] getCharArrayExtra(java.lang.String)>",
      "<android.content.pm.Signature: char[] toChars()>",
      "<libcore.icu.NativeDecimalFormat: char[] formatBigDecimal(java.math.BigDecimal,java.text.FieldPosition)>",
      "<libcore.icu.NativeDecimalFormat: char[] formatBigInteger(java.math.BigInteger,java.text.FieldPosition)>",
      "<org.kxml2.io.KXmlParser: char[] getTextCharacters(int[])>",
      "<android.content.Intent: double getDoubleExtra(java.lang.String,double)>",
      "<org.json.JSON: double checkDouble(double)>",
      "<android.content.Intent: double[] getDoubleArrayExtra(java.lang.String)>",
      "<android.content.Intent: float getFloatExtra(java.lang.String,float)>",
      "<android.content.res.Resources: float getDimension(int)>",
      "<android.content.res.Resources: float getFraction(int,int,int)>",
      "<android.media.FaceDetector$Face: float pose(int)>",
      "<android.support.v4.view.VelocityTrackerCompatHoneycomb: float getXVelocity(android.view.VelocityTracker,int)>",
      "<android.support.v4.view.VelocityTrackerCompatHoneycomb: float getYVelocity(android.view.VelocityTracker,int)>",
      "<android.content.Intent: float[] getFloatArrayExtra(java.lang.String)>",
      "<android.app.Activity: int getRequestedOrientation()>",
      "<android.app.Activity: int getTaskId()>",
      "<android.app.Activity: int getVolumeControlStream()>",
      "<android.app.ActivityManager: int getFrontActivityScreenCompatMode()>",
      "<android.app.ActivityManager: int getPackageScreenCompatMode(java.lang.String)>",
      "<android.app.ActivityManager: int staticGetLargeMemoryClass()>",
      "<android.app.ActivityManager: int staticGetMemoryClass()>",
      "<android.app.ActivityManagerProxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int)>",
      "<android.app.ActivityManagerProxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,boolean,boolean)>",
      "<android.app.ActivityManagerProxy: int checkGrantUriPermission(int,java.lang.String,android.net.Uri,int)>",
      "<android.app.ActivityManagerProxy: int checkPermission(java.lang.String,int,int)>",
      "<android.app.ActivityManagerProxy: int checkUriPermission(android.net.Uri,int,int,int)>",
      "<android.app.ActivityManagerProxy: int getTaskForActivity(android.os.IBinder,boolean)>",
      "<android.app.ActivityManagerProxy: int startActivity(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.net.Uri[],int,android.os.IBinder,java.lang.String,int,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,boolean)>",
      "<android.app.ActivityManagerProxy: int startActivityInPackage(int,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,boolean)>",
      "<android.app.ActivityManagerProxy: int startActivityIntentSender(android.app.IApplicationThread,android.content.IntentSender,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int)>",
      "<android.app.ActivityManagerProxy: int startActivityWithConfig(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.net.Uri[],int,android.os.IBinder,java.lang.String,int,boolean,boolean,android.content.res.Configuration)>",
      "<android.app.ActivityManagerProxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String)>",
      "<android.app.ApplicationPackageManager: int getApplicationEnabledSetting(java.lang.String)>",
      "<android.app.ApplicationPackageManager: int getComponentEnabledSetting(android.content.ComponentName)>",
      "<android.app.BackStackRecord: int commit()>",
      "<android.app.BackStackRecord: int commitAllowingStateLoss()>",
      "<android.app.BackStackRecord: int commitInternal(boolean)>",
      "<android.app.ContextImpl: int checkCallingOrSelfPermission(java.lang.String)>",
      "<android.app.ContextImpl: int checkCallingOrSelfUriPermission(android.net.Uri,int)>",
      "<android.app.ContextImpl: int checkCallingPermission(java.lang.String)>",
      "<android.app.ContextImpl: int checkCallingUriPermission(android.net.Uri,int)>",
      "<android.app.ContextImpl: int checkPermission(java.lang.String,int,int)>",
      "<android.app.ContextImpl: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>",
      "<android.app.ContextImpl: int checkUriPermission(android.net.Uri,int,int,int)>",
      "<android.app.ContextImpl: int getWallpaperDesiredMinimumHeight()>",
      "<android.app.ContextImpl: int getWallpaperDesiredMinimumWidth()>",
      "<android.app.IntentService: int onStartCommand(android.content.Intent,int,int)>",
      "<android.app.ProgressDialog: int getMax()>",
      "<android.app.ProgressDialog: int getProgress()>",
      "<android.app.ProgressDialog: int getSecondaryProgress()>",
      "<android.app.SearchDialog: int resolveDialogTheme(android.content.Context)>",
      "<android.app.Service: int onStartCommand(android.content.Intent,int,int)>",
      "<android.content.ComponentName: int compareTo(android.content.ComponentName)>",
      "<android.content.ComponentName: int hashCode()>",
      "<android.content.ContentProvider$Transport: int delete(android.net.Uri,java.lang.String,java.lang.String[])>",
      "<android.content.ContentProvider$Transport: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>",
      "<android.content.ContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>",
      "<android.content.ContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>",
      "<android.content.ContentProviderClient: int bulkInsert(android.net.Uri,android.content.ContentValues[])>",
      "<android.content.ContentProviderClient: int delete(android.net.Uri,java.lang.String,java.lang.String[])>",
      "<android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>",
      "<android.content.ContentProviderProxy: int bulkInsert(android.net.Uri,android.content.ContentValues[])>",
      "<android.content.ContentProviderProxy: int delete(android.net.Uri,java.lang.String,java.lang.String[])>",
      "<android.content.ContentProviderProxy: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>",
      "<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>",
      "<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>",
      "<android.content.ContentResolver: int modeToMode(android.net.Uri,java.lang.String)>",
      "<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>",
      "<android.content.ContentValues: int hashCode()>",
      "<android.content.ContentValues: int size()>",
      "<android.content.Context: int checkCallingOrSelfUriPermission(android.net.Uri,int)>",
      "<android.content.Context: int checkCallingUriPermission(android.net.Uri,int)>",
      "<android.content.Context: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>",
      "<android.content.Context: int checkUriPermission(android.net.Uri,int,int,int)>",
      "<android.content.ContextWrapper: int checkCallingOrSelfUriPermission(android.net.Uri,int)>",
      "<android.content.ContextWrapper: int checkCallingUriPermission(android.net.Uri,int)>",
      "<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>",
      "<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,int,int,int)>",
      "<android.content.Intent: int describeContents()>",
      "<android.content.Intent: int fillIn(android.content.Intent,int)>",
      "<android.content.Intent: int filterHashCode()>",
      "<android.content.Intent: int getIntExtra(java.lang.String,int)>",
      "<android.content.IntentFilter$AuthorityEntry: int match(android.net.Uri)>",
      "<android.content.IntentFilter: int match(android.content.ContentResolver,android.content.Intent,boolean,java.lang.String)>",
      "<android.content.IntentFilter: int match(java.lang.String,java.lang.String,java.lang.String,android.net.Uri,java.util.Set,java.lang.String)>",
      "<android.content.IntentFilter: int matchData(java.lang.String,java.lang.String,android.net.Uri)>",
      "<android.content.IntentFilter: int matchDataAuthority(android.net.Uri)>",
      "<android.content.SearchRecentSuggestionsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>",
      "<android.content.SearchRecentSuggestionsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>",
      "<android.content.UriMatcher: int match(android.net.Uri)>",
      "<android.content.pm.ActivityInfo: int getThemeResource()>",
      "<android.content.pm.Signature: int hashCode()>",
      "<android.content.res.Configuration: int updateFrom(android.content.res.Configuration)>",
      "<android.content.res.Resources: int attrForQuantityCode(int)>",
      "<android.content.res.Resources: int getColor(int)>",
      "<android.content.res.Resources: int getDimensionPixelOffset(int)>",
      "<android.content.res.Resources: int getDimensionPixelSize(int)>",
      "<android.content.res.Resources: int getInteger(int)>",
      "<android.database.BulkCursorProxy: int requery(android.database.IContentObserver)>",
      "<android.database.sqlite.SqliteWrapper: int delete(android.content.Context,android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String[])>",
      "<android.database.sqlite.SqliteWrapper: int update(android.content.Context,android.content.ContentResolver,android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>",
      "<android.graphics.Path: int ni()>",
      "<android.media.AudioManager: int getMode()>",
      "<android.media.AudioManager: int getRingerMode()>",
      "<android.media.RingtoneManager: int getDefaultType(android.net.Uri)>",
      "<android.media.RingtoneManager: int getRingtonePosition(android.net.Uri)>",
      "<android.net.wifi.WifiInfo: int getIpAddress()>",
      "<android.os.Messenger: int hashCode()>",
      "<android.support.v4.app.BackStackRecord: int commit()>",
      "<android.support.v4.app.BackStackRecord: int commitAllowingStateLoss()>",
      "<android.support.v4.app.BackStackRecord: int commitInternal(boolean)>",
      "<android.support.v4.view.KeyEventCompatHoneycomb: int normalizeMetaState(int)>",
      "<android.support.v4.view.ViewConfigurationCompatFroyo: int getScaledPagingTouchSlop(android.view.ViewConfiguration)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: int getActions(java.lang.Object)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: int getChildCount(java.lang.Object)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: int getWindowId(java.lang.Object)>",
      "<android.telephony.PhoneNumberUtils: int charToBCD(char)>",
      "<android.telephony.PhoneNumberUtils: int findDialableIndexFromPostDialStr(java.lang.String)>",
      "<android.telephony.PhoneNumberUtils: int getFormatTypeFromCountryCode(java.lang.String)>",
      "<android.telephony.PhoneNumberUtils: int toaFromString(java.lang.String)>",
      "<android.test.IsolatedContext: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>",
      "<android.test.IsolatedContext: int checkUriPermission(android.net.Uri,int,int,int)>",
      "<android.test.mock.MockContext: int checkCallingOrSelfUriPermission(android.net.Uri,int)>",
      "<android.test.mock.MockContext: int checkCallingUriPermission(android.net.Uri,int)>",
      "<android.test.mock.MockContext: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>",
      "<android.test.mock.MockContext: int checkUriPermission(android.net.Uri,int,int,int)>",
      "<android.view.inputmethod.InputMethodInfo: int getSubtypeCount()>",
      "<android.view.inputmethod.InputMethodInfo: int hashCode()>",
      "<android.webkit.HTML5VideoView: int getCurrentPosition()>",
      "<android.webkit.HTML5VideoView: int getCurrentState()>",
      "<android.webkit.HTML5VideoView: int getDuration()>",
      "<android.webkit.HTML5VideoViewProxy$VideoPlayer: int getCurrentPosition()>",
      "<android.widget.LinearLayout: int getShowDividers()>",
      "<com.android.internal.telephony.ApnContext: int getWaitingApnsPermFailCount()>",
      "<com.android.internal.telephony.CallerInfo: int getColumnIndexForPersonId(android.net.Uri,android.database.Cursor)>",
      "<com.android.internal.telephony.PhoneProxy: int getLteOnCdmaMode()>",
      "<com.android.internal.telephony.PhoneProxy: int getVoiceMessageCount()>",
      "<com.android.internal.telephony.SMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)>",
      "<com.android.internal.telephony.cdma.CDMAPhone: int getVoiceMessageCount()>",
      "<com.android.internal.telephony.cdma.sms.BearerData: int countAsciiSeptets(java.lang.CharSequence,boolean)>",
      "<com.android.internal.util.AsyncService: int onStartCommand(android.content.Intent,int,int)>",
      "<com.android.internal.view.InputConnectionWrapper: int getCursorCapsMode(int)>",
      "<com.android.internal.view.menu.MenuPopupHelper$MenuAdapter: int getCount()>",
      "<com.android.internal.widget.AbsActionBarView: int measureChildView(android.view.View,int,int,int)>",
      "<java.io.SerializationHandleMap: int remove(java.lang.Object)>",
      "<java.lang.HexStringParser: int getOffset(java.lang.String,java.lang.String)>",
      "<java.lang.ProcessManager$ProcessImpl: int exitValue()>",
      "<java.lang.ProcessManager$ProcessImpl: int waitFor()>",
      "<java.lang.Thread: int activeCount()>",
      "<java.lang.Thread: int countStackFrames()>",
      "<java.lang.Thread: int enumerate(java.lang.Thread[])>",
      "<java.lang.Thread: int getPriority()>",
      "<java.lang.reflect.Method: int getModifiers()>",
      "<java.lang.reflect.Method: int hashCode()>",
      "<java.net.PlainDatagramSocketImpl: int peek(java.net.InetAddress)>",
      "<java.net.PlainSocketImpl: int available()>",
      "<java.net.Socket: int getSoLinger()>",
      "<java.net.Socks4Message: int getIP()>",
      "<java.net.Socks4Message: int getPort()>",
      "<java.net.URI: int compareTo(java.net.URI)>",
      "<java.net.URLStreamHandler: int hashCode(java.net.URL)>",
      "<java.nio.DatagramChannelImpl$DatagramSocketAdapter: int getPort()>",
      "<java.nio.DatagramChannelImpl: int readImpl(java.nio.ByteBuffer)>",
      "<java.nio.DatagramChannelImpl: int send(java.nio.ByteBuffer,java.net.SocketAddress)>",
      "<java.nio.DirectByteBuffer: int protectedArrayOffset()>",
      "<java.nio.FileChannelImpl: int read(java.nio.ByteBuffer)>",
      "<java.nio.FileChannelImpl: int read(java.nio.ByteBuffer,long)>",
      "<java.nio.FileChannelImpl: int readImpl(java.nio.ByteBuffer,long)>",
      "<java.nio.FileChannelImpl: int transferIoVec(java.nio.IoVec)>",
      "<java.nio.FileChannelImpl: int write(java.nio.ByteBuffer)>",
      "<java.nio.FileChannelImpl: int write(java.nio.ByteBuffer,long)>",
      "<java.nio.FileChannelImpl: int writeImpl(java.nio.ByteBuffer,long)>",
      "<java.nio.SelectionKeyImpl: int interestOps()>",
      "<java.nio.SelectionKeyImpl: int readyOps()>",
      "<java.nio.SelectorImpl: int processPollFds()>",
      "<java.nio.SelectorImpl: int select()>",
      "<java.nio.SelectorImpl: int select(long)>",
      "<java.nio.SocketChannelImpl: int read(java.nio.ByteBuffer)>",
      "<java.nio.SocketChannelImpl: int write(java.nio.ByteBuffer)>",
      "<java.text.AttributedString$AttributedIterator: int getRunLimit()>",
      "<java.text.AttributedString$AttributedIterator: int getRunStart()>",
      "<libcore.icu.NativeDecimalFormat$FieldPositionIterator: int getNativeFieldPositionId(java.text.FieldPosition)>",
      "<libcore.io.BlockGuardOs: int poll(libcore.io.StructPollfd[],int)>",
      "<libcore.io.BlockGuardOs: int pread(java.io.FileDescriptor,java.nio.ByteBuffer,long)>",
      "<libcore.io.BlockGuardOs: int pread(java.io.FileDescriptor,byte[],int,int,long)>",
      "<libcore.io.BlockGuardOs: int pwrite(java.io.FileDescriptor,java.nio.ByteBuffer,long)>",
      "<libcore.io.BlockGuardOs: int pwrite(java.io.FileDescriptor,byte[],int,int,long)>",
      "<libcore.io.BlockGuardOs: int read(java.io.FileDescriptor,java.nio.ByteBuffer)>",
      "<libcore.io.BlockGuardOs: int read(java.io.FileDescriptor,byte[],int,int)>",
      "<libcore.io.BlockGuardOs: int readv(java.io.FileDescriptor,java.lang.Object[],int[],int[])>",
      "<libcore.io.BlockGuardOs: int recvfrom(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetSocketAddress)>",
      "<libcore.io.BlockGuardOs: int recvfrom(java.io.FileDescriptor,byte[],int,int,int,java.net.InetSocketAddress)>",
      "<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>",
      "<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>",
      "<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>",
      "<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,byte[],int,int)>",
      "<libcore.io.BlockGuardOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>",
      "<libcore.io.ForwardingOs: int fcntlFlock(java.io.FileDescriptor,int,libcore.io.StructFlock)>",
      "<libcore.io.ForwardingOs: int fcntlLong(java.io.FileDescriptor,int,long)>",
      "<libcore.io.ForwardingOs: int fcntlVoid(java.io.FileDescriptor,int)>",
      "<libcore.io.ForwardingOs: int getegid()>",
      "<libcore.io.ForwardingOs: int geteuid()>",
      "<libcore.io.ForwardingOs: int getgid()>",
      "<libcore.io.ForwardingOs: int getpid()>",
      "<libcore.io.ForwardingOs: int getppid()>",
      "<libcore.io.ForwardingOs: int getsockoptByte(java.io.FileDescriptor,int,int)>",
      "<libcore.io.ForwardingOs: int getsockoptInt(java.io.FileDescriptor,int,int)>",
      "<libcore.io.ForwardingOs: int getuid()>",
      "<libcore.io.ForwardingOs: int ioctlInt(java.io.FileDescriptor,int,libcore.util.MutableInt)>",
      "<libcore.io.ForwardingOs: int poll(libcore.io.StructPollfd[],int)>",
      "<libcore.io.ForwardingOs: int pread(java.io.FileDescriptor,java.nio.ByteBuffer,long)>",
      "<libcore.io.ForwardingOs: int pread(java.io.FileDescriptor,byte[],int,int,long)>",
      "<libcore.io.ForwardingOs: int pwrite(java.io.FileDescriptor,java.nio.ByteBuffer,long)>",
      "<libcore.io.ForwardingOs: int pwrite(java.io.FileDescriptor,byte[],int,int,long)>",
      "<libcore.io.ForwardingOs: int read(java.io.FileDescriptor,java.nio.ByteBuffer)>",
      "<libcore.io.ForwardingOs: int read(java.io.FileDescriptor,byte[],int,int)>",
      "<libcore.io.ForwardingOs: int readv(java.io.FileDescriptor,java.lang.Object[],int[],int[])>",
      "<libcore.io.ForwardingOs: int recvfrom(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetSocketAddress)>",
      "<libcore.io.ForwardingOs: int recvfrom(java.io.FileDescriptor,byte[],int,int,int,java.net.InetSocketAddress)>",
      "<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>",
      "<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>",
      "<libcore.io.ForwardingOs: int waitpid(int,libcore.util.MutableInt,int)>",
      "<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>",
      "<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,byte[],int,int)>",
      "<libcore.io.ForwardingOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>",
      "<libcore.io.Posix: int pread(java.io.FileDescriptor,byte[],int,int,long)>",
      "<libcore.io.Posix: int pwrite(java.io.FileDescriptor,byte[],int,int,long)>",
      "<libcore.io.Posix: int read(java.io.FileDescriptor,byte[],int,int)>",
      "<libcore.io.Posix: int recvfrom(java.io.FileDescriptor,byte[],int,int,int,java.net.InetSocketAddress)>",
      "<libcore.io.Posix: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>",
      "<libcore.io.Posix: int write(java.io.FileDescriptor,byte[],int,int)>",
      "<libcore.net.http.FixedLengthInputStream: int read(byte[],int,int)>",
      "<libcore.net.url.FtpURLConnection: int getReply()>",
      "<org.apache.harmony.luni.lang.reflect.ImplForVariable: int hashCode()>",
      "<org.apache.harmony.security.fortress.Services: int insertProviderAt(java.security.Provider,int)>",
      "<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$CacheFile: int compareTo(java.io.File)>",
      "<org.apache.harmony.xnet.provider.jsse.NativeCrypto: int X509_NAME_hash(javax.security.auth.x500.X500Principal)>",
      "<org.apache.harmony.xnet.provider.jsse.NativeCrypto: int X509_NAME_hash(javax.security.auth.x500.X500Principal,java.lang.String)>",
      "<org.apache.harmony.xnet.provider.jsse.NativeCrypto: int X509_NAME_hash_old(javax.security.auth.x500.X500Principal)>",
      "<org.apache.harmony.xnet.provider.jsse.SSLEngineAppData: int placeTo(java.nio.ByteBuffer[],int,int)>",
      "<org.bouncycastle.asn1.ASN1EncodableVector: int size()>",
      "<org.bouncycastle.asn1.ASN1Set: int size()>",
      "<org.bouncycastle.asn1.DERApplicationSpecific: int hashCode()>",
      "<org.bouncycastle.asn1.DERUnknownTag: int hashCode()>",
      "<org.bouncycastle.asn1.DefiniteLengthInputStream: int read(byte[],int,int)>",
      "<org.bouncycastle.asn1.IndefiniteLengthInputStream: int read()>",
      "<org.bouncycastle.asn1.IndefiniteLengthInputStream: int read(byte[],int,int)>",
      "<org.bouncycastle.asn1.x500.style.BCStyle: int calculateHashCode(org.bouncycastle.asn1.x500.X500Name)>",
      "<org.bouncycastle.jce.provider.JCEECPublicKey: int hashCode()>",
      "<org.bouncycastle.util.encoders.Base64: int encode(byte[],java.io.OutputStream)>",
      "<org.bouncycastle.util.encoders.Base64: int encode(byte[],int,int,java.io.OutputStream)>",
      "<org.bouncycastle.util.encoders.Base64Encoder: int decode(java.lang.String,java.io.OutputStream)>",
      "<org.bouncycastle.util.encoders.Base64Encoder: int encode(byte[],int,int,java.io.OutputStream)>",
      "<org.bouncycastle.util.encoders.Hex: int encode(byte[],java.io.OutputStream)>",
      "<org.bouncycastle.util.encoders.Hex: int encode(byte[],int,int,java.io.OutputStream)>",
      "<org.bouncycastle.util.encoders.HexEncoder: int encode(byte[],int,int,java.io.OutputStream)>",
      "<org.bouncycastle.x509.AttributeCertificateIssuer: int hashCode()>",
      "<org.kxml2.io.KXmlParser: int getNamespaceCount(int)>",
      "<org.kxml2.io.KXmlParser: int next()>",
      "<org.kxml2.io.KXmlParser: int next(boolean)>",
      "<org.kxml2.io.KXmlParser: int nextTag()>",
      "<org.kxml2.io.KXmlParser: int nextToken()>",
      "<org.kxml2.io.KXmlParser: int peekCharacter()>",
      "<android.content.Intent: int[] getIntArrayExtra(java.lang.String)>",
      "<android.content.res.Resources: int[] getIntArray(int)>",
      "<android.content.ContentUris: long parseId(android.net.Uri)>",
      "<android.content.Intent: long getLongExtra(java.lang.String,long)>",
      "<android.content.SyncManager$SyncHandler: long maybeStartNextSyncLocked()>",
      "<android.content.SyncManager$SyncHandler: long scheduleReadyPeriodicSyncs()>",
      "<android.database.DatabaseUtils: long queryNumEntries(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String)>",
      "<android.database.DatabaseUtils: long queryNumEntries(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,java.lang.String[])>",
      "<android.os.Build: long getLong(java.lang.String)>",
      "<java.lang.Thread: long getId()>",
      "<java.nio.DatagramChannelImpl: long read(java.nio.ByteBuffer[],int,int)>",
      "<java.nio.FileChannelImpl: long position()>",
      "<java.nio.FileChannelImpl: long read(java.nio.ByteBuffer[],int,int)>",
      "<java.nio.FileChannelImpl: long size()>",
      "<java.nio.FileChannelImpl: long transferFrom(java.nio.channels.ReadableByteChannel,long,long)>",
      "<java.nio.FileChannelImpl: long transferTo(long,long,java.nio.channels.WritableByteChannel)>",
      "<java.nio.FileChannelImpl: long write(java.nio.ByteBuffer[],int,int)>",
      "<java.nio.SocketChannelImpl: long read(java.nio.ByteBuffer[],int,int)>",
      "<libcore.io.ForwardingOs: long lseek(java.io.FileDescriptor,long,int)>",
      "<libcore.io.ForwardingOs: long mmap(long,long,int,int,java.io.FileDescriptor,long)>",
      "<libcore.io.ForwardingOs: long sendfile(java.io.FileDescriptor,java.io.FileDescriptor,libcore.util.MutableLong,long)>",
      "<libcore.io.ForwardingOs: long sysconf(int)>",
      "<org.apache.http.impl.HttpConnectionMetricsImpl: long getReceivedBytesCount()>",
      "<org.apache.http.impl.HttpConnectionMetricsImpl: long getSentBytesCount()>",
      "<android.content.Intent: long[] getLongArrayExtra(java.lang.String)>",
      "<android.content.Intent: short getShortExtra(java.lang.String,short)>",
      "<android.content.Intent: short[] getShortArrayExtra(java.lang.String)>",
      "<android.app.Activity$ManagedCursor: void <init>(android.database.Cursor)>",
      "<android.app.Activity: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>",
      "<android.app.Activity: void closeContextMenu()>",
      "<android.app.Activity: void closeOptionsMenu()>",
      "<android.app.Activity: void dismissDialog(int)>",
      "<android.app.Activity: void dispatchActivityResult(java.lang.String,int,int,android.content.Intent)>",
      "<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>",
      "<android.app.Activity: void finish()>",
      "<android.app.Activity: void finishActivity(int)>",
      "<android.app.Activity: void finishActivityFromChild(android.app.Activity,int)>",
      "<android.app.Activity: void finishFromChild(android.app.Activity)>",
      "<android.app.Activity: void invalidateFragmentIndex(int)>",
      "<android.app.Activity: void invalidateOptionsMenu()>",
      "<android.app.Activity: void makeVisible()>",
      "<android.app.Activity: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)>",
      "<android.app.Activity: void onBackPressed()>",
      "<android.app.Activity: void onConfigurationChanged(android.content.res.Configuration)>",
      "<android.app.Activity: void onContextMenuClosed(android.view.Menu)>",
      "<android.app.Activity: void onLowMemory()>",
      "<android.app.Activity: void onNewIntent(android.content.Intent)>",
      "<android.app.Activity: void onPanelClosed(int,android.view.Menu)>",
      "<android.app.Activity: void onPostResume()>",
      "<android.app.Activity: void onPrepareDialog(int,android.app.Dialog)>",
      "<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>",
      "<android.app.Activity: void onStart()>",
      "<android.app.Activity: void onTitleChanged(java.lang.CharSequence,int)>",
      "<android.app.Activity: void onTrimMemory(int)>",
      "<android.app.Activity: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>",
      "<android.app.Activity: void openContextMenu(android.view.View)>",
      "<android.app.Activity: void openOptionsMenu()>",
      "<android.app.Activity: void overridePendingTransition(int,int)>",
      "<android.app.Activity: void performCreate(android.os.Bundle)>",
      "<android.app.Activity: void performDestroy()>",
      "<android.app.Activity: void performPause()>",
      "<android.app.Activity: void performRestart()>",
      "<android.app.Activity: void performRestoreInstanceState(android.os.Bundle)>",
      "<android.app.Activity: void performResume()>",
      "<android.app.Activity: void performSaveInstanceState(android.os.Bundle)>",
      "<android.app.Activity: void performStart()>",
      "<android.app.Activity: void performStop()>",
      "<android.app.Activity: void performUserLeaving()>",
      "<android.app.Activity: void recreate()>",
      "<android.app.Activity: void restoreManagedDialogs(android.os.Bundle)>",
      "<android.app.Activity: void saveManagedDialogs(android.os.Bundle)>",
      "<android.app.Activity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>",
      "<android.app.Activity: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>",
      "<android.app.Activity: void setFeatureDrawableAlpha(int,int)>",
      "<android.app.Activity: void setFeatureDrawableResource(int,int)>",
      "<android.app.Activity: void setFeatureDrawableUri(int,android.net.Uri)>",
      "<android.app.Activity: void setFinishOnTouchOutside(boolean)>",
      "<android.app.Activity: void setImmersive(boolean)>",
      "<android.app.Activity: void setIntent(android.content.Intent)>",
      "<android.app.Activity: void setProgress(int)>",
      "<android.app.Activity: void setProgressBarIndeterminate(boolean)>",
      "<android.app.Activity: void setProgressBarIndeterminateVisibility(boolean)>",
      "<android.app.Activity: void setProgressBarVisibility(boolean)>",
      "<android.app.Activity: void setRequestedOrientation(int)>",
      "<android.app.Activity: void setResult(int,android.content.Intent)>",
      "<android.app.Activity: void setTitle(java.lang.CharSequence)>",
      "<android.app.Activity: void setTitle(int)>",
      "<android.app.Activity: void setTitleColor(int)>",
      "<android.app.Activity: void setVisible(boolean)>",
      "<android.app.Activity: void showDialog(int)>",
      "<android.app.Activity: void startActivities(android.content.Intent[])>",
      "<android.app.Activity: void startActivity(android.content.Intent)>",
      "<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)>",
      "<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)>",
      "<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>",
      "<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)>",
      "<android.app.Activity: void startIntentSenderForResultInner(android.content.IntentSender,int,android.content.Intent,int,int,android.app.Activity)>",
      "<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int)>",
      "<android.app.Activity: void startManagingCursor(android.database.Cursor)>",
      "<android.app.Activity: void stopManagingCursor(android.database.Cursor)>",
      "<android.app.Activity: void takeKeyEvents(boolean)>",
      "<android.app.Activity: void triggerSearch(java.lang.String,android.os.Bundle)>",
      "<android.app.Activity: void unregisterForContextMenu(android.view.View)>",
      "<android.app.ActivityManager$MemoryInfo: void readFromParcel(android.os.Parcel)>",
      "<android.app.ActivityManager$MemoryInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.app.ActivityManager$ProcessErrorStateInfo: void readFromParcel(android.os.Parcel)>",
      "<android.app.ActivityManager$ProcessErrorStateInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.app.ActivityManager$RecentTaskInfo: void readFromParcel(android.os.Parcel)>",
      "<android.app.ActivityManager$RecentTaskInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.app.ActivityManager$RunningAppProcessInfo: void <init>()>",
      "<android.app.ActivityManager$RunningAppProcessInfo: void <init>(android.os.Parcel)>",
      "<android.app.ActivityManager$RunningAppProcessInfo: void readFromParcel(android.os.Parcel)>",
      "<android.app.ActivityManager$RunningAppProcessInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.app.ActivityManager$RunningServiceInfo: void readFromParcel(android.os.Parcel)>",
      "<android.app.ActivityManager$RunningServiceInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.app.ActivityManager$TaskThumbnails: void <init>()>",
      "<android.app.ActivityManager$TaskThumbnails: void <init>(android.os.Parcel)>",
      "<android.app.ActivityManager$TaskThumbnails: void readFromParcel(android.os.Parcel)>",
      "<android.app.ActivityManager$TaskThumbnails: void writeToParcel(android.os.Parcel,int)>",
      "<android.app.ActivityManager: void <init>(android.content.Context,android.os.Handler)>",
      "<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>",
      "<android.app.ActivityManager: void restartPackage(java.lang.String)>",
      "<android.app.ActivityManager: void setFrontActivityScreenCompatMode(int)>",
      "<android.app.ActivityManager: void setPackageAskScreenCompat(java.lang.String,boolean)>",
      "<android.app.ActivityManager: void setPackageScreenCompatMode(java.lang.String,int)>",
      "<android.app.ActivityManagerNative: void broadcastStickyIntent(android.content.Intent,java.lang.String)>",
      "<android.app.ActivityManagerProxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>",
      "<android.app.ActivityManagerProxy: void enterSafeMode()>",
      "<android.app.ActivityManagerProxy: void finishSubActivity(android.os.IBinder,java.lang.String,int)>",
      "<android.app.ActivityManagerProxy: void grantUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int)>",
      "<android.app.ActivityManagerProxy: void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int)>",
      "<android.app.ActivityManagerProxy: void overridePendingTransition(android.os.IBinder,java.lang.String,int,int)>",
      "<android.app.ActivityManagerProxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>",
      "<android.app.ActivityManagerProxy: void removeContentProvider(android.app.IApplicationThread,java.lang.String)>",
      "<android.app.ActivityManagerProxy: void revokeUriPermission(android.app.IApplicationThread,android.net.Uri,int)>",
      "<android.app.ActivityManagerProxy: void revokeUriPermissionFromOwner(android.os.IBinder,android.net.Uri,int)>",
      "<android.app.ActivityManagerProxy: void showWaitingForDebugger(android.app.IApplicationThread,boolean)>",
      "<android.app.ActivityManagerProxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>",
      "<android.app.ActivityManagerProxy: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent)>",
      "<android.app.ActivityThread$ApplicationThread: void scheduleBindService(android.os.IBinder,android.content.Intent,boolean)>",
      "<android.app.ActivityThread$ApplicationThread: void scheduleLaunchActivity(android.content.Intent,android.os.IBinder,int,android.content.pm.ActivityInfo,android.content.res.Configuration,android.content.res.CompatibilityInfo,android.os.Bundle,java.util.List,java.util.List,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,boolean)>",
      "<android.app.ActivityThread$ApplicationThread: void scheduleReceiver(android.content.Intent,android.content.pm.ActivityInfo,android.content.res.CompatibilityInfo,int,java.lang.String,android.os.Bundle,boolean)>",
      "<android.app.ActivityThread$ApplicationThread: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean)>",
      "<android.app.ActivityThread$ApplicationThread: void scheduleServiceArgs(android.os.IBinder,boolean,int,int,android.content.Intent)>",
      "<android.app.ActivityThread$ApplicationThread: void scheduleUnbindService(android.os.IBinder,android.content.Intent)>",
      "<android.app.ActivityThread$ReceiverData: void <init>(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,android.os.IBinder)>",
      "<android.app.ActivityThread: void handleBindApplication(android.app.ActivityThread$AppBindData)>",
      "<android.app.ActivityThread: void handleDestroyActivity(android.os.IBinder,boolean,int,boolean)>",
      "<android.app.ActivityThread: void handleLaunchActivity(android.app.ActivityThread$ActivityClientRecord,android.content.Intent)>",
      "<android.app.ActivityThread: void sendActivityResult(android.os.IBinder,java.lang.String,int,int,android.content.Intent)>",
      "<android.app.ApplicationPackageManager: void addPackageToPreferred(java.lang.String)>",
      "<android.app.ApplicationPackageManager: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)>",
      "<android.app.ApplicationPackageManager: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)>",
      "<android.app.ApplicationPackageManager: void clearPackagePreferredActivities(java.lang.String)>",
      "<android.app.ApplicationPackageManager: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)>",
      "<android.app.ApplicationPackageManager: void deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver,int)>",
      "<android.app.ApplicationPackageManager: void freeStorage(long,android.content.IntentSender)>",
      "<android.app.ApplicationPackageManager: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)>",
      "<android.app.ApplicationPackageManager: void getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)>",
      "<android.app.ApplicationPackageManager: void installPackage(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String)>",
      "<android.app.ApplicationPackageManager: void installPackageWithVerification(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.net.Uri,android.content.pm.ManifestDigest)>",
      "<android.app.ApplicationPackageManager: void movePackage(java.lang.String,android.content.pm.IPackageMoveObserver,int)>",
      "<android.app.ApplicationPackageManager: void removePackageFromPreferred(java.lang.String)>",
      "<android.app.ApplicationPackageManager: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)>",
      "<android.app.ApplicationPackageManager: void setApplicationEnabledSetting(java.lang.String,int,int)>",
      "<android.app.ApplicationPackageManager: void setComponentEnabledSetting(android.content.ComponentName,int,int)>",
      "<android.app.ApplicationPackageManager: void setInstallerPackageName(java.lang.String,java.lang.String)>",
      "<android.app.ApplicationPackageManager: void verifyPendingInstall(int,int)>",
      "<android.app.ApplicationThreadProxy: void clearDnsCache()>",
      "<android.app.ApplicationThreadProxy: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])>",
      "<android.app.ApplicationThreadProxy: void processInBackground()>",
      "<android.app.ApplicationThreadProxy: void scheduleBindService(android.os.IBinder,android.content.Intent,boolean)>",
      "<android.app.ApplicationThreadProxy: void scheduleLaunchActivity(android.content.Intent,android.os.IBinder,int,android.content.pm.ActivityInfo,android.content.res.Configuration,android.content.res.CompatibilityInfo,android.os.Bundle,java.util.List,java.util.List,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,boolean)>",
      "<android.app.ApplicationThreadProxy: void scheduleReceiver(android.content.Intent,android.content.pm.ActivityInfo,android.content.res.CompatibilityInfo,int,java.lang.String,android.os.Bundle,boolean)>",
      "<android.app.ApplicationThreadProxy: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean)>",
      "<android.app.ApplicationThreadProxy: void scheduleServiceArgs(android.os.IBinder,boolean,int,int,android.content.Intent)>",
      "<android.app.ApplicationThreadProxy: void scheduleTrimMemory(int)>",
      "<android.app.ApplicationThreadProxy: void scheduleUnbindService(android.os.IBinder,android.content.Intent)>",
      "<android.app.ApplicationThreadProxy: void setCoreSettings(android.os.Bundle)>",
      "<android.app.ApplicationThreadProxy: void updateTimeZone()>",
      "<android.app.BackStackRecord: void <init>(android.app.FragmentManagerImpl)>",
      "<android.app.BackStackRecord: void bumpBackStackNesting(int)>",
      "<android.app.BackStackRecord: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>",
      "<android.app.BackStackRecord: void popFromBackStack(boolean)>",
      "<android.app.BackStackRecord: void run()>",
      "<android.app.BackStackState: void writeToParcel(android.os.Parcel,int)>",
      "<android.app.ContextImpl: void <init>()>",
      "<android.app.ContextImpl: void clearWallpaper()>",
      "<android.app.ContextImpl: void enforce(java.lang.String,int,boolean,int,java.lang.String)>",
      "<android.app.ContextImpl: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>",
      "<android.app.ContextImpl: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)>",
      "<android.app.ContextImpl: void enforceCallingPermission(java.lang.String,java.lang.String)>",
      "<android.app.ContextImpl: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)>",
      "<android.app.ContextImpl: void enforceForUri(int,int,boolean,int,android.net.Uri,java.lang.String)>",
      "<android.app.ContextImpl: void enforcePermission(java.lang.String,int,int,java.lang.String)>",
      "<android.app.ContextImpl: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)>",
      "<android.app.ContextImpl: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)>",
      "<android.app.ContextImpl: void grantUriPermission(java.lang.String,android.net.Uri,int)>",
      "<android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>",
      "<android.app.ContextImpl: void removeStickyBroadcast(android.content.Intent)>",
      "<android.app.ContextImpl: void revokeUriPermission(android.net.Uri,int)>",
      "<android.app.ContextImpl: void sendBroadcast(android.content.Intent)>",
      "<android.app.ContextImpl: void sendBroadcast(android.content.Intent,java.lang.String)>",
      "<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>",
      "<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>",
      "<android.app.ContextImpl: void sendStickyBroadcast(android.content.Intent)>",
      "<android.app.ContextImpl: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>",
      "<android.app.ContextImpl: void setFilePermissionsFromMode(java.lang.String,int,int)>",
      "<android.app.ContextImpl: void setWallpaper(android.graphics.Bitmap)>",
      "<android.app.ContextImpl: void setWallpaper(java.io.InputStream)>",
      "<android.app.ContextImpl: void startActivities(android.content.Intent[])>",
      "<android.app.ContextImpl: void startActivity(android.content.Intent)>",
      "<android.app.ContextImpl: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>",
      "<android.app.ContextImpl: void unbindService(android.content.ServiceConnection)>",
      "<android.app.ContextImpl: void unregisterReceiver(android.content.BroadcastReceiver)>",
      "<android.app.Dialog: void setFeatureDrawableUri(int,android.net.Uri)>",
      "<android.app.DownloadManager$CursorTranslator: void <init>(android.database.Cursor,android.net.Uri)>",
      "<android.app.DownloadManager$Request: void <init>(android.net.Uri)>",
      "<android.app.Fragment: void <init>()>",
      "<android.app.Fragment: void onActivityResult(int,int,android.content.Intent)>",
      "<android.app.Fragment: void startActivity(android.content.Intent)>",
      "<android.app.Fragment: void startActivityForResult(android.content.Intent,int)>",
      "<android.app.Instrumentation$ActivityResult: void <init>(int,android.content.Intent)>",
      "<android.app.Instrumentation$ActivityWaiter: void <init>(android.content.Intent)>",
      "<android.app.Instrumentation: void callActivityOnNewIntent(android.app.Activity,android.content.Intent)>",
      "<android.app.IntentService: void onHandleIntent(android.content.Intent)>",
      "<android.app.IntentService: void onStart(android.content.Intent,int)>",
      "<android.app.LoadedApk$ReceiverDispatcher$Args: void run()>",
      "<android.app.LoadedApk$ReceiverDispatcher$InnerReceiver: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean)>",
      "<android.app.LoadedApk$ReceiverDispatcher: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean)>",
      "<android.app.LoadedApk$ServiceDispatcher: void doConnected(android.content.ComponentName,android.os.IBinder)>",
      "<android.app.LoadedApk: void removeContextRegistrations(android.content.Context,java.lang.String,java.lang.String)>",
      "<android.app.LocalActivityManager$LocalActivityRecord: void <init>(java.lang.String,android.content.Intent)>",
      "<android.app.Notification: void <init>(android.content.Context,int,java.lang.CharSequence,long,java.lang.CharSequence,java.lang.CharSequence,android.content.Intent)>",
      "<android.app.PendingIntent$FinishedDispatcher: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean)>",
      "<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)>",
      "<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler)>",
      "<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler,java.lang.String)>",
      "<android.app.ProgressDialog: void incrementProgressBy(int)>",
      "<android.app.ProgressDialog: void incrementSecondaryProgressBy(int)>",
      "<android.app.ProgressDialog: void initFormats()>",
      "<android.app.ProgressDialog: void onCreate(android.os.Bundle)>",
      "<android.app.ProgressDialog: void onProgressChanged()>",
      "<android.app.ProgressDialog: void onStart()>",
      "<android.app.ProgressDialog: void onStop()>",
      "<android.app.ProgressDialog: void setIndeterminate(boolean)>",
      "<android.app.ProgressDialog: void setIndeterminateDrawable(android.graphics.drawable.Drawable)>",
      "<android.app.ProgressDialog: void setMax(int)>",
      "<android.app.ProgressDialog: void setMessage(java.lang.CharSequence)>",
      "<android.app.ProgressDialog: void setProgress(int)>",
      "<android.app.ProgressDialog: void setProgressDrawable(android.graphics.drawable.Drawable)>",
      "<android.app.ProgressDialog: void setSecondaryProgress(int)>",
      "<android.app.ResultInfo: void <init>(java.lang.String,int,int,android.content.Intent)>",
      "<android.app.SearchDialog: void launchIntent(android.content.Intent)>",
      "<android.app.SearchDialog: void onCreate(android.os.Bundle)>",
      "<android.app.SearchDialog: void onStart()>",
      "<android.app.SearchDialog: void updateSearchAppIcon()>",
      "<android.app.SearchManager: void ensureSearchDialog()>",
      "<android.app.SearchManager: void startGlobalSearch(java.lang.String,boolean,android.os.Bundle,android.graphics.Rect)>",
      "<android.app.SearchableInfo: void addActionKey(android.app.SearchableInfo$ActionKeyInfo)>",
      "<android.app.Service: void onRebind(android.content.Intent)>",
      "<android.app.Service: void onStart(android.content.Intent,int)>",
      "<android.app.Service: void onTaskRemoved(android.content.Intent)>",
      "<android.app.SharedPreferencesImpl$EditorImpl: void apply()>",
      "<android.app.SharedPreferencesImpl: void awaitLoadedLocked()>",
      "<android.app.SharedPreferencesImpl: void writeToFile(android.app.SharedPreferencesImpl$MemoryCommitResult)>",
      "<android.app.StatusBarManager: void removeIcon(java.lang.String)>",
      "<android.app.StatusBarManager: void setIcon(java.lang.String,int,int,java.lang.String)>",
      "<android.app.StatusBarManager: void setIconVisibility(java.lang.String,boolean)>",
      "<android.app.WallpaperInfo: void dump(android.util.Printer,java.lang.String)>",
      "<android.app.WallpaperInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.app.admin.DeviceAdminInfo: void dump(android.util.Printer,java.lang.String)>",
      "<android.app.admin.DeviceAdminInfo: void readPoliciesFromXml(org.xmlpull.v1.XmlPullParser)>",
      "<android.app.admin.DeviceAdminInfo: void writePoliciesToXml(org.xmlpull.v1.XmlSerializer)>",
      "<android.app.admin.DeviceAdminInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.app.admin.DeviceAdminReceiver: void onDisabled(android.content.Context,android.content.Intent)>",
      "<android.app.admin.DeviceAdminReceiver: void onEnabled(android.content.Context,android.content.Intent)>",
      "<android.app.admin.DeviceAdminReceiver: void onPasswordChanged(android.content.Context,android.content.Intent)>",
      "<android.app.admin.DeviceAdminReceiver: void onPasswordExpiring(android.content.Context,android.content.Intent)>",
      "<android.app.admin.DeviceAdminReceiver: void onPasswordFailed(android.content.Context,android.content.Intent)>",
      "<android.app.admin.DeviceAdminReceiver: void onPasswordSucceeded(android.content.Context,android.content.Intent)>",
      "<android.app.admin.DeviceAdminReceiver: void onReceive(android.content.Context,android.content.Intent)>",
      "<android.app.backup.BackupHelperDispatcher: void performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>",
      "<android.app.backup.BackupHelperDispatcher: void performRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)>",
      "<android.app.backup.FileBackupHelperBase: void finalize()>",
      "<android.app.backup.FileBackupHelperBase: void writeNewStateDescription(android.os.ParcelFileDescriptor)>",
      "<android.app.backup.RestoreSession$RestoreObserverWrapper: void onUpdate(int,java.lang.String)>",
      "<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreFinished(int)>",
      "<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreSetsAvailable(android.app.backup.RestoreSet[])>",
      "<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreStarting(int)>",
      "<android.app.backup.RestoreSet: void writeToParcel(android.os.Parcel,int)>",
      "<android.appwidget.AppWidgetManager: void bindAppWidgetId(int,android.content.ComponentName)>",
      "<android.appwidget.AppWidgetManager: void bindRemoteViewsService(int,android.content.Intent,android.os.IBinder)>",
      "<android.appwidget.AppWidgetManager: void unbindRemoteViewsService(int,android.content.Intent)>",
      "<android.appwidget.AppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)>",
      "<android.bluetooth.BluetoothInputStream: void <init>(android.bluetooth.BluetoothSocket)>",
      "<android.bluetooth.BluetoothOutputStream: void <init>(android.bluetooth.BluetoothSocket)>",
      "<android.content.AsyncQueryHandler: void onInsertComplete(int,java.lang.Object,android.net.Uri)>",
      "<android.content.AsyncQueryHandler: void startDelete(int,java.lang.Object,android.net.Uri,java.lang.String,java.lang.String[])>",
      "<android.content.AsyncQueryHandler: void startInsert(int,java.lang.Object,android.net.Uri,android.content.ContentValues)>",
      "<android.content.AsyncQueryHandler: void startQuery(int,java.lang.Object,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>",
      "<android.content.AsyncQueryHandler: void startUpdate(int,java.lang.Object,android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>",
      "<android.content.BroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>",
      "<android.content.ClipData$Item: void <init>(java.lang.CharSequence,android.content.Intent,android.net.Uri)>",
      "<android.content.ClipData$Item: void <init>(android.content.Intent)>",
      "<android.content.ClipData$Item: void <init>(android.net.Uri)>",
      "<android.content.ComponentName: void writeToParcel(android.os.Parcel,int)>",
      "<android.content.ContentProvider$Transport: void enforceReadPermission(android.net.Uri)>",
      "<android.content.ContentProvider$Transport: void enforceWritePermission(android.net.Uri)>",
      "<android.content.ContentProviderOperation$Builder: void <init>(int,android.net.Uri)>",
      "<android.content.ContentProviderOperation: void <init>(android.content.ContentProviderOperation$Builder)>",
      "<android.content.ContentProviderOperation: void writeToParcel(android.os.Parcel,int)>",
      "<android.content.ContentProviderResult: void <init>(android.net.Uri)>",
      "<android.content.ContentResolver$CursorWrapperInner: void close()>",
      "<android.content.ContentResolver$ParcelFileDescriptorInner: void close()>",
      "<android.content.ContentResolver$ParcelFileDescriptorInner: void finalize()>",
      "<android.content.ContentResolver: void <init>(android.content.Context)>",
      "<android.content.ContentResolver: void cancelSync(android.accounts.Account,java.lang.String)>",
      "<android.content.ContentResolver: void cancelSync(android.net.Uri)>",
      "<android.content.ContentResolver: void maybeLogQueryToEventLog(long,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String)>",
      "<android.content.ContentResolver: void maybeLogUpdateToEventLog(long,android.net.Uri,java.lang.String,java.lang.String)>",
      "<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>",
      "<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)>",
      "<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>",
      "<android.content.ContentResolver: void startSync(android.net.Uri,android.os.Bundle)>",
      "<android.content.ContentResolver: void validateSyncExtrasBundle(android.os.Bundle)>",
      "<android.content.ContentValues: void <init>(java.util.HashMap)>",
      "<android.content.ContentValues: void clear()>",
      "<android.content.ContentValues: void writeToParcel(android.os.Parcel,int)>",
      "<android.content.Context: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)>",
      "<android.content.Context: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)>",
      "<android.content.Context: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)>",
      "<android.content.Context: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)>",
      "<android.content.Context: void grantUriPermission(java.lang.String,android.net.Uri,int)>",
      "<android.content.Context: void removeStickyBroadcast(android.content.Intent)>",
      "<android.content.Context: void revokeUriPermission(android.net.Uri,int)>",
      "<android.content.Context: void sendBroadcast(android.content.Intent)>",
      "<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)>",
      "<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>",
      "<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>",
      "<android.content.Context: void sendStickyBroadcast(android.content.Intent)>",
      "<android.content.Context: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>",
      "<android.content.Context: void startActivity(android.content.Intent)>",
      "<android.content.Context: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>",
      "<android.content.ContextWrapper: void <init>(android.content.Context)>",
      "<android.content.ContextWrapper: void attachBaseContext(android.content.Context)>",
      "<android.content.ContextWrapper: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)>",
      "<android.content.ContextWrapper: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)>",
      "<android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)>",
      "<android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)>",
      "<android.content.ContextWrapper: void grantUriPermission(java.lang.String,android.net.Uri,int)>",
      "<android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)>",
      "<android.content.ContextWrapper: void revokeUriPermission(android.net.Uri,int)>",
      "<android.content.ContextWrapper: void sendBroadcast(android.content.Intent)>",
      "<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String)>",
      "<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>",
      "<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>",
      "<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)>",
      "<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>",
      "<android.content.ContextWrapper: void startActivity(android.content.Intent)>",
      "<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>",
      "<android.content.Entity$NamedContentValues: void <init>(android.net.Uri,android.content.ContentValues)>",
      "<android.content.Entity: void addSubValue(android.net.Uri,android.content.ContentValues)>",
      "<android.content.Intent$FilterComparison: void <init>(android.content.Intent)>",
      "<android.content.Intent$ShortcutIconResource: void writeToParcel(android.os.Parcel,int)>",
      "<android.content.Intent: void <init>()>",
      "<android.content.Intent: void <init>(android.content.Intent)>",
      "<android.content.Intent: void <init>(android.content.Intent,boolean)>",
      "<android.content.Intent: void <init>(java.lang.String)>",
      "<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>",
      "<android.content.Intent: void <init>(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)>",
      "<android.content.Intent: void readFromParcel(android.os.Parcel)>",
      "<android.content.Intent: void removeCategory(java.lang.String)>",
      "<android.content.Intent: void removeExtra(java.lang.String)>",
      "<android.content.Intent: void setSelector(android.content.Intent)>",
      "<android.content.Intent: void setSourceBounds(android.graphics.Rect)>",
      "<android.content.Intent: void toShortString(java.lang.StringBuilder,boolean,boolean,boolean)>",
      "<android.content.Intent: void toUriInner(java.lang.StringBuilder,java.lang.String,int)>",
      "<android.content.Intent: void writeToParcel(android.os.Parcel,int)>",
      "<android.content.IntentSender$FinishedDispatcher: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean)>",
      "<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)>",
      "<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler,java.lang.String)>",
      "<android.content.SyncInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.content.SyncManager$ActiveSyncContext: void onFinished(android.content.SyncResult)>",
      "<android.content.SyncManager$ActiveSyncContext: void onServiceDisconnected(android.content.ComponentName)>",
      "<android.content.SyncManager$InitializerServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>",
      "<android.content.SyncManager$SyncAlarmIntentReceiver: void onReceive(android.content.Context,android.content.Intent)>",
      "<android.content.SyncManager$SyncHandler: void cancelActiveSyncLocked(android.accounts.Account,java.lang.String)>",
      "<android.content.SyncManager$SyncHandler: void closeActiveSyncContext(android.content.SyncManager$ActiveSyncContext)>",
      "<android.content.SyncManager$SyncHandler: void handleMessage(android.os.Message)>",
      "<android.content.SyncManager$SyncHandler: void installHandleTooManyDeletesNotification(android.accounts.Account,java.lang.String,long)>",
      "<android.content.SyncManager$SyncHandler: void manageSyncAlarmLocked(long,long)>",
      "<android.content.SyncManager$SyncHandler: void manageSyncNotificationLocked()>",
      "<android.content.SyncManager$SyncHandler: void runSyncFinishedOrCanceledLocked(android.content.SyncResult,android.content.SyncManager$ActiveSyncContext)>",
      "<android.content.SyncManager: void dumpSyncState(java.io.PrintWriter)>",
      "<android.content.SyncManager: void increaseBackoffSetting(android.content.SyncOperation)>",
      "<android.content.SyncManager: void maybeRescheduleSync(android.content.SyncResult,android.content.SyncOperation)>",
      "<android.content.SyncManager: void onAccountsUpdated(android.accounts.Account[])>",
      "<android.content.SyncQueue: void onBackoffChanged(android.accounts.Account,java.lang.String,long)>",
      "<android.content.SyncStorageEngine: void updateOrRemovePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long,boolean)>",
      "<android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String)>",
      "<android.content.pm.ActivityInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.content.pm.ApplicationInfo: void dump(android.util.Printer,java.lang.String)>",
      "<android.content.pm.ApplicationInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.content.pm.ConfigurationInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.content.pm.PackageInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.content.pm.PackageManager: void installPackage(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String)>",
      "<android.content.pm.PackageManager: void installPackageWithVerification(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.net.Uri,android.content.pm.ManifestDigest)>",
      "<android.content.pm.PackageStats: void writeToParcel(android.os.Parcel,int)>",
      "<android.content.pm.PathPermission: void writeToParcel(android.os.Parcel,int)>",
      "<android.content.pm.ProviderInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.content.pm.RegisteredServicesCache: void generateServicesMap()>",
      "<android.content.pm.ResolveInfo: void dump(android.util.Printer,java.lang.String)>",
      "<android.content.pm.ResolveInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.content.pm.ServiceInfo: void dump(android.util.Printer,java.lang.String)>",
      "<android.content.pm.ServiceInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.content.pm.Signature: void writeToParcel(android.os.Parcel,int)>",
      "<android.content.res.Configuration: void <init>()>",
      "<android.content.res.Configuration: void <init>(android.content.res.Configuration)>",
      "<android.content.res.Resources: void getValue(java.lang.String,android.util.TypedValue,boolean)>",
      "<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>",
      "<android.content.res.Resources: void getValueForDensity(int,int,android.util.TypedValue,boolean)>",
      "<android.database.AbstractCursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>",
      "<android.database.BulkCursorToCursorAdaptor: void deactivate()>",
      "<android.database.ContentObservable: void dispatchChange(boolean)>",
      "<android.database.ContentObservable: void notifyChange(boolean)>",
      "<android.database.ContentObservable: void registerObserver(android.database.ContentObserver)>",
      "<android.database.ContentObserver$NotificationRunnable: void run()>",
      "<android.database.ContentObserver$Transport: void onChange(boolean)>",
      "<android.database.CursorWrapper: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>",
      "<android.database.DataSetObservable: void notifyChanged()>",
      "<android.database.DataSetObservable: void notifyInvalidated()>",
      "<android.database.DefaultDatabaseErrorHandler: void onCorruption(android.database.sqlite.SQLiteDatabase)>",
      "<android.database.sqlite.SQLiteClosable: void acquireReference()>",
      "<android.database.sqlite.SQLiteClosable: void releaseReference()>",
      "<android.database.sqlite.SQLiteClosable: void releaseReferenceFromContainer()>",
      "<android.database.sqlite.SQLiteDirectCursorDriver: void setBindArguments(java.lang.String[])>",
      "<android.database.sqlite.SQLiteProgram: void compileSql()>",
      "<android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>",
      "<android.database.sqlite.SQLiteQueryBuilder: void appendColumns(java.lang.StringBuilder,java.lang.String[])>",
      "<android.ddm.DdmHandleAppName: void sendAPNM(java.lang.String)>",
      "<android.ddm.DdmHandleAppName: void setAppName(java.lang.String)>",
      "<android.ddm.DdmHandleNativeHeap: void register()>",
      "<android.ddm.DdmHandleThread: void register()>",
      "<android.drm.mobile1.DrmRightsManager: void deleteRights(android.drm.mobile1.DrmRights)>",
      "<android.graphics.BitmapFactory$Options: void requestCancelDecode()>",
      "<android.graphics.Matrix: void finalize()>",
      "<android.graphics.drawable.AnimatedRotateDrawable: void run()>",
      "<android.inputmethodservice.ExtractEditText: void deleteText_internal(int,int)>",
      "<android.inputmethodservice.ExtractEditText: void replaceText_internal(int,int,java.lang.CharSequence)>",
      "<android.inputmethodservice.ExtractEditText: void setCursorPosition_internal(int,int)>",
      "<android.inputmethodservice.ExtractEditText: void setSpan_internal(java.lang.Object,int,int,int)>",
      "<android.inputmethodservice.ExtractEditText: void viewClicked(android.view.inputmethod.InputMethodManager)>",
      "<android.location.LocationManager: void <init>(android.location.ILocationManager)>",
      "<android.media.AudioManager: void handleKeyDown(int,int)>",
      "<android.media.AudioManager: void handleKeyUp(int,int)>",
      "<android.media.AudioManager: void preDispatchKeyEvent(int,int)>",
      "<android.media.AudioManager: void setBluetoothScoOn(boolean)>",
      "<android.media.AudioManager: void setMicrophoneMute(boolean)>",
      "<android.media.AudioManager: void setParameter(java.lang.String,java.lang.String)>",
      "<android.media.AudioManager: void setParameters(java.lang.String)>",
      "<android.media.AudioManager: void setRingerMode(int)>",
      "<android.media.AudioManager: void setSpeakerphoneOn(boolean)>",
      "<android.media.AudioManager: void setVibrateSetting(int,int)>",
      "<android.media.ExifInterface: void loadAttributes()>",
      "<android.media.MediaMetadataRetriever: void finalize()>",
      "<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>",
      "<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>",
      "<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)>",
      "<android.media.MediaScannerConnection$ClientProxy: void onScanCompleted(java.lang.String,android.net.Uri)>",
      "<android.media.MiniThumbFile: void <init>(android.net.Uri)>",
      "<android.media.Ringtone: void open(android.net.Uri)>",
      "<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)>",
      "<android.media.ThumbnailUtils: void closeSilently(android.os.ParcelFileDescriptor)>",
      "<android.net.DhcpInfo: void putAddress(java.lang.StringBuffer,int)>",
      "<android.net.DhcpInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.net.NetworkInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.net.NetworkQuotaInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.net.NetworkState: void writeToParcel(android.os.Parcel,int)>",
      "<android.net.SSLCertificateSocketFactory: void verifyHostname(java.net.Socket,java.lang.String)>",
      "<android.net.TrafficStats: void tagSocket(java.net.Socket)>",
      "<android.net.TrafficStats: void untagSocket(java.net.Socket)>",
      "<android.net.Uri: void writeToParcel(android.os.Parcel,android.net.Uri)>",
      "<android.net.http.CertificateChainValidator: void closeSocketThrowException(javax.net.ssl.SSLSocket,java.lang.String)>",
      "<android.net.http.CertificateChainValidator: void closeSocketThrowException(javax.net.ssl.SSLSocket,java.lang.String,java.lang.String)>",
      "<android.net.http.IdleCache$IdleReaper: void run()>",
      "<android.net.http.IdleCache: void clear()>",
      "<android.net.http.IdleCache: void clearIdle()>",
      "<android.net.wifi.WifiInfo: void setSupplicantState(java.lang.String)>",
      "<android.net.wifi.WifiInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.nfc.TransceiveResult: void writeToParcel(android.os.Parcel,int)>",
      "<android.opengl.EGLLogWrapper: void arg(java.lang.String,java.lang.String)>",
      "<android.opengl.EGLLogWrapper: void log(java.lang.String)>",
      "<android.opengl.ETC1Util: void writeTexture(android.opengl.ETC1Util$ETC1Texture,java.io.OutputStream)>",
      "<android.os.Bundle: void putIBinder(java.lang.String,android.os.IBinder)>",
      "<android.os.Messenger: void writeToParcel(android.os.Parcel,int)>",
      "<android.os.Process: void openZygoteSocketIfNeeded()>",
      "<android.os.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>",
      "<android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>",
      "<android.os.StatFs: void finalize()>",
      "<android.os.Vibrator: void cancel()>",
      "<android.os.Vibrator: void vibrate(long)>",
      "<android.os.WorkSource: void addLocked(int)>",
      "<android.os.WorkSource: void set(android.os.WorkSource)>",
      "<android.os.WorkSource: void writeToParcel(android.os.Parcel,int)>",
      "<android.preference.Preference: void setIntent(android.content.Intent)>",
      "<android.preference.PreferenceFragment: void addPreferencesFromIntent(android.content.Intent)>",
      "<android.preference.PreferenceFragment: void onActivityResult(int,int,android.content.Intent)>",
      "<android.preference.PreferenceManager: void dispatchActivityResult(int,int,android.content.Intent)>",
      "<android.preference.PreferenceManager: void dispatchNewIntent(android.content.Intent)>",
      "<android.preference.RingtonePreference: void onPrepareRingtonePickerIntent(android.content.Intent)>",
      "<android.preference.RingtonePreference: void onSaveRingtone(android.net.Uri)>",
      "<android.provider.CallLog$Calls: void removeExpiredEntries(android.content.Context)>",
      "<android.provider.Contacts$People: void setPhotoData(android.content.ContentResolver,android.net.Uri,byte[])>",
      "<android.provider.ContactsContract$QuickContact: void showQuickContact(android.content.Context,android.graphics.Rect,android.net.Uri,int,java.lang.String[])>",
      "<android.provider.ContactsContract$QuickContact: void showQuickContact(android.content.Context,android.view.View,android.net.Uri,int,java.lang.String[])>",
      "<android.provider.MediaStore$InternalThumbnails: void cancelThumbnailRequest(android.content.ContentResolver,long,android.net.Uri,long)>",
      "<android.provider.Settings$NameValueCache: void <init>(java.lang.String,android.net.Uri,java.lang.String)>",
      "<android.provider.Settings$SettingNotFoundException: void <init>(java.lang.String)>",
      "<android.provider.Settings$System: void getConfiguration(android.content.ContentResolver,android.content.res.Configuration)>",
      "<android.provider.Settings$System: void setShowGTalkServiceStatus(android.content.ContentResolver,boolean)>",
      "<android.provider.SyncStateContract$Helpers: void set(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account,byte[])>",
      "<android.provider.SyncStateContract$Helpers: void update(android.content.ContentProviderClient,android.net.Uri,byte[])>",
      "<android.speech.SpeechRecognizer: void checkIsCalledFromMainThread()>",
      "<android.speech.SpeechRecognizer: void destroy()>",
      "<android.speech.SpeechRecognizer: void handleCancelMessage()>",
      "<android.speech.SpeechRecognizer: void handleStartListening(android.content.Intent)>",
      "<android.speech.SpeechRecognizer: void handleStopMessage()>",
      "<android.speech.SpeechRecognizer: void putMessage(android.os.Message)>",
      "<android.speech.tts.TtsEngines: void updateLocalePrefForEngine(java.lang.String,java.lang.String)>",
      "<android.support.v4.app.ActivityCompatHoneycomb: void dump(android.app.Activity,java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>",
      "<android.support.v4.app.ActivityCompatHoneycomb: void invalidateOptionsMenu(android.app.Activity)>",
      "<android.support.v4.app.ActivityCompatHoneycomb: void startActivities(android.app.Activity,android.content.Intent[])>",
      "<android.support.v4.app.BackStackRecord: void <init>(android.support.v4.app.FragmentManagerImpl)>",
      "<android.support.v4.app.BackStackRecord: void bumpBackStackNesting(int)>",
      "<android.support.v4.app.BackStackRecord: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>",
      "<android.support.v4.app.BackStackRecord: void dump(java.lang.String,java.io.PrintWriter,boolean)>",
      "<android.support.v4.app.BackStackRecord: void popFromBackStack(boolean)>",
      "<android.support.v4.app.BackStackRecord: void run()>",
      "<android.support.v4.app.BackStackState: void writeToParcel(android.os.Parcel,int)>",
      "<android.support.v4.app.Fragment: void onActivityResult(int,int,android.content.Intent)>",
      "<android.support.v4.app.Fragment: void startActivity(android.content.Intent)>",
      "<android.support.v4.app.Fragment: void startActivityForResult(android.content.Intent,int)>",
      "<android.support.v4.app.FragmentActivity: void onActivityResult(int,int,android.content.Intent)>",
      "<android.support.v4.app.FragmentActivity: void startActivityForResult(android.content.Intent,int)>",
      "<android.support.v4.app.FragmentActivity: void startActivityFromFragment(android.support.v4.app.Fragment,android.content.Intent,int)>",
      "<android.support.v4.app.ListFragment: void setListAdapter(android.widget.ListAdapter)>",
      "<android.support.v4.app.NavUtils: void navigateUpTo(android.app.Activity,android.content.Intent)>",
      "<android.support.v4.content.CursorLoader: void <init>(android.content.Context,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>",
      "<android.support.v4.content.CursorLoader: void setUri(android.net.Uri)>",
      "<android.support.v4.content.LocalBroadcastManager$BroadcastRecord: void <init>(android.content.Intent,java.util.ArrayList)>",
      "<android.support.v4.content.LocalBroadcastManager: void sendBroadcastSync(android.content.Intent)>",
      "<android.support.v4.view.MenuItemCompatHoneycomb: void setShowAsAction(android.view.MenuItem,int)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void addAction(java.lang.Object,int)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void addChild(java.lang.Object,android.view.View)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void getBoundsInParent(java.lang.Object,android.graphics.Rect)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void getBoundsInScreen(java.lang.Object,android.graphics.Rect)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void recycle(java.lang.Object)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setBoundsInParent(java.lang.Object,android.graphics.Rect)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setBoundsInScreen(java.lang.Object,android.graphics.Rect)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setCheckable(java.lang.Object,boolean)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setChecked(java.lang.Object,boolean)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setClassName(java.lang.Object,java.lang.CharSequence)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setClickable(java.lang.Object,boolean)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setContentDescription(java.lang.Object,java.lang.CharSequence)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setEnabled(java.lang.Object,boolean)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setFocusable(java.lang.Object,boolean)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setFocused(java.lang.Object,boolean)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setLongClickable(java.lang.Object,boolean)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setPackageName(java.lang.Object,java.lang.CharSequence)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setParent(java.lang.Object,android.view.View)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setPassword(java.lang.Object,boolean)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setScrollable(java.lang.Object,boolean)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setSelected(java.lang.Object,boolean)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setSource(java.lang.Object,android.view.View)>",
      "<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setText(java.lang.Object,java.lang.CharSequence)>",
      "<android.telephony.JapanesePhoneNumberFormatter: void format(android.text.Editable)>",
      "<android.telephony.PhoneNumberUtils: void log(java.lang.String)>",
      "<android.test.AndroidTestCase: void assertReadingContentUriRequiresPermission(android.net.Uri,java.lang.String)>",
      "<android.test.AndroidTestCase: void assertWritingContentUriRequiresPermission(android.net.Uri,java.lang.String)>",
      "<android.test.AndroidTestCase: void setUp()>",
      "<android.test.AndroidTestCase: void tearDown()>",
      "<android.test.AndroidTestCase: void testAndroidTestCaseSetupProperly()>",
      "<android.test.AndroidTestRunner: void setContextIfAndroidTestCase(junit.framework.Test,android.content.Context,android.content.Context)>",
      "<android.test.AndroidTestRunner: void setInstrumentaiton(android.app.Instrumentation)>",
      "<android.test.InstrumentationTestCase: void runTest()>",
      "<android.test.IsolatedContext: void sendBroadcast(android.content.Intent)>",
      "<android.test.IsolatedContext: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>",
      "<android.test.ServiceTestCase: void startService(android.content.Intent)>",
      "<android.test.mock.MockContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)>",
      "<android.test.mock.MockContext: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)>",
      "<android.test.mock.MockContext: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)>",
      "<android.test.mock.MockContext: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)>",
      "<android.test.mock.MockContext: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)>",
      "<android.test.mock.MockContext: void grantUriPermission(java.lang.String,android.net.Uri,int)>",
      "<android.test.mock.MockContext: void removeStickyBroadcast(android.content.Intent)>",
      "<android.test.mock.MockContext: void revokeUriPermission(android.net.Uri,int)>",
      "<android.test.mock.MockContext: void sendBroadcast(android.content.Intent)>",
      "<android.test.mock.MockContext: void sendBroadcast(android.content.Intent,java.lang.String)>",
      "<android.test.mock.MockContext: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>",
      "<android.test.mock.MockContext: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>",
      "<android.test.mock.MockContext: void sendStickyBroadcast(android.content.Intent)>",
      "<android.test.mock.MockContext: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>",
      "<android.test.mock.MockContext: void startActivity(android.content.Intent)>",
      "<android.test.mock.MockContext: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>",
      "<android.test.suitebuilder.TestSuiteBuilder: void addSuiteIfNecessary(java.lang.String)>",
      "<android.test.suitebuilder.TestSuiteBuilder: void addTest(junit.framework.Test)>",
      "<android.test.suitebuilder.TestSuiteBuilder: void addTest(android.test.suitebuilder.TestMethod)>",
      "<android.util.Base64OutputStream: void close()>",
      "<android.util.Base64OutputStream: void write(byte[],int,int)>",
      "<android.util.Base64OutputStream: void write(int)>",
      "<android.view.AbsSavedState: void writeToParcel(android.os.Parcel,int)>",
      "<android.view.Display: void getSizeInternal(android.graphics.Point,boolean)>",
      "<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>",
      "<android.view.ViewRootImpl$TakenSurfaceHolder: void onUpdateSurface()>",
      "<android.view.ViewRootImpl$W: void executeCommand(java.lang.String,java.lang.String,android.os.ParcelFileDescriptor)>",
      "<android.view.ViewRootImpl: void dispatchDetachedFromWindow()>",
      "<android.view.ViewRootImpl: void draw(boolean)>",
      "<android.view.ViewRootImpl: void playSoundEffect(int)>",
      "<android.view.ViewRootImpl: void requestTransparentRegion(android.view.View)>",
      "<android.view.Window: void setFeatureDrawableUri(int,android.net.Uri)>",
      "<android.view.inputmethod.CompletionInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.view.inputmethod.CorrectionInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.view.inputmethod.ExtractedText: void writeToParcel(android.os.Parcel,int)>",
      "<android.view.inputmethod.ExtractedTextRequest: void writeToParcel(android.os.Parcel,int)>",
      "<android.view.inputmethod.InputBinding: void writeToParcel(android.os.Parcel,int)>",
      "<android.view.inputmethod.InputMethodInfo: void dump(android.util.Printer,java.lang.String)>",
      "<android.view.inputmethod.InputMethodInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.view.textservice.SuggestionsInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.view.textservice.TextInfo: void writeToParcel(android.os.Parcel,int)>",
      "<android.webkit.BrowserFrame: void loadStarted(java.lang.String,android.graphics.Bitmap,int,boolean)>",
      "<android.webkit.BrowserFrame: void postUrl(java.lang.String,byte[])>",
      "<android.webkit.BrowserFrame: void removeJavascriptInterface(java.lang.String)>",
      "<android.webkit.BrowserFrame: void setTitle(java.lang.String)>",
      "<android.webkit.BrowserFrame: void windowObjectCleared(int)>",
      "<android.webkit.CallbackProxy$UploadFile: void onReceiveValue(android.net.Uri)>",
      "<android.webkit.CallbackProxy: void doUpdateVisitedHistory(java.lang.String,boolean)>",
      "<android.webkit.CallbackProxy: void onJsAlert(java.lang.String,java.lang.String)>",
      "<android.webkit.CallbackProxy: void onReceivedClientCertRequest(android.webkit.ClientCertRequestHandler,java.lang.String)>",
      "<android.webkit.CallbackProxy: void onReceivedHttpAuthRequest(android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)>",
      "<android.webkit.CallbackProxy: void onReceivedLoginRequest(java.lang.String,java.lang.String,java.lang.String)>",
      "<android.webkit.CallbackProxy: void onReceivedSslError(android.webkit.SslErrorHandler,android.net.http.SslError)>",
      "<android.webkit.CallbackProxy: void onReceivedTitle(java.lang.String)>",
      "<android.webkit.CallbackProxy: void onReceivedTouchIconUrl(java.lang.String,boolean)>",
      "<android.webkit.ContentLoader: void buildHeaders(android.net.http.Headers)>",
      "<android.webkit.DeviceMotionService: void createHandler()>",
      "<android.webkit.DeviceMotionService: void onAccuracyChanged(android.hardware.Sensor,int)>",
      "<android.webkit.DeviceMotionService: void onSensorChanged(android.hardware.SensorEvent)>",
      "<android.webkit.DeviceMotionService: void sendErrorEvent()>",
      "<android.webkit.DeviceOrientationService: void maybeSendChange(double,double,double)>",
      "<android.webkit.DeviceOrientationService: void onAccuracyChanged(android.hardware.Sensor,int)>",
      "<android.webkit.DeviceOrientationService: void onSensorChanged(android.hardware.SensorEvent)>",
      "<android.webkit.DeviceOrientationService: void sendErrorEvent()>",
      "<android.webkit.FindActionModeCallback: void findNext(boolean)>",
      "<android.webkit.FindActionModeCallback: void setText(java.lang.String)>",
      "<android.webkit.FindActionModeCallback: void showSoftInput()>",
      "<android.webkit.FindActionModeCallback: void updateMatchesString()>",
      "<android.webkit.FrameLoader: void populateHeaders()>",
      "<android.webkit.FrameLoader: void populateStaticHeaders()>",
      "<android.webkit.FrameLoader: void setReferrer(java.lang.String)>",
      "<android.webkit.FrameLoader: void startCacheLoad(android.webkit.CacheManager$CacheResult)>",
      "<android.webkit.HTML5VideoView: void setVideoURI(java.lang.String,android.webkit.HTML5VideoViewProxy)>",
      "<android.webkit.HTML5VideoViewProxy$VideoPlayer: void play(java.lang.String,int,android.webkit.HTML5VideoViewProxy,android.webkit.WebChromeClient,int)>",
      "<android.webkit.HTML5VideoViewProxy: void enterFullScreenVideo(int,java.lang.String)>",
      "<android.webkit.HTML5VideoViewProxy: void loadPoster(java.lang.String)>",
      "<android.webkit.HTML5VideoViewProxy: void play(java.lang.String,int,int)>",
      "<android.webkit.HttpAuthHandlerImpl: void handleAuthRequest(android.webkit.LoadListener)>",
      "<android.webkit.HttpAuthHandlerImpl: void handleMessage(android.os.Message)>",
      "<android.webkit.HttpAuthHandlerImpl: void onReceivedCredentials(android.webkit.LoadListener,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>",
      "<android.webkit.HttpAuthHandlerImpl: void signalRequestComplete()>",
      "<android.webkit.HttpAuthHandlerImpl: void waitForRequestToComplete()>",
      "<android.webkit.JWebCoreJavaBridge: void fireSharedTimer()>",
      "<android.webkit.JWebCoreJavaBridge: void setCookies(java.lang.String,java.lang.String)>",
      "<android.webkit.JWebCoreJavaBridge: void setSharedTimer(long)>",
      "<android.webkit.JWebCoreJavaBridge: void updateProxy(android.net.ProxyProperties)>",
      "<android.webkit.JsResult: void confirm()>",
      "<android.webkit.LoadListener: void commitHeaders()>",
      "<android.webkit.LoadListener: void commitHeadersCheckRedirect()>",
      "<android.webkit.LoadListener: void commitLoad()>",
      "<android.webkit.LoadListener: void doRedirect()>",
      "<android.webkit.LoadListener: void downloadFile()>",
      "<android.webkit.LoadListener: void guessMimeType()>",
      "<android.webkit.LoadListener: void handleAuthResponse(java.lang.String,java.lang.String)>",
      "<android.webkit.LoadListener: void handleCertificate(android.net.http.SslCertificate)>",
      "<android.webkit.LoadListener: void handleEndData()>",
      "<android.webkit.LoadListener: void handleHeaders(android.net.http.Headers)>",
      "<android.webkit.LoadListener: void handleMessage(android.os.Message)>",
      "<android.webkit.LoadListener: void handleSslErrorResponse(boolean)>",
      "<android.webkit.LoadListener: void loadSynchronousMessages()>",
      "<android.webkit.LoadListener: void makeAuthResponse(java.lang.String,java.lang.String)>",
      "<android.webkit.LoadListener: void setNativeResponse()>",
      "<android.webkit.Network$RoamingMonitor: void onReceive(android.content.Context,android.content.Intent)>",
      "<android.webkit.Network: void clearUserSslPrefTable()>",
      "<android.webkit.Network: void handleAuthRequest(android.webkit.LoadListener)>",
      "<android.webkit.Network: void monitorRoaming()>",
      "<android.webkit.PluginFullScreenHolder: void setContentView(android.view.View)>",
      "<android.webkit.PluginFullScreenHolder: void show()>",
      "<android.webkit.SelectActionModeCallback: void finish()>",
      "<android.webkit.SslCertLookupTable: void clear()>",
      "<android.webkit.SslCertLookupTable: void setIsAllowed(android.net.http.SslError)>",
      "<android.webkit.SslErrorHandlerImpl: void clear()>",
      "<android.webkit.SslErrorHandlerImpl: void handleMessage(android.os.Message)>",
      "<android.webkit.ViewManager$ChildView: void attachView(int,int,int,int)>",
      "<android.webkit.ViewManager$ChildView: void removeViewOnUIThread()>",
      "<android.webkit.ViewManager: void endZoom()>",
      "<android.webkit.ViewManager: void hideAll()>",
      "<android.webkit.ViewManager: void requestLayout(android.webkit.ViewManager$ChildView)>",
      "<android.webkit.ViewManager: void scaleAll()>",
      "<android.webkit.ViewManager: void showAll()>",
      "<android.webkit.ViewManager: void startZoom()>",
      "<android.webkit.WebSyncManager$SyncHandler: void handleMessage(android.os.Message)>",
      "<android.webkit.WebSyncManager: void startSync()>",
      "<android.webkit.WebSyncManager: void sync()>",
      "<android.webkit.WebView$PackageListener: void onReceive(android.content.Context,android.content.Intent)>",
      "<android.webkit.WebView$ProxyReceiver: void onReceive(android.content.Context,android.content.Intent)>",
      "<android.webkit.WebView: void handleProxyBroadcast(android.content.Intent)>",
      "<android.webkit.WebViewClient: void onFormResubmission(android.webkit.WebView,android.os.Message,android.os.Message)>",
      "<android.webkit.WebViewCore: void contentDraw()>",
      "<android.webkit.WebViewCore: void destroy()>",
      "<android.webkit.WebViewCore: void initialize()>",
      "<android.webkit.WebViewCore: void key(android.view.KeyEvent,boolean)>",
      "<android.webkit.WebViewCore: void sendNotifyProgressFinished()>",
      "<android.webkit.WebViewCore: void updateViewport()>",
      "<android.webkit.WebViewDatabase: void addCache(java.lang.String,android.webkit.CacheManager$CacheResult)>",
      "<android.webkit.WebViewDatabase: void addCookie(android.webkit.CookieManager$Cookie)>",
      "<android.webkit.WebViewDatabase: void clearCookies()>",
      "<android.webkit.WebViewDatabase: void clearHttpAuthUsernamePassword()>",
      "<android.webkit.WebViewDatabase: void clearUsernamePassword()>",
      "<android.webkit.WebViewDatabase: void deleteCookies(java.lang.String,java.lang.String,java.lang.String)>",
      "<android.webkit.WebViewDatabase: void initCacheDatabase(android.content.Context)>",
      "<android.webkit.WebViewDatabase: void initDatabase(android.content.Context)>",
      "<android.webkit.WebViewDatabase: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>",
      "<android.webkit.WebViewDatabase: void setUsernamePassword(java.lang.String,java.lang.String,java.lang.String)>",
      "<android.webkit.WebViewDatabase: void upgradeCacheDatabase()>",
      "<android.webkit.WebViewDatabase: void upgradeDatabase()>",
      "<android.webkit.WebViewDatabase: void upgradeDatabaseFromV10ToV11()>",
      "<android.webkit.ZoomControlEmbedded$ZoomListener: void onVisibilityChanged(boolean)>",
      "<android.webkit.ZoomControlEmbedded$ZoomListener: void onZoom(boolean)>",
      "<android.webkit.ZoomControlEmbedded: void show()>",
      "<android.webkit.ZoomControlEmbedded: void update()>",
      "<android.webkit.ZoomControlExternal$ExtendedZoomControls: void fade(int,float,float)>",
      "<android.webkit.ZoomControlExternal: void show()>",
      "<android.widget.AbsListView: void setRemoteViewsAdapter(android.content.Intent)>",
      "<android.widget.AbsSeekBar: void onProgressRefresh(float,boolean)>",
      "<android.widget.AbsSeekBar: void setThumbPos(int,android.graphics.drawable.Drawable,float,int)>",
      "<android.widget.AbsSeekBar: void trackTouchEvent(android.view.MotionEvent)>",
      "<android.widget.AbsSpinner: void setSelection(int,boolean)>",
      "<android.widget.ActivityChooserModel$DefaultSorter: void sort(android.content.Intent,java.util.List,java.util.List)>",
      "<android.widget.ActivityChooserModel: void setIntent(android.content.Intent)>",
      "<android.widget.AdapterViewAnimator: void onRestoreInstanceState(android.os.Parcelable)>",
      "<android.widget.AdapterViewAnimator: void setDisplayedChild(int,boolean)>",
      "<android.widget.AdapterViewAnimator: void setRemoteViewsAdapter(android.content.Intent)>",
      "<android.widget.GridView: void layoutChildren()>",
      "<android.widget.GridView: void setRemoteViewsAdapter(android.content.Intent)>",
      "<android.widget.ImageView: void setImageURI(android.net.Uri)>",
      "<android.widget.LinearLayout: void <init>(android.content.Context)>",
      "<android.widget.LinearLayout: void setDividerDrawable(android.graphics.drawable.Drawable)>",
      "<android.widget.LinearLayout: void setShowDividers(int)>",
      "<android.widget.ListView: void layoutChildren()>",
      "<android.widget.ListView: void onMeasure(int,int)>",
      "<android.widget.ListView: void setRemoteViewsAdapter(android.content.Intent)>",
      "<android.widget.QuickContactBadge$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)>",
      "<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)>",
      "<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)>",
      "<android.widget.QuickContactBadge: void assignContactUri(android.net.Uri)>",
      "<android.widget.QuickContactBadge: void drawableStateChanged()>",
      "<android.widget.QuickContactBadge: void onClick(android.view.View)>",
      "<android.widget.QuickContactBadge: void onContactUriChanged()>",
      "<android.widget.QuickContactBadge: void onDraw(android.graphics.Canvas)>",
      "<android.widget.QuickContactBadge: void setImageToDefault()>",
      "<android.widget.RemoteViews: void setImageViewUri(int,android.net.Uri)>",
      "<android.widget.RemoteViews: void setIntent(int,java.lang.String,android.content.Intent)>",
      "<android.widget.RemoteViews: void setOnClickFillInIntent(int,android.content.Intent)>",
      "<android.widget.RemoteViews: void setRemoteAdapter(int,android.content.Intent)>",
      "<android.widget.RemoteViews: void setRemoteAdapter(int,int,android.content.Intent)>",
      "<android.widget.RemoteViews: void setUri(int,java.lang.String,android.net.Uri)>",
      "<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: void bind(android.content.Context,int,android.content.Intent)>",
      "<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: void unbind(android.content.Context,int,android.content.Intent)>",
      "<android.widget.RemoteViewsAdapter: void <init>(android.content.Context,android.content.Intent,android.widget.RemoteViewsAdapter$RemoteAdapterConnectionCallback)>",
      "<android.widget.SearchView: void launchIntent(android.content.Intent)>",
      "<android.widget.ShareActionProvider: void setShareIntent(android.content.Intent)>",
      "<android.widget.SpellChecker: void createMisspelledSuggestionSpan(android.text.Editable,android.view.textservice.SuggestionsInfo,android.text.style.SpellCheckSpan)>",
      "<android.widget.SpellChecker: void spellCheck()>",
      "<android.widget.SpellChecker: void spellCheck(int,int)>",
      "<android.widget.SuggestionsAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)>",
      "<android.widget.SuggestionsAdapter: void notifyDataSetChanged()>",
      "<android.widget.SuggestionsAdapter: void setViewDrawable(android.widget.ImageView,android.graphics.drawable.Drawable,int)>",
      "<android.widget.SuggestionsAdapter: void setViewText(android.widget.TextView,java.lang.CharSequence)>",
      "<android.widget.SuggestionsAdapter: void updateSpinnerState(android.database.Cursor)>",
      "<android.widget.VideoView: void setVideoURI(android.net.Uri)>",
      "<android.widget.VideoView: void setVideoURI(android.net.Uri,java.util.Map)>",
      "<com.android.internal.app.AlertController: void centerButton(android.widget.Button)>",
      "<com.android.internal.app.AlertController: void setIcon(int)>",
      "<com.android.internal.app.AlertController: void setupContent(android.widget.LinearLayout)>",
      "<com.android.internal.app.AlertController: void setupView()>",
      "<com.android.internal.content.PackageMonitor: void onReceive(android.content.Context,android.content.Intent)>",
      "<com.android.internal.os.RuntimeInit$UncaughtHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>",
      "<com.android.internal.os.ZygoteConnection: void setChildPgid(int)>",
      "<com.android.internal.telephony.AdnRecordCache: void reset()>",
      "<com.android.internal.telephony.AdnRecordLoader: void loadAllFromEF(int,int,android.os.Message)>",
      "<com.android.internal.telephony.AdnRecordLoader: void loadFromEF(int,int,int,android.os.Message)>",
      "<com.android.internal.telephony.ApnContext: void decWaitingApnsPermFailCount()>",
      "<com.android.internal.telephony.ApnContext: void log(java.lang.String)>",
      "<com.android.internal.telephony.ApnContext: void removeNextWaitingApn()>",
      "<com.android.internal.telephony.ApnContext: void setDataConnectionAc(com.android.internal.telephony.DataConnectionAc)>",
      "<com.android.internal.telephony.ApnContext: void setDependencyMet(boolean)>",
      "<com.android.internal.telephony.ApnContext: void setEnabled(boolean)>",
      "<com.android.internal.telephony.ApnContext: void setReason(java.lang.String)>",
      "<com.android.internal.telephony.CallerInfo: void updateGeoDescription(android.content.Context,java.lang.String)>",
      "<com.android.internal.telephony.DataConnectionAc: void addApnContextSync(com.android.internal.telephony.ApnContext)>",
      "<com.android.internal.telephony.DataConnectionAc: void log(java.lang.String)>",
      "<com.android.internal.telephony.DataConnectionAc: void removeApnContextSync(com.android.internal.telephony.ApnContext)>",
      "<com.android.internal.telephony.DataConnectionAc: void reqAddApnContext(com.android.internal.telephony.ApnContext)>",
      "<com.android.internal.telephony.DataConnectionAc: void reqApnSetting()>",
      "<com.android.internal.telephony.DataConnectionAc: void reqGetApnList(com.android.internal.telephony.ApnContext)>",
      "<com.android.internal.telephony.DataConnectionAc: void reqGetReconnectIntent()>",
      "<com.android.internal.telephony.DataConnectionAc: void reqIsInactive()>",
      "<com.android.internal.telephony.DataConnectionAc: void reqLinkCapabilities()>",
      "<com.android.internal.telephony.DataConnectionAc: void reqLinkProperties()>",
      "<com.android.internal.telephony.DataConnectionAc: void reqRefCount()>",
      "<com.android.internal.telephony.DataConnectionAc: void reqRemomveApnContext(com.android.internal.telephony.ApnContext)>",
      "<com.android.internal.telephony.DataConnectionAc: void reqReset()>",
      "<com.android.internal.telephony.DataConnectionAc: void reqSetLinkPropertiesHttpProxy(android.net.ProxyProperties)>",
      "<com.android.internal.telephony.DataConnectionAc: void reqSetReconnectIntent(android.app.PendingIntent)>",
      "<com.android.internal.telephony.DataConnectionAc: void reqUpdateLinkPropertiesDataCallState(com.android.internal.telephony.DataCallState)>",
      "<com.android.internal.telephony.DataConnectionAc: void setLinkPropertiesHttpProxySync(android.net.ProxyProperties)>",
      "<com.android.internal.telephony.DataConnectionAc: void setReconnectIntentSync(android.app.PendingIntent)>",
      "<com.android.internal.telephony.DataConnectionTracker: void onActionIntentDataStallAlarm(android.content.Intent)>",
      "<com.android.internal.telephony.DataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)>",
      "<com.android.internal.telephony.DataConnectionTracker: void onEnableApn(int,int)>",
      "<com.android.internal.telephony.DataConnectionTracker: void setDataOnRoamingEnabled(boolean)>",
      "<com.android.internal.telephony.DefaultPhoneNotifier: void log(java.lang.String)>",
      "<com.android.internal.telephony.DefaultPhoneNotifier: void notifyCallForwardingChanged(com.android.internal.telephony.Phone)>",
      "<com.android.internal.telephony.DefaultPhoneNotifier: void notifyCellLocation(com.android.internal.telephony.Phone)>",
      "<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataActivity(com.android.internal.telephony.Phone)>",
      "<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String,java.lang.String)>",
      "<com.android.internal.telephony.DefaultPhoneNotifier: void notifyMessageWaitingChanged(com.android.internal.telephony.Phone)>",
      "<com.android.internal.telephony.DefaultPhoneNotifier: void notifyOtaspChanged(com.android.internal.telephony.Phone,int)>",
      "<com.android.internal.telephony.DefaultPhoneNotifier: void notifyPhoneState(com.android.internal.telephony.Phone)>",
      "<com.android.internal.telephony.DefaultPhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)>",
      "<com.android.internal.telephony.DefaultPhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)>",
      "<com.android.internal.telephony.IccCard: void onIccSwap(boolean)>",
      "<com.android.internal.telephony.PhoneBase: void setPropertiesByCarrier()>",
      "<com.android.internal.telephony.PhoneProxy: void handleMessage(android.os.Message)>",
      "<com.android.internal.telephony.PhoneProxy: void logd(java.lang.String)>",
      "<com.android.internal.telephony.RIL$RILReceiver: void run()>",
      "<com.android.internal.telephony.RIL: void dial(java.lang.String,int,com.android.internal.telephony.UUSInfo,android.os.Message)>",
      "<com.android.internal.telephony.RIL: void iccIO(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,android.os.Message)>",
      "<com.android.internal.telephony.RIL: void onRadioAvailable()>",
      "<com.android.internal.telephony.RIL: void processUnsolicited(android.os.Parcel)>",
      "<com.android.internal.telephony.RIL: void queryCallForwardStatus(int,int,java.lang.String,android.os.Message)>",
      "<com.android.internal.telephony.RIL: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)>",
      "<com.android.internal.telephony.RIL: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>",
      "<com.android.internal.telephony.SMSDispatcher: void dispatch(android.content.Intent,java.lang.String)>",
      "<com.android.internal.telephony.SMSDispatcher: void dispatchBroadcastPdus(byte[][],boolean)>",
      "<com.android.internal.telephony.SMSDispatcher: void dispatchPdus(byte[][])>",
      "<com.android.internal.telephony.SMSDispatcher: void dispatchPortAddressedPdus(byte[][],int)>",
      "<com.android.internal.telephony.SMSDispatcher: void handleMessage(android.os.Message)>",
      "<com.android.internal.telephony.SMSDispatcher: void handleNotInService(int,com.android.internal.telephony.SMSDispatcher$SmsTracker)>",
      "<com.android.internal.telephony.SMSDispatcher: void handleReachSentLimit(com.android.internal.telephony.SMSDispatcher$SmsTracker)>",
      "<com.android.internal.telephony.SMSDispatcher: void handleSendComplete(android.os.AsyncResult)>",
      "<com.android.internal.telephony.SMSDispatcher: void sendMultipartSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)>",
      "<com.android.internal.telephony.cat.CatLog: void d(java.lang.Object,java.lang.String)>",
      "<com.android.internal.telephony.cat.CatLog: void d(java.lang.String,java.lang.String)>",
      "<com.android.internal.telephony.cat.CatService: void handleCmdResponse(com.android.internal.telephony.cat.CatResponseMessage)>",
      "<com.android.internal.telephony.cat.IconLoader: void handleMessage(android.os.Message)>",
      "<com.android.internal.telephony.cat.IconLoader: void loadIcon(int,android.os.Message)>",
      "<com.android.internal.telephony.cat.IconLoader: void loadIcons(int[],android.os.Message)>",
      "<com.android.internal.telephony.cat.IconLoader: void postIcon()>",
      "<com.android.internal.telephony.cat.IconLoader: void readClut()>",
      "<com.android.internal.telephony.cat.IconLoader: void readIconData()>",
      "<com.android.internal.telephony.cat.IconLoader: void readId()>",
      "<com.android.internal.telephony.cat.IconLoader: void startLoadingIcon(int)>",
      "<com.android.internal.telephony.cat.Input: void writeToParcel(android.os.Parcel,int)>",
      "<com.android.internal.telephony.cat.Menu: void writeToParcel(android.os.Parcel,int)>",
      "<com.android.internal.telephony.cdma.CDMALTEPhone: void handleMessage(android.os.Message)>",
      "<com.android.internal.telephony.cdma.CDMALTEPhone: void log(java.lang.String)>",
      "<com.android.internal.telephony.cdma.CDMALTEPhone: void selectNetworkManually(com.android.internal.telephony.OperatorInfo,android.os.Message)>",
      "<com.android.internal.telephony.cdma.CDMALTEPhone: void setSystemLocale(java.lang.String,java.lang.String,boolean)>",
      "<com.android.internal.telephony.cdma.CDMAPhone: void dispose()>",
      "<com.android.internal.telephony.cdma.CDMAPhone: void handleExitEmergencyCallbackMode(android.os.Message)>",
      "<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)>",
      "<com.android.internal.telephony.cdma.CDMAPhone: void notifyPhoneStateChanged()>",
      "<com.android.internal.telephony.cdma.CDMAPhone: void sendEmergencyCallbackModeChange()>",
      "<com.android.internal.telephony.cdma.CdmaCall: void connectionDisconnected(com.android.internal.telephony.cdma.CdmaConnection)>",
      "<com.android.internal.telephony.cdma.CdmaCallTracker: void fakeHoldForegroundBeforeDial()>",
      "<com.android.internal.telephony.cdma.CdmaCallTracker: void flashAndSetGenericTrue()>",
      "<com.android.internal.telephony.cdma.CdmaCallTracker: void handleCallWaitingInfo(com.android.internal.telephony.cdma.CdmaCallWaitingNotification)>",
      "<com.android.internal.telephony.cdma.CdmaCallTracker: void handleEcmTimer(int)>",
      "<com.android.internal.telephony.cdma.CdmaCallTracker: void handlePollCalls(android.os.AsyncResult)>",
      "<com.android.internal.telephony.cdma.CdmaCallTracker: void handleRadioNotAvailable()>",
      "<com.android.internal.telephony.cdma.CdmaCallTracker: void hangup(com.android.internal.telephony.cdma.CdmaConnection)>",
      "<com.android.internal.telephony.cdma.CdmaCallTracker: void registerForVoiceCallStarted(android.os.Handler,int,java.lang.Object)>",
      "<com.android.internal.telephony.cdma.CdmaConnection: void processNextPostDialChar()>",
      "<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void createAllDataConnectionList()>",
      "<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void dispose()>",
      "<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onCleanUpAllConnections(java.lang.String)>",
      "<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onCleanUpConnection(boolean,int,java.lang.String)>",
      "<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)>",
      "<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDataStateChanged(android.os.AsyncResult)>",
      "<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)>",
      "<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onEnableNewApn()>",
      "<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onRadioAvailable()>",
      "<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onRadioOffOrNotAvailable()>",
      "<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onRoamingOff()>",
      "<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onRoamingOn()>",
      "<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onVoiceCallStarted()>",
      "<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handleMessage(android.os.Message)>",
      "<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handlePollStateResultMessage(int,android.os.AsyncResult)>",
      "<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void log(java.lang.String)>",
      "<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void loge(java.lang.String)>",
      "<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollStateDone()>",
      "<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimLiLoaded: void onRecordLoaded(android.os.AsyncResult)>",
      "<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void onRecordLoaded()>",
      "<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void acknowledgeLastIncomingSms(boolean,int,android.os.Message)>",
      "<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void handleCdmaStatusReport(com.android.internal.telephony.cdma.SmsMessage)>",
      "<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>",
      "<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)>",
      "<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>",
      "<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void fixTimeZone(java.lang.String)>",
      "<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)>",
      "<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void hangupAndPowerOff()>",
      "<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()>",
      "<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setCdmaTechnology(int)>",
      "<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)>",
      "<com.android.internal.telephony.cdma.RuimRecords: void handleRuimRefresh(int[])>",
      "<com.android.internal.telephony.cdma.RuimRecords: void onRadioOffOrNotAvailable()>",
      "<com.android.internal.telephony.cdma.RuimRecords: void onRecordLoaded()>",
      "<com.android.internal.telephony.cdma.RuimRecords: void onRefresh(boolean,int[])>",
      "<com.android.internal.telephony.cdma.sms.BearerData: void decodeIs91(com.android.internal.telephony.cdma.sms.BearerData)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: void decodeSmsAddress(com.android.internal.telephony.cdma.sms.CdmaSmsAddress)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: void decodeUserDataPayload(com.android.internal.telephony.cdma.sms.UserData,boolean)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: void encode16bitEms(com.android.internal.telephony.cdma.sms.UserData,byte[])>",
      "<com.android.internal.telephony.cdma.sms.BearerData: void encode7bitEms(com.android.internal.telephony.cdma.sms.UserData,byte[],boolean)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: void encodeCallbackNumber(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: void encodeCdmaSmsAddress(com.android.internal.telephony.cdma.sms.CdmaSmsAddress)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: void encodeDisplayMode(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: void encodeEmsUserDataPayload(com.android.internal.telephony.cdma.sms.UserData)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: void encodeLanguageIndicator(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: void encodeMessageId(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: void encodeMsgCount(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: void encodeMsgDeliveryAlert(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: void encodeMsgStatus(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: void encodePriorityIndicator(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: void encodePrivacyIndicator(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: void encodeReplyOption(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: void encodeUserDataPayload(com.android.internal.telephony.cdma.sms.UserData)>",
      "<com.android.internal.telephony.cdma.sms.BearerData: void encodeValidityPeriodRel(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>",
      "<com.android.internal.telephony.gsm.GSMPhone: void dispose()>",
      "<com.android.internal.telephony.gsm.GSMPhone: void handleCfuQueryResult(com.android.internal.telephony.CallForwardInfo[])>",
      "<com.android.internal.telephony.gsm.GSMPhone: void notifyPhoneStateChanged()>",
      "<com.android.internal.telephony.gsm.GSMPhone: void onIncomingUSSD(int,java.lang.String)>",
      "<com.android.internal.telephony.gsm.GSMPhone: void setNetworkSelectionModeAutomatic(android.os.Message)>",
      "<com.android.internal.telephony.gsm.GsmCall: void connectionDisconnected(com.android.internal.telephony.gsm.GsmConnection)>",
      "<com.android.internal.telephony.gsm.GsmCallTracker: void fakeHoldForegroundBeforeDial()>",
      "<com.android.internal.telephony.gsm.GsmCallTracker: void handlePollCalls(android.os.AsyncResult)>",
      "<com.android.internal.telephony.gsm.GsmCallTracker: void handleRadioNotAvailable()>",
      "<com.android.internal.telephony.gsm.GsmCallTracker: void hangup(com.android.internal.telephony.gsm.GsmConnection)>",
      "<com.android.internal.telephony.gsm.GsmCallTracker: void switchWaitingOrHoldingAndActive()>",
      "<com.android.internal.telephony.gsm.GsmDataConnectionTracker$ApnChangeObserver: void onChange(boolean)>",
      "<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void cleanUpConnection(boolean,com.android.internal.telephony.ApnContext)>",
      "<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void configureRetry(com.android.internal.telephony.DataConnection,boolean)>",
      "<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void dispose()>",
      "<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void doRecovery()>",
      "<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void initApnContextsAndDataConnection()>",
      "<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)>",
      "<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onApnChanged()>",
      "<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataStateChanged(android.os.AsyncResult)>",
      "<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onEnableApn(int,int)>",
      "<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onPollPdp()>",
      "<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRadioOffOrNotAvailable()>",
      "<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setupDataOnReadyApns(java.lang.String)>",
      "<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void startAlarmForReconnect(int,com.android.internal.telephony.ApnContext)>",
      "<com.android.internal.telephony.gsm.GsmSMSDispatcher: void acknowledgeLastIncomingSms(boolean,int,android.os.Message)>",
      "<com.android.internal.telephony.gsm.GsmSMSDispatcher: void handleBroadcastSms(android.os.AsyncResult)>",
      "<com.android.internal.telephony.gsm.GsmSMSDispatcher: void handleMessage(android.os.Message)>",
      "<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>",
      "<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)>",
      "<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)>",
      "<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>",
      "<com.android.internal.telephony.gsm.GsmServiceStateTracker: void handleMessage(android.os.Message)>",
      "<com.android.internal.telephony.gsm.GsmServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)>",
      "<com.android.internal.telephony.gsm.GsmServiceStateTracker: void onRestrictedStateChanged(android.os.AsyncResult)>",
      "<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollStateDone()>",
      "<com.android.internal.telephony.gsm.GsmServiceStateTracker: void queueNextSignalStrengthPoll()>",
      "<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)>",
      "<com.android.internal.telephony.gsm.GsmServiceStateTracker: void updateSpnDisplay()>",
      "<com.android.internal.telephony.gsm.SIMRecords: void handleFileUpdate(int)>",
      "<com.android.internal.telephony.gsm.SIMRecords: void handleSimRefresh(int[])>",
      "<com.android.internal.telephony.gsm.SIMRecords: void onRecordLoaded()>",
      "<com.android.internal.telephony.gsm.SIMRecords: void onRefresh(boolean,int[])>",
      "<com.android.internal.telephony.gsm.SIMRecords: void setVoiceCallForwardingFlag(int,boolean)>",
      "<com.android.internal.telephony.gsm.SpnOverride: void loadSpnOverrides()>",
      "<com.android.internal.telephony.sip.SipConnectionBase: void log(java.lang.String)>",
      "<com.android.internal.telephony.sip.SipPhone$SipCall: void merge(com.android.internal.telephony.sip.SipPhone$SipCall)>",
      "<com.android.internal.telephony.sip.SipPhone$SipCall: void onConnectionEnded(com.android.internal.telephony.sip.SipPhone$SipConnection)>",
      "<com.android.internal.telephony.sip.SipPhone$SipCall: void onConnectionStateChanged(com.android.internal.telephony.sip.SipPhone$SipConnection)>",
      "<com.android.internal.telephony.sip.SipPhone$SipCall: void setState(com.android.internal.telephony.Call$State)>",
      "<com.android.internal.telephony.sip.SipPhone$SipConnection: void separate()>",
      "<com.android.internal.telephony.sip.SipPhone: void setEchoSuppressionEnabled(boolean)>",
      "<com.android.internal.telephony.sip.SipPhoneBase: void getOutgoingCallerIdDisplay(android.os.Message)>",
      "<com.android.internal.telephony.sip.SipPhoneBase: void migrate(android.os.RegistrantList,android.os.RegistrantList)>",
      "<com.android.internal.telephony.sip.SipPhoneBase: void notifyPhoneStateChanged()>",
      "<com.android.internal.telephony.sip.SipPhoneBase: void notifyPreciseCallStateChanged()>",
      "<com.android.internal.telephony.sip.SipPhoneBase: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>",
      "<com.android.internal.telephony.sip.SipPhoneBase: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>",
      "<com.android.internal.util.CharSequences: void validate(int,int,int)>",
      "<com.android.internal.view.BaseSurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)>",
      "<com.android.internal.view.IInputConnectionWrapper: void dispatchMessage(android.os.Message)>",
      "<com.android.internal.view.IInputConnectionWrapper: void executeMessage(android.os.Message)>",
      "<com.android.internal.view.InputBindResult: void <init>(com.android.internal.view.IInputMethodSession,java.lang.String,int)>",
      "<com.android.internal.view.InputBindResult: void <init>(android.os.Parcel)>",
      "<com.android.internal.view.InputBindResult: void writeToParcel(android.os.Parcel,int)>",
      "<com.android.internal.view.InputConnectionWrapper$InputContextCallback: void waitForResultLocked()>",
      "<com.android.internal.view.menu.ActionMenuPresenter: void updateMenuView(boolean)>",
      "<com.android.internal.view.menu.ListMenuItemView: void initialize(com.android.internal.view.menu.MenuItemImpl,int)>",
      "<com.android.internal.view.menu.ListMenuItemView: void insertCheckBox()>",
      "<com.android.internal.view.menu.ListMenuItemView: void insertIconView()>",
      "<com.android.internal.view.menu.ListMenuItemView: void insertRadioButton()>",
      "<com.android.internal.view.menu.ListMenuItemView: void onFinishInflate()>",
      "<com.android.internal.view.menu.ListMenuItemView: void setCheckable(boolean)>",
      "<com.android.internal.view.menu.ListMenuItemView: void setChecked(boolean)>",
      "<com.android.internal.view.menu.ListMenuItemView: void setIcon(android.graphics.drawable.Drawable)>",
      "<com.android.internal.view.menu.ListMenuItemView: void setShortcut(boolean,char)>",
      "<com.android.internal.view.menu.ListMenuItemView: void setTitle(java.lang.CharSequence)>",
      "<com.android.internal.view.menu.MenuPopupHelper$ExpandedIndexObserver: void onChanged()>",
      "<com.android.internal.view.menu.MenuPopupHelper$MenuAdapter: void findExpandedIndex()>",
      "<com.android.internal.view.menu.MenuPopupHelper: void dismiss()>",
      "<com.android.internal.view.menu.MenuPopupHelper: void onCloseMenu(com.android.internal.view.menu.MenuBuilder,boolean)>",
      "<com.android.internal.view.menu.MenuPopupHelper: void onDismiss()>",
      "<com.android.internal.view.menu.MenuPopupHelper: void onGlobalLayout()>",
      "<com.android.internal.view.menu.MenuPopupHelper: void onViewDetachedFromWindow(android.view.View)>",
      "<com.android.internal.view.menu.MenuPopupHelper: void show()>",
      "<com.android.internal.view.menu.MenuPopupHelper: void updateMenuView(boolean)>",
      "<com.android.internal.widget.AbsActionBarView: void animateToVisibility(int)>",
      "<com.android.internal.widget.ActionBarContextView: void closeMode()>",
      "<com.android.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: void updateMenuView(boolean)>",
      "<com.android.internal.widget.ActionBarView: void onLayout(boolean,int,int,int,int)>",
      "<com.android.internal.widget.ActionBarView: void setDisplayOptions(int)>",
      "<com.android.internal.widget.ActionBarView: void setTitle(java.lang.CharSequence)>",
      "<com.android.internal.widget.ActionBarView: void setWindowTitle(java.lang.CharSequence)>",
      "<gov.nist.javax.sip.message.MultipartMimeContentImpl: void createContentList(java.lang.String)>",
      "<gov.nist.javax.sip.stack.IOHandler: void putSocket(java.lang.String,java.net.Socket)>",
      "<gov.nist.javax.sip.stack.TCPMessageChannel: void <init>(java.net.Socket,gov.nist.javax.sip.stack.SIPTransactionStack,gov.nist.javax.sip.stack.TCPMessageProcessor)>",
      "<gov.nist.javax.sip.stack.TLSMessageChannel: void <init>(java.net.Socket,gov.nist.javax.sip.stack.SIPTransactionStack,gov.nist.javax.sip.stack.TLSMessageProcessor)>",
      "<java.io.File: void <init>(java.net.URI)>",
      "<java.io.File: void checkURI(java.net.URI)>",
      "<java.lang.HexStringParser: void discardTrailingBits(long)>",
      "<java.lang.HexStringParser: void parseMantissa(java.lang.String)>",
      "<java.lang.HexStringParser: void processSubNormalNumber()>",
      "<java.lang.HexStringParser: void round()>",
      "<java.lang.IllegalStateException: void <init>(java.lang.String)>",
      "<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>",
      "<java.lang.ProcessManager$ProcessImpl: void setExitValue(int)>",
      "<java.lang.ProcessManager: void watchChildren()>",
      "<java.lang.RealToString: void longDigitGenerator(long,int,boolean,boolean,int)>",
      "<java.lang.Thread: void <init>()>",
      "<java.lang.Thread: void <init>(java.lang.Runnable)>",
      "<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>",
      "<java.lang.Thread: void <init>(java.lang.String)>",
      "<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>",
      "<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>",
      "<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>",
      "<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>",
      "<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String,int,boolean)>",
      "<java.lang.Thread: void checkAccess()>",
      "<java.lang.Thread: void create(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>",
      "<java.lang.Thread: void destroy()>",
      "<java.lang.Thread: void dumpStack()>",
      "<java.lang.Thread: void interrupt()>",
      "<java.lang.Thread: void join()>",
      "<java.lang.Thread: void join(long)>",
      "<java.lang.Thread: void join(long,int)>",
      "<java.lang.Thread: void parkFor(long)>",
      "<java.lang.Thread: void parkUntil(long)>",
      "<java.lang.Thread: void popInterruptAction$(java.lang.Runnable)>",
      "<java.lang.Thread: void pushInterruptAction$(java.lang.Runnable)>",
      "<java.lang.Thread: void resume()>",
      "<java.lang.Thread: void run()>",
      "<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>",
      "<java.lang.Thread: void setDaemon(boolean)>",
      "<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>",
      "<java.lang.Thread: void setName(java.lang.String)>",
      "<java.lang.Thread: void setPriority(int)>",
      "<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>",
      "<java.lang.Thread: void sleep(long)>",
      "<java.lang.Thread: void sleep(long,int)>",
      "<java.lang.Thread: void start()>",
      "<java.lang.Thread: void stop()>",
      "<java.lang.Thread: void stop(java.lang.Throwable)>",
      "<java.lang.Thread: void suspend()>",
      "<java.lang.Thread: void unpark()>",
      "<java.lang.Thread: void yield()>",
      "<java.lang.reflect.Method: void initGenericTypes()>",
      "<java.math.BigInt: void Check(boolean)>",
      "<java.net.CookieHandler: void put(java.net.URI,java.util.Map)>",
      "<java.net.HttpURLConnection: void <init>(java.net.URL)>",
      "<java.net.JarURLConnection: void <init>(java.net.URL)>",
      "<java.net.PlainDatagramSocketImpl: void connect(java.net.InetAddress,int)>",
      "<java.net.PlainSocketImpl: void accept(java.net.SocketImpl)>",
      "<java.net.PlainSocketImpl: void socksBind()>",
      "<java.net.ProxySelector: void connectFailed(java.net.URI,java.net.SocketAddress,java.io.IOException)>",
      "<java.net.ProxySelectorImpl: void connectFailed(java.net.URI,java.net.SocketAddress,java.io.IOException)>",
      "<java.net.ServerSocket: void implAccept(java.net.Socket)>",
      "<java.net.Socket: void setSoLinger(boolean,int)>",
      "<java.net.SocketUtils: void setCreated(java.net.Socket)>",
      "<java.net.Socks4Message: void setPort(int)>",
      "<java.net.Socks4Message: void setUserId(java.lang.String)>",
      "<java.net.URL: void <init>(java.net.URL,java.lang.String)>",
      "<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>",
      "<java.net.URLConnection: void <init>(java.net.URL)>",
      "<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>",
      "<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>",
      "<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>",
      "<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void bind(java.net.SocketAddress)>",
      "<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void close()>",
      "<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void disconnect()>",
      "<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void receive(java.net.DatagramPacket)>",
      "<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void send(java.net.DatagramPacket)>",
      "<java.nio.FileChannelImpl$FileLockImpl: void release()>",
      "<java.nio.FileChannelImpl: void checkOpen()>",
      "<java.nio.FileChannelImpl: void checkReadable()>",
      "<java.nio.FileChannelImpl: void checkWritable()>",
      "<java.nio.FileChannelImpl: void force(boolean)>",
      "<java.nio.FileChannelImpl: void implCloseChannel()>",
      "<java.nio.NioUtils: void freeDirectBuffer(java.nio.ByteBuffer)>",
      "<java.nio.SelectionKeyImpl: void checkValid()>",
      "<java.nio.SelectorImpl: void ensurePollFdsCapacity()>",
      "<java.nio.SelectorImpl: void preparePollFds()>",
      "<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: void bind(java.net.SocketAddress)>",
      "<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: void bind(java.net.SocketAddress,int)>",
      "<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: void close()>",
      "<java.nio.ServerSocketChannelImpl: void implCloseSelectableChannel()>",
      "<java.nio.ServerSocketChannelImpl: void implConfigureBlocking(boolean)>",
      "<java.nio.SocketChannelImpl$SocketAdapter: void close()>",
      "<java.nio.SocketChannelImpl: void checkOpenConnected()>",
      "<java.nio.SocketChannelImpl: void checkUnconnected()>",
      "<java.nio.charset.ModifiedUtf8: void encode(byte[],int,java.lang.String)>",
      "<java.security.Provider: void clear()>",
      "<java.security.Provider: void load(java.io.InputStream)>",
      "<java.security.Provider: void removeFromPropertyServiceTable(java.lang.Object)>",
      "<java.security.Provider: void updatePropertyServiceTable()>",
      "<java.text.RuleBasedBreakIterator: void validateOffset(int)>",
      "<java.util.zip.CRC32: void update(byte[],int,int)>",
      "<javax.net.ssl.HandshakeCompletedEvent: void <init>(javax.net.ssl.SSLSocket,javax.net.ssl.SSLSession)>",
      "<javax.net.ssl.HttpsURLConnection: void <init>(java.net.URL)>",
      "<javax.security.auth.callback.PasswordCallback: void clearPassword()>",
      "<javax.security.auth.callback.PasswordCallback: void setPrompt(java.lang.String)>",
      "<junit.textui.ResultPrinter: void print(junit.framework.TestResult,long)>",
      "<junit.textui.ResultPrinter: void printDefect(junit.framework.TestFailure,int)>",
      "<junit.textui.ResultPrinter: void printDefectHeader(junit.framework.TestFailure,int)>",
      "<junit.textui.ResultPrinter: void printDefectTrace(junit.framework.TestFailure)>",
      "<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>",
      "<junit.textui.ResultPrinter: void startTest(junit.framework.Test)>",
      "<libcore.icu.NativeDecimalFormat: void setMultiplier(int)>",
      "<libcore.io.BlockGuardOs: void <init>(libcore.io.Os)>",
      "<libcore.io.BlockGuardOs: void close(java.io.FileDescriptor)>",
      "<libcore.io.BlockGuardOs: void connect(java.io.FileDescriptor,java.net.InetAddress,int)>",
      "<libcore.io.BlockGuardOs: void fdatasync(java.io.FileDescriptor)>",
      "<libcore.io.BlockGuardOs: void fsync(java.io.FileDescriptor)>",
      "<libcore.io.BlockGuardOs: void ftruncate(java.io.FileDescriptor,long)>",
      "<libcore.io.BlockGuardOs: void untagSocket(java.io.FileDescriptor)>",
      "<libcore.io.ForwardingOs: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>",
      "<libcore.io.ForwardingOs: void chmod(java.lang.String,int)>",
      "<libcore.io.ForwardingOs: void close(java.io.FileDescriptor)>",
      "<libcore.io.ForwardingOs: void connect(java.io.FileDescriptor,java.net.InetAddress,int)>",
      "<libcore.io.ForwardingOs: void fdatasync(java.io.FileDescriptor)>",
      "<libcore.io.ForwardingOs: void fsync(java.io.FileDescriptor)>",
      "<libcore.io.ForwardingOs: void ftruncate(java.io.FileDescriptor,long)>",
      "<libcore.io.ForwardingOs: void kill(int,int)>",
      "<libcore.io.ForwardingOs: void listen(java.io.FileDescriptor,int)>",
      "<libcore.io.ForwardingOs: void mincore(long,long,byte[])>",
      "<libcore.io.ForwardingOs: void mkdir(java.lang.String,int)>",
      "<libcore.io.ForwardingOs: void mlock(long,long)>",
      "<libcore.io.ForwardingOs: void msync(long,long,int)>",
      "<libcore.io.ForwardingOs: void munlock(long,long)>",
      "<libcore.io.ForwardingOs: void munmap(long,long)>",
      "<libcore.io.ForwardingOs: void remove(java.lang.String)>",
      "<libcore.io.ForwardingOs: void rename(java.lang.String,java.lang.String)>",
      "<libcore.io.ForwardingOs: void setegid(int)>",
      "<libcore.io.ForwardingOs: void seteuid(int)>",
      "<libcore.io.ForwardingOs: void setgid(int)>",
      "<libcore.io.ForwardingOs: void setsockoptByte(java.io.FileDescriptor,int,int,int)>",
      "<libcore.io.ForwardingOs: void setsockoptGroupReq(java.io.FileDescriptor,int,int,libcore.io.StructGroupReq)>",
      "<libcore.io.ForwardingOs: void setsockoptIfreq(java.io.FileDescriptor,int,int,java.lang.String)>",
      "<libcore.io.ForwardingOs: void setsockoptInt(java.io.FileDescriptor,int,int,int)>",
      "<libcore.io.ForwardingOs: void setsockoptIpMreqn(java.io.FileDescriptor,int,int,int)>",
      "<libcore.io.ForwardingOs: void setsockoptLinger(java.io.FileDescriptor,int,int,libcore.io.StructLinger)>",
      "<libcore.io.ForwardingOs: void setsockoptTimeval(java.io.FileDescriptor,int,int,libcore.io.StructTimeval)>",
      "<libcore.io.ForwardingOs: void setuid(int)>",
      "<libcore.io.ForwardingOs: void shutdown(java.io.FileDescriptor,int)>",
      "<libcore.io.ForwardingOs: void symlink(java.lang.String,java.lang.String)>",
      "<libcore.io.IoUtils: void closeQuietly(java.net.Socket)>",
      "<libcore.io.IoUtils: void deleteContents(java.io.File)>",
      "<libcore.io.Streams: void readFully(java.io.InputStream,byte[])>",
      "<libcore.io.Streams: void readFully(java.io.InputStream,byte[],int,int)>",
      "<libcore.io.Streams: void writeSingleByte(java.io.OutputStream,int)>",
      "<libcore.net.MimeUtils: void add(java.lang.String,java.lang.String)>",
      "<libcore.net.http.ChunkedInputStream: void readChunkSize()>",
      "<libcore.net.http.HttpConnection$Address: void <init>(java.net.URI)>",
      "<libcore.net.http.HttpConnection$Address: void <init>(java.net.URI,java.net.Proxy,boolean)>",
      "<libcore.net.http.HttpResponseCache$Entry: void <init>(java.net.URI,libcore.net.http.RawHeaders,java.net.HttpURLConnection)>",
      "<libcore.net.http.HttpURLConnectionImpl: void <init>(java.net.URL,int)>",
      "<libcore.net.http.HttpURLConnectionImpl: void <init>(java.net.URL,int,java.net.Proxy)>",
      "<libcore.net.http.HttpsURLConnectionImpl$HttpsEngine: void connect()>",
      "<libcore.net.http.HttpsURLConnectionImpl: void <init>(java.net.URL,int)>",
      "<libcore.net.http.HttpsURLConnectionImpl: void <init>(java.net.URL,int,java.net.Proxy)>",
      "<libcore.net.http.RequestHeaders: void <init>(java.net.URI,libcore.net.http.RawHeaders)>",
      "<libcore.net.http.ResponseHeaders: void <init>(java.net.URI,libcore.net.http.RawHeaders)>",
      "<libcore.net.url.FileHandler: void parseURL(java.net.URL,java.lang.String,int,int)>",
      "<libcore.net.url.FileURLConnection: void <init>(java.net.URL)>",
      "<libcore.net.url.FtpURLConnection: void <init>(java.net.URL)>",
      "<libcore.net.url.FtpURLConnection: void <init>(java.net.URL,java.net.Proxy)>",
      "<libcore.net.url.FtpURLConnection: void cd()>",
      "<libcore.net.url.FtpURLConnection: void connect()>",
      "<libcore.net.url.FtpURLConnection: void connectInternal()>",
      "<libcore.net.url.FtpURLConnection: void setType()>",
      "<libcore.net.url.FtpURLInputStream: void <init>(java.io.InputStream,java.net.Socket)>",
      "<libcore.net.url.JarHandler: void parseURL(java.net.URL,java.lang.String,int,int)>",
      "<libcore.net.url.JarURLConnectionImpl: void <init>(java.net.URL)>",
      "<org.apache.harmony.dalvik.ddmc.ChunkHandler: void putString(java.nio.ByteBuffer,java.lang.String)>",
      "<org.apache.harmony.security.fortress.Services: void initServiceInfo(java.security.Provider)>",
      "<org.apache.harmony.security.fortress.Services: void loadProviders()>",
      "<org.apache.harmony.security.fortress.Services: void refresh()>",
      "<org.apache.harmony.security.fortress.Services: void removeProvider(int)>",
      "<org.apache.harmony.security.fortress.Services: void updateServiceInfo()>",
      "<org.apache.harmony.security.utils.AlgNameMapper: void selectEntries(java.security.Provider)>",
      "<org.apache.harmony.xml.parsers.DocumentBuilderImpl: void appendText(org.apache.harmony.xml.dom.DocumentImpl,org.w3c.dom.Node,int,java.lang.String)>",
      "<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: void finalize()>",
      "<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: void log(java.lang.Throwable)>",
      "<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: void putSession(javax.net.ssl.SSLSession)>",
      "<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: void setSessionTimeout(int)>",
      "<org.apache.harmony.xnet.provider.jsse.DefaultSSLContextImpl: void engineInit(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>",
      "<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache: void reset()>",
      "<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void add(java.lang.String,java.lang.String)>",
      "<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void setEnabledCipherSuites(int,java.lang.String[])>",
      "<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void setEnabledCompressionMethods(int,java.lang.String[])>",
      "<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void setEnabledProtocols(int,java.lang.String[])>",
      "<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: void finalize()>",
      "<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: void engineInitVerify(java.security.PublicKey)>",
      "<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void <init>(java.net.Socket,java.lang.String,int,boolean,org.apache.harmony.xnet.provider.jsse.SSLParametersImpl)>",
      "<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void <init>(java.net.Socket,java.lang.String,int,boolean,org.apache.harmony.xnet.provider.jsse.SSLParametersImpl)>",
      "<org.apache.harmony.xnet.provider.jsse.SSLEngineAppData: void <init>()>",
      "<org.apache.harmony.xnet.provider.jsse.SSLEngineAppData: void append(byte[])>",
      "<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: void removeValue(java.lang.String)>",
      "<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void doHandshake()>",
      "<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void processAlert()>",
      "<org.apache.harmony.xnet.provider.jsse.SSLSocketInputStream: void <init>(org.apache.harmony.xnet.provider.jsse.SSLSocketImpl)>",
      "<org.apache.harmony.xnet.provider.jsse.SSLSocketOutputStream: void <init>(org.apache.harmony.xnet.provider.jsse.SSLSocketImpl)>",
      "<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void <init>(java.net.Socket,boolean,org.apache.harmony.xnet.provider.jsse.SSLParametersImpl)>",
      "<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: void <init>()>",
      "<org.apache.http.client.methods.HttpRequestBase: void <init>()>",
      "<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>",
      "<org.apache.http.impl.HttpConnectionMetricsImpl: void reset()>",
      "<org.apache.http.impl.conn.DefaultClientConnection: void opening(java.net.Socket,org.apache.http.HttpHost)>",
      "<org.apache.http.impl.conn.DefaultClientConnection: void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams)>",
      "<org.apache.http.impl.conn.DefaultClientConnectionOperator: void prepareSocket(java.net.Socket,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>",
      "<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: void detach()>",
      "<org.apache.http.message.AbstractHttpMessage: void <init>()>",
      "<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>",
      "<org.bouncycastle.asn1.ASN1OutputStream: void writeObject(java.lang.Object)>",
      "<org.bouncycastle.asn1.BEROutputStream: void writeObject(java.lang.Object)>",
      "<org.bouncycastle.asn1.DERApplicationSpecific: void encode(org.bouncycastle.asn1.DEROutputStream)>",
      "<org.bouncycastle.asn1.DERBitString: void encode(org.bouncycastle.asn1.DEROutputStream)>",
      "<org.bouncycastle.asn1.DERObjectIdentifier: void encode(org.bouncycastle.asn1.DEROutputStream)>",
      "<org.bouncycastle.asn1.DEROutputStream: void writeObject(java.lang.Object)>",
      "<org.bouncycastle.asn1.DERUnknownTag: void encode(org.bouncycastle.asn1.DEROutputStream)>",
      "<org.bouncycastle.asn1.LazyDERSequence: void parse()>",
      "<org.bouncycastle.crypto.signers.ECDSASigner: void init(boolean,org.bouncycastle.crypto.CipherParameters)>",
      "<org.bouncycastle.jce.provider.JCEECPublicKey: void <init>(java.lang.String,java.security.spec.ECPublicKeySpec)>",
      "<org.bouncycastle.math.ec.ECPoint: void assertECMultiplier()>",
      "<org.bouncycastle.math.ec.IntArray: void shiftLeft()>",
      "<org.bouncycastle.openssl.PEMWriter: void writeObject(java.lang.Object)>",
      "<org.bouncycastle.openssl.PEMWriter: void writeObject(java.lang.Object,java.lang.String,char[],java.security.SecureRandom)>",
      "<org.bouncycastle.openssl.PEMWriter: void writeObject(org.bouncycastle.util.io.pem.PemObjectGenerator)>",
      "<org.kxml2.io.KXmlParser: void checkRelaxed(java.lang.String)>",
      "<org.kxml2.io.KXmlParser: void close()>",
      "<org.kxml2.io.KXmlParser: void defineAttributeDefault(java.lang.String,java.lang.String,java.lang.String)>",
      "<org.kxml2.io.KXmlParser: void defineEntityReplacementText(java.lang.String,java.lang.String)>",
      "<org.kxml2.io.KXmlParser: void parseStartTag(boolean,boolean)>",
      "<org.kxml2.io.KXmlParser: void read(char)>",
      "<org.kxml2.io.KXmlParser: void readInternalSubset()>",
      "<org.kxml2.io.KXmlParser: void readNotationDeclaration()>",
      "<org.kxml2.io.KXmlParser: void setFeature(java.lang.String,boolean)>",
      "<org.kxml2.io.KXmlParser: void setProperty(java.lang.String,java.lang.Object)>",
      "<org.kxml2.io.KXmlParser: void skip()>"
  };


  static {
    // Currently, methods that act as sources and sinks of sensitive information
	// and methods that can potentially load arbitrary code are hilighted identically
    methodsToHighlight = new HashSet<String>(4000);
    methodsToHighlight.addAll(Arrays.asList(METHODS_TO_HIGHLIGHT_BAN));
    methodsToHighlight.addAll(Arrays.asList(METHODS_TO_HIGHLIGHT_SPEC));
  }
}
