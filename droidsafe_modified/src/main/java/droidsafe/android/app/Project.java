/*
 * Copyright (C) 2015,  Massachusetts Institute of Technology
 * 
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * 
 * Please email droidsafe@lists.csail.mit.edu if you need additional
 * information or have any questions.
 */

package droidsafe.android.app;


import droidsafe.main.Config;
import droidsafe.main.Main;
import droidsafe.main.SootConfig;

import droidsafe.utils.Utils;

import java.io.File;
import java.io.IOException;

import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;

import java.util.*;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

import org.apache.commons.io.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import soot.SootClass;
import soot.SourceLocator;

/** 
 * Represent an Android project including the source files, resource files,
 * android manifest, etc.
 * 
 * @author mgordon
 *
 */
public class Project {
    /** Logger field */
    private static final Logger logger = LoggerFactory.getLogger(Project.class);
    /** prefix (package) for classes generated by DroidSafe during analysis */
    public static final String DS_GENERATED_CLASSES_PREFIX = "droidsafe.generated.";
    /** relative directory (from app home) of application source */
    public static final String SRC_DIR = "src";
    /** relative directory (from app home) of compiled classes */
    public static final String CLASSES_DIR = "bin" + File.separator + "classes";
    /** relative directory (from app home) of included jar libraries */
    public static final String LIBS_DIR = "libs";
    /** relative directory (from app home) of resources xml files */
    public static final String RES_DIR = "res";
    /** relative directory (from app home) of generated java files */
    public static final String GEN_DIR = "gen";
    /** relative directory (from app home) of  layout xml files */
    public static final String LAYOUTS_DIR = RES_DIR + File.separator + "layout";
    /** relative directory (from app home) of manifest */
    public static final String MANIFEST_FILE = "AndroidManifest.xml";
    /** relative directory (from app home) of droidsafe output */
    public static final String OUTPUT_DIR = "droidsafe-gen";
    public static final String FALG_FILE = "flag.json";
    /** singleton for this class */
    private static final Project project;
    /** File object for application source directory */
    private File appSrcDir;
    /** File object for generated classes directory */
    private File appClassesDir;
    /** File object for included libraries directory */
    private File appLibDir;
    /** File object for generated droidsafe output directory */
    private File outputDir;
    /** File object for android generated java files (from xml resources) */
    private File appGenDir;
    /** Set of all src class names (fully qualified) */
    private Set<String> srcClasses;
    /** Set of all lib class names (fully qualified) */
    private Set<String> libClasses = new LinkedHashSet<String>();

    /** Set of all gen class names (fully qualified) */
    private Set<String> genClasses;
    /** Class loader for loading modeled classes */
    private ClassLoader javaAppClassLoader;
    
    /** 
     * Any jar files in this list that are found in lib/ will not be loaded by droidsafe,
     * thus any classes are not analyzed, it is used because we now consider
     * these packages as part of the API.
     */
    private static final Set<String> IGNORE_LIB_JARS = new HashSet<String>() 
        {{
            add("android-support-v4.jar");
            add("android-support-v7.jar");
            add("android-support-v7-appcompat.jar ");
            add("google-play-services.jar");
        }};

    static {
        project = new Project();
    }

    /**
     * Return the singleton project object the current run of DroidSafe.
     */
    public static Project v() {
        return project;
    }

    /**
     * Initialize the Project object by creating File objects and directories
     */
    public void init() {
        this.appSrcDir = new File(Config.v().APP_ROOT_DIR + File.separator + SRC_DIR);

        this.appClassesDir = (Config.v().apk != null) ?
                new File(Config.v().apk) :
                    new File(Config.v().APP_ROOT_DIR + File.separator + CLASSES_DIR);
        logger.info("Setting application class directory to {}.", appClassesDir.toString());
        if (!this.appClassesDir.exists()) {
            logger.error("Project not configured properly. Directory does not exist: " + this.appClassesDir);
            droidsafe.main.Main.exit(1);
        }

        this.appLibDir = new File(Config.v().APP_ROOT_DIR + File.separator + LIBS_DIR);

        this.appGenDir = new File(Config.v().APP_ROOT_DIR + File.separator + GEN_DIR);

        this.outputDir = new File(getOutputDir());
        if (!outputDir.exists()) {
            try {
                outputDir.mkdirs();
            } catch (Exception e) {
                logger.error("Cannot create output directory", e);
                droidsafe.main.Main.exit(1);
            }
        }

        setSrcClasses();
        setLibClasses();
        setGenClasses();

        createJavaClassLoader();
    }

    /** 
     * Returns the java.lang.class for an application class, represented by string s.
     */
    public Class<?> getAppJavaClass(String s) throws ClassNotFoundException {
        return javaAppClassLoader.loadClass(s);
    }

    /**
     * Initialize the java class loader used to load application classes
     */
    private void createJavaClassLoader() {
        List<URL> urls = new ArrayList<URL>();
        try {
            File classesDir = new File(Config.v().APP_ROOT_DIR, CLASSES_DIR);
            urls.add(classesDir.toURI().toURL());
            File androidJar = new File(Config.v().ANDROID_LIB_DIR, Config.v().ANDROID_JAR);
            urls.add(androidJar.toURI().toURL());
            for(File f : getAppLibJars()) {
                urls.add(f.toURI().toURL());
            }
        } catch(MalformedURLException e) {
            logger.error("Encountered a malformed url when creating java class laoder for application: {}", e);
            droidsafe.main.Main.exit(1);
        }
        javaAppClassLoader = new URLClassLoader(urls.toArray(new URL[0]));
    }

    /** 
     * Load the app's src and lib classes into soot scene. 
     */
    public void loadClasses() {
        //load into soot the src classes and lib jars classes
        SootConfig.loadAppClasses(getSrcClasses());
        Set<String> modeledLibraryClzs = SootConfig.loadAppClasses(getLibClasses());
        
    }

    /**
     * Add all classes from in bin/classes to the appClasses
     */
    private void setSrcClasses() {
        srcClasses = new LinkedHashSet<String>();
        String procDir = appClassesDir.getAbsolutePath();
        for (String clzName: SourceLocator.v().getClassesUnder(procDir)) {
//            logger.info("Found application class (not loaded until later): {}", clzName);
            srcClasses.add(clzName);
        }
    }

    /**
     * Scan the gen directory for generated classes of the android build.
     */
    private void setGenClasses() {
        genClasses = new LinkedHashSet<String>();
        // if analyzing apk, genClasses is updated when manifest is resolved.
        if (Config.v().apk == null) {
            for (File clazz : FileUtils.listFiles(this.appGenDir, new String[]{"java"}, true)) {

            
                String closeName = clazz.toString().substring(this.appGenDir.toString().length() + 1);
                String clzName = closeName.substring(0, closeName.length() - 5).replace(File.separatorChar, '.');
                logger.info("Generated class: {}", clzName);
                genClasses.add(clzName);
            }
        }
    }

    /**
     * Compute names of the generated class from the package name stored in the manifest if analyzing APK.
     * Also remove the generated class from source classes.
     */
    public void maybeComputeGenClasses(String pkgName) {
        if (Config.v().apk != null) {
            if (pkgName != null) {
                String[] clzNames = {"BuildConfig", "R"};
                for (String clzName: clzNames) {
                    clzName = pkgName + "." + clzName;
                    srcClasses.remove(clzName);
                    genClasses.add(clzName);
                }
            }
        }
    }
    
    /**
     * Add all classes from any jar files into the set for library classes.
     */
    private void setLibClasses() {
        for (File f : getAppLibJars()) {
            JarFile jarFile = null;
            try {
                jarFile = new JarFile(f);
            } catch (IOException e1) {
                logger.error("Error opening jar file", e1);
                droidsafe.main.Main.exit(1);
            }

            for (Enumeration<JarEntry> e = jarFile.entries() ; e.hasMoreElements() ;) {
                JarEntry entry = e.nextElement();
                if (!entry.getName().endsWith(".class"))
                    continue;

                libClasses.add(Utils.fromFileToClass(entry.getName()));
            }
        }
    }

    /**
     * Return the application's library directory. 
     */
    public File getAppLibDir() {
        return appLibDir;
    }

    /**
     * Returns a collection of files, one for each of the jar files in the app's lib folder
     */
    public Collection<File> getAppLibJars() {
        Collection<File> appLibJars = new ArrayList<File>();
        if (this.appLibDir.exists())
            appLibJars = FileUtils.listFiles(this.appLibDir, new String[]{"jar"}, true);
        
        //filter out jar files that are modeled as api classes
        for (Iterator<File> it = appLibJars.iterator(); it.hasNext(); ) {
            File file = it.next();
            if (IGNORE_LIB_JARS.contains(FilenameUtils.getName(file.toString()))) {
               it.remove();
               logger.info("Removing user lib {} because modeled as api.", FilenameUtils.getName(file.toString()));
            }
        }
        
        return appLibJars;
    }

    /**
     * Return the application's source directory. 
     */
    public File getAppSrcDir() {
        return appSrcDir;
    }
    
    /**
     * Return the application's compiled classes directory. 
     */
    public File getAppClassesDir() {
        return appClassesDir;
    }

    /**
     * Return the droidsafe output directory for this run. 
     */
    public String getOutputDir() {
        return Config.v().APP_ROOT_DIR + File.separator + OUTPUT_DIR;
    }

    /**
     * Return set of all classes defined in the all jar files 
     * in the libs directory of the application.
     */
    public Set<String> getLibClasses() {
        return libClasses;
    }

    /**
     * Return true if arg class name is a class from a jar file located
     * in the libs directory of the application. 
     */
    public boolean isLibClass(String clz) {
        if (Config.v().apk != null) {
            for (String libPkgPrefix: Config.v().libraryPackagePrefixes) {
                if (clz.startsWith(libPkgPrefix))
                    return true;
            }
        }
        return libClasses.contains(clz);
    }

    /**
     * Return true if arg class name is a class from a jar file located
     * in the libs directory of the application. 
     */
    public boolean isLibClass(SootClass clz) {
        return isLibClass(clz.getName());
    }

    /**
     * Return true if the class was loaded from the application src/ directory.
     * 
     * @param clz
     * @return
     */
    public boolean isSrcClass(String clz) {
        if (Config.v().apk != null) {
            if (isLibClass(clz))
                return false;
        }
        return srcClasses.contains(clz);
    }
    
    

    /**
     * Add a generated class to the list of src classes.
     */
    public void addSrcClass(SootClass clz) {
        srcClasses.add(clz.getName());
    }
    
    /**
     * Remove a class from the list of src classes.
     */
    public void removeSrcClass(SootClass clz) {
        srcClasses.remove(clz.getName());
    }
    
    /**
     * Remove a class from the list of lib classes.
     */
    public void removeLibClass(SootClass clz) {
        libClasses.remove(clz.getName());
    }
    
    /**
     * Remove a class from the list of gen classes.
     */
    public void removeGenClass(SootClass clz) {
        genClasses.remove(clz.getName());
    }
    
    /**
     * Add a generated class to the list of gen classes.
     */
    public void addGenClass(SootClass clz) {
        genClasses.add(clz.getName());
    }
    

    /**
     * Add a generated class to the list of src classes.
     */
    public void addLibClass(SootClass clz) {
        libClasses.add(clz.getName());
    }

    /**
     * Return true if the class was loaded from the application src/ directory.
     * 
     * @param clz
     * @return
     */
    public boolean isSrcClass(SootClass clz) {
        return isSrcClass(clz.getName());
    }

    /**
     * Return set of all classes defined in bin/classes of app.
     */
    public Set<String> getSrcClasses() {
        return srcClasses;
    }

    /**
     * Return true if this class is defined in gen/ directory of android application. 
     */
    public boolean isGenClass(String clz) {
        return genClasses.contains(clz);
    }
    
    /**
     * Return true if this class is defined in gen/ directory of android application. 
     */
    public boolean isGenClass(SootClass clz) {
        return genClasses.contains(clz.getName());
    }
    
    /**
     * Return the set of generated classe names.
     */
    public Set<String> getGenClasses() {
        return genClasses;
    }

    /**
     * Return true if this class is a class that is generated during the droidsafe run (for 
     * example the harness).
     */
    public boolean isDroidSafeGeneratedClass(SootClass clz) {
        return clz.getName().startsWith(Project.DS_GENERATED_CLASSES_PREFIX);
    }

    public String getFlagPath() {
        return Config.v().APP_ROOT_DIR + File.separator + FALG_FILE;
    }


    public Map<String, Set<String>> getSSNativeMap(){
        List<String> order = new ArrayList(Arrays.asList("armeabi", "armeabi-v7a", "x86", "mips", "arm64-v8a", "x86_64", "mips64"));

        String appLib = Config.v().APP_ROOT_DIR + File.separator + "apktool-gen" + File.separator + "lib";
        File libFile = new File(appLib);

        if(! libFile.exists()) return null;

        for (File arch : libFile.listFiles()){
            if(order.contains(arch.getName())){
                File ssInNative = new File(arch + File.separator + "SSInNative.txt");
                if(ssInNative.exists()){
                    //read file
//                    System.out.println("ssInNative:" + ssInNative.getAbsolutePath());
                    Map<String, Set<String>> ssMap = stub.generation.utils.FileUtils.parseSSInNative(ssInNative.getPath());
                    return ssMap;//找到一个SSInNative.txt即可
                }
            }
        }
        return null;
    }
}
