package droidsafe.test.regression;

import droidsafe.android.app.resources.XmlFile;
import droidsafe.android.app.resources.BaseElement;
import droidsafe.test.Config;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.PrintWriter;

import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.w3c.dom.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class RegressionTestUtils {

	private static final Logger logger = LoggerFactory.getLogger(RegressionTestUtils.class);

  public static final String REGRESSION_VALUE_CONTAINER_FILE = "Makefile";
  public static final String DO_NOT_MODIFY = "\n# EVERYTHING BELOW IS AUTOGENERATED. DO NOT MODIFY.";
  public static final String SPECDUMP_REGRESSION_VALUE_PREFIX = "# SPECDUMP SHOULD WORK: ";

  public static void showRegressionStats() {
    File engagementTestFolder = new File(System.getenv("DROIDSAFE_SRC_HOME") + "/test/java/engagement/");
    File[] engagementTestFiles = engagementTestFolder.listFiles();
  }

  /**
   * Updates any regression values with those produced by the code in the current branch.
   * Currently only updates values for engagement app regression tests.
   */
  public static void updateSpecdumpRegressionValues() {
    for(Map.Entry<String, Boolean> entry : getCurrSpecdumpTestResults().entrySet()){
      
      Boolean testPassed = entry.getValue();

      final String SPECDUMP_REGRESSION_VALUE  = SPECDUMP_REGRESSION_VALUE_PREFIX + testPassed;
      String androidManifestFilePath = entry.getKey() + "/" + REGRESSION_VALUE_CONTAINER_FILE;

      try {

        File inFile = new File(androidManifestFilePath);

        if (!inFile.exists()) {
          logger.error("Regression value container file {} does not exist", inFile);
          return;
        }

        if (!inFile.isFile()) {
          logger.error("Regression value container {} is not a file", inFile);
          return;
        }

        File tempFile = new File(inFile.getAbsolutePath() + ".tmp");

        BufferedReader br = new BufferedReader(new FileReader(androidManifestFilePath));
        PrintWriter pw = new PrintWriter(new FileWriter(tempFile));

        String line = null;
        
        boolean replaced = false;
        while ((line = br.readLine()) != null) {
          if (line.trim().indexOf(SPECDUMP_REGRESSION_VALUE_PREFIX) == -1) {
            pw.println(line);
          } else {
            replaced = true;
            pw.println(SPECDUMP_REGRESSION_VALUE);
          }
          pw.flush();
        }
        if (!replaced) {
          pw.println(DO_NOT_MODIFY);
          pw.println(SPECDUMP_REGRESSION_VALUE);
        }
        pw.close();
        br.close();

        if (!inFile.delete()) {
          System.out.println("Could not delete file");
          return;
        }


        if (!tempFile.renameTo(inFile))
          System.out.println("Could not rename file");

      }
      catch (FileNotFoundException ex) {
        ex.printStackTrace();
      }
      catch (IOException ex) {
        ex.printStackTrace();
      } 
    }
  }
 
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Helper Methods
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  public static Map<String, Boolean> getCurrSpecdumpTestResults() {
    String specProducedTestCaseReportFilePath = StringUtils.join(new String[] {System.getenv("DROIDSAFE_SRC_HOME"), Config.TEST_RESULTS_DIR, Config.TEST_PREFIX + Config.SPECDUMP_TEST_NAME + ".xml"}, "/");
    XmlFile xmlFile = new XmlFile(specProducedTestCaseReportFilePath);
    Map<String, Boolean> currSpecdumpTestResults = new HashMap<String, Boolean>();
    Element documentElement = xmlFile.getDocumentElement();
    if (documentElement != null) { 
      BaseElement baseElement = new BaseElement(documentElement, null);
      List<Node> children = baseElement.gather_children();
      for(int i = 0; i < children.size(); ++i){
        Element element = (Element)children.get(i);
        String tagName = element.getTagName();
       
        if (tagName.equals("testcase")){
          String name = element.getAttribute("name");
          String appPath = name.substring(name.indexOf("[")+1, name.indexOf("]"));
          currSpecdumpTestResults.put(appPath, testCasePassed(element));
        }
      }
    }
    return currSpecdumpTestResults;
  }

  public static boolean testCasePassed(Element element) {
    NodeList children = element.getChildNodes();
    for(int i = 0; i < children.getLength(); ++i) {
      Object child = children.item(i);
      if(child instanceof Element) {
        Element childElement = (Element)child;
        String tagName = childElement.getTagName();
        if(tagName.equals("failure")){
          return false;
        }
      }
    }
    return true;
  }
 
  public static Boolean getSpecdumpTestRegressionValue(String regressionValueContainerFilePath) throws Exception{
    BufferedReader br = getTestBufferedReader(regressionValueContainerFilePath);
    String strLine;
    while((strLine = br.readLine()) != null) {
      int startIndex = strLine.indexOf(SPECDUMP_REGRESSION_VALUE_PREFIX);
      if (startIndex != -1) {
        startIndex += SPECDUMP_REGRESSION_VALUE_PREFIX.length();
        String substring = strLine.substring(startIndex);
        return Boolean.parseBoolean(substring);
      }
    }
    return null;
  }
  
  public static BufferedReader getTestBufferedReader(String testFilePath) throws FileNotFoundException {
    FileInputStream fstream = new FileInputStream(testFilePath);
    DataInputStream in = new DataInputStream(fstream);
    return new BufferedReader(new InputStreamReader(in));
  }
}


